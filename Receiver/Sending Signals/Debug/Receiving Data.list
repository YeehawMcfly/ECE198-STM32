
Receiving Data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08006650  08006650  00007650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a20  08006a20  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006a20  08006a20  00007a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a28  08006a28  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a28  08006a28  00007a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a2c  08006a2c  00007a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006a30  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  200001d4  08006c04  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08006c04  000083d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d2e  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001913  00000000  00000000  00010f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00012848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d6  00000000  00000000  00012ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001631c  00000000  00000000  000135ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009974  00000000  00000000  000298ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d52  00000000  00000000  0003325e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9fb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa8  00000000  00000000  000b9ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000bcf9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006634 	.word	0x08006634

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08006634 	.word	0x08006634

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <bin_to_hex>:
 *
 * @param bin Pointer to the binary data.
 * @param len Length of the binary data.
 * @param hex_out Pointer to the output buffer (must be at least len*2 + 1 bytes).
 */
void bin_to_hex(uint8_t* bin, size_t len, char* hex_out) {
 8000ea8:	b4b0      	push	{r4, r5, r7}
 8000eaa:	b08b      	sub	sp, #44	@ 0x2c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
    const char hex_chars[] = "0123456789ABCDEF";
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <bin_to_hex+0x88>)
 8000eb6:	f107 0410 	add.w	r4, r7, #16
 8000eba:	461d      	mov	r5, r3
 8000ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < len; i++) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ec8:	e023      	b.n	8000f12 <bin_to_hex+0x6a>
        hex_out[i * 2] = hex_chars[(bin[i] >> 4) & 0x0F];
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	091b      	lsrs	r3, r3, #4
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	f003 020f 	and.w	r2, r3, #15
 8000eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	440b      	add	r3, r1
 8000ee2:	3228      	adds	r2, #40	@ 0x28
 8000ee4:	443a      	add	r2, r7
 8000ee6:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000eea:	701a      	strb	r2, [r3, #0]
        hex_out[i * 2 + 1] = hex_chars[bin[i] & 0x0F];
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	f003 020f 	and.w	r2, r3, #15
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	3301      	adds	r3, #1
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	440b      	add	r3, r1
 8000f02:	3228      	adds	r2, #40	@ 0x28
 8000f04:	443a      	add	r2, r7
 8000f06:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000f0a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < len; i++) {
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0e:	3301      	adds	r3, #1
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d3d7      	bcc.n	8000eca <bin_to_hex+0x22>
    }
    hex_out[len * 2] = '\0'; // Null-terminate the string
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	372c      	adds	r7, #44	@ 0x2c
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bcb0      	pop	{r4, r5, r7}
 8000f2e:	4770      	bx	lr
 8000f30:	08006650 	.word	0x08006650

08000f34 <decrypt>:

// Decryption Function
void decrypt(uint32_t v[2], const uint32_t k[4]) {
 8000f34:	b480      	push	{r7}
 8000f36:	b08d      	sub	sp, #52	@ 0x34
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
    uint32_t v0 = v[0], v1 = v[1], sum = 0xC6EF3720, i;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f4a:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <decrypt+0xb0>)
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t delta = 0x9E3779B9;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <decrypt+0xb4>)
 8000f50:	61fb      	str	r3, [r7, #28]
    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	3308      	adds	r3, #8
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	330c      	adds	r3, #12
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 32; i++) {
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
 8000f74:	e026      	b.n	8000fc4 <decrypt+0x90>
        v1 -= ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3);
 8000f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f78:	011a      	lsls	r2, r3, #4
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	441a      	add	r2, r3
 8000f7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f82:	440b      	add	r3, r1
 8000f84:	405a      	eors	r2, r3
 8000f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f88:	0959      	lsrs	r1, r3, #5
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	440b      	add	r3, r1
 8000f8e:	4053      	eors	r3, r2
 8000f90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
        v0 -= ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1);
 8000f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f98:	011a      	lsls	r2, r3, #4
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	441a      	add	r2, r3
 8000f9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa2:	440b      	add	r3, r1
 8000fa4:	405a      	eors	r2, r3
 8000fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fa8:	0959      	lsrs	r1, r3, #5
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	440b      	add	r3, r1
 8000fae:	4053      	eors	r3, r2
 8000fb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sum -= delta;
 8000fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 0; i < 32; i++) {
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	623b      	str	r3, [r7, #32]
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
 8000fc6:	2b1f      	cmp	r3, #31
 8000fc8:	d9d5      	bls.n	8000f76 <decrypt+0x42>
    }
    v[0] = v0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fce:	601a      	str	r2, [r3, #0]
    v[1] = v1;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	3734      	adds	r7, #52	@ 0x34
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	c6ef3720 	.word	0xc6ef3720
 8000fe8:	9e3779b9 	.word	0x9e3779b9

08000fec <decryptMessage>:

// Decrypt Message Function
void decryptMessage(uint8_t* input, size_t len) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    // Ensure len is a multiple of 8
    if (len % 8 != 0) {
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <decryptMessage+0x1c>
        // Handle padding if necessary
        // For simplicity, ignore extra bytes
        len -= len % 8;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f023 0307 	bic.w	r3, r3, #7
 8001006:	603b      	str	r3, [r7, #0]
    }

    // Copy input to buffer as uint32_t
    memcpy(data_buffer, input, len);
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	480f      	ldr	r0, [pc, #60]	@ (800104c <decryptMessage+0x60>)
 800100e:	f003 fac8 	bl	80045a2 <memcpy>

    // Decrypt in blocks of 8 bytes (2 uint32_t)
    for (int i = 0; i < (len / 4); i += 2) {
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	e00a      	b.n	800102e <decryptMessage+0x42>
        decrypt(&data_buffer[i], key);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <decryptMessage+0x60>)
 800101e:	4413      	add	r3, r2
 8001020:	490b      	ldr	r1, [pc, #44]	@ (8001050 <decryptMessage+0x64>)
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff86 	bl	8000f34 <decrypt>
    for (int i = 0; i < (len / 4); i += 2) {
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3302      	adds	r3, #2
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	089a      	lsrs	r2, r3, #2
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8ef      	bhi.n	8001018 <decryptMessage+0x2c>
    }

    // Copy back to input buffer
    memcpy(input, data_buffer, len);
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	4904      	ldr	r1, [pc, #16]	@ (800104c <decryptMessage+0x60>)
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f003 fab0 	bl	80045a2 <memcpy>
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000278 	.word	0x20000278
 8001050:	08006688 	.word	0x08006688

08001054 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1 && Size > 0) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a28      	ldr	r2, [pc, #160]	@ (8001104 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d149      	bne.n	80010fc <HAL_UARTEx_RxEventCallback+0xa8>
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d046      	beq.n	80010fc <HAL_UARTEx_RxEventCallback+0xa8>
        // Step 1: Convert Encrypted RxData to Hexadecimal String
        char encrypted_hex[17]; // 8 bytes * 2 chars + 1 null terminator
        bin_to_hex(RxData, 8, encrypted_hex); // Assuming TxData is 8 bytes
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	461a      	mov	r2, r3
 8001074:	2108      	movs	r1, #8
 8001076:	4824      	ldr	r0, [pc, #144]	@ (8001108 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001078:	f7ff ff16 	bl	8000ea8 <bin_to_hex>

        // Step 2: Format and Transmit Encrypted Data
        sprintf(msg, "Encrypted Data: %s\r\n", encrypted_hex);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	461a      	mov	r2, r3
 8001082:	4922      	ldr	r1, [pc, #136]	@ (800110c <HAL_UARTEx_RxEventCallback+0xb8>)
 8001084:	4822      	ldr	r0, [pc, #136]	@ (8001110 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001086:	f003 f9a9 	bl	80043dc <siprintf>

        // Switch to transmit mode to send the encrypted data
        HAL_HalfDuplex_EnableTransmitter(&huart1);
 800108a:	481e      	ldr	r0, [pc, #120]	@ (8001104 <HAL_UARTEx_RxEventCallback+0xb0>)
 800108c:	f001 ff80 	bl	8002f90 <HAL_HalfDuplex_EnableTransmitter>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001090:	481f      	ldr	r0, [pc, #124]	@ (8001110 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001092:	f7ff f8f5 	bl	8000280 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	b29a      	uxth	r2, r3
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	491c      	ldr	r1, [pc, #112]	@ (8001110 <HAL_UARTEx_RxEventCallback+0xbc>)
 80010a0:	4818      	ldr	r0, [pc, #96]	@ (8001104 <HAL_UARTEx_RxEventCallback+0xb0>)
 80010a2:	f001 fbdd 	bl	8002860 <HAL_UART_Transmit>
        HAL_HalfDuplex_EnableReceiver(&huart1);
 80010a6:	4817      	ldr	r0, [pc, #92]	@ (8001104 <HAL_UARTEx_RxEventCallback+0xb0>)
 80010a8:	f001 ffa6 	bl	8002ff8 <HAL_HalfDuplex_EnableReceiver>

        // Step 3: Decrypt the received data
        decryptMessage(RxData, sizeof(RxData));
 80010ac:	2108      	movs	r1, #8
 80010ae:	4816      	ldr	r0, [pc, #88]	@ (8001108 <HAL_UARTEx_RxEventCallback+0xb4>)
 80010b0:	f7ff ff9c 	bl	8000fec <decryptMessage>

        // Extract yPos from decrypted data
        yPos = RxData[0];
 80010b4:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <HAL_UARTEx_RxEventCallback+0xb4>)
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <HAL_UARTEx_RxEventCallback+0xc0>)
 80010ba:	701a      	strb	r2, [r3, #0]
        dataReceived = 1;
 80010bc:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <HAL_UARTEx_RxEventCallback+0xc4>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]

        // Re-enable reception for the next incoming data
        HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, sizeof(RxData));
 80010c2:	2208      	movs	r2, #8
 80010c4:	4910      	ldr	r1, [pc, #64]	@ (8001108 <HAL_UARTEx_RxEventCallback+0xb4>)
 80010c6:	480f      	ldr	r0, [pc, #60]	@ (8001104 <HAL_UARTEx_RxEventCallback+0xb0>)
 80010c8:	f001 fc55 	bl	8002976 <HAL_UARTEx_ReceiveToIdle_IT>

        // Step 4: Format and transmit the decrypted yPos value
        sprintf(msg, "yPos: %u\r\n", yPos);
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_UARTEx_RxEventCallback+0xc0>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4912      	ldr	r1, [pc, #72]	@ (800111c <HAL_UARTEx_RxEventCallback+0xc8>)
 80010d4:	480e      	ldr	r0, [pc, #56]	@ (8001110 <HAL_UARTEx_RxEventCallback+0xbc>)
 80010d6:	f003 f981 	bl	80043dc <siprintf>

        // Switch to transmit mode for debug output
        HAL_HalfDuplex_EnableTransmitter(&huart1);
 80010da:	480a      	ldr	r0, [pc, #40]	@ (8001104 <HAL_UARTEx_RxEventCallback+0xb0>)
 80010dc:	f001 ff58 	bl	8002f90 <HAL_HalfDuplex_EnableTransmitter>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80010e0:	480b      	ldr	r0, [pc, #44]	@ (8001110 <HAL_UARTEx_RxEventCallback+0xbc>)
 80010e2:	f7ff f8cd 	bl	8000280 <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	4908      	ldr	r1, [pc, #32]	@ (8001110 <HAL_UARTEx_RxEventCallback+0xbc>)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <HAL_UARTEx_RxEventCallback+0xb0>)
 80010f2:	f001 fbb5 	bl	8002860 <HAL_UART_Transmit>
        HAL_HalfDuplex_EnableReceiver(&huart1);
 80010f6:	4803      	ldr	r0, [pc, #12]	@ (8001104 <HAL_UARTEx_RxEventCallback+0xb0>)
 80010f8:	f001 ff7e 	bl	8002ff8 <HAL_HalfDuplex_EnableReceiver>
    }
}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200001f0 	.word	0x200001f0
 8001108:	20000238 	.word	0x20000238
 800110c:	08006664 	.word	0x08006664
 8001110:	20000244 	.word	0x20000244
 8001114:	20000240 	.word	0x20000240
 8001118:	20000276 	.word	0x20000276
 800111c:	0800667c 	.word	0x0800667c

08001120 <main>:

int main(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    // Initialize the Hardware Abstraction Layer
    HAL_Init();
 8001124:	f000 faca 	bl	80016bc <HAL_Init>

    // Configure the system clock
    SystemClock_Config();
 8001128:	f000 f89c 	bl	8001264 <SystemClock_Config>

    // Initialize all configured peripherals
    MX_GPIO_Init();
 800112c:	f000 f846 	bl	80011bc <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8001130:	f000 f81a 	bl	8001168 <MX_USART1_UART_Init>

    // Initialize UART Reception in Half-Duplex Mode
    HAL_HalfDuplex_EnableReceiver(&huart1);
 8001134:	4809      	ldr	r0, [pc, #36]	@ (800115c <main+0x3c>)
 8001136:	f001 ff5f 	bl	8002ff8 <HAL_HalfDuplex_EnableReceiver>
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, sizeof(RxData));
 800113a:	2208      	movs	r2, #8
 800113c:	4908      	ldr	r1, [pc, #32]	@ (8001160 <main+0x40>)
 800113e:	4807      	ldr	r0, [pc, #28]	@ (800115c <main+0x3c>)
 8001140:	f001 fc19 	bl	8002976 <HAL_UARTEx_ReceiveToIdle_IT>

    while(1) {
        if (dataReceived) {
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <main+0x44>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0fa      	beq.n	8001144 <main+0x24>
            // Process received data if needed
            dataReceived = 0;
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <main+0x44>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]

            // Optional: Add a small delay to prevent overwhelming the UART
            HAL_Delay(10);
 8001154:	200a      	movs	r0, #10
 8001156:	f000 fb23 	bl	80017a0 <HAL_Delay>
        if (dataReceived) {
 800115a:	e7f3      	b.n	8001144 <main+0x24>
 800115c:	200001f0 	.word	0x200001f0
 8001160:	20000238 	.word	0x20000238
 8001164:	20000276 	.word	0x20000276

08001168 <MX_USART1_UART_Init>:

        // Optional: Implement low-power modes or other tasks
    }
}

static void MX_USART1_UART_Init(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_USART1_UART_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <MX_USART1_UART_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <MX_USART1_UART_Init+0x4c>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_USART1_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_USART1_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_USART1_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX; // Enable both TX and RX for Half-Duplex
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_USART1_UART_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_USART1_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_USART1_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]

    if (HAL_HalfDuplex_Init(&huart1) != HAL_OK) {
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_USART1_UART_Init+0x4c>)
 80011a0:	f001 fb06 	bl	80027b0 <HAL_HalfDuplex_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART1_UART_Init+0x46>
        Error_Handler();
 80011aa:	f000 f8c5 	bl	8001338 <Error_Handler>
    }
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200001f0 	.word	0x200001f0
 80011b8:	40011000 	.word	0x40011000

080011bc <MX_GPIO_Init>:

static void MX_GPIO_Init(void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

    // Enable GPIO Ports Clock
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_GPIO_Init+0xa0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a20      	ldr	r2, [pc, #128]	@ (800125c <MX_GPIO_Init+0xa0>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <MX_GPIO_Init+0xa0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_GPIO_Init+0xa0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a19      	ldr	r2, [pc, #100]	@ (800125c <MX_GPIO_Init+0xa0>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_GPIO_Init+0xa0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <MX_GPIO_Init+0xa0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a12      	ldr	r2, [pc, #72]	@ (800125c <MX_GPIO_Init+0xa0>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <MX_GPIO_Init+0xa0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

    // Configure PC13 as Input with External Interrupt
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001226:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800122a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800122c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001230:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001232:	2301      	movs	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	4619      	mov	r1, r3
 800123c:	4808      	ldr	r0, [pc, #32]	@ (8001260 <MX_GPIO_Init+0xa4>)
 800123e:	f000 fc77 	bl	8001b30 <HAL_GPIO_Init>

    // Set EXTI Line 15_10 Interrupt Priority and Enable it
    HAL_NVIC_SetPriority(EXTI15_10_IRQn,0,0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2028      	movs	r0, #40	@ 0x28
 8001248:	f000 fba9 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800124c:	2028      	movs	r0, #40	@ 0x28
 800124e:	f000 fbc2 	bl	80019d6 <HAL_NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40020800 	.word	0x40020800

08001264 <SystemClock_Config>:

void SystemClock_Config(void){
 8001264:	b580      	push	{r7, lr}
 8001266:	b094      	sub	sp, #80	@ 0x50
 8001268:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	2230      	movs	r2, #48	@ 0x30
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f003 f915 	bl	80044a2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <SystemClock_Config+0xcc>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	4a27      	ldr	r2, [pc, #156]	@ (8001330 <SystemClock_Config+0xcc>)
 8001292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001296:	6413      	str	r3, [r2, #64]	@ 0x40
 8001298:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <SystemClock_Config+0xcc>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <SystemClock_Config+0xd0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012b0:	4a20      	ldr	r2, [pc, #128]	@ (8001334 <SystemClock_Config+0xd0>)
 80012b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <SystemClock_Config+0xd0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]

    // Initialize RCC Oscillators
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c4:	2302      	movs	r3, #2
 80012c6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c8:	2301      	movs	r3, #1
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012cc:	2310      	movs	r3, #16
 80012ce:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d0:	2302      	movs	r3, #2
 80012d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 80012d8:	2308      	movs	r3, #8
 80012da:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 80012dc:	2354      	movs	r3, #84	@ 0x54
 80012de:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80012e4:	2304      	movs	r3, #4
 80012e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fdc7 	bl	8001e80 <HAL_RCC_OscConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x98>
        Error_Handler();
 80012f8:	f000 f81e 	bl	8001338 <Error_Handler>
    }

    // Initialize CPU, AHB and APB Clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
 80012fe:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001300:	2302      	movs	r3, #2
 8001302:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800130c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK){
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2102      	movs	r1, #2
 8001318:	4618      	mov	r0, r3
 800131a:	f001 f829 	bl	8002370 <HAL_RCC_ClockConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0xc4>
        Error_Handler();
 8001324:	f000 f808 	bl	8001338 <Error_Handler>
    }
}
 8001328:	bf00      	nop
 800132a:	3750      	adds	r7, #80	@ 0x50
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <Error_Handler>:

void Error_Handler(void){
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
    __disable_irq();
    while (1){}
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <Error_Handler+0x8>

08001344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <HAL_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	4a0f      	ldr	r2, [pc, #60]	@ (8001390 <HAL_MspInit+0x4c>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001358:	6453      	str	r3, [r2, #68]	@ 0x44
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <HAL_MspInit+0x4c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_MspInit+0x4c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <HAL_MspInit+0x4c>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_MspInit+0x4c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	@ 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001428 <HAL_UART_MspInit+0x94>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d134      	bne.n	8001420 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <HAL_UART_MspInit+0x98>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	4a1b      	ldr	r2, [pc, #108]	@ (800142c <HAL_UART_MspInit+0x98>)
 80013c0:	f043 0310 	orr.w	r3, r3, #16
 80013c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c6:	4b19      	ldr	r3, [pc, #100]	@ (800142c <HAL_UART_MspInit+0x98>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_UART_MspInit+0x98>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a14      	ldr	r2, [pc, #80]	@ (800142c <HAL_UART_MspInit+0x98>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b12      	ldr	r3, [pc, #72]	@ (800142c <HAL_UART_MspInit+0x98>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f4:	2312      	movs	r3, #18
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001400:	2307      	movs	r3, #7
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4809      	ldr	r0, [pc, #36]	@ (8001430 <HAL_UART_MspInit+0x9c>)
 800140c:	f000 fb90 	bl	8001b30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	2025      	movs	r0, #37	@ 0x25
 8001416:	f000 fac2 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800141a:	2025      	movs	r0, #37	@ 0x25
 800141c:	f000 fadb 	bl	80019d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	@ 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40011000 	.word	0x40011000
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <NMI_Handler+0x4>

0800143c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <MemManage_Handler+0x4>

0800144c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <UsageFault_Handler+0x4>

0800145c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148a:	f000 f969 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <USART1_IRQHandler+0x10>)
 800149a:	f001 fac9 	bl	8002a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200001f0 	.word	0x200001f0

080014a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014b0:	f000 fcc2 	bl	8001e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return 1;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_kill>:

int _kill(int pid, int sig)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014d2:	f003 f839 	bl	8004548 <__errno>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2216      	movs	r2, #22
 80014da:	601a      	str	r2, [r3, #0]
  return -1;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_exit>:

void _exit (int status)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ffe7 	bl	80014c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014fa:	bf00      	nop
 80014fc:	e7fd      	b.n	80014fa <_exit+0x12>

080014fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	e00a      	b.n	8001526 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001510:	f3af 8000 	nop.w
 8001514:	4601      	mov	r1, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	60ba      	str	r2, [r7, #8]
 800151c:	b2ca      	uxtb	r2, r1
 800151e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	429a      	cmp	r2, r3
 800152c:	dbf0      	blt.n	8001510 <_read+0x12>
  }

  return len;
 800152e:	687b      	ldr	r3, [r7, #4]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	e009      	b.n	800155e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	60ba      	str	r2, [r7, #8]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	429a      	cmp	r2, r3
 8001564:	dbf1      	blt.n	800154a <_write+0x12>
  }
  return len;
 8001566:	687b      	ldr	r3, [r7, #4]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_close>:

int _close(int file)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001598:	605a      	str	r2, [r3, #4]
  return 0;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_isatty>:

int _isatty(int file)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b0:	2301      	movs	r3, #1
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e0:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <_sbrk+0x5c>)
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <_sbrk+0x60>)
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <_sbrk+0x64>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <_sbrk+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d207      	bcs.n	8001618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001608:	f002 ff9e 	bl	8004548 <__errno>
 800160c:	4603      	mov	r3, r0
 800160e:	220c      	movs	r2, #12
 8001610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	e009      	b.n	800162c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20018000 	.word	0x20018000
 8001638:	00000400 	.word	0x00000400
 800163c:	20000280 	.word	0x20000280
 8001640:	200003d8 	.word	0x200003d8

08001644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <SystemInit+0x20>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164e:	4a05      	ldr	r2, [pc, #20]	@ (8001664 <SystemInit+0x20>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800166c:	f7ff ffea 	bl	8001644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001670:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001672:	490d      	ldr	r1, [pc, #52]	@ (80016a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001674:	4a0d      	ldr	r2, [pc, #52]	@ (80016ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001688:	4c0a      	ldr	r4, [pc, #40]	@ (80016b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001696:	f002 ff5d 	bl	8004554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169a:	f7ff fd41 	bl	8001120 <main>
  bx  lr    
 800169e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016ac:	08006a30 	.word	0x08006a30
  ldr r2, =_sbss
 80016b0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80016b4:	200003d4 	.word	0x200003d4

080016b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC_IRQHandler>
	...

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c0:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0d      	ldr	r2, [pc, #52]	@ (80016fc <HAL_Init+0x40>)
 80016c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <HAL_Init+0x40>)
 80016d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <HAL_Init+0x40>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a07      	ldr	r2, [pc, #28]	@ (80016fc <HAL_Init+0x40>)
 80016de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f94f 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ea:	200f      	movs	r0, #15
 80016ec:	f000 f808 	bl	8001700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f0:	f7ff fe28 	bl	8001344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023c00 	.word	0x40023c00

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_InitTick+0x54>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_InitTick+0x58>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f967 	bl	80019f2 <HAL_SYSTICK_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e00e      	b.n	800174c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d80a      	bhi.n	800174a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f000 f92f 	bl	800199e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001740:	4a06      	ldr	r2, [pc, #24]	@ (800175c <HAL_InitTick+0x5c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000000 	.word	0x20000000
 8001758:	20000008 	.word	0x20000008
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000008 	.word	0x20000008
 8001784:	20000284 	.word	0x20000284

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000284 	.word	0x20000284

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff ffee 	bl	8001788 <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_Delay+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffde 	bl	8001788 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	@ (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	@ (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	@ (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	@ 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	@ 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001954:	d301      	bcc.n	800195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <SysTick_Config+0x40>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001962:	210f      	movs	r1, #15
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f7ff ff8e 	bl	8001888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <SysTick_Config+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <SysTick_Config+0x40>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff29 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff3e 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ff8e 	bl	80018dc <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff5d 	bl	8001888 <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff31 	bl	800184c <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa2 	bl	8001944 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff feb6 	bl	8001788 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d008      	beq.n	8001a3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2280      	movs	r2, #128	@ 0x80
 8001a2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e052      	b.n	8001ae2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0216 	bic.w	r2, r2, #22
 8001a4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d103      	bne.n	8001a6c <HAL_DMA_Abort+0x62>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0208 	bic.w	r2, r2, #8
 8001a7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8c:	e013      	b.n	8001ab6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a8e:	f7ff fe7b 	bl	8001788 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d90c      	bls.n	8001ab6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e015      	b.n	8001ae2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e4      	bne.n	8001a8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac8:	223f      	movs	r2, #63	@ 0x3f
 8001aca:	409a      	lsls	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d004      	beq.n	8001b08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2280      	movs	r2, #128	@ 0x80
 8001b02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e00c      	b.n	8001b22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2205      	movs	r2, #5
 8001b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	e159      	b.n	8001e00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	f040 8148 	bne.w	8001dfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d005      	beq.n	8001b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d130      	bne.n	8001be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 0201 	and.w	r2, r3, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d017      	beq.n	8001c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d123      	bne.n	8001c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	08da      	lsrs	r2, r3, #3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3208      	adds	r2, #8
 8001c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	69b9      	ldr	r1, [r7, #24]
 8001c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0203 	and.w	r2, r3, #3
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80a2 	beq.w	8001dfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b57      	ldr	r3, [pc, #348]	@ (8001e18 <HAL_GPIO_Init+0x2e8>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	4a56      	ldr	r2, [pc, #344]	@ (8001e18 <HAL_GPIO_Init+0x2e8>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc6:	4b54      	ldr	r3, [pc, #336]	@ (8001e18 <HAL_GPIO_Init+0x2e8>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd2:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <HAL_GPIO_Init+0x2ec>)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	220f      	movs	r2, #15
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a49      	ldr	r2, [pc, #292]	@ (8001e20 <HAL_GPIO_Init+0x2f0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d019      	beq.n	8001d32 <HAL_GPIO_Init+0x202>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a48      	ldr	r2, [pc, #288]	@ (8001e24 <HAL_GPIO_Init+0x2f4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d013      	beq.n	8001d2e <HAL_GPIO_Init+0x1fe>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a47      	ldr	r2, [pc, #284]	@ (8001e28 <HAL_GPIO_Init+0x2f8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00d      	beq.n	8001d2a <HAL_GPIO_Init+0x1fa>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a46      	ldr	r2, [pc, #280]	@ (8001e2c <HAL_GPIO_Init+0x2fc>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d007      	beq.n	8001d26 <HAL_GPIO_Init+0x1f6>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a45      	ldr	r2, [pc, #276]	@ (8001e30 <HAL_GPIO_Init+0x300>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d101      	bne.n	8001d22 <HAL_GPIO_Init+0x1f2>
 8001d1e:	2304      	movs	r3, #4
 8001d20:	e008      	b.n	8001d34 <HAL_GPIO_Init+0x204>
 8001d22:	2307      	movs	r3, #7
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x204>
 8001d26:	2303      	movs	r3, #3
 8001d28:	e004      	b.n	8001d34 <HAL_GPIO_Init+0x204>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_Init+0x204>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_GPIO_Init+0x204>
 8001d32:	2300      	movs	r3, #0
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	f002 0203 	and.w	r2, r2, #3
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	4093      	lsls	r3, r2
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d44:	4935      	ldr	r1, [pc, #212]	@ (8001e1c <HAL_GPIO_Init+0x2ec>)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d52:	4b38      	ldr	r3, [pc, #224]	@ (8001e34 <HAL_GPIO_Init+0x304>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d76:	4a2f      	ldr	r2, [pc, #188]	@ (8001e34 <HAL_GPIO_Init+0x304>)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <HAL_GPIO_Init+0x304>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da0:	4a24      	ldr	r2, [pc, #144]	@ (8001e34 <HAL_GPIO_Init+0x304>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001da6:	4b23      	ldr	r3, [pc, #140]	@ (8001e34 <HAL_GPIO_Init+0x304>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dca:	4a1a      	ldr	r2, [pc, #104]	@ (8001e34 <HAL_GPIO_Init+0x304>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <HAL_GPIO_Init+0x304>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e34 <HAL_GPIO_Init+0x304>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b0f      	cmp	r3, #15
 8001e04:	f67f aea2 	bls.w	8001b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3724      	adds	r7, #36	@ 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020c00 	.word	0x40020c00
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40013c00 	.word	0x40013c00

08001e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e4e:	4a05      	ldr	r2, [pc, #20]	@ (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f806 	bl	8001e68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e267      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d075      	beq.n	8001f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e9e:	4b88      	ldr	r3, [pc, #544]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b85      	ldr	r3, [pc, #532]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d112      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb6:	4b82      	ldr	r3, [pc, #520]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d05b      	beq.n	8001f88 <HAL_RCC_OscConfig+0x108>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d157      	bne.n	8001f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e242      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee4:	d106      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x74>
 8001ee6:	4b76      	ldr	r3, [pc, #472]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a75      	ldr	r2, [pc, #468]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b70      	ldr	r3, [pc, #448]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6f      	ldr	r2, [pc, #444]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6c      	ldr	r2, [pc, #432]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001f18:	4b69      	ldr	r3, [pc, #420]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a68      	ldr	r2, [pc, #416]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b66      	ldr	r3, [pc, #408]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a65      	ldr	r2, [pc, #404]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fc26 	bl	8001788 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fc22 	bl	8001788 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	@ 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e207      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b5b      	ldr	r3, [pc, #364]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xc0>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fc12 	bl	8001788 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fc0e 	bl	8001788 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1f3      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b51      	ldr	r3, [pc, #324]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0xe8>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f96:	4b4a      	ldr	r3, [pc, #296]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b47      	ldr	r3, [pc, #284]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b44      	ldr	r3, [pc, #272]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b41      	ldr	r3, [pc, #260]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1c7      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4937      	ldr	r1, [pc, #220]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e03a      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b34      	ldr	r3, [pc, #208]	@ (80020c4 <HAL_RCC_OscConfig+0x244>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7ff fbc7 	bl	8001788 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7ff fbc3 	bl	8001788 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1a8      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	4b2b      	ldr	r3, [pc, #172]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b28      	ldr	r3, [pc, #160]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4925      	ldr	r1, [pc, #148]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b24      	ldr	r3, [pc, #144]	@ (80020c4 <HAL_RCC_OscConfig+0x244>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff fba6 	bl	8001788 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff fba2 	bl	8001788 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e187      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d036      	beq.n	80020d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_RCC_OscConfig+0x248>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff fb86 	bl	8001788 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002080:	f7ff fb82 	bl	8001788 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e167      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x200>
 800209e:	e01b      	b.n	80020d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_RCC_OscConfig+0x248>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fb6f 	bl	8001788 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	e00e      	b.n	80020cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ae:	f7ff fb6b 	bl	8001788 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d907      	bls.n	80020cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e150      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	42470000 	.word	0x42470000
 80020c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	4b88      	ldr	r3, [pc, #544]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ea      	bne.n	80020ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8097 	beq.w	8002214 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b81      	ldr	r3, [pc, #516]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10f      	bne.n	8002116 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4b7d      	ldr	r3, [pc, #500]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	4a7c      	ldr	r2, [pc, #496]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	@ 0x40
 8002106:	4b7a      	ldr	r3, [pc, #488]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b77      	ldr	r3, [pc, #476]	@ (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b74      	ldr	r3, [pc, #464]	@ (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a73      	ldr	r2, [pc, #460]	@ (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7ff fb2b 	bl	8001788 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7ff fb27 	bl	8001788 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e10c      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b6a      	ldr	r3, [pc, #424]	@ (80022f4 <HAL_RCC_OscConfig+0x474>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x2ea>
 800215c:	4b64      	ldr	r3, [pc, #400]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002160:	4a63      	ldr	r2, [pc, #396]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	@ 0x70
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x324>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x30c>
 8002172:	4b5f      	ldr	r3, [pc, #380]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	4a5e      	ldr	r2, [pc, #376]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6713      	str	r3, [r2, #112]	@ 0x70
 800217e:	4b5c      	ldr	r3, [pc, #368]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002182:	4a5b      	ldr	r2, [pc, #364]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	@ 0x70
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0x324>
 800218c:	4b58      	ldr	r3, [pc, #352]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002190:	4a57      	ldr	r2, [pc, #348]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6713      	str	r3, [r2, #112]	@ 0x70
 8002198:	4b55      	ldr	r3, [pc, #340]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219c:	4a54      	ldr	r2, [pc, #336]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800219e:	f023 0304 	bic.w	r3, r3, #4
 80021a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff faec 	bl	8001788 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7ff fae8 	bl	8001788 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0cb      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ca:	4b49      	ldr	r3, [pc, #292]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0ee      	beq.n	80021b4 <HAL_RCC_OscConfig+0x334>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7ff fad6 	bl	8001788 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7ff fad2 	bl	8001788 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0b5      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f6:	4b3e      	ldr	r3, [pc, #248]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ee      	bne.n	80021e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	4a38      	ldr	r2, [pc, #224]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800220e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002212:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a1 	beq.w	8002360 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221e:	4b34      	ldr	r3, [pc, #208]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b08      	cmp	r3, #8
 8002228:	d05c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d141      	bne.n	80022b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_RCC_OscConfig+0x478>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff faa6 	bl	8001788 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff faa2 	bl	8001788 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e087      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	019b      	lsls	r3, r3, #6
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	041b      	lsls	r3, r3, #16
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	491b      	ldr	r1, [pc, #108]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_RCC_OscConfig+0x478>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7ff fa7b 	bl	8001788 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002296:	f7ff fa77 	bl	8001788 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e05c      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x416>
 80022b4:	e054      	b.n	8002360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <HAL_RCC_OscConfig+0x478>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fa64 	bl	8001788 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7ff fa60 	bl	8001788 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e045      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x444>
 80022e2:	e03d      	b.n	8002360 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e038      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <HAL_RCC_OscConfig+0x4ec>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d028      	beq.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d121      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d11a      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	4293      	cmp	r3, r2
 8002336:	d111      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	3b01      	subs	r3, #1
 8002346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0cc      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b68      	ldr	r3, [pc, #416]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d90c      	bls.n	80023ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b65      	ldr	r3, [pc, #404]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a58      	ldr	r2, [pc, #352]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a52      	ldr	r2, [pc, #328]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d044      	beq.n	8002490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d119      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d003      	beq.n	800242e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242a:	2b03      	cmp	r3, #3
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b3f      	ldr	r3, [pc, #252]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e06f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b3b      	ldr	r3, [pc, #236]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e067      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b37      	ldr	r3, [pc, #220]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4934      	ldr	r1, [pc, #208]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7ff f992 	bl	8001788 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7ff f98e 	bl	8001788 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d20c      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e2:	4b12      	ldr	r3, [pc, #72]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	@ (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f8f2 	bl	8001700 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	08006698 	.word	0x08006698
 8002534:	20000000 	.word	0x20000000
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002540:	b094      	sub	sp, #80	@ 0x50
 8002542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002554:	4b79      	ldr	r3, [pc, #484]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d00d      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x40>
 8002560:	2b08      	cmp	r3, #8
 8002562:	f200 80e1 	bhi.w	8002728 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x34>
 800256a:	2b04      	cmp	r3, #4
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x3a>
 800256e:	e0db      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b73      	ldr	r3, [pc, #460]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x204>)
 8002572:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002574:	e0db      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002576:	4b73      	ldr	r3, [pc, #460]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x208>)
 8002578:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800257a:	e0d8      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257c:	4b6f      	ldr	r3, [pc, #444]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002584:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002586:	4b6d      	ldr	r3, [pc, #436]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d063      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002592:	4b6a      	ldr	r3, [pc, #424]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	2200      	movs	r2, #0
 800259a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800259c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800259e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025a6:	2300      	movs	r3, #0
 80025a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025ae:	4622      	mov	r2, r4
 80025b0:	462b      	mov	r3, r5
 80025b2:	f04f 0000 	mov.w	r0, #0
 80025b6:	f04f 0100 	mov.w	r1, #0
 80025ba:	0159      	lsls	r1, r3, #5
 80025bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c0:	0150      	lsls	r0, r2, #5
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4621      	mov	r1, r4
 80025c8:	1a51      	subs	r1, r2, r1
 80025ca:	6139      	str	r1, [r7, #16]
 80025cc:	4629      	mov	r1, r5
 80025ce:	eb63 0301 	sbc.w	r3, r3, r1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025e0:	4659      	mov	r1, fp
 80025e2:	018b      	lsls	r3, r1, #6
 80025e4:	4651      	mov	r1, sl
 80025e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ea:	4651      	mov	r1, sl
 80025ec:	018a      	lsls	r2, r1, #6
 80025ee:	4651      	mov	r1, sl
 80025f0:	ebb2 0801 	subs.w	r8, r2, r1
 80025f4:	4659      	mov	r1, fp
 80025f6:	eb63 0901 	sbc.w	r9, r3, r1
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800260a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800260e:	4690      	mov	r8, r2
 8002610:	4699      	mov	r9, r3
 8002612:	4623      	mov	r3, r4
 8002614:	eb18 0303 	adds.w	r3, r8, r3
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	462b      	mov	r3, r5
 800261c:	eb49 0303 	adc.w	r3, r9, r3
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800262e:	4629      	mov	r1, r5
 8002630:	024b      	lsls	r3, r1, #9
 8002632:	4621      	mov	r1, r4
 8002634:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002638:	4621      	mov	r1, r4
 800263a:	024a      	lsls	r2, r1, #9
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002642:	2200      	movs	r2, #0
 8002644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800264c:	f7fe fab4 	bl	8000bb8 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002658:	e058      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265a:	4b38      	ldr	r3, [pc, #224]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	2200      	movs	r2, #0
 8002662:	4618      	mov	r0, r3
 8002664:	4611      	mov	r1, r2
 8002666:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002670:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002674:	4642      	mov	r2, r8
 8002676:	464b      	mov	r3, r9
 8002678:	f04f 0000 	mov.w	r0, #0
 800267c:	f04f 0100 	mov.w	r1, #0
 8002680:	0159      	lsls	r1, r3, #5
 8002682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002686:	0150      	lsls	r0, r2, #5
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4641      	mov	r1, r8
 800268e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002692:	4649      	mov	r1, r9
 8002694:	eb63 0b01 	sbc.w	fp, r3, r1
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026ac:	ebb2 040a 	subs.w	r4, r2, sl
 80026b0:	eb63 050b 	sbc.w	r5, r3, fp
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	00eb      	lsls	r3, r5, #3
 80026be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c2:	00e2      	lsls	r2, r4, #3
 80026c4:	4614      	mov	r4, r2
 80026c6:	461d      	mov	r5, r3
 80026c8:	4643      	mov	r3, r8
 80026ca:	18e3      	adds	r3, r4, r3
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	464b      	mov	r3, r9
 80026d0:	eb45 0303 	adc.w	r3, r5, r3
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026e2:	4629      	mov	r1, r5
 80026e4:	028b      	lsls	r3, r1, #10
 80026e6:	4621      	mov	r1, r4
 80026e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ec:	4621      	mov	r1, r4
 80026ee:	028a      	lsls	r2, r1, #10
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026f6:	2200      	movs	r2, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	61fa      	str	r2, [r7, #28]
 80026fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002700:	f7fe fa5a 	bl	8000bb8 <__aeabi_uldivmod>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4613      	mov	r3, r2
 800270a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800270c:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800271c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800271e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002726:	e002      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x204>)
 800272a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800272c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002730:	4618      	mov	r0, r3
 8002732:	3750      	adds	r7, #80	@ 0x50
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	00f42400 	.word	0x00f42400
 8002744:	007a1200 	.word	0x007a1200

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b03      	ldr	r3, [pc, #12]	@ (800275c <HAL_RCC_GetHCLKFreq+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002764:	f7ff fff0 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0a9b      	lsrs	r3, r3, #10
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	@ (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	080066a8 	.word	0x080066a8

08002788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800278c:	f7ff ffdc 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0b5b      	lsrs	r3, r3, #13
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	@ (80027ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	080066a8 	.word	0x080066a8

080027b0 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e04a      	b.n	8002858 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe fddc 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	@ 0x24
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fe63 	bl	80034c0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8002818:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0208 	orr.w	r2, r2, #8
 8002828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	@ 0x28
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	d175      	bne.n	800296c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_UART_Transmit+0x2c>
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e06e      	b.n	800296e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2221      	movs	r2, #33	@ 0x21
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800289e:	f7fe ff73 	bl	8001788 <HAL_GetTick>
 80028a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	88fa      	ldrh	r2, [r7, #6]
 80028a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028b8:	d108      	bne.n	80028cc <HAL_UART_Transmit+0x6c>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d104      	bne.n	80028cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	e003      	b.n	80028d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028d4:	e02e      	b.n	8002934 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	2180      	movs	r1, #128	@ 0x80
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fbbd 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e03a      	b.n	800296e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800290c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	3302      	adds	r3, #2
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	e007      	b.n	8002926 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	3301      	adds	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1cb      	bne.n	80028d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2200      	movs	r2, #0
 8002946:	2140      	movs	r1, #64	@ 0x40
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fb89 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e006      	b.n	800296e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b08c      	sub	sp, #48	@ 0x30
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	4613      	mov	r3, r2
 8002982:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b20      	cmp	r3, #32
 800298e:	d14a      	bne.n	8002a26 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e043      	b.n	8002a28 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fbad 	bl	8003112 <UART_Start_Receive_IT>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80029be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d12c      	bne.n	8002a20 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d125      	bne.n	8002a1a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	330c      	adds	r3, #12
 80029ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	e853 3f00 	ldrex	r3, [r3]
 80029f2:	617b      	str	r3, [r7, #20]
   return(result);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f043 0310 	orr.w	r3, r3, #16
 80029fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	330c      	adds	r3, #12
 8002a02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a04:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a08:	6a39      	ldr	r1, [r7, #32]
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0c:	e841 2300 	strex	r3, r2, [r1]
 8002a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e5      	bne.n	80029e4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8002a18:	e002      	b.n	8002a20 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002a20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a24:	e000      	b.n	8002a28 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3730      	adds	r7, #48	@ 0x30
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b0ba      	sub	sp, #232	@ 0xe8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10f      	bne.n	8002a96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_UART_IRQHandler+0x66>
 8002a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fc58 	bl	8003344 <UART_Receive_IT>
      return;
 8002a94:	e25b      	b.n	8002f4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80de 	beq.w	8002c5c <HAL_UART_IRQHandler+0x22c>
 8002aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d106      	bne.n	8002aba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ab0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80d1 	beq.w	8002c5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_UART_IRQHandler+0xae>
 8002ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_UART_IRQHandler+0xd2>
 8002aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	f043 0202 	orr.w	r2, r3, #2
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_UART_IRQHandler+0xf6>
 8002b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	f043 0204 	orr.w	r2, r3, #4
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d011      	beq.n	8002b56 <HAL_UART_IRQHandler+0x126>
 8002b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4e:	f043 0208 	orr.w	r2, r3, #8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 81f2 	beq.w	8002f44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_UART_IRQHandler+0x14e>
 8002b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fbe3 	bl	8003344 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b88:	2b40      	cmp	r3, #64	@ 0x40
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d103      	bne.n	8002baa <HAL_UART_IRQHandler+0x17a>
 8002ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d04f      	beq.n	8002c4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 faeb 	bl	8003186 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bba:	2b40      	cmp	r3, #64	@ 0x40
 8002bbc:	d141      	bne.n	8002c42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3314      	adds	r3, #20
 8002bc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bcc:	e853 3f00 	ldrex	r3, [r3]
 8002bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3314      	adds	r3, #20
 8002be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002bea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002bee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002bfa:	e841 2300 	strex	r3, r2, [r1]
 8002bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1d9      	bne.n	8002bbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d013      	beq.n	8002c3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c16:	4a7e      	ldr	r2, [pc, #504]	@ (8002e10 <HAL_UART_IRQHandler+0x3e0>)
 8002c18:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe ff63 	bl	8001aea <HAL_DMA_Abort_IT>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c34:	4610      	mov	r0, r2
 8002c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c38:	e00e      	b.n	8002c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f99e 	bl	8002f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c40:	e00a      	b.n	8002c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f99a 	bl	8002f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	e006      	b.n	8002c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f996 	bl	8002f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c56:	e175      	b.n	8002f44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c58:	bf00      	nop
    return;
 8002c5a:	e173      	b.n	8002f44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	f040 814f 	bne.w	8002f04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8148 	beq.w	8002f04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8141 	beq.w	8002f04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca2:	2b40      	cmp	r3, #64	@ 0x40
 8002ca4:	f040 80b6 	bne.w	8002e14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8145 	beq.w	8002f48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	f080 813e 	bcs.w	8002f48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cde:	f000 8088 	beq.w	8002df2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d1e:	e841 2300 	strex	r3, r2, [r1]
 8002d22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1d9      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3314      	adds	r3, #20
 8002d34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d38:	e853 3f00 	ldrex	r3, [r3]
 8002d3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3314      	adds	r3, #20
 8002d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d5e:	e841 2300 	strex	r3, r2, [r1]
 8002d62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e1      	bne.n	8002d2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3314      	adds	r3, #20
 8002d70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3314      	adds	r3, #20
 8002d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d96:	e841 2300 	strex	r3, r2, [r1]
 8002d9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1e3      	bne.n	8002d6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	330c      	adds	r3, #12
 8002db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002dc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dc2:	f023 0310 	bic.w	r3, r3, #16
 8002dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	330c      	adds	r3, #12
 8002dd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002dd4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002dd6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ddc:	e841 2300 	strex	r3, r2, [r1]
 8002de0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e3      	bne.n	8002db0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe fe0c 	bl	8001a0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2202      	movs	r2, #2
 8002df6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4619      	mov	r1, r3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7fe f923 	bl	8001054 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e0e:	e09b      	b.n	8002f48 <HAL_UART_IRQHandler+0x518>
 8002e10:	0800324d 	.word	0x0800324d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 808e 	beq.w	8002f4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8089 	beq.w	8002f4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e44:	e853 3f00 	ldrex	r3, [r3]
 8002e48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e3      	bne.n	8002e3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3314      	adds	r3, #20
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	e853 3f00 	ldrex	r3, [r3]
 8002e80:	623b      	str	r3, [r7, #32]
   return(result);
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3314      	adds	r3, #20
 8002e92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e96:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e9e:	e841 2300 	strex	r3, r2, [r1]
 8002ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e3      	bne.n	8002e72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0310 	bic.w	r3, r3, #16
 8002ece:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002edc:	61fa      	str	r2, [r7, #28]
 8002ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee0:	69b9      	ldr	r1, [r7, #24]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	e841 2300 	strex	r3, r2, [r1]
 8002ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e3      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ef6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7fe f8a9 	bl	8001054 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f02:	e023      	b.n	8002f4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d009      	beq.n	8002f24 <HAL_UART_IRQHandler+0x4f4>
 8002f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f9a9 	bl	8003274 <UART_Transmit_IT>
    return;
 8002f22:	e014      	b.n	8002f4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00e      	beq.n	8002f4e <HAL_UART_IRQHandler+0x51e>
 8002f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f9e9 	bl	8003314 <UART_EndTransmit_IT>
    return;
 8002f42:	e004      	b.n	8002f4e <HAL_UART_IRQHandler+0x51e>
    return;
 8002f44:	bf00      	nop
 8002f46:	e002      	b.n	8002f4e <HAL_UART_IRQHandler+0x51e>
      return;
 8002f48:	bf00      	nop
 8002f4a:	e000      	b.n	8002f4e <HAL_UART_IRQHandler+0x51e>
      return;
 8002f4c:	bf00      	nop
  }
}
 8002f4e:	37e8      	adds	r7, #232	@ 0xe8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e020      	b.n	8002fec <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2224      	movs	r2, #36	@ 0x24
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f023 030c 	bic.w	r3, r3, #12
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f043 0308 	orr.w	r3, r3, #8
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_HalfDuplex_EnableReceiver+0x1a>
 800300e:	2302      	movs	r3, #2
 8003010:	e020      	b.n	8003054 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2224      	movs	r2, #36	@ 0x24
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f023 030c 	bic.w	r3, r3, #12
 8003030:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003070:	e03b      	b.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d037      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7fe fb85 	bl	8001788 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <UART_WaitOnFlagUntilTimeout+0x30>
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e03a      	b.n	800310a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d023      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b80      	cmp	r3, #128	@ 0x80
 80030a6:	d020      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b40      	cmp	r3, #64	@ 0x40
 80030ac:	d01d      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d116      	bne.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f857 	bl	8003186 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2208      	movs	r2, #8
 80030dc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00f      	b.n	800310a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	429a      	cmp	r2, r3
 8003106:	d0b4      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	4613      	mov	r3, r2
 800311e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	88fa      	ldrh	r2, [r7, #6]
 800312a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2222      	movs	r2, #34	@ 0x22
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003156:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0220 	orr.w	r2, r2, #32
 8003176:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003186:	b480      	push	{r7}
 8003188:	b095      	sub	sp, #84	@ 0x54
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800319e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	330c      	adds	r3, #12
 80031ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80031b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e5      	bne.n	800318e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3314      	adds	r3, #20
 80031e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e5      	bne.n	80031c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d119      	bne.n	8003232 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	330c      	adds	r3, #12
 8003204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	60bb      	str	r3, [r7, #8]
   return(result);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f023 0310 	bic.w	r3, r3, #16
 8003214:	647b      	str	r3, [r7, #68]	@ 0x44
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	330c      	adds	r3, #12
 800321c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800321e:	61ba      	str	r2, [r7, #24]
 8003220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	6979      	ldr	r1, [r7, #20]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	613b      	str	r3, [r7, #16]
   return(result);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e5      	bne.n	80031fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003240:	bf00      	nop
 8003242:	3754      	adds	r7, #84	@ 0x54
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff fe88 	bl	8002f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b21      	cmp	r3, #33	@ 0x21
 8003286:	d13e      	bne.n	8003306 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003290:	d114      	bne.n	80032bc <UART_Transmit_IT+0x48>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d110      	bne.n	80032bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	1c9a      	adds	r2, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	621a      	str	r2, [r3, #32]
 80032ba:	e008      	b.n	80032ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	1c59      	adds	r1, r3, #1
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6211      	str	r1, [r2, #32]
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4619      	mov	r1, r3
 80032dc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10f      	bne.n	8003302 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003300:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	e000      	b.n	8003308 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
  }
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800332a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff fe0d 	bl	8002f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08c      	sub	sp, #48	@ 0x30
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b22      	cmp	r3, #34	@ 0x22
 8003356:	f040 80ae 	bne.w	80034b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003362:	d117      	bne.n	8003394 <UART_Receive_IT+0x50>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d113      	bne.n	8003394 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800336c:	2300      	movs	r3, #0
 800336e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003374:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	b29b      	uxth	r3, r3
 800337e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003382:	b29a      	uxth	r2, r3
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	1c9a      	adds	r2, r3, #2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28
 8003392:	e026      	b.n	80033e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800339a:	2300      	movs	r3, #0
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a6:	d007      	beq.n	80033b8 <UART_Receive_IT+0x74>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <UART_Receive_IT+0x82>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d106      	bne.n	80033c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	e008      	b.n	80033d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4619      	mov	r1, r3
 80033f0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d15d      	bne.n	80034b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0220 	bic.w	r2, r2, #32
 8003404:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003414:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	2b01      	cmp	r3, #1
 800343a:	d135      	bne.n	80034a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	613b      	str	r3, [r7, #16]
   return(result);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f023 0310 	bic.w	r3, r3, #16
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003462:	623a      	str	r2, [r7, #32]
 8003464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003466:	69f9      	ldr	r1, [r7, #28]
 8003468:	6a3a      	ldr	r2, [r7, #32]
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e5      	bne.n	8003442 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b10      	cmp	r3, #16
 8003482:	d10a      	bne.n	800349a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800349e:	4619      	mov	r1, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7fd fdd7 	bl	8001054 <HAL_UARTEx_RxEventCallback>
 80034a6:	e002      	b.n	80034ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff fd5d 	bl	8002f68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e002      	b.n	80034b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
  }
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3730      	adds	r7, #48	@ 0x30
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c4:	b0c0      	sub	sp, #256	@ 0x100
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034dc:	68d9      	ldr	r1, [r3, #12]
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	ea40 0301 	orr.w	r3, r0, r1
 80034e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	431a      	orrs	r2, r3
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003518:	f021 010c 	bic.w	r1, r1, #12
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003526:	430b      	orrs	r3, r1
 8003528:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353a:	6999      	ldr	r1, [r3, #24]
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	ea40 0301 	orr.w	r3, r0, r1
 8003546:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b8f      	ldr	r3, [pc, #572]	@ (800378c <UART_SetConfig+0x2cc>)
 8003550:	429a      	cmp	r2, r3
 8003552:	d005      	beq.n	8003560 <UART_SetConfig+0xa0>
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b8d      	ldr	r3, [pc, #564]	@ (8003790 <UART_SetConfig+0x2d0>)
 800355c:	429a      	cmp	r2, r3
 800355e:	d104      	bne.n	800356a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003560:	f7ff f912 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 8003564:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003568:	e003      	b.n	8003572 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800356a:	f7ff f8f9 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 800356e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800357c:	f040 810c 	bne.w	8003798 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003584:	2200      	movs	r2, #0
 8003586:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800358a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800358e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003592:	4622      	mov	r2, r4
 8003594:	462b      	mov	r3, r5
 8003596:	1891      	adds	r1, r2, r2
 8003598:	65b9      	str	r1, [r7, #88]	@ 0x58
 800359a:	415b      	adcs	r3, r3
 800359c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800359e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035a2:	4621      	mov	r1, r4
 80035a4:	eb12 0801 	adds.w	r8, r2, r1
 80035a8:	4629      	mov	r1, r5
 80035aa:	eb43 0901 	adc.w	r9, r3, r1
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c2:	4690      	mov	r8, r2
 80035c4:	4699      	mov	r9, r3
 80035c6:	4623      	mov	r3, r4
 80035c8:	eb18 0303 	adds.w	r3, r8, r3
 80035cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035d0:	462b      	mov	r3, r5
 80035d2:	eb49 0303 	adc.w	r3, r9, r3
 80035d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035ee:	460b      	mov	r3, r1
 80035f0:	18db      	adds	r3, r3, r3
 80035f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80035f4:	4613      	mov	r3, r2
 80035f6:	eb42 0303 	adc.w	r3, r2, r3
 80035fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80035fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003600:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003604:	f7fd fad8 	bl	8000bb8 <__aeabi_uldivmod>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4b61      	ldr	r3, [pc, #388]	@ (8003794 <UART_SetConfig+0x2d4>)
 800360e:	fba3 2302 	umull	r2, r3, r3, r2
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	011c      	lsls	r4, r3, #4
 8003616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800361a:	2200      	movs	r2, #0
 800361c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003620:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003624:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	1891      	adds	r1, r2, r2
 800362e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003630:	415b      	adcs	r3, r3
 8003632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003634:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003638:	4641      	mov	r1, r8
 800363a:	eb12 0a01 	adds.w	sl, r2, r1
 800363e:	4649      	mov	r1, r9
 8003640:	eb43 0b01 	adc.w	fp, r3, r1
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003650:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003654:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003658:	4692      	mov	sl, r2
 800365a:	469b      	mov	fp, r3
 800365c:	4643      	mov	r3, r8
 800365e:	eb1a 0303 	adds.w	r3, sl, r3
 8003662:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003666:	464b      	mov	r3, r9
 8003668:	eb4b 0303 	adc.w	r3, fp, r3
 800366c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800367c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003680:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003684:	460b      	mov	r3, r1
 8003686:	18db      	adds	r3, r3, r3
 8003688:	643b      	str	r3, [r7, #64]	@ 0x40
 800368a:	4613      	mov	r3, r2
 800368c:	eb42 0303 	adc.w	r3, r2, r3
 8003690:	647b      	str	r3, [r7, #68]	@ 0x44
 8003692:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003696:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800369a:	f7fd fa8d 	bl	8000bb8 <__aeabi_uldivmod>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4611      	mov	r1, r2
 80036a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003794 <UART_SetConfig+0x2d4>)
 80036a6:	fba3 2301 	umull	r2, r3, r3, r1
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	2264      	movs	r2, #100	@ 0x64
 80036ae:	fb02 f303 	mul.w	r3, r2, r3
 80036b2:	1acb      	subs	r3, r1, r3
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036ba:	4b36      	ldr	r3, [pc, #216]	@ (8003794 <UART_SetConfig+0x2d4>)
 80036bc:	fba3 2302 	umull	r2, r3, r3, r2
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036c8:	441c      	add	r4, r3
 80036ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80036d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036dc:	4642      	mov	r2, r8
 80036de:	464b      	mov	r3, r9
 80036e0:	1891      	adds	r1, r2, r2
 80036e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036e4:	415b      	adcs	r3, r3
 80036e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036ec:	4641      	mov	r1, r8
 80036ee:	1851      	adds	r1, r2, r1
 80036f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80036f2:	4649      	mov	r1, r9
 80036f4:	414b      	adcs	r3, r1
 80036f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003704:	4659      	mov	r1, fp
 8003706:	00cb      	lsls	r3, r1, #3
 8003708:	4651      	mov	r1, sl
 800370a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800370e:	4651      	mov	r1, sl
 8003710:	00ca      	lsls	r2, r1, #3
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	4603      	mov	r3, r0
 8003718:	4642      	mov	r2, r8
 800371a:	189b      	adds	r3, r3, r2
 800371c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003720:	464b      	mov	r3, r9
 8003722:	460a      	mov	r2, r1
 8003724:	eb42 0303 	adc.w	r3, r2, r3
 8003728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003738:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800373c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003740:	460b      	mov	r3, r1
 8003742:	18db      	adds	r3, r3, r3
 8003744:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003746:	4613      	mov	r3, r2
 8003748:	eb42 0303 	adc.w	r3, r2, r3
 800374c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800374e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003752:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003756:	f7fd fa2f 	bl	8000bb8 <__aeabi_uldivmod>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4b0d      	ldr	r3, [pc, #52]	@ (8003794 <UART_SetConfig+0x2d4>)
 8003760:	fba3 1302 	umull	r1, r3, r3, r2
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	2164      	movs	r1, #100	@ 0x64
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	3332      	adds	r3, #50	@ 0x32
 8003772:	4a08      	ldr	r2, [pc, #32]	@ (8003794 <UART_SetConfig+0x2d4>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	f003 0207 	and.w	r2, r3, #7
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4422      	add	r2, r4
 8003786:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003788:	e106      	b.n	8003998 <UART_SetConfig+0x4d8>
 800378a:	bf00      	nop
 800378c:	40011000 	.word	0x40011000
 8003790:	40011400 	.word	0x40011400
 8003794:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800379c:	2200      	movs	r2, #0
 800379e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037aa:	4642      	mov	r2, r8
 80037ac:	464b      	mov	r3, r9
 80037ae:	1891      	adds	r1, r2, r2
 80037b0:	6239      	str	r1, [r7, #32]
 80037b2:	415b      	adcs	r3, r3
 80037b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ba:	4641      	mov	r1, r8
 80037bc:	1854      	adds	r4, r2, r1
 80037be:	4649      	mov	r1, r9
 80037c0:	eb43 0501 	adc.w	r5, r3, r1
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	00eb      	lsls	r3, r5, #3
 80037ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d2:	00e2      	lsls	r2, r4, #3
 80037d4:	4614      	mov	r4, r2
 80037d6:	461d      	mov	r5, r3
 80037d8:	4643      	mov	r3, r8
 80037da:	18e3      	adds	r3, r4, r3
 80037dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037e0:	464b      	mov	r3, r9
 80037e2:	eb45 0303 	adc.w	r3, r5, r3
 80037e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003806:	4629      	mov	r1, r5
 8003808:	008b      	lsls	r3, r1, #2
 800380a:	4621      	mov	r1, r4
 800380c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003810:	4621      	mov	r1, r4
 8003812:	008a      	lsls	r2, r1, #2
 8003814:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003818:	f7fd f9ce 	bl	8000bb8 <__aeabi_uldivmod>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4b60      	ldr	r3, [pc, #384]	@ (80039a4 <UART_SetConfig+0x4e4>)
 8003822:	fba3 2302 	umull	r2, r3, r3, r2
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	011c      	lsls	r4, r3, #4
 800382a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800382e:	2200      	movs	r2, #0
 8003830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003834:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003838:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800383c:	4642      	mov	r2, r8
 800383e:	464b      	mov	r3, r9
 8003840:	1891      	adds	r1, r2, r2
 8003842:	61b9      	str	r1, [r7, #24]
 8003844:	415b      	adcs	r3, r3
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800384c:	4641      	mov	r1, r8
 800384e:	1851      	adds	r1, r2, r1
 8003850:	6139      	str	r1, [r7, #16]
 8003852:	4649      	mov	r1, r9
 8003854:	414b      	adcs	r3, r1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003864:	4659      	mov	r1, fp
 8003866:	00cb      	lsls	r3, r1, #3
 8003868:	4651      	mov	r1, sl
 800386a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800386e:	4651      	mov	r1, sl
 8003870:	00ca      	lsls	r2, r1, #3
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	4603      	mov	r3, r0
 8003878:	4642      	mov	r2, r8
 800387a:	189b      	adds	r3, r3, r2
 800387c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003880:	464b      	mov	r3, r9
 8003882:	460a      	mov	r2, r1
 8003884:	eb42 0303 	adc.w	r3, r2, r3
 8003888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003896:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038a4:	4649      	mov	r1, r9
 80038a6:	008b      	lsls	r3, r1, #2
 80038a8:	4641      	mov	r1, r8
 80038aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ae:	4641      	mov	r1, r8
 80038b0:	008a      	lsls	r2, r1, #2
 80038b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038b6:	f7fd f97f 	bl	8000bb8 <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4611      	mov	r1, r2
 80038c0:	4b38      	ldr	r3, [pc, #224]	@ (80039a4 <UART_SetConfig+0x4e4>)
 80038c2:	fba3 2301 	umull	r2, r3, r3, r1
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2264      	movs	r2, #100	@ 0x64
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	1acb      	subs	r3, r1, r3
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	3332      	adds	r3, #50	@ 0x32
 80038d4:	4a33      	ldr	r2, [pc, #204]	@ (80039a4 <UART_SetConfig+0x4e4>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038e0:	441c      	add	r4, r3
 80038e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038e6:	2200      	movs	r2, #0
 80038e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80038ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80038ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038f0:	4642      	mov	r2, r8
 80038f2:	464b      	mov	r3, r9
 80038f4:	1891      	adds	r1, r2, r2
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	415b      	adcs	r3, r3
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003900:	4641      	mov	r1, r8
 8003902:	1851      	adds	r1, r2, r1
 8003904:	6039      	str	r1, [r7, #0]
 8003906:	4649      	mov	r1, r9
 8003908:	414b      	adcs	r3, r1
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003918:	4659      	mov	r1, fp
 800391a:	00cb      	lsls	r3, r1, #3
 800391c:	4651      	mov	r1, sl
 800391e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003922:	4651      	mov	r1, sl
 8003924:	00ca      	lsls	r2, r1, #3
 8003926:	4610      	mov	r0, r2
 8003928:	4619      	mov	r1, r3
 800392a:	4603      	mov	r3, r0
 800392c:	4642      	mov	r2, r8
 800392e:	189b      	adds	r3, r3, r2
 8003930:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003932:	464b      	mov	r3, r9
 8003934:	460a      	mov	r2, r1
 8003936:	eb42 0303 	adc.w	r3, r2, r3
 800393a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	663b      	str	r3, [r7, #96]	@ 0x60
 8003946:	667a      	str	r2, [r7, #100]	@ 0x64
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003954:	4649      	mov	r1, r9
 8003956:	008b      	lsls	r3, r1, #2
 8003958:	4641      	mov	r1, r8
 800395a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800395e:	4641      	mov	r1, r8
 8003960:	008a      	lsls	r2, r1, #2
 8003962:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003966:	f7fd f927 	bl	8000bb8 <__aeabi_uldivmod>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4b0d      	ldr	r3, [pc, #52]	@ (80039a4 <UART_SetConfig+0x4e4>)
 8003970:	fba3 1302 	umull	r1, r3, r3, r2
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	2164      	movs	r1, #100	@ 0x64
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	3332      	adds	r3, #50	@ 0x32
 8003982:	4a08      	ldr	r2, [pc, #32]	@ (80039a4 <UART_SetConfig+0x4e4>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	f003 020f 	and.w	r2, r3, #15
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4422      	add	r2, r4
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	bf00      	nop
 800399a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800399e:	46bd      	mov	sp, r7
 80039a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a4:	51eb851f 	.word	0x51eb851f

080039a8 <__cvt>:
 80039a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039ac:	ec57 6b10 	vmov	r6, r7, d0
 80039b0:	2f00      	cmp	r7, #0
 80039b2:	460c      	mov	r4, r1
 80039b4:	4619      	mov	r1, r3
 80039b6:	463b      	mov	r3, r7
 80039b8:	bfbb      	ittet	lt
 80039ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80039be:	461f      	movlt	r7, r3
 80039c0:	2300      	movge	r3, #0
 80039c2:	232d      	movlt	r3, #45	@ 0x2d
 80039c4:	700b      	strb	r3, [r1, #0]
 80039c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80039cc:	4691      	mov	r9, r2
 80039ce:	f023 0820 	bic.w	r8, r3, #32
 80039d2:	bfbc      	itt	lt
 80039d4:	4632      	movlt	r2, r6
 80039d6:	4616      	movlt	r6, r2
 80039d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80039dc:	d005      	beq.n	80039ea <__cvt+0x42>
 80039de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80039e2:	d100      	bne.n	80039e6 <__cvt+0x3e>
 80039e4:	3401      	adds	r4, #1
 80039e6:	2102      	movs	r1, #2
 80039e8:	e000      	b.n	80039ec <__cvt+0x44>
 80039ea:	2103      	movs	r1, #3
 80039ec:	ab03      	add	r3, sp, #12
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	ab02      	add	r3, sp, #8
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	ec47 6b10 	vmov	d0, r6, r7
 80039f8:	4653      	mov	r3, sl
 80039fa:	4622      	mov	r2, r4
 80039fc:	f000 fe68 	bl	80046d0 <_dtoa_r>
 8003a00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003a04:	4605      	mov	r5, r0
 8003a06:	d119      	bne.n	8003a3c <__cvt+0x94>
 8003a08:	f019 0f01 	tst.w	r9, #1
 8003a0c:	d00e      	beq.n	8003a2c <__cvt+0x84>
 8003a0e:	eb00 0904 	add.w	r9, r0, r4
 8003a12:	2200      	movs	r2, #0
 8003a14:	2300      	movs	r3, #0
 8003a16:	4630      	mov	r0, r6
 8003a18:	4639      	mov	r1, r7
 8003a1a:	f7fd f85d 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a1e:	b108      	cbz	r0, 8003a24 <__cvt+0x7c>
 8003a20:	f8cd 900c 	str.w	r9, [sp, #12]
 8003a24:	2230      	movs	r2, #48	@ 0x30
 8003a26:	9b03      	ldr	r3, [sp, #12]
 8003a28:	454b      	cmp	r3, r9
 8003a2a:	d31e      	bcc.n	8003a6a <__cvt+0xc2>
 8003a2c:	9b03      	ldr	r3, [sp, #12]
 8003a2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003a30:	1b5b      	subs	r3, r3, r5
 8003a32:	4628      	mov	r0, r5
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	b004      	add	sp, #16
 8003a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a40:	eb00 0904 	add.w	r9, r0, r4
 8003a44:	d1e5      	bne.n	8003a12 <__cvt+0x6a>
 8003a46:	7803      	ldrb	r3, [r0, #0]
 8003a48:	2b30      	cmp	r3, #48	@ 0x30
 8003a4a:	d10a      	bne.n	8003a62 <__cvt+0xba>
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2300      	movs	r3, #0
 8003a50:	4630      	mov	r0, r6
 8003a52:	4639      	mov	r1, r7
 8003a54:	f7fd f840 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a58:	b918      	cbnz	r0, 8003a62 <__cvt+0xba>
 8003a5a:	f1c4 0401 	rsb	r4, r4, #1
 8003a5e:	f8ca 4000 	str.w	r4, [sl]
 8003a62:	f8da 3000 	ldr.w	r3, [sl]
 8003a66:	4499      	add	r9, r3
 8003a68:	e7d3      	b.n	8003a12 <__cvt+0x6a>
 8003a6a:	1c59      	adds	r1, r3, #1
 8003a6c:	9103      	str	r1, [sp, #12]
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	e7d9      	b.n	8003a26 <__cvt+0x7e>

08003a72 <__exponent>:
 8003a72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a74:	2900      	cmp	r1, #0
 8003a76:	bfba      	itte	lt
 8003a78:	4249      	neglt	r1, r1
 8003a7a:	232d      	movlt	r3, #45	@ 0x2d
 8003a7c:	232b      	movge	r3, #43	@ 0x2b
 8003a7e:	2909      	cmp	r1, #9
 8003a80:	7002      	strb	r2, [r0, #0]
 8003a82:	7043      	strb	r3, [r0, #1]
 8003a84:	dd29      	ble.n	8003ada <__exponent+0x68>
 8003a86:	f10d 0307 	add.w	r3, sp, #7
 8003a8a:	461d      	mov	r5, r3
 8003a8c:	270a      	movs	r7, #10
 8003a8e:	461a      	mov	r2, r3
 8003a90:	fbb1 f6f7 	udiv	r6, r1, r7
 8003a94:	fb07 1416 	mls	r4, r7, r6, r1
 8003a98:	3430      	adds	r4, #48	@ 0x30
 8003a9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	2c63      	cmp	r4, #99	@ 0x63
 8003aa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003aa6:	4631      	mov	r1, r6
 8003aa8:	dcf1      	bgt.n	8003a8e <__exponent+0x1c>
 8003aaa:	3130      	adds	r1, #48	@ 0x30
 8003aac:	1e94      	subs	r4, r2, #2
 8003aae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003ab2:	1c41      	adds	r1, r0, #1
 8003ab4:	4623      	mov	r3, r4
 8003ab6:	42ab      	cmp	r3, r5
 8003ab8:	d30a      	bcc.n	8003ad0 <__exponent+0x5e>
 8003aba:	f10d 0309 	add.w	r3, sp, #9
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	42ac      	cmp	r4, r5
 8003ac2:	bf88      	it	hi
 8003ac4:	2300      	movhi	r3, #0
 8003ac6:	3302      	adds	r3, #2
 8003ac8:	4403      	add	r3, r0
 8003aca:	1a18      	subs	r0, r3, r0
 8003acc:	b003      	add	sp, #12
 8003ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003ad4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ad8:	e7ed      	b.n	8003ab6 <__exponent+0x44>
 8003ada:	2330      	movs	r3, #48	@ 0x30
 8003adc:	3130      	adds	r1, #48	@ 0x30
 8003ade:	7083      	strb	r3, [r0, #2]
 8003ae0:	70c1      	strb	r1, [r0, #3]
 8003ae2:	1d03      	adds	r3, r0, #4
 8003ae4:	e7f1      	b.n	8003aca <__exponent+0x58>
	...

08003ae8 <_printf_float>:
 8003ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aec:	b08d      	sub	sp, #52	@ 0x34
 8003aee:	460c      	mov	r4, r1
 8003af0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003af4:	4616      	mov	r6, r2
 8003af6:	461f      	mov	r7, r3
 8003af8:	4605      	mov	r5, r0
 8003afa:	f000 fcdb 	bl	80044b4 <_localeconv_r>
 8003afe:	6803      	ldr	r3, [r0, #0]
 8003b00:	9304      	str	r3, [sp, #16]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fc fbbc 	bl	8000280 <strlen>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b10:	9005      	str	r0, [sp, #20]
 8003b12:	3307      	adds	r3, #7
 8003b14:	f023 0307 	bic.w	r3, r3, #7
 8003b18:	f103 0208 	add.w	r2, r3, #8
 8003b1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003b20:	f8d4 b000 	ldr.w	fp, [r4]
 8003b24:	f8c8 2000 	str.w	r2, [r8]
 8003b28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003b30:	9307      	str	r3, [sp, #28]
 8003b32:	f8cd 8018 	str.w	r8, [sp, #24]
 8003b36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003b3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b3e:	4b9c      	ldr	r3, [pc, #624]	@ (8003db0 <_printf_float+0x2c8>)
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295
 8003b44:	f7fc fffa 	bl	8000b3c <__aeabi_dcmpun>
 8003b48:	bb70      	cbnz	r0, 8003ba8 <_printf_float+0xc0>
 8003b4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b4e:	4b98      	ldr	r3, [pc, #608]	@ (8003db0 <_printf_float+0x2c8>)
 8003b50:	f04f 32ff 	mov.w	r2, #4294967295
 8003b54:	f7fc ffd4 	bl	8000b00 <__aeabi_dcmple>
 8003b58:	bb30      	cbnz	r0, 8003ba8 <_printf_float+0xc0>
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	4640      	mov	r0, r8
 8003b60:	4649      	mov	r1, r9
 8003b62:	f7fc ffc3 	bl	8000aec <__aeabi_dcmplt>
 8003b66:	b110      	cbz	r0, 8003b6e <_printf_float+0x86>
 8003b68:	232d      	movs	r3, #45	@ 0x2d
 8003b6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b6e:	4a91      	ldr	r2, [pc, #580]	@ (8003db4 <_printf_float+0x2cc>)
 8003b70:	4b91      	ldr	r3, [pc, #580]	@ (8003db8 <_printf_float+0x2d0>)
 8003b72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003b76:	bf94      	ite	ls
 8003b78:	4690      	movls	r8, r2
 8003b7a:	4698      	movhi	r8, r3
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	6123      	str	r3, [r4, #16]
 8003b80:	f02b 0304 	bic.w	r3, fp, #4
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	f04f 0900 	mov.w	r9, #0
 8003b8a:	9700      	str	r7, [sp, #0]
 8003b8c:	4633      	mov	r3, r6
 8003b8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003b90:	4621      	mov	r1, r4
 8003b92:	4628      	mov	r0, r5
 8003b94:	f000 f9d2 	bl	8003f3c <_printf_common>
 8003b98:	3001      	adds	r0, #1
 8003b9a:	f040 808d 	bne.w	8003cb8 <_printf_float+0x1d0>
 8003b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba2:	b00d      	add	sp, #52	@ 0x34
 8003ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba8:	4642      	mov	r2, r8
 8003baa:	464b      	mov	r3, r9
 8003bac:	4640      	mov	r0, r8
 8003bae:	4649      	mov	r1, r9
 8003bb0:	f7fc ffc4 	bl	8000b3c <__aeabi_dcmpun>
 8003bb4:	b140      	cbz	r0, 8003bc8 <_printf_float+0xe0>
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bfbc      	itt	lt
 8003bbc:	232d      	movlt	r3, #45	@ 0x2d
 8003bbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003bc2:	4a7e      	ldr	r2, [pc, #504]	@ (8003dbc <_printf_float+0x2d4>)
 8003bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8003dc0 <_printf_float+0x2d8>)
 8003bc6:	e7d4      	b.n	8003b72 <_printf_float+0x8a>
 8003bc8:	6863      	ldr	r3, [r4, #4]
 8003bca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003bce:	9206      	str	r2, [sp, #24]
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	d13b      	bne.n	8003c4c <_printf_float+0x164>
 8003bd4:	2306      	movs	r3, #6
 8003bd6:	6063      	str	r3, [r4, #4]
 8003bd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6022      	str	r2, [r4, #0]
 8003be0:	9303      	str	r3, [sp, #12]
 8003be2:	ab0a      	add	r3, sp, #40	@ 0x28
 8003be4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003be8:	ab09      	add	r3, sp, #36	@ 0x24
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	6861      	ldr	r1, [r4, #4]
 8003bee:	ec49 8b10 	vmov	d0, r8, r9
 8003bf2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f7ff fed6 	bl	80039a8 <__cvt>
 8003bfc:	9b06      	ldr	r3, [sp, #24]
 8003bfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003c00:	2b47      	cmp	r3, #71	@ 0x47
 8003c02:	4680      	mov	r8, r0
 8003c04:	d129      	bne.n	8003c5a <_printf_float+0x172>
 8003c06:	1cc8      	adds	r0, r1, #3
 8003c08:	db02      	blt.n	8003c10 <_printf_float+0x128>
 8003c0a:	6863      	ldr	r3, [r4, #4]
 8003c0c:	4299      	cmp	r1, r3
 8003c0e:	dd41      	ble.n	8003c94 <_printf_float+0x1ac>
 8003c10:	f1aa 0a02 	sub.w	sl, sl, #2
 8003c14:	fa5f fa8a 	uxtb.w	sl, sl
 8003c18:	3901      	subs	r1, #1
 8003c1a:	4652      	mov	r2, sl
 8003c1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003c20:	9109      	str	r1, [sp, #36]	@ 0x24
 8003c22:	f7ff ff26 	bl	8003a72 <__exponent>
 8003c26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c28:	1813      	adds	r3, r2, r0
 8003c2a:	2a01      	cmp	r2, #1
 8003c2c:	4681      	mov	r9, r0
 8003c2e:	6123      	str	r3, [r4, #16]
 8003c30:	dc02      	bgt.n	8003c38 <_printf_float+0x150>
 8003c32:	6822      	ldr	r2, [r4, #0]
 8003c34:	07d2      	lsls	r2, r2, #31
 8003c36:	d501      	bpl.n	8003c3c <_printf_float+0x154>
 8003c38:	3301      	adds	r3, #1
 8003c3a:	6123      	str	r3, [r4, #16]
 8003c3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0a2      	beq.n	8003b8a <_printf_float+0xa2>
 8003c44:	232d      	movs	r3, #45	@ 0x2d
 8003c46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c4a:	e79e      	b.n	8003b8a <_printf_float+0xa2>
 8003c4c:	9a06      	ldr	r2, [sp, #24]
 8003c4e:	2a47      	cmp	r2, #71	@ 0x47
 8003c50:	d1c2      	bne.n	8003bd8 <_printf_float+0xf0>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1c0      	bne.n	8003bd8 <_printf_float+0xf0>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e7bd      	b.n	8003bd6 <_printf_float+0xee>
 8003c5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c5e:	d9db      	bls.n	8003c18 <_printf_float+0x130>
 8003c60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003c64:	d118      	bne.n	8003c98 <_printf_float+0x1b0>
 8003c66:	2900      	cmp	r1, #0
 8003c68:	6863      	ldr	r3, [r4, #4]
 8003c6a:	dd0b      	ble.n	8003c84 <_printf_float+0x19c>
 8003c6c:	6121      	str	r1, [r4, #16]
 8003c6e:	b913      	cbnz	r3, 8003c76 <_printf_float+0x18e>
 8003c70:	6822      	ldr	r2, [r4, #0]
 8003c72:	07d0      	lsls	r0, r2, #31
 8003c74:	d502      	bpl.n	8003c7c <_printf_float+0x194>
 8003c76:	3301      	adds	r3, #1
 8003c78:	440b      	add	r3, r1
 8003c7a:	6123      	str	r3, [r4, #16]
 8003c7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003c7e:	f04f 0900 	mov.w	r9, #0
 8003c82:	e7db      	b.n	8003c3c <_printf_float+0x154>
 8003c84:	b913      	cbnz	r3, 8003c8c <_printf_float+0x1a4>
 8003c86:	6822      	ldr	r2, [r4, #0]
 8003c88:	07d2      	lsls	r2, r2, #31
 8003c8a:	d501      	bpl.n	8003c90 <_printf_float+0x1a8>
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	e7f4      	b.n	8003c7a <_printf_float+0x192>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e7f2      	b.n	8003c7a <_printf_float+0x192>
 8003c94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c9a:	4299      	cmp	r1, r3
 8003c9c:	db05      	blt.n	8003caa <_printf_float+0x1c2>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	6121      	str	r1, [r4, #16]
 8003ca2:	07d8      	lsls	r0, r3, #31
 8003ca4:	d5ea      	bpl.n	8003c7c <_printf_float+0x194>
 8003ca6:	1c4b      	adds	r3, r1, #1
 8003ca8:	e7e7      	b.n	8003c7a <_printf_float+0x192>
 8003caa:	2900      	cmp	r1, #0
 8003cac:	bfd4      	ite	le
 8003cae:	f1c1 0202 	rsble	r2, r1, #2
 8003cb2:	2201      	movgt	r2, #1
 8003cb4:	4413      	add	r3, r2
 8003cb6:	e7e0      	b.n	8003c7a <_printf_float+0x192>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	055a      	lsls	r2, r3, #21
 8003cbc:	d407      	bmi.n	8003cce <_printf_float+0x1e6>
 8003cbe:	6923      	ldr	r3, [r4, #16]
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	4631      	mov	r1, r6
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	47b8      	blx	r7
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d12b      	bne.n	8003d24 <_printf_float+0x23c>
 8003ccc:	e767      	b.n	8003b9e <_printf_float+0xb6>
 8003cce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003cd2:	f240 80dd 	bls.w	8003e90 <_printf_float+0x3a8>
 8003cd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f7fc fefb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d033      	beq.n	8003d4e <_printf_float+0x266>
 8003ce6:	4a37      	ldr	r2, [pc, #220]	@ (8003dc4 <_printf_float+0x2dc>)
 8003ce8:	2301      	movs	r3, #1
 8003cea:	4631      	mov	r1, r6
 8003cec:	4628      	mov	r0, r5
 8003cee:	47b8      	blx	r7
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	f43f af54 	beq.w	8003b9e <_printf_float+0xb6>
 8003cf6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003cfa:	4543      	cmp	r3, r8
 8003cfc:	db02      	blt.n	8003d04 <_printf_float+0x21c>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	07d8      	lsls	r0, r3, #31
 8003d02:	d50f      	bpl.n	8003d24 <_printf_float+0x23c>
 8003d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d08:	4631      	mov	r1, r6
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	47b8      	blx	r7
 8003d0e:	3001      	adds	r0, #1
 8003d10:	f43f af45 	beq.w	8003b9e <_printf_float+0xb6>
 8003d14:	f04f 0900 	mov.w	r9, #0
 8003d18:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d1c:	f104 0a1a 	add.w	sl, r4, #26
 8003d20:	45c8      	cmp	r8, r9
 8003d22:	dc09      	bgt.n	8003d38 <_printf_float+0x250>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	079b      	lsls	r3, r3, #30
 8003d28:	f100 8103 	bmi.w	8003f32 <_printf_float+0x44a>
 8003d2c:	68e0      	ldr	r0, [r4, #12]
 8003d2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003d30:	4298      	cmp	r0, r3
 8003d32:	bfb8      	it	lt
 8003d34:	4618      	movlt	r0, r3
 8003d36:	e734      	b.n	8003ba2 <_printf_float+0xba>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	4652      	mov	r2, sl
 8003d3c:	4631      	mov	r1, r6
 8003d3e:	4628      	mov	r0, r5
 8003d40:	47b8      	blx	r7
 8003d42:	3001      	adds	r0, #1
 8003d44:	f43f af2b 	beq.w	8003b9e <_printf_float+0xb6>
 8003d48:	f109 0901 	add.w	r9, r9, #1
 8003d4c:	e7e8      	b.n	8003d20 <_printf_float+0x238>
 8003d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	dc39      	bgt.n	8003dc8 <_printf_float+0x2e0>
 8003d54:	4a1b      	ldr	r2, [pc, #108]	@ (8003dc4 <_printf_float+0x2dc>)
 8003d56:	2301      	movs	r3, #1
 8003d58:	4631      	mov	r1, r6
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	47b8      	blx	r7
 8003d5e:	3001      	adds	r0, #1
 8003d60:	f43f af1d 	beq.w	8003b9e <_printf_float+0xb6>
 8003d64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003d68:	ea59 0303 	orrs.w	r3, r9, r3
 8003d6c:	d102      	bne.n	8003d74 <_printf_float+0x28c>
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	07d9      	lsls	r1, r3, #31
 8003d72:	d5d7      	bpl.n	8003d24 <_printf_float+0x23c>
 8003d74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d78:	4631      	mov	r1, r6
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	47b8      	blx	r7
 8003d7e:	3001      	adds	r0, #1
 8003d80:	f43f af0d 	beq.w	8003b9e <_printf_float+0xb6>
 8003d84:	f04f 0a00 	mov.w	sl, #0
 8003d88:	f104 0b1a 	add.w	fp, r4, #26
 8003d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d8e:	425b      	negs	r3, r3
 8003d90:	4553      	cmp	r3, sl
 8003d92:	dc01      	bgt.n	8003d98 <_printf_float+0x2b0>
 8003d94:	464b      	mov	r3, r9
 8003d96:	e793      	b.n	8003cc0 <_printf_float+0x1d8>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	465a      	mov	r2, fp
 8003d9c:	4631      	mov	r1, r6
 8003d9e:	4628      	mov	r0, r5
 8003da0:	47b8      	blx	r7
 8003da2:	3001      	adds	r0, #1
 8003da4:	f43f aefb 	beq.w	8003b9e <_printf_float+0xb6>
 8003da8:	f10a 0a01 	add.w	sl, sl, #1
 8003dac:	e7ee      	b.n	8003d8c <_printf_float+0x2a4>
 8003dae:	bf00      	nop
 8003db0:	7fefffff 	.word	0x7fefffff
 8003db4:	080066b0 	.word	0x080066b0
 8003db8:	080066b4 	.word	0x080066b4
 8003dbc:	080066b8 	.word	0x080066b8
 8003dc0:	080066bc 	.word	0x080066bc
 8003dc4:	080066c0 	.word	0x080066c0
 8003dc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003dca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003dce:	4553      	cmp	r3, sl
 8003dd0:	bfa8      	it	ge
 8003dd2:	4653      	movge	r3, sl
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	4699      	mov	r9, r3
 8003dd8:	dc36      	bgt.n	8003e48 <_printf_float+0x360>
 8003dda:	f04f 0b00 	mov.w	fp, #0
 8003dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003de2:	f104 021a 	add.w	r2, r4, #26
 8003de6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003de8:	9306      	str	r3, [sp, #24]
 8003dea:	eba3 0309 	sub.w	r3, r3, r9
 8003dee:	455b      	cmp	r3, fp
 8003df0:	dc31      	bgt.n	8003e56 <_printf_float+0x36e>
 8003df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003df4:	459a      	cmp	sl, r3
 8003df6:	dc3a      	bgt.n	8003e6e <_printf_float+0x386>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	07da      	lsls	r2, r3, #31
 8003dfc:	d437      	bmi.n	8003e6e <_printf_float+0x386>
 8003dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e00:	ebaa 0903 	sub.w	r9, sl, r3
 8003e04:	9b06      	ldr	r3, [sp, #24]
 8003e06:	ebaa 0303 	sub.w	r3, sl, r3
 8003e0a:	4599      	cmp	r9, r3
 8003e0c:	bfa8      	it	ge
 8003e0e:	4699      	movge	r9, r3
 8003e10:	f1b9 0f00 	cmp.w	r9, #0
 8003e14:	dc33      	bgt.n	8003e7e <_printf_float+0x396>
 8003e16:	f04f 0800 	mov.w	r8, #0
 8003e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e1e:	f104 0b1a 	add.w	fp, r4, #26
 8003e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e24:	ebaa 0303 	sub.w	r3, sl, r3
 8003e28:	eba3 0309 	sub.w	r3, r3, r9
 8003e2c:	4543      	cmp	r3, r8
 8003e2e:	f77f af79 	ble.w	8003d24 <_printf_float+0x23c>
 8003e32:	2301      	movs	r3, #1
 8003e34:	465a      	mov	r2, fp
 8003e36:	4631      	mov	r1, r6
 8003e38:	4628      	mov	r0, r5
 8003e3a:	47b8      	blx	r7
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	f43f aeae 	beq.w	8003b9e <_printf_float+0xb6>
 8003e42:	f108 0801 	add.w	r8, r8, #1
 8003e46:	e7ec      	b.n	8003e22 <_printf_float+0x33a>
 8003e48:	4642      	mov	r2, r8
 8003e4a:	4631      	mov	r1, r6
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	47b8      	blx	r7
 8003e50:	3001      	adds	r0, #1
 8003e52:	d1c2      	bne.n	8003dda <_printf_float+0x2f2>
 8003e54:	e6a3      	b.n	8003b9e <_printf_float+0xb6>
 8003e56:	2301      	movs	r3, #1
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	9206      	str	r2, [sp, #24]
 8003e5e:	47b8      	blx	r7
 8003e60:	3001      	adds	r0, #1
 8003e62:	f43f ae9c 	beq.w	8003b9e <_printf_float+0xb6>
 8003e66:	9a06      	ldr	r2, [sp, #24]
 8003e68:	f10b 0b01 	add.w	fp, fp, #1
 8003e6c:	e7bb      	b.n	8003de6 <_printf_float+0x2fe>
 8003e6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e72:	4631      	mov	r1, r6
 8003e74:	4628      	mov	r0, r5
 8003e76:	47b8      	blx	r7
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d1c0      	bne.n	8003dfe <_printf_float+0x316>
 8003e7c:	e68f      	b.n	8003b9e <_printf_float+0xb6>
 8003e7e:	9a06      	ldr	r2, [sp, #24]
 8003e80:	464b      	mov	r3, r9
 8003e82:	4442      	add	r2, r8
 8003e84:	4631      	mov	r1, r6
 8003e86:	4628      	mov	r0, r5
 8003e88:	47b8      	blx	r7
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d1c3      	bne.n	8003e16 <_printf_float+0x32e>
 8003e8e:	e686      	b.n	8003b9e <_printf_float+0xb6>
 8003e90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003e94:	f1ba 0f01 	cmp.w	sl, #1
 8003e98:	dc01      	bgt.n	8003e9e <_printf_float+0x3b6>
 8003e9a:	07db      	lsls	r3, r3, #31
 8003e9c:	d536      	bpl.n	8003f0c <_printf_float+0x424>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	47b8      	blx	r7
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	f43f ae78 	beq.w	8003b9e <_printf_float+0xb6>
 8003eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003eb2:	4631      	mov	r1, r6
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	47b8      	blx	r7
 8003eb8:	3001      	adds	r0, #1
 8003eba:	f43f ae70 	beq.w	8003b9e <_printf_float+0xb6>
 8003ebe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003eca:	f7fc fe05 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ece:	b9c0      	cbnz	r0, 8003f02 <_printf_float+0x41a>
 8003ed0:	4653      	mov	r3, sl
 8003ed2:	f108 0201 	add.w	r2, r8, #1
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	4628      	mov	r0, r5
 8003eda:	47b8      	blx	r7
 8003edc:	3001      	adds	r0, #1
 8003ede:	d10c      	bne.n	8003efa <_printf_float+0x412>
 8003ee0:	e65d      	b.n	8003b9e <_printf_float+0xb6>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	465a      	mov	r2, fp
 8003ee6:	4631      	mov	r1, r6
 8003ee8:	4628      	mov	r0, r5
 8003eea:	47b8      	blx	r7
 8003eec:	3001      	adds	r0, #1
 8003eee:	f43f ae56 	beq.w	8003b9e <_printf_float+0xb6>
 8003ef2:	f108 0801 	add.w	r8, r8, #1
 8003ef6:	45d0      	cmp	r8, sl
 8003ef8:	dbf3      	blt.n	8003ee2 <_printf_float+0x3fa>
 8003efa:	464b      	mov	r3, r9
 8003efc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003f00:	e6df      	b.n	8003cc2 <_printf_float+0x1da>
 8003f02:	f04f 0800 	mov.w	r8, #0
 8003f06:	f104 0b1a 	add.w	fp, r4, #26
 8003f0a:	e7f4      	b.n	8003ef6 <_printf_float+0x40e>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	4642      	mov	r2, r8
 8003f10:	e7e1      	b.n	8003ed6 <_printf_float+0x3ee>
 8003f12:	2301      	movs	r3, #1
 8003f14:	464a      	mov	r2, r9
 8003f16:	4631      	mov	r1, r6
 8003f18:	4628      	mov	r0, r5
 8003f1a:	47b8      	blx	r7
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	f43f ae3e 	beq.w	8003b9e <_printf_float+0xb6>
 8003f22:	f108 0801 	add.w	r8, r8, #1
 8003f26:	68e3      	ldr	r3, [r4, #12]
 8003f28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003f2a:	1a5b      	subs	r3, r3, r1
 8003f2c:	4543      	cmp	r3, r8
 8003f2e:	dcf0      	bgt.n	8003f12 <_printf_float+0x42a>
 8003f30:	e6fc      	b.n	8003d2c <_printf_float+0x244>
 8003f32:	f04f 0800 	mov.w	r8, #0
 8003f36:	f104 0919 	add.w	r9, r4, #25
 8003f3a:	e7f4      	b.n	8003f26 <_printf_float+0x43e>

08003f3c <_printf_common>:
 8003f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f40:	4616      	mov	r6, r2
 8003f42:	4698      	mov	r8, r3
 8003f44:	688a      	ldr	r2, [r1, #8]
 8003f46:	690b      	ldr	r3, [r1, #16]
 8003f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	bfb8      	it	lt
 8003f50:	4613      	movlt	r3, r2
 8003f52:	6033      	str	r3, [r6, #0]
 8003f54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f58:	4607      	mov	r7, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	b10a      	cbz	r2, 8003f62 <_printf_common+0x26>
 8003f5e:	3301      	adds	r3, #1
 8003f60:	6033      	str	r3, [r6, #0]
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	0699      	lsls	r1, r3, #26
 8003f66:	bf42      	ittt	mi
 8003f68:	6833      	ldrmi	r3, [r6, #0]
 8003f6a:	3302      	addmi	r3, #2
 8003f6c:	6033      	strmi	r3, [r6, #0]
 8003f6e:	6825      	ldr	r5, [r4, #0]
 8003f70:	f015 0506 	ands.w	r5, r5, #6
 8003f74:	d106      	bne.n	8003f84 <_printf_common+0x48>
 8003f76:	f104 0a19 	add.w	sl, r4, #25
 8003f7a:	68e3      	ldr	r3, [r4, #12]
 8003f7c:	6832      	ldr	r2, [r6, #0]
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	42ab      	cmp	r3, r5
 8003f82:	dc26      	bgt.n	8003fd2 <_printf_common+0x96>
 8003f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f88:	6822      	ldr	r2, [r4, #0]
 8003f8a:	3b00      	subs	r3, #0
 8003f8c:	bf18      	it	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	0692      	lsls	r2, r2, #26
 8003f92:	d42b      	bmi.n	8003fec <_printf_common+0xb0>
 8003f94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f98:	4641      	mov	r1, r8
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	47c8      	blx	r9
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	d01e      	beq.n	8003fe0 <_printf_common+0xa4>
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	6922      	ldr	r2, [r4, #16]
 8003fa6:	f003 0306 	and.w	r3, r3, #6
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	bf02      	ittt	eq
 8003fae:	68e5      	ldreq	r5, [r4, #12]
 8003fb0:	6833      	ldreq	r3, [r6, #0]
 8003fb2:	1aed      	subeq	r5, r5, r3
 8003fb4:	68a3      	ldr	r3, [r4, #8]
 8003fb6:	bf0c      	ite	eq
 8003fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fbc:	2500      	movne	r5, #0
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	bfc4      	itt	gt
 8003fc2:	1a9b      	subgt	r3, r3, r2
 8003fc4:	18ed      	addgt	r5, r5, r3
 8003fc6:	2600      	movs	r6, #0
 8003fc8:	341a      	adds	r4, #26
 8003fca:	42b5      	cmp	r5, r6
 8003fcc:	d11a      	bne.n	8004004 <_printf_common+0xc8>
 8003fce:	2000      	movs	r0, #0
 8003fd0:	e008      	b.n	8003fe4 <_printf_common+0xa8>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4652      	mov	r2, sl
 8003fd6:	4641      	mov	r1, r8
 8003fd8:	4638      	mov	r0, r7
 8003fda:	47c8      	blx	r9
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d103      	bne.n	8003fe8 <_printf_common+0xac>
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe8:	3501      	adds	r5, #1
 8003fea:	e7c6      	b.n	8003f7a <_printf_common+0x3e>
 8003fec:	18e1      	adds	r1, r4, r3
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	2030      	movs	r0, #48	@ 0x30
 8003ff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ff6:	4422      	add	r2, r4
 8003ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ffc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004000:	3302      	adds	r3, #2
 8004002:	e7c7      	b.n	8003f94 <_printf_common+0x58>
 8004004:	2301      	movs	r3, #1
 8004006:	4622      	mov	r2, r4
 8004008:	4641      	mov	r1, r8
 800400a:	4638      	mov	r0, r7
 800400c:	47c8      	blx	r9
 800400e:	3001      	adds	r0, #1
 8004010:	d0e6      	beq.n	8003fe0 <_printf_common+0xa4>
 8004012:	3601      	adds	r6, #1
 8004014:	e7d9      	b.n	8003fca <_printf_common+0x8e>
	...

08004018 <_printf_i>:
 8004018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800401c:	7e0f      	ldrb	r7, [r1, #24]
 800401e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004020:	2f78      	cmp	r7, #120	@ 0x78
 8004022:	4691      	mov	r9, r2
 8004024:	4680      	mov	r8, r0
 8004026:	460c      	mov	r4, r1
 8004028:	469a      	mov	sl, r3
 800402a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800402e:	d807      	bhi.n	8004040 <_printf_i+0x28>
 8004030:	2f62      	cmp	r7, #98	@ 0x62
 8004032:	d80a      	bhi.n	800404a <_printf_i+0x32>
 8004034:	2f00      	cmp	r7, #0
 8004036:	f000 80d2 	beq.w	80041de <_printf_i+0x1c6>
 800403a:	2f58      	cmp	r7, #88	@ 0x58
 800403c:	f000 80b9 	beq.w	80041b2 <_printf_i+0x19a>
 8004040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004048:	e03a      	b.n	80040c0 <_printf_i+0xa8>
 800404a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800404e:	2b15      	cmp	r3, #21
 8004050:	d8f6      	bhi.n	8004040 <_printf_i+0x28>
 8004052:	a101      	add	r1, pc, #4	@ (adr r1, 8004058 <_printf_i+0x40>)
 8004054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004058:	080040b1 	.word	0x080040b1
 800405c:	080040c5 	.word	0x080040c5
 8004060:	08004041 	.word	0x08004041
 8004064:	08004041 	.word	0x08004041
 8004068:	08004041 	.word	0x08004041
 800406c:	08004041 	.word	0x08004041
 8004070:	080040c5 	.word	0x080040c5
 8004074:	08004041 	.word	0x08004041
 8004078:	08004041 	.word	0x08004041
 800407c:	08004041 	.word	0x08004041
 8004080:	08004041 	.word	0x08004041
 8004084:	080041c5 	.word	0x080041c5
 8004088:	080040ef 	.word	0x080040ef
 800408c:	0800417f 	.word	0x0800417f
 8004090:	08004041 	.word	0x08004041
 8004094:	08004041 	.word	0x08004041
 8004098:	080041e7 	.word	0x080041e7
 800409c:	08004041 	.word	0x08004041
 80040a0:	080040ef 	.word	0x080040ef
 80040a4:	08004041 	.word	0x08004041
 80040a8:	08004041 	.word	0x08004041
 80040ac:	08004187 	.word	0x08004187
 80040b0:	6833      	ldr	r3, [r6, #0]
 80040b2:	1d1a      	adds	r2, r3, #4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6032      	str	r2, [r6, #0]
 80040b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040c0:	2301      	movs	r3, #1
 80040c2:	e09d      	b.n	8004200 <_printf_i+0x1e8>
 80040c4:	6833      	ldr	r3, [r6, #0]
 80040c6:	6820      	ldr	r0, [r4, #0]
 80040c8:	1d19      	adds	r1, r3, #4
 80040ca:	6031      	str	r1, [r6, #0]
 80040cc:	0606      	lsls	r6, r0, #24
 80040ce:	d501      	bpl.n	80040d4 <_printf_i+0xbc>
 80040d0:	681d      	ldr	r5, [r3, #0]
 80040d2:	e003      	b.n	80040dc <_printf_i+0xc4>
 80040d4:	0645      	lsls	r5, r0, #25
 80040d6:	d5fb      	bpl.n	80040d0 <_printf_i+0xb8>
 80040d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040dc:	2d00      	cmp	r5, #0
 80040de:	da03      	bge.n	80040e8 <_printf_i+0xd0>
 80040e0:	232d      	movs	r3, #45	@ 0x2d
 80040e2:	426d      	negs	r5, r5
 80040e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040e8:	4859      	ldr	r0, [pc, #356]	@ (8004250 <_printf_i+0x238>)
 80040ea:	230a      	movs	r3, #10
 80040ec:	e011      	b.n	8004112 <_printf_i+0xfa>
 80040ee:	6821      	ldr	r1, [r4, #0]
 80040f0:	6833      	ldr	r3, [r6, #0]
 80040f2:	0608      	lsls	r0, r1, #24
 80040f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80040f8:	d402      	bmi.n	8004100 <_printf_i+0xe8>
 80040fa:	0649      	lsls	r1, r1, #25
 80040fc:	bf48      	it	mi
 80040fe:	b2ad      	uxthmi	r5, r5
 8004100:	2f6f      	cmp	r7, #111	@ 0x6f
 8004102:	4853      	ldr	r0, [pc, #332]	@ (8004250 <_printf_i+0x238>)
 8004104:	6033      	str	r3, [r6, #0]
 8004106:	bf14      	ite	ne
 8004108:	230a      	movne	r3, #10
 800410a:	2308      	moveq	r3, #8
 800410c:	2100      	movs	r1, #0
 800410e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004112:	6866      	ldr	r6, [r4, #4]
 8004114:	60a6      	str	r6, [r4, #8]
 8004116:	2e00      	cmp	r6, #0
 8004118:	bfa2      	ittt	ge
 800411a:	6821      	ldrge	r1, [r4, #0]
 800411c:	f021 0104 	bicge.w	r1, r1, #4
 8004120:	6021      	strge	r1, [r4, #0]
 8004122:	b90d      	cbnz	r5, 8004128 <_printf_i+0x110>
 8004124:	2e00      	cmp	r6, #0
 8004126:	d04b      	beq.n	80041c0 <_printf_i+0x1a8>
 8004128:	4616      	mov	r6, r2
 800412a:	fbb5 f1f3 	udiv	r1, r5, r3
 800412e:	fb03 5711 	mls	r7, r3, r1, r5
 8004132:	5dc7      	ldrb	r7, [r0, r7]
 8004134:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004138:	462f      	mov	r7, r5
 800413a:	42bb      	cmp	r3, r7
 800413c:	460d      	mov	r5, r1
 800413e:	d9f4      	bls.n	800412a <_printf_i+0x112>
 8004140:	2b08      	cmp	r3, #8
 8004142:	d10b      	bne.n	800415c <_printf_i+0x144>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	07df      	lsls	r7, r3, #31
 8004148:	d508      	bpl.n	800415c <_printf_i+0x144>
 800414a:	6923      	ldr	r3, [r4, #16]
 800414c:	6861      	ldr	r1, [r4, #4]
 800414e:	4299      	cmp	r1, r3
 8004150:	bfde      	ittt	le
 8004152:	2330      	movle	r3, #48	@ 0x30
 8004154:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004158:	f106 36ff 	addle.w	r6, r6, #4294967295
 800415c:	1b92      	subs	r2, r2, r6
 800415e:	6122      	str	r2, [r4, #16]
 8004160:	f8cd a000 	str.w	sl, [sp]
 8004164:	464b      	mov	r3, r9
 8004166:	aa03      	add	r2, sp, #12
 8004168:	4621      	mov	r1, r4
 800416a:	4640      	mov	r0, r8
 800416c:	f7ff fee6 	bl	8003f3c <_printf_common>
 8004170:	3001      	adds	r0, #1
 8004172:	d14a      	bne.n	800420a <_printf_i+0x1f2>
 8004174:	f04f 30ff 	mov.w	r0, #4294967295
 8004178:	b004      	add	sp, #16
 800417a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	f043 0320 	orr.w	r3, r3, #32
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	4833      	ldr	r0, [pc, #204]	@ (8004254 <_printf_i+0x23c>)
 8004188:	2778      	movs	r7, #120	@ 0x78
 800418a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	6831      	ldr	r1, [r6, #0]
 8004192:	061f      	lsls	r7, r3, #24
 8004194:	f851 5b04 	ldr.w	r5, [r1], #4
 8004198:	d402      	bmi.n	80041a0 <_printf_i+0x188>
 800419a:	065f      	lsls	r7, r3, #25
 800419c:	bf48      	it	mi
 800419e:	b2ad      	uxthmi	r5, r5
 80041a0:	6031      	str	r1, [r6, #0]
 80041a2:	07d9      	lsls	r1, r3, #31
 80041a4:	bf44      	itt	mi
 80041a6:	f043 0320 	orrmi.w	r3, r3, #32
 80041aa:	6023      	strmi	r3, [r4, #0]
 80041ac:	b11d      	cbz	r5, 80041b6 <_printf_i+0x19e>
 80041ae:	2310      	movs	r3, #16
 80041b0:	e7ac      	b.n	800410c <_printf_i+0xf4>
 80041b2:	4827      	ldr	r0, [pc, #156]	@ (8004250 <_printf_i+0x238>)
 80041b4:	e7e9      	b.n	800418a <_printf_i+0x172>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	f023 0320 	bic.w	r3, r3, #32
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	e7f6      	b.n	80041ae <_printf_i+0x196>
 80041c0:	4616      	mov	r6, r2
 80041c2:	e7bd      	b.n	8004140 <_printf_i+0x128>
 80041c4:	6833      	ldr	r3, [r6, #0]
 80041c6:	6825      	ldr	r5, [r4, #0]
 80041c8:	6961      	ldr	r1, [r4, #20]
 80041ca:	1d18      	adds	r0, r3, #4
 80041cc:	6030      	str	r0, [r6, #0]
 80041ce:	062e      	lsls	r6, r5, #24
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	d501      	bpl.n	80041d8 <_printf_i+0x1c0>
 80041d4:	6019      	str	r1, [r3, #0]
 80041d6:	e002      	b.n	80041de <_printf_i+0x1c6>
 80041d8:	0668      	lsls	r0, r5, #25
 80041da:	d5fb      	bpl.n	80041d4 <_printf_i+0x1bc>
 80041dc:	8019      	strh	r1, [r3, #0]
 80041de:	2300      	movs	r3, #0
 80041e0:	6123      	str	r3, [r4, #16]
 80041e2:	4616      	mov	r6, r2
 80041e4:	e7bc      	b.n	8004160 <_printf_i+0x148>
 80041e6:	6833      	ldr	r3, [r6, #0]
 80041e8:	1d1a      	adds	r2, r3, #4
 80041ea:	6032      	str	r2, [r6, #0]
 80041ec:	681e      	ldr	r6, [r3, #0]
 80041ee:	6862      	ldr	r2, [r4, #4]
 80041f0:	2100      	movs	r1, #0
 80041f2:	4630      	mov	r0, r6
 80041f4:	f7fb fff4 	bl	80001e0 <memchr>
 80041f8:	b108      	cbz	r0, 80041fe <_printf_i+0x1e6>
 80041fa:	1b80      	subs	r0, r0, r6
 80041fc:	6060      	str	r0, [r4, #4]
 80041fe:	6863      	ldr	r3, [r4, #4]
 8004200:	6123      	str	r3, [r4, #16]
 8004202:	2300      	movs	r3, #0
 8004204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004208:	e7aa      	b.n	8004160 <_printf_i+0x148>
 800420a:	6923      	ldr	r3, [r4, #16]
 800420c:	4632      	mov	r2, r6
 800420e:	4649      	mov	r1, r9
 8004210:	4640      	mov	r0, r8
 8004212:	47d0      	blx	sl
 8004214:	3001      	adds	r0, #1
 8004216:	d0ad      	beq.n	8004174 <_printf_i+0x15c>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	079b      	lsls	r3, r3, #30
 800421c:	d413      	bmi.n	8004246 <_printf_i+0x22e>
 800421e:	68e0      	ldr	r0, [r4, #12]
 8004220:	9b03      	ldr	r3, [sp, #12]
 8004222:	4298      	cmp	r0, r3
 8004224:	bfb8      	it	lt
 8004226:	4618      	movlt	r0, r3
 8004228:	e7a6      	b.n	8004178 <_printf_i+0x160>
 800422a:	2301      	movs	r3, #1
 800422c:	4632      	mov	r2, r6
 800422e:	4649      	mov	r1, r9
 8004230:	4640      	mov	r0, r8
 8004232:	47d0      	blx	sl
 8004234:	3001      	adds	r0, #1
 8004236:	d09d      	beq.n	8004174 <_printf_i+0x15c>
 8004238:	3501      	adds	r5, #1
 800423a:	68e3      	ldr	r3, [r4, #12]
 800423c:	9903      	ldr	r1, [sp, #12]
 800423e:	1a5b      	subs	r3, r3, r1
 8004240:	42ab      	cmp	r3, r5
 8004242:	dcf2      	bgt.n	800422a <_printf_i+0x212>
 8004244:	e7eb      	b.n	800421e <_printf_i+0x206>
 8004246:	2500      	movs	r5, #0
 8004248:	f104 0619 	add.w	r6, r4, #25
 800424c:	e7f5      	b.n	800423a <_printf_i+0x222>
 800424e:	bf00      	nop
 8004250:	080066c2 	.word	0x080066c2
 8004254:	080066d3 	.word	0x080066d3

08004258 <std>:
 8004258:	2300      	movs	r3, #0
 800425a:	b510      	push	{r4, lr}
 800425c:	4604      	mov	r4, r0
 800425e:	e9c0 3300 	strd	r3, r3, [r0]
 8004262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004266:	6083      	str	r3, [r0, #8]
 8004268:	8181      	strh	r1, [r0, #12]
 800426a:	6643      	str	r3, [r0, #100]	@ 0x64
 800426c:	81c2      	strh	r2, [r0, #14]
 800426e:	6183      	str	r3, [r0, #24]
 8004270:	4619      	mov	r1, r3
 8004272:	2208      	movs	r2, #8
 8004274:	305c      	adds	r0, #92	@ 0x5c
 8004276:	f000 f914 	bl	80044a2 <memset>
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <std+0x58>)
 800427c:	6263      	str	r3, [r4, #36]	@ 0x24
 800427e:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <std+0x5c>)
 8004280:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004282:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <std+0x60>)
 8004284:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004286:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <std+0x64>)
 8004288:	6323      	str	r3, [r4, #48]	@ 0x30
 800428a:	4b0d      	ldr	r3, [pc, #52]	@ (80042c0 <std+0x68>)
 800428c:	6224      	str	r4, [r4, #32]
 800428e:	429c      	cmp	r4, r3
 8004290:	d006      	beq.n	80042a0 <std+0x48>
 8004292:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004296:	4294      	cmp	r4, r2
 8004298:	d002      	beq.n	80042a0 <std+0x48>
 800429a:	33d0      	adds	r3, #208	@ 0xd0
 800429c:	429c      	cmp	r4, r3
 800429e:	d105      	bne.n	80042ac <std+0x54>
 80042a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a8:	f000 b978 	b.w	800459c <__retarget_lock_init_recursive>
 80042ac:	bd10      	pop	{r4, pc}
 80042ae:	bf00      	nop
 80042b0:	0800441d 	.word	0x0800441d
 80042b4:	0800443f 	.word	0x0800443f
 80042b8:	08004477 	.word	0x08004477
 80042bc:	0800449b 	.word	0x0800449b
 80042c0:	20000288 	.word	0x20000288

080042c4 <stdio_exit_handler>:
 80042c4:	4a02      	ldr	r2, [pc, #8]	@ (80042d0 <stdio_exit_handler+0xc>)
 80042c6:	4903      	ldr	r1, [pc, #12]	@ (80042d4 <stdio_exit_handler+0x10>)
 80042c8:	4803      	ldr	r0, [pc, #12]	@ (80042d8 <stdio_exit_handler+0x14>)
 80042ca:	f000 b869 	b.w	80043a0 <_fwalk_sglue>
 80042ce:	bf00      	nop
 80042d0:	2000000c 	.word	0x2000000c
 80042d4:	08005f15 	.word	0x08005f15
 80042d8:	2000001c 	.word	0x2000001c

080042dc <cleanup_stdio>:
 80042dc:	6841      	ldr	r1, [r0, #4]
 80042de:	4b0c      	ldr	r3, [pc, #48]	@ (8004310 <cleanup_stdio+0x34>)
 80042e0:	4299      	cmp	r1, r3
 80042e2:	b510      	push	{r4, lr}
 80042e4:	4604      	mov	r4, r0
 80042e6:	d001      	beq.n	80042ec <cleanup_stdio+0x10>
 80042e8:	f001 fe14 	bl	8005f14 <_fflush_r>
 80042ec:	68a1      	ldr	r1, [r4, #8]
 80042ee:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <cleanup_stdio+0x38>)
 80042f0:	4299      	cmp	r1, r3
 80042f2:	d002      	beq.n	80042fa <cleanup_stdio+0x1e>
 80042f4:	4620      	mov	r0, r4
 80042f6:	f001 fe0d 	bl	8005f14 <_fflush_r>
 80042fa:	68e1      	ldr	r1, [r4, #12]
 80042fc:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <cleanup_stdio+0x3c>)
 80042fe:	4299      	cmp	r1, r3
 8004300:	d004      	beq.n	800430c <cleanup_stdio+0x30>
 8004302:	4620      	mov	r0, r4
 8004304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004308:	f001 be04 	b.w	8005f14 <_fflush_r>
 800430c:	bd10      	pop	{r4, pc}
 800430e:	bf00      	nop
 8004310:	20000288 	.word	0x20000288
 8004314:	200002f0 	.word	0x200002f0
 8004318:	20000358 	.word	0x20000358

0800431c <global_stdio_init.part.0>:
 800431c:	b510      	push	{r4, lr}
 800431e:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <global_stdio_init.part.0+0x30>)
 8004320:	4c0b      	ldr	r4, [pc, #44]	@ (8004350 <global_stdio_init.part.0+0x34>)
 8004322:	4a0c      	ldr	r2, [pc, #48]	@ (8004354 <global_stdio_init.part.0+0x38>)
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	4620      	mov	r0, r4
 8004328:	2200      	movs	r2, #0
 800432a:	2104      	movs	r1, #4
 800432c:	f7ff ff94 	bl	8004258 <std>
 8004330:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004334:	2201      	movs	r2, #1
 8004336:	2109      	movs	r1, #9
 8004338:	f7ff ff8e 	bl	8004258 <std>
 800433c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004340:	2202      	movs	r2, #2
 8004342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004346:	2112      	movs	r1, #18
 8004348:	f7ff bf86 	b.w	8004258 <std>
 800434c:	200003c0 	.word	0x200003c0
 8004350:	20000288 	.word	0x20000288
 8004354:	080042c5 	.word	0x080042c5

08004358 <__sfp_lock_acquire>:
 8004358:	4801      	ldr	r0, [pc, #4]	@ (8004360 <__sfp_lock_acquire+0x8>)
 800435a:	f000 b920 	b.w	800459e <__retarget_lock_acquire_recursive>
 800435e:	bf00      	nop
 8004360:	200003c9 	.word	0x200003c9

08004364 <__sfp_lock_release>:
 8004364:	4801      	ldr	r0, [pc, #4]	@ (800436c <__sfp_lock_release+0x8>)
 8004366:	f000 b91b 	b.w	80045a0 <__retarget_lock_release_recursive>
 800436a:	bf00      	nop
 800436c:	200003c9 	.word	0x200003c9

08004370 <__sinit>:
 8004370:	b510      	push	{r4, lr}
 8004372:	4604      	mov	r4, r0
 8004374:	f7ff fff0 	bl	8004358 <__sfp_lock_acquire>
 8004378:	6a23      	ldr	r3, [r4, #32]
 800437a:	b11b      	cbz	r3, 8004384 <__sinit+0x14>
 800437c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004380:	f7ff bff0 	b.w	8004364 <__sfp_lock_release>
 8004384:	4b04      	ldr	r3, [pc, #16]	@ (8004398 <__sinit+0x28>)
 8004386:	6223      	str	r3, [r4, #32]
 8004388:	4b04      	ldr	r3, [pc, #16]	@ (800439c <__sinit+0x2c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f5      	bne.n	800437c <__sinit+0xc>
 8004390:	f7ff ffc4 	bl	800431c <global_stdio_init.part.0>
 8004394:	e7f2      	b.n	800437c <__sinit+0xc>
 8004396:	bf00      	nop
 8004398:	080042dd 	.word	0x080042dd
 800439c:	200003c0 	.word	0x200003c0

080043a0 <_fwalk_sglue>:
 80043a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043a4:	4607      	mov	r7, r0
 80043a6:	4688      	mov	r8, r1
 80043a8:	4614      	mov	r4, r2
 80043aa:	2600      	movs	r6, #0
 80043ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043b0:	f1b9 0901 	subs.w	r9, r9, #1
 80043b4:	d505      	bpl.n	80043c2 <_fwalk_sglue+0x22>
 80043b6:	6824      	ldr	r4, [r4, #0]
 80043b8:	2c00      	cmp	r4, #0
 80043ba:	d1f7      	bne.n	80043ac <_fwalk_sglue+0xc>
 80043bc:	4630      	mov	r0, r6
 80043be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043c2:	89ab      	ldrh	r3, [r5, #12]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d907      	bls.n	80043d8 <_fwalk_sglue+0x38>
 80043c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043cc:	3301      	adds	r3, #1
 80043ce:	d003      	beq.n	80043d8 <_fwalk_sglue+0x38>
 80043d0:	4629      	mov	r1, r5
 80043d2:	4638      	mov	r0, r7
 80043d4:	47c0      	blx	r8
 80043d6:	4306      	orrs	r6, r0
 80043d8:	3568      	adds	r5, #104	@ 0x68
 80043da:	e7e9      	b.n	80043b0 <_fwalk_sglue+0x10>

080043dc <siprintf>:
 80043dc:	b40e      	push	{r1, r2, r3}
 80043de:	b500      	push	{lr}
 80043e0:	b09c      	sub	sp, #112	@ 0x70
 80043e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80043e4:	9002      	str	r0, [sp, #8]
 80043e6:	9006      	str	r0, [sp, #24]
 80043e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80043ec:	4809      	ldr	r0, [pc, #36]	@ (8004414 <siprintf+0x38>)
 80043ee:	9107      	str	r1, [sp, #28]
 80043f0:	9104      	str	r1, [sp, #16]
 80043f2:	4909      	ldr	r1, [pc, #36]	@ (8004418 <siprintf+0x3c>)
 80043f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80043f8:	9105      	str	r1, [sp, #20]
 80043fa:	6800      	ldr	r0, [r0, #0]
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	a902      	add	r1, sp, #8
 8004400:	f001 fc08 	bl	8005c14 <_svfiprintf_r>
 8004404:	9b02      	ldr	r3, [sp, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	b01c      	add	sp, #112	@ 0x70
 800440c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004410:	b003      	add	sp, #12
 8004412:	4770      	bx	lr
 8004414:	20000018 	.word	0x20000018
 8004418:	ffff0208 	.word	0xffff0208

0800441c <__sread>:
 800441c:	b510      	push	{r4, lr}
 800441e:	460c      	mov	r4, r1
 8004420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004424:	f000 f86c 	bl	8004500 <_read_r>
 8004428:	2800      	cmp	r0, #0
 800442a:	bfab      	itete	ge
 800442c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800442e:	89a3      	ldrhlt	r3, [r4, #12]
 8004430:	181b      	addge	r3, r3, r0
 8004432:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004436:	bfac      	ite	ge
 8004438:	6563      	strge	r3, [r4, #84]	@ 0x54
 800443a:	81a3      	strhlt	r3, [r4, #12]
 800443c:	bd10      	pop	{r4, pc}

0800443e <__swrite>:
 800443e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004442:	461f      	mov	r7, r3
 8004444:	898b      	ldrh	r3, [r1, #12]
 8004446:	05db      	lsls	r3, r3, #23
 8004448:	4605      	mov	r5, r0
 800444a:	460c      	mov	r4, r1
 800444c:	4616      	mov	r6, r2
 800444e:	d505      	bpl.n	800445c <__swrite+0x1e>
 8004450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004454:	2302      	movs	r3, #2
 8004456:	2200      	movs	r2, #0
 8004458:	f000 f840 	bl	80044dc <_lseek_r>
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004462:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004466:	81a3      	strh	r3, [r4, #12]
 8004468:	4632      	mov	r2, r6
 800446a:	463b      	mov	r3, r7
 800446c:	4628      	mov	r0, r5
 800446e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004472:	f000 b857 	b.w	8004524 <_write_r>

08004476 <__sseek>:
 8004476:	b510      	push	{r4, lr}
 8004478:	460c      	mov	r4, r1
 800447a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800447e:	f000 f82d 	bl	80044dc <_lseek_r>
 8004482:	1c43      	adds	r3, r0, #1
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	bf15      	itete	ne
 8004488:	6560      	strne	r0, [r4, #84]	@ 0x54
 800448a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800448e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004492:	81a3      	strheq	r3, [r4, #12]
 8004494:	bf18      	it	ne
 8004496:	81a3      	strhne	r3, [r4, #12]
 8004498:	bd10      	pop	{r4, pc}

0800449a <__sclose>:
 800449a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449e:	f000 b80d 	b.w	80044bc <_close_r>

080044a2 <memset>:
 80044a2:	4402      	add	r2, r0
 80044a4:	4603      	mov	r3, r0
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d100      	bne.n	80044ac <memset+0xa>
 80044aa:	4770      	bx	lr
 80044ac:	f803 1b01 	strb.w	r1, [r3], #1
 80044b0:	e7f9      	b.n	80044a6 <memset+0x4>
	...

080044b4 <_localeconv_r>:
 80044b4:	4800      	ldr	r0, [pc, #0]	@ (80044b8 <_localeconv_r+0x4>)
 80044b6:	4770      	bx	lr
 80044b8:	20000158 	.word	0x20000158

080044bc <_close_r>:
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	4d06      	ldr	r5, [pc, #24]	@ (80044d8 <_close_r+0x1c>)
 80044c0:	2300      	movs	r3, #0
 80044c2:	4604      	mov	r4, r0
 80044c4:	4608      	mov	r0, r1
 80044c6:	602b      	str	r3, [r5, #0]
 80044c8:	f7fd f852 	bl	8001570 <_close>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d102      	bne.n	80044d6 <_close_r+0x1a>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	b103      	cbz	r3, 80044d6 <_close_r+0x1a>
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	bd38      	pop	{r3, r4, r5, pc}
 80044d8:	200003c4 	.word	0x200003c4

080044dc <_lseek_r>:
 80044dc:	b538      	push	{r3, r4, r5, lr}
 80044de:	4d07      	ldr	r5, [pc, #28]	@ (80044fc <_lseek_r+0x20>)
 80044e0:	4604      	mov	r4, r0
 80044e2:	4608      	mov	r0, r1
 80044e4:	4611      	mov	r1, r2
 80044e6:	2200      	movs	r2, #0
 80044e8:	602a      	str	r2, [r5, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f7fd f867 	bl	80015be <_lseek>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d102      	bne.n	80044fa <_lseek_r+0x1e>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	b103      	cbz	r3, 80044fa <_lseek_r+0x1e>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	200003c4 	.word	0x200003c4

08004500 <_read_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4d07      	ldr	r5, [pc, #28]	@ (8004520 <_read_r+0x20>)
 8004504:	4604      	mov	r4, r0
 8004506:	4608      	mov	r0, r1
 8004508:	4611      	mov	r1, r2
 800450a:	2200      	movs	r2, #0
 800450c:	602a      	str	r2, [r5, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	f7fc fff5 	bl	80014fe <_read>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_read_r+0x1e>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b103      	cbz	r3, 800451e <_read_r+0x1e>
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	200003c4 	.word	0x200003c4

08004524 <_write_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4d07      	ldr	r5, [pc, #28]	@ (8004544 <_write_r+0x20>)
 8004528:	4604      	mov	r4, r0
 800452a:	4608      	mov	r0, r1
 800452c:	4611      	mov	r1, r2
 800452e:	2200      	movs	r2, #0
 8004530:	602a      	str	r2, [r5, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	f7fd f800 	bl	8001538 <_write>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_write_r+0x1e>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	b103      	cbz	r3, 8004542 <_write_r+0x1e>
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	200003c4 	.word	0x200003c4

08004548 <__errno>:
 8004548:	4b01      	ldr	r3, [pc, #4]	@ (8004550 <__errno+0x8>)
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000018 	.word	0x20000018

08004554 <__libc_init_array>:
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	4d0d      	ldr	r5, [pc, #52]	@ (800458c <__libc_init_array+0x38>)
 8004558:	4c0d      	ldr	r4, [pc, #52]	@ (8004590 <__libc_init_array+0x3c>)
 800455a:	1b64      	subs	r4, r4, r5
 800455c:	10a4      	asrs	r4, r4, #2
 800455e:	2600      	movs	r6, #0
 8004560:	42a6      	cmp	r6, r4
 8004562:	d109      	bne.n	8004578 <__libc_init_array+0x24>
 8004564:	4d0b      	ldr	r5, [pc, #44]	@ (8004594 <__libc_init_array+0x40>)
 8004566:	4c0c      	ldr	r4, [pc, #48]	@ (8004598 <__libc_init_array+0x44>)
 8004568:	f002 f864 	bl	8006634 <_init>
 800456c:	1b64      	subs	r4, r4, r5
 800456e:	10a4      	asrs	r4, r4, #2
 8004570:	2600      	movs	r6, #0
 8004572:	42a6      	cmp	r6, r4
 8004574:	d105      	bne.n	8004582 <__libc_init_array+0x2e>
 8004576:	bd70      	pop	{r4, r5, r6, pc}
 8004578:	f855 3b04 	ldr.w	r3, [r5], #4
 800457c:	4798      	blx	r3
 800457e:	3601      	adds	r6, #1
 8004580:	e7ee      	b.n	8004560 <__libc_init_array+0xc>
 8004582:	f855 3b04 	ldr.w	r3, [r5], #4
 8004586:	4798      	blx	r3
 8004588:	3601      	adds	r6, #1
 800458a:	e7f2      	b.n	8004572 <__libc_init_array+0x1e>
 800458c:	08006a28 	.word	0x08006a28
 8004590:	08006a28 	.word	0x08006a28
 8004594:	08006a28 	.word	0x08006a28
 8004598:	08006a2c 	.word	0x08006a2c

0800459c <__retarget_lock_init_recursive>:
 800459c:	4770      	bx	lr

0800459e <__retarget_lock_acquire_recursive>:
 800459e:	4770      	bx	lr

080045a0 <__retarget_lock_release_recursive>:
 80045a0:	4770      	bx	lr

080045a2 <memcpy>:
 80045a2:	440a      	add	r2, r1
 80045a4:	4291      	cmp	r1, r2
 80045a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80045aa:	d100      	bne.n	80045ae <memcpy+0xc>
 80045ac:	4770      	bx	lr
 80045ae:	b510      	push	{r4, lr}
 80045b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045b8:	4291      	cmp	r1, r2
 80045ba:	d1f9      	bne.n	80045b0 <memcpy+0xe>
 80045bc:	bd10      	pop	{r4, pc}

080045be <quorem>:
 80045be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c2:	6903      	ldr	r3, [r0, #16]
 80045c4:	690c      	ldr	r4, [r1, #16]
 80045c6:	42a3      	cmp	r3, r4
 80045c8:	4607      	mov	r7, r0
 80045ca:	db7e      	blt.n	80046ca <quorem+0x10c>
 80045cc:	3c01      	subs	r4, #1
 80045ce:	f101 0814 	add.w	r8, r1, #20
 80045d2:	00a3      	lsls	r3, r4, #2
 80045d4:	f100 0514 	add.w	r5, r0, #20
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80045e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045e8:	3301      	adds	r3, #1
 80045ea:	429a      	cmp	r2, r3
 80045ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80045f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80045f4:	d32e      	bcc.n	8004654 <quorem+0x96>
 80045f6:	f04f 0a00 	mov.w	sl, #0
 80045fa:	46c4      	mov	ip, r8
 80045fc:	46ae      	mov	lr, r5
 80045fe:	46d3      	mov	fp, sl
 8004600:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004604:	b298      	uxth	r0, r3
 8004606:	fb06 a000 	mla	r0, r6, r0, sl
 800460a:	0c02      	lsrs	r2, r0, #16
 800460c:	0c1b      	lsrs	r3, r3, #16
 800460e:	fb06 2303 	mla	r3, r6, r3, r2
 8004612:	f8de 2000 	ldr.w	r2, [lr]
 8004616:	b280      	uxth	r0, r0
 8004618:	b292      	uxth	r2, r2
 800461a:	1a12      	subs	r2, r2, r0
 800461c:	445a      	add	r2, fp
 800461e:	f8de 0000 	ldr.w	r0, [lr]
 8004622:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004626:	b29b      	uxth	r3, r3
 8004628:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800462c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004630:	b292      	uxth	r2, r2
 8004632:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004636:	45e1      	cmp	r9, ip
 8004638:	f84e 2b04 	str.w	r2, [lr], #4
 800463c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004640:	d2de      	bcs.n	8004600 <quorem+0x42>
 8004642:	9b00      	ldr	r3, [sp, #0]
 8004644:	58eb      	ldr	r3, [r5, r3]
 8004646:	b92b      	cbnz	r3, 8004654 <quorem+0x96>
 8004648:	9b01      	ldr	r3, [sp, #4]
 800464a:	3b04      	subs	r3, #4
 800464c:	429d      	cmp	r5, r3
 800464e:	461a      	mov	r2, r3
 8004650:	d32f      	bcc.n	80046b2 <quorem+0xf4>
 8004652:	613c      	str	r4, [r7, #16]
 8004654:	4638      	mov	r0, r7
 8004656:	f001 f979 	bl	800594c <__mcmp>
 800465a:	2800      	cmp	r0, #0
 800465c:	db25      	blt.n	80046aa <quorem+0xec>
 800465e:	4629      	mov	r1, r5
 8004660:	2000      	movs	r0, #0
 8004662:	f858 2b04 	ldr.w	r2, [r8], #4
 8004666:	f8d1 c000 	ldr.w	ip, [r1]
 800466a:	fa1f fe82 	uxth.w	lr, r2
 800466e:	fa1f f38c 	uxth.w	r3, ip
 8004672:	eba3 030e 	sub.w	r3, r3, lr
 8004676:	4403      	add	r3, r0
 8004678:	0c12      	lsrs	r2, r2, #16
 800467a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800467e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004682:	b29b      	uxth	r3, r3
 8004684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004688:	45c1      	cmp	r9, r8
 800468a:	f841 3b04 	str.w	r3, [r1], #4
 800468e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004692:	d2e6      	bcs.n	8004662 <quorem+0xa4>
 8004694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004698:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800469c:	b922      	cbnz	r2, 80046a8 <quorem+0xea>
 800469e:	3b04      	subs	r3, #4
 80046a0:	429d      	cmp	r5, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	d30b      	bcc.n	80046be <quorem+0x100>
 80046a6:	613c      	str	r4, [r7, #16]
 80046a8:	3601      	adds	r6, #1
 80046aa:	4630      	mov	r0, r6
 80046ac:	b003      	add	sp, #12
 80046ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	3b04      	subs	r3, #4
 80046b6:	2a00      	cmp	r2, #0
 80046b8:	d1cb      	bne.n	8004652 <quorem+0x94>
 80046ba:	3c01      	subs	r4, #1
 80046bc:	e7c6      	b.n	800464c <quorem+0x8e>
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	3b04      	subs	r3, #4
 80046c2:	2a00      	cmp	r2, #0
 80046c4:	d1ef      	bne.n	80046a6 <quorem+0xe8>
 80046c6:	3c01      	subs	r4, #1
 80046c8:	e7ea      	b.n	80046a0 <quorem+0xe2>
 80046ca:	2000      	movs	r0, #0
 80046cc:	e7ee      	b.n	80046ac <quorem+0xee>
	...

080046d0 <_dtoa_r>:
 80046d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d4:	69c7      	ldr	r7, [r0, #28]
 80046d6:	b099      	sub	sp, #100	@ 0x64
 80046d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80046dc:	ec55 4b10 	vmov	r4, r5, d0
 80046e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80046e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80046e4:	4683      	mov	fp, r0
 80046e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80046e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80046ea:	b97f      	cbnz	r7, 800470c <_dtoa_r+0x3c>
 80046ec:	2010      	movs	r0, #16
 80046ee:	f000 fdfd 	bl	80052ec <malloc>
 80046f2:	4602      	mov	r2, r0
 80046f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80046f8:	b920      	cbnz	r0, 8004704 <_dtoa_r+0x34>
 80046fa:	4ba7      	ldr	r3, [pc, #668]	@ (8004998 <_dtoa_r+0x2c8>)
 80046fc:	21ef      	movs	r1, #239	@ 0xef
 80046fe:	48a7      	ldr	r0, [pc, #668]	@ (800499c <_dtoa_r+0x2cc>)
 8004700:	f001 fc5a 	bl	8005fb8 <__assert_func>
 8004704:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004708:	6007      	str	r7, [r0, #0]
 800470a:	60c7      	str	r7, [r0, #12]
 800470c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	b159      	cbz	r1, 800472c <_dtoa_r+0x5c>
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	604a      	str	r2, [r1, #4]
 8004718:	2301      	movs	r3, #1
 800471a:	4093      	lsls	r3, r2
 800471c:	608b      	str	r3, [r1, #8]
 800471e:	4658      	mov	r0, fp
 8004720:	f000 feda 	bl	80054d8 <_Bfree>
 8004724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	1e2b      	subs	r3, r5, #0
 800472e:	bfb9      	ittee	lt
 8004730:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004734:	9303      	strlt	r3, [sp, #12]
 8004736:	2300      	movge	r3, #0
 8004738:	6033      	strge	r3, [r6, #0]
 800473a:	9f03      	ldr	r7, [sp, #12]
 800473c:	4b98      	ldr	r3, [pc, #608]	@ (80049a0 <_dtoa_r+0x2d0>)
 800473e:	bfbc      	itt	lt
 8004740:	2201      	movlt	r2, #1
 8004742:	6032      	strlt	r2, [r6, #0]
 8004744:	43bb      	bics	r3, r7
 8004746:	d112      	bne.n	800476e <_dtoa_r+0x9e>
 8004748:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800474a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004754:	4323      	orrs	r3, r4
 8004756:	f000 854d 	beq.w	80051f4 <_dtoa_r+0xb24>
 800475a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800475c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80049b4 <_dtoa_r+0x2e4>
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 854f 	beq.w	8005204 <_dtoa_r+0xb34>
 8004766:	f10a 0303 	add.w	r3, sl, #3
 800476a:	f000 bd49 	b.w	8005200 <_dtoa_r+0xb30>
 800476e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004772:	2200      	movs	r2, #0
 8004774:	ec51 0b17 	vmov	r0, r1, d7
 8004778:	2300      	movs	r3, #0
 800477a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800477e:	f7fc f9ab 	bl	8000ad8 <__aeabi_dcmpeq>
 8004782:	4680      	mov	r8, r0
 8004784:	b158      	cbz	r0, 800479e <_dtoa_r+0xce>
 8004786:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004788:	2301      	movs	r3, #1
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800478e:	b113      	cbz	r3, 8004796 <_dtoa_r+0xc6>
 8004790:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004792:	4b84      	ldr	r3, [pc, #528]	@ (80049a4 <_dtoa_r+0x2d4>)
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80049b8 <_dtoa_r+0x2e8>
 800479a:	f000 bd33 	b.w	8005204 <_dtoa_r+0xb34>
 800479e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80047a2:	aa16      	add	r2, sp, #88	@ 0x58
 80047a4:	a917      	add	r1, sp, #92	@ 0x5c
 80047a6:	4658      	mov	r0, fp
 80047a8:	f001 f980 	bl	8005aac <__d2b>
 80047ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80047b0:	4681      	mov	r9, r0
 80047b2:	2e00      	cmp	r6, #0
 80047b4:	d077      	beq.n	80048a6 <_dtoa_r+0x1d6>
 80047b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80047bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80047c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80047cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80047d0:	4619      	mov	r1, r3
 80047d2:	2200      	movs	r2, #0
 80047d4:	4b74      	ldr	r3, [pc, #464]	@ (80049a8 <_dtoa_r+0x2d8>)
 80047d6:	f7fb fd5f 	bl	8000298 <__aeabi_dsub>
 80047da:	a369      	add	r3, pc, #420	@ (adr r3, 8004980 <_dtoa_r+0x2b0>)
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f7fb ff12 	bl	8000608 <__aeabi_dmul>
 80047e4:	a368      	add	r3, pc, #416	@ (adr r3, 8004988 <_dtoa_r+0x2b8>)
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	f7fb fd57 	bl	800029c <__adddf3>
 80047ee:	4604      	mov	r4, r0
 80047f0:	4630      	mov	r0, r6
 80047f2:	460d      	mov	r5, r1
 80047f4:	f7fb fe9e 	bl	8000534 <__aeabi_i2d>
 80047f8:	a365      	add	r3, pc, #404	@ (adr r3, 8004990 <_dtoa_r+0x2c0>)
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	f7fb ff03 	bl	8000608 <__aeabi_dmul>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4620      	mov	r0, r4
 8004808:	4629      	mov	r1, r5
 800480a:	f7fb fd47 	bl	800029c <__adddf3>
 800480e:	4604      	mov	r4, r0
 8004810:	460d      	mov	r5, r1
 8004812:	f7fc f9a9 	bl	8000b68 <__aeabi_d2iz>
 8004816:	2200      	movs	r2, #0
 8004818:	4607      	mov	r7, r0
 800481a:	2300      	movs	r3, #0
 800481c:	4620      	mov	r0, r4
 800481e:	4629      	mov	r1, r5
 8004820:	f7fc f964 	bl	8000aec <__aeabi_dcmplt>
 8004824:	b140      	cbz	r0, 8004838 <_dtoa_r+0x168>
 8004826:	4638      	mov	r0, r7
 8004828:	f7fb fe84 	bl	8000534 <__aeabi_i2d>
 800482c:	4622      	mov	r2, r4
 800482e:	462b      	mov	r3, r5
 8004830:	f7fc f952 	bl	8000ad8 <__aeabi_dcmpeq>
 8004834:	b900      	cbnz	r0, 8004838 <_dtoa_r+0x168>
 8004836:	3f01      	subs	r7, #1
 8004838:	2f16      	cmp	r7, #22
 800483a:	d851      	bhi.n	80048e0 <_dtoa_r+0x210>
 800483c:	4b5b      	ldr	r3, [pc, #364]	@ (80049ac <_dtoa_r+0x2dc>)
 800483e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800484a:	f7fc f94f 	bl	8000aec <__aeabi_dcmplt>
 800484e:	2800      	cmp	r0, #0
 8004850:	d048      	beq.n	80048e4 <_dtoa_r+0x214>
 8004852:	3f01      	subs	r7, #1
 8004854:	2300      	movs	r3, #0
 8004856:	9312      	str	r3, [sp, #72]	@ 0x48
 8004858:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800485a:	1b9b      	subs	r3, r3, r6
 800485c:	1e5a      	subs	r2, r3, #1
 800485e:	bf44      	itt	mi
 8004860:	f1c3 0801 	rsbmi	r8, r3, #1
 8004864:	2300      	movmi	r3, #0
 8004866:	9208      	str	r2, [sp, #32]
 8004868:	bf54      	ite	pl
 800486a:	f04f 0800 	movpl.w	r8, #0
 800486e:	9308      	strmi	r3, [sp, #32]
 8004870:	2f00      	cmp	r7, #0
 8004872:	db39      	blt.n	80048e8 <_dtoa_r+0x218>
 8004874:	9b08      	ldr	r3, [sp, #32]
 8004876:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004878:	443b      	add	r3, r7
 800487a:	9308      	str	r3, [sp, #32]
 800487c:	2300      	movs	r3, #0
 800487e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004882:	2b09      	cmp	r3, #9
 8004884:	d864      	bhi.n	8004950 <_dtoa_r+0x280>
 8004886:	2b05      	cmp	r3, #5
 8004888:	bfc4      	itt	gt
 800488a:	3b04      	subgt	r3, #4
 800488c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800488e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004890:	f1a3 0302 	sub.w	r3, r3, #2
 8004894:	bfcc      	ite	gt
 8004896:	2400      	movgt	r4, #0
 8004898:	2401      	movle	r4, #1
 800489a:	2b03      	cmp	r3, #3
 800489c:	d863      	bhi.n	8004966 <_dtoa_r+0x296>
 800489e:	e8df f003 	tbb	[pc, r3]
 80048a2:	372a      	.short	0x372a
 80048a4:	5535      	.short	0x5535
 80048a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80048aa:	441e      	add	r6, r3
 80048ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	bfc1      	itttt	gt
 80048b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80048b8:	409f      	lslgt	r7, r3
 80048ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80048be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80048c2:	bfd6      	itet	le
 80048c4:	f1c3 0320 	rsble	r3, r3, #32
 80048c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80048cc:	fa04 f003 	lslle.w	r0, r4, r3
 80048d0:	f7fb fe20 	bl	8000514 <__aeabi_ui2d>
 80048d4:	2201      	movs	r2, #1
 80048d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80048da:	3e01      	subs	r6, #1
 80048dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80048de:	e777      	b.n	80047d0 <_dtoa_r+0x100>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e7b8      	b.n	8004856 <_dtoa_r+0x186>
 80048e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80048e6:	e7b7      	b.n	8004858 <_dtoa_r+0x188>
 80048e8:	427b      	negs	r3, r7
 80048ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80048ec:	2300      	movs	r3, #0
 80048ee:	eba8 0807 	sub.w	r8, r8, r7
 80048f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80048f4:	e7c4      	b.n	8004880 <_dtoa_r+0x1b0>
 80048f6:	2300      	movs	r3, #0
 80048f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	dc35      	bgt.n	800496c <_dtoa_r+0x29c>
 8004900:	2301      	movs	r3, #1
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	9307      	str	r3, [sp, #28]
 8004906:	461a      	mov	r2, r3
 8004908:	920e      	str	r2, [sp, #56]	@ 0x38
 800490a:	e00b      	b.n	8004924 <_dtoa_r+0x254>
 800490c:	2301      	movs	r3, #1
 800490e:	e7f3      	b.n	80048f8 <_dtoa_r+0x228>
 8004910:	2300      	movs	r3, #0
 8004912:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004916:	18fb      	adds	r3, r7, r3
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	9307      	str	r3, [sp, #28]
 8004920:	bfb8      	it	lt
 8004922:	2301      	movlt	r3, #1
 8004924:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004928:	2100      	movs	r1, #0
 800492a:	2204      	movs	r2, #4
 800492c:	f102 0514 	add.w	r5, r2, #20
 8004930:	429d      	cmp	r5, r3
 8004932:	d91f      	bls.n	8004974 <_dtoa_r+0x2a4>
 8004934:	6041      	str	r1, [r0, #4]
 8004936:	4658      	mov	r0, fp
 8004938:	f000 fd8e 	bl	8005458 <_Balloc>
 800493c:	4682      	mov	sl, r0
 800493e:	2800      	cmp	r0, #0
 8004940:	d13c      	bne.n	80049bc <_dtoa_r+0x2ec>
 8004942:	4b1b      	ldr	r3, [pc, #108]	@ (80049b0 <_dtoa_r+0x2e0>)
 8004944:	4602      	mov	r2, r0
 8004946:	f240 11af 	movw	r1, #431	@ 0x1af
 800494a:	e6d8      	b.n	80046fe <_dtoa_r+0x2e>
 800494c:	2301      	movs	r3, #1
 800494e:	e7e0      	b.n	8004912 <_dtoa_r+0x242>
 8004950:	2401      	movs	r4, #1
 8004952:	2300      	movs	r3, #0
 8004954:	9309      	str	r3, [sp, #36]	@ 0x24
 8004956:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004958:	f04f 33ff 	mov.w	r3, #4294967295
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	9307      	str	r3, [sp, #28]
 8004960:	2200      	movs	r2, #0
 8004962:	2312      	movs	r3, #18
 8004964:	e7d0      	b.n	8004908 <_dtoa_r+0x238>
 8004966:	2301      	movs	r3, #1
 8004968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800496a:	e7f5      	b.n	8004958 <_dtoa_r+0x288>
 800496c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	9307      	str	r3, [sp, #28]
 8004972:	e7d7      	b.n	8004924 <_dtoa_r+0x254>
 8004974:	3101      	adds	r1, #1
 8004976:	0052      	lsls	r2, r2, #1
 8004978:	e7d8      	b.n	800492c <_dtoa_r+0x25c>
 800497a:	bf00      	nop
 800497c:	f3af 8000 	nop.w
 8004980:	636f4361 	.word	0x636f4361
 8004984:	3fd287a7 	.word	0x3fd287a7
 8004988:	8b60c8b3 	.word	0x8b60c8b3
 800498c:	3fc68a28 	.word	0x3fc68a28
 8004990:	509f79fb 	.word	0x509f79fb
 8004994:	3fd34413 	.word	0x3fd34413
 8004998:	080066f1 	.word	0x080066f1
 800499c:	08006708 	.word	0x08006708
 80049a0:	7ff00000 	.word	0x7ff00000
 80049a4:	080066c1 	.word	0x080066c1
 80049a8:	3ff80000 	.word	0x3ff80000
 80049ac:	08006800 	.word	0x08006800
 80049b0:	08006760 	.word	0x08006760
 80049b4:	080066ed 	.word	0x080066ed
 80049b8:	080066c0 	.word	0x080066c0
 80049bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80049c0:	6018      	str	r0, [r3, #0]
 80049c2:	9b07      	ldr	r3, [sp, #28]
 80049c4:	2b0e      	cmp	r3, #14
 80049c6:	f200 80a4 	bhi.w	8004b12 <_dtoa_r+0x442>
 80049ca:	2c00      	cmp	r4, #0
 80049cc:	f000 80a1 	beq.w	8004b12 <_dtoa_r+0x442>
 80049d0:	2f00      	cmp	r7, #0
 80049d2:	dd33      	ble.n	8004a3c <_dtoa_r+0x36c>
 80049d4:	4bad      	ldr	r3, [pc, #692]	@ (8004c8c <_dtoa_r+0x5bc>)
 80049d6:	f007 020f 	and.w	r2, r7, #15
 80049da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049de:	ed93 7b00 	vldr	d7, [r3]
 80049e2:	05f8      	lsls	r0, r7, #23
 80049e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80049e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80049ec:	d516      	bpl.n	8004a1c <_dtoa_r+0x34c>
 80049ee:	4ba8      	ldr	r3, [pc, #672]	@ (8004c90 <_dtoa_r+0x5c0>)
 80049f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049f8:	f7fb ff30 	bl	800085c <__aeabi_ddiv>
 80049fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a00:	f004 040f 	and.w	r4, r4, #15
 8004a04:	2603      	movs	r6, #3
 8004a06:	4da2      	ldr	r5, [pc, #648]	@ (8004c90 <_dtoa_r+0x5c0>)
 8004a08:	b954      	cbnz	r4, 8004a20 <_dtoa_r+0x350>
 8004a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a12:	f7fb ff23 	bl	800085c <__aeabi_ddiv>
 8004a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a1a:	e028      	b.n	8004a6e <_dtoa_r+0x39e>
 8004a1c:	2602      	movs	r6, #2
 8004a1e:	e7f2      	b.n	8004a06 <_dtoa_r+0x336>
 8004a20:	07e1      	lsls	r1, r4, #31
 8004a22:	d508      	bpl.n	8004a36 <_dtoa_r+0x366>
 8004a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a2c:	f7fb fdec 	bl	8000608 <__aeabi_dmul>
 8004a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a34:	3601      	adds	r6, #1
 8004a36:	1064      	asrs	r4, r4, #1
 8004a38:	3508      	adds	r5, #8
 8004a3a:	e7e5      	b.n	8004a08 <_dtoa_r+0x338>
 8004a3c:	f000 80d2 	beq.w	8004be4 <_dtoa_r+0x514>
 8004a40:	427c      	negs	r4, r7
 8004a42:	4b92      	ldr	r3, [pc, #584]	@ (8004c8c <_dtoa_r+0x5bc>)
 8004a44:	4d92      	ldr	r5, [pc, #584]	@ (8004c90 <_dtoa_r+0x5c0>)
 8004a46:	f004 020f 	and.w	r2, r4, #15
 8004a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a56:	f7fb fdd7 	bl	8000608 <__aeabi_dmul>
 8004a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a5e:	1124      	asrs	r4, r4, #4
 8004a60:	2300      	movs	r3, #0
 8004a62:	2602      	movs	r6, #2
 8004a64:	2c00      	cmp	r4, #0
 8004a66:	f040 80b2 	bne.w	8004bce <_dtoa_r+0x4fe>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1d3      	bne.n	8004a16 <_dtoa_r+0x346>
 8004a6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004a70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80b7 	beq.w	8004be8 <_dtoa_r+0x518>
 8004a7a:	4b86      	ldr	r3, [pc, #536]	@ (8004c94 <_dtoa_r+0x5c4>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	4620      	mov	r0, r4
 8004a80:	4629      	mov	r1, r5
 8004a82:	f7fc f833 	bl	8000aec <__aeabi_dcmplt>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	f000 80ae 	beq.w	8004be8 <_dtoa_r+0x518>
 8004a8c:	9b07      	ldr	r3, [sp, #28]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80aa 	beq.w	8004be8 <_dtoa_r+0x518>
 8004a94:	9b00      	ldr	r3, [sp, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	dd37      	ble.n	8004b0a <_dtoa_r+0x43a>
 8004a9a:	1e7b      	subs	r3, r7, #1
 8004a9c:	9304      	str	r3, [sp, #16]
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	4b7d      	ldr	r3, [pc, #500]	@ (8004c98 <_dtoa_r+0x5c8>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	f7fb fdaf 	bl	8000608 <__aeabi_dmul>
 8004aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aae:	9c00      	ldr	r4, [sp, #0]
 8004ab0:	3601      	adds	r6, #1
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f7fb fd3e 	bl	8000534 <__aeabi_i2d>
 8004ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004abc:	f7fb fda4 	bl	8000608 <__aeabi_dmul>
 8004ac0:	4b76      	ldr	r3, [pc, #472]	@ (8004c9c <_dtoa_r+0x5cc>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f7fb fbea 	bl	800029c <__adddf3>
 8004ac8:	4605      	mov	r5, r0
 8004aca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004ace:	2c00      	cmp	r4, #0
 8004ad0:	f040 808d 	bne.w	8004bee <_dtoa_r+0x51e>
 8004ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ad8:	4b71      	ldr	r3, [pc, #452]	@ (8004ca0 <_dtoa_r+0x5d0>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	f7fb fbdc 	bl	8000298 <__aeabi_dsub>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ae8:	462a      	mov	r2, r5
 8004aea:	4633      	mov	r3, r6
 8004aec:	f7fc f81c 	bl	8000b28 <__aeabi_dcmpgt>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	f040 828b 	bne.w	800500c <_dtoa_r+0x93c>
 8004af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004afa:	462a      	mov	r2, r5
 8004afc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004b00:	f7fb fff4 	bl	8000aec <__aeabi_dcmplt>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	f040 8128 	bne.w	8004d5a <_dtoa_r+0x68a>
 8004b0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004b0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004b12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f2c0 815a 	blt.w	8004dce <_dtoa_r+0x6fe>
 8004b1a:	2f0e      	cmp	r7, #14
 8004b1c:	f300 8157 	bgt.w	8004dce <_dtoa_r+0x6fe>
 8004b20:	4b5a      	ldr	r3, [pc, #360]	@ (8004c8c <_dtoa_r+0x5bc>)
 8004b22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004b26:	ed93 7b00 	vldr	d7, [r3]
 8004b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	ed8d 7b00 	vstr	d7, [sp]
 8004b32:	da03      	bge.n	8004b3c <_dtoa_r+0x46c>
 8004b34:	9b07      	ldr	r3, [sp, #28]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f340 8101 	ble.w	8004d3e <_dtoa_r+0x66e>
 8004b3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004b40:	4656      	mov	r6, sl
 8004b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b46:	4620      	mov	r0, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	f7fb fe87 	bl	800085c <__aeabi_ddiv>
 8004b4e:	f7fc f80b 	bl	8000b68 <__aeabi_d2iz>
 8004b52:	4680      	mov	r8, r0
 8004b54:	f7fb fcee 	bl	8000534 <__aeabi_i2d>
 8004b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b5c:	f7fb fd54 	bl	8000608 <__aeabi_dmul>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4620      	mov	r0, r4
 8004b66:	4629      	mov	r1, r5
 8004b68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004b6c:	f7fb fb94 	bl	8000298 <__aeabi_dsub>
 8004b70:	f806 4b01 	strb.w	r4, [r6], #1
 8004b74:	9d07      	ldr	r5, [sp, #28]
 8004b76:	eba6 040a 	sub.w	r4, r6, sl
 8004b7a:	42a5      	cmp	r5, r4
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	f040 8117 	bne.w	8004db2 <_dtoa_r+0x6e2>
 8004b84:	f7fb fb8a 	bl	800029c <__adddf3>
 8004b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	460d      	mov	r5, r1
 8004b90:	f7fb ffca 	bl	8000b28 <__aeabi_dcmpgt>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	f040 80f9 	bne.w	8004d8c <_dtoa_r+0x6bc>
 8004b9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	f7fb ff99 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ba6:	b118      	cbz	r0, 8004bb0 <_dtoa_r+0x4e0>
 8004ba8:	f018 0f01 	tst.w	r8, #1
 8004bac:	f040 80ee 	bne.w	8004d8c <_dtoa_r+0x6bc>
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	4658      	mov	r0, fp
 8004bb4:	f000 fc90 	bl	80054d8 <_Bfree>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	7033      	strb	r3, [r6, #0]
 8004bbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004bbe:	3701      	adds	r7, #1
 8004bc0:	601f      	str	r7, [r3, #0]
 8004bc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 831d 	beq.w	8005204 <_dtoa_r+0xb34>
 8004bca:	601e      	str	r6, [r3, #0]
 8004bcc:	e31a      	b.n	8005204 <_dtoa_r+0xb34>
 8004bce:	07e2      	lsls	r2, r4, #31
 8004bd0:	d505      	bpl.n	8004bde <_dtoa_r+0x50e>
 8004bd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bd6:	f7fb fd17 	bl	8000608 <__aeabi_dmul>
 8004bda:	3601      	adds	r6, #1
 8004bdc:	2301      	movs	r3, #1
 8004bde:	1064      	asrs	r4, r4, #1
 8004be0:	3508      	adds	r5, #8
 8004be2:	e73f      	b.n	8004a64 <_dtoa_r+0x394>
 8004be4:	2602      	movs	r6, #2
 8004be6:	e742      	b.n	8004a6e <_dtoa_r+0x39e>
 8004be8:	9c07      	ldr	r4, [sp, #28]
 8004bea:	9704      	str	r7, [sp, #16]
 8004bec:	e761      	b.n	8004ab2 <_dtoa_r+0x3e2>
 8004bee:	4b27      	ldr	r3, [pc, #156]	@ (8004c8c <_dtoa_r+0x5bc>)
 8004bf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004bf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004bf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004bfa:	4454      	add	r4, sl
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	d053      	beq.n	8004ca8 <_dtoa_r+0x5d8>
 8004c00:	4928      	ldr	r1, [pc, #160]	@ (8004ca4 <_dtoa_r+0x5d4>)
 8004c02:	2000      	movs	r0, #0
 8004c04:	f7fb fe2a 	bl	800085c <__aeabi_ddiv>
 8004c08:	4633      	mov	r3, r6
 8004c0a:	462a      	mov	r2, r5
 8004c0c:	f7fb fb44 	bl	8000298 <__aeabi_dsub>
 8004c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c14:	4656      	mov	r6, sl
 8004c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c1a:	f7fb ffa5 	bl	8000b68 <__aeabi_d2iz>
 8004c1e:	4605      	mov	r5, r0
 8004c20:	f7fb fc88 	bl	8000534 <__aeabi_i2d>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c2c:	f7fb fb34 	bl	8000298 <__aeabi_dsub>
 8004c30:	3530      	adds	r5, #48	@ 0x30
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c3a:	f806 5b01 	strb.w	r5, [r6], #1
 8004c3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c42:	f7fb ff53 	bl	8000aec <__aeabi_dcmplt>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	d171      	bne.n	8004d2e <_dtoa_r+0x65e>
 8004c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c4e:	4911      	ldr	r1, [pc, #68]	@ (8004c94 <_dtoa_r+0x5c4>)
 8004c50:	2000      	movs	r0, #0
 8004c52:	f7fb fb21 	bl	8000298 <__aeabi_dsub>
 8004c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c5a:	f7fb ff47 	bl	8000aec <__aeabi_dcmplt>
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	f040 8095 	bne.w	8004d8e <_dtoa_r+0x6be>
 8004c64:	42a6      	cmp	r6, r4
 8004c66:	f43f af50 	beq.w	8004b0a <_dtoa_r+0x43a>
 8004c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <_dtoa_r+0x5c8>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	f7fb fcc9 	bl	8000608 <__aeabi_dmul>
 8004c76:	4b08      	ldr	r3, [pc, #32]	@ (8004c98 <_dtoa_r+0x5c8>)
 8004c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c82:	f7fb fcc1 	bl	8000608 <__aeabi_dmul>
 8004c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c8a:	e7c4      	b.n	8004c16 <_dtoa_r+0x546>
 8004c8c:	08006800 	.word	0x08006800
 8004c90:	080067d8 	.word	0x080067d8
 8004c94:	3ff00000 	.word	0x3ff00000
 8004c98:	40240000 	.word	0x40240000
 8004c9c:	401c0000 	.word	0x401c0000
 8004ca0:	40140000 	.word	0x40140000
 8004ca4:	3fe00000 	.word	0x3fe00000
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4628      	mov	r0, r5
 8004cac:	f7fb fcac 	bl	8000608 <__aeabi_dmul>
 8004cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004cb4:	9415      	str	r4, [sp, #84]	@ 0x54
 8004cb6:	4656      	mov	r6, sl
 8004cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cbc:	f7fb ff54 	bl	8000b68 <__aeabi_d2iz>
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	f7fb fc37 	bl	8000534 <__aeabi_i2d>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cce:	f7fb fae3 	bl	8000298 <__aeabi_dsub>
 8004cd2:	3530      	adds	r5, #48	@ 0x30
 8004cd4:	f806 5b01 	strb.w	r5, [r6], #1
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	42a6      	cmp	r6, r4
 8004cde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	d124      	bne.n	8004d32 <_dtoa_r+0x662>
 8004ce8:	4bac      	ldr	r3, [pc, #688]	@ (8004f9c <_dtoa_r+0x8cc>)
 8004cea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004cee:	f7fb fad5 	bl	800029c <__adddf3>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cfa:	f7fb ff15 	bl	8000b28 <__aeabi_dcmpgt>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d145      	bne.n	8004d8e <_dtoa_r+0x6be>
 8004d02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d06:	49a5      	ldr	r1, [pc, #660]	@ (8004f9c <_dtoa_r+0x8cc>)
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f7fb fac5 	bl	8000298 <__aeabi_dsub>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d16:	f7fb fee9 	bl	8000aec <__aeabi_dcmplt>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	f43f aef5 	beq.w	8004b0a <_dtoa_r+0x43a>
 8004d20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004d22:	1e73      	subs	r3, r6, #1
 8004d24:	9315      	str	r3, [sp, #84]	@ 0x54
 8004d26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004d2a:	2b30      	cmp	r3, #48	@ 0x30
 8004d2c:	d0f8      	beq.n	8004d20 <_dtoa_r+0x650>
 8004d2e:	9f04      	ldr	r7, [sp, #16]
 8004d30:	e73e      	b.n	8004bb0 <_dtoa_r+0x4e0>
 8004d32:	4b9b      	ldr	r3, [pc, #620]	@ (8004fa0 <_dtoa_r+0x8d0>)
 8004d34:	f7fb fc68 	bl	8000608 <__aeabi_dmul>
 8004d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d3c:	e7bc      	b.n	8004cb8 <_dtoa_r+0x5e8>
 8004d3e:	d10c      	bne.n	8004d5a <_dtoa_r+0x68a>
 8004d40:	4b98      	ldr	r3, [pc, #608]	@ (8004fa4 <_dtoa_r+0x8d4>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d48:	f7fb fc5e 	bl	8000608 <__aeabi_dmul>
 8004d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d50:	f7fb fee0 	bl	8000b14 <__aeabi_dcmpge>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	f000 8157 	beq.w	8005008 <_dtoa_r+0x938>
 8004d5a:	2400      	movs	r4, #0
 8004d5c:	4625      	mov	r5, r4
 8004d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d60:	43db      	mvns	r3, r3
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	4656      	mov	r6, sl
 8004d66:	2700      	movs	r7, #0
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4658      	mov	r0, fp
 8004d6c:	f000 fbb4 	bl	80054d8 <_Bfree>
 8004d70:	2d00      	cmp	r5, #0
 8004d72:	d0dc      	beq.n	8004d2e <_dtoa_r+0x65e>
 8004d74:	b12f      	cbz	r7, 8004d82 <_dtoa_r+0x6b2>
 8004d76:	42af      	cmp	r7, r5
 8004d78:	d003      	beq.n	8004d82 <_dtoa_r+0x6b2>
 8004d7a:	4639      	mov	r1, r7
 8004d7c:	4658      	mov	r0, fp
 8004d7e:	f000 fbab 	bl	80054d8 <_Bfree>
 8004d82:	4629      	mov	r1, r5
 8004d84:	4658      	mov	r0, fp
 8004d86:	f000 fba7 	bl	80054d8 <_Bfree>
 8004d8a:	e7d0      	b.n	8004d2e <_dtoa_r+0x65e>
 8004d8c:	9704      	str	r7, [sp, #16]
 8004d8e:	4633      	mov	r3, r6
 8004d90:	461e      	mov	r6, r3
 8004d92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d96:	2a39      	cmp	r2, #57	@ 0x39
 8004d98:	d107      	bne.n	8004daa <_dtoa_r+0x6da>
 8004d9a:	459a      	cmp	sl, r3
 8004d9c:	d1f8      	bne.n	8004d90 <_dtoa_r+0x6c0>
 8004d9e:	9a04      	ldr	r2, [sp, #16]
 8004da0:	3201      	adds	r2, #1
 8004da2:	9204      	str	r2, [sp, #16]
 8004da4:	2230      	movs	r2, #48	@ 0x30
 8004da6:	f88a 2000 	strb.w	r2, [sl]
 8004daa:	781a      	ldrb	r2, [r3, #0]
 8004dac:	3201      	adds	r2, #1
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	e7bd      	b.n	8004d2e <_dtoa_r+0x65e>
 8004db2:	4b7b      	ldr	r3, [pc, #492]	@ (8004fa0 <_dtoa_r+0x8d0>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	f7fb fc27 	bl	8000608 <__aeabi_dmul>
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	460d      	mov	r5, r1
 8004dc2:	f7fb fe89 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	f43f aebb 	beq.w	8004b42 <_dtoa_r+0x472>
 8004dcc:	e6f0      	b.n	8004bb0 <_dtoa_r+0x4e0>
 8004dce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004dd0:	2a00      	cmp	r2, #0
 8004dd2:	f000 80db 	beq.w	8004f8c <_dtoa_r+0x8bc>
 8004dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dd8:	2a01      	cmp	r2, #1
 8004dda:	f300 80bf 	bgt.w	8004f5c <_dtoa_r+0x88c>
 8004dde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004de0:	2a00      	cmp	r2, #0
 8004de2:	f000 80b7 	beq.w	8004f54 <_dtoa_r+0x884>
 8004de6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004dea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004dec:	4646      	mov	r6, r8
 8004dee:	9a08      	ldr	r2, [sp, #32]
 8004df0:	2101      	movs	r1, #1
 8004df2:	441a      	add	r2, r3
 8004df4:	4658      	mov	r0, fp
 8004df6:	4498      	add	r8, r3
 8004df8:	9208      	str	r2, [sp, #32]
 8004dfa:	f000 fc21 	bl	8005640 <__i2b>
 8004dfe:	4605      	mov	r5, r0
 8004e00:	b15e      	cbz	r6, 8004e1a <_dtoa_r+0x74a>
 8004e02:	9b08      	ldr	r3, [sp, #32]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	dd08      	ble.n	8004e1a <_dtoa_r+0x74a>
 8004e08:	42b3      	cmp	r3, r6
 8004e0a:	9a08      	ldr	r2, [sp, #32]
 8004e0c:	bfa8      	it	ge
 8004e0e:	4633      	movge	r3, r6
 8004e10:	eba8 0803 	sub.w	r8, r8, r3
 8004e14:	1af6      	subs	r6, r6, r3
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	9308      	str	r3, [sp, #32]
 8004e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e1c:	b1f3      	cbz	r3, 8004e5c <_dtoa_r+0x78c>
 8004e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80b7 	beq.w	8004f94 <_dtoa_r+0x8c4>
 8004e26:	b18c      	cbz	r4, 8004e4c <_dtoa_r+0x77c>
 8004e28:	4629      	mov	r1, r5
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	4658      	mov	r0, fp
 8004e2e:	f000 fcc7 	bl	80057c0 <__pow5mult>
 8004e32:	464a      	mov	r2, r9
 8004e34:	4601      	mov	r1, r0
 8004e36:	4605      	mov	r5, r0
 8004e38:	4658      	mov	r0, fp
 8004e3a:	f000 fc17 	bl	800566c <__multiply>
 8004e3e:	4649      	mov	r1, r9
 8004e40:	9004      	str	r0, [sp, #16]
 8004e42:	4658      	mov	r0, fp
 8004e44:	f000 fb48 	bl	80054d8 <_Bfree>
 8004e48:	9b04      	ldr	r3, [sp, #16]
 8004e4a:	4699      	mov	r9, r3
 8004e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e4e:	1b1a      	subs	r2, r3, r4
 8004e50:	d004      	beq.n	8004e5c <_dtoa_r+0x78c>
 8004e52:	4649      	mov	r1, r9
 8004e54:	4658      	mov	r0, fp
 8004e56:	f000 fcb3 	bl	80057c0 <__pow5mult>
 8004e5a:	4681      	mov	r9, r0
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	4658      	mov	r0, fp
 8004e60:	f000 fbee 	bl	8005640 <__i2b>
 8004e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e66:	4604      	mov	r4, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 81cf 	beq.w	800520c <_dtoa_r+0xb3c>
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4601      	mov	r1, r0
 8004e72:	4658      	mov	r0, fp
 8004e74:	f000 fca4 	bl	80057c0 <__pow5mult>
 8004e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	f300 8095 	bgt.w	8004fac <_dtoa_r+0x8dc>
 8004e82:	9b02      	ldr	r3, [sp, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f040 8087 	bne.w	8004f98 <_dtoa_r+0x8c8>
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f040 8089 	bne.w	8004fa8 <_dtoa_r+0x8d8>
 8004e96:	9b03      	ldr	r3, [sp, #12]
 8004e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e9c:	0d1b      	lsrs	r3, r3, #20
 8004e9e:	051b      	lsls	r3, r3, #20
 8004ea0:	b12b      	cbz	r3, 8004eae <_dtoa_r+0x7de>
 8004ea2:	9b08      	ldr	r3, [sp, #32]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	9308      	str	r3, [sp, #32]
 8004ea8:	f108 0801 	add.w	r8, r8, #1
 8004eac:	2301      	movs	r3, #1
 8004eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 81b0 	beq.w	8005218 <_dtoa_r+0xb48>
 8004eb8:	6923      	ldr	r3, [r4, #16]
 8004eba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ebe:	6918      	ldr	r0, [r3, #16]
 8004ec0:	f000 fb72 	bl	80055a8 <__hi0bits>
 8004ec4:	f1c0 0020 	rsb	r0, r0, #32
 8004ec8:	9b08      	ldr	r3, [sp, #32]
 8004eca:	4418      	add	r0, r3
 8004ecc:	f010 001f 	ands.w	r0, r0, #31
 8004ed0:	d077      	beq.n	8004fc2 <_dtoa_r+0x8f2>
 8004ed2:	f1c0 0320 	rsb	r3, r0, #32
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	dd6b      	ble.n	8004fb2 <_dtoa_r+0x8e2>
 8004eda:	9b08      	ldr	r3, [sp, #32]
 8004edc:	f1c0 001c 	rsb	r0, r0, #28
 8004ee0:	4403      	add	r3, r0
 8004ee2:	4480      	add	r8, r0
 8004ee4:	4406      	add	r6, r0
 8004ee6:	9308      	str	r3, [sp, #32]
 8004ee8:	f1b8 0f00 	cmp.w	r8, #0
 8004eec:	dd05      	ble.n	8004efa <_dtoa_r+0x82a>
 8004eee:	4649      	mov	r1, r9
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	4658      	mov	r0, fp
 8004ef4:	f000 fcbe 	bl	8005874 <__lshift>
 8004ef8:	4681      	mov	r9, r0
 8004efa:	9b08      	ldr	r3, [sp, #32]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	dd05      	ble.n	8004f0c <_dtoa_r+0x83c>
 8004f00:	4621      	mov	r1, r4
 8004f02:	461a      	mov	r2, r3
 8004f04:	4658      	mov	r0, fp
 8004f06:	f000 fcb5 	bl	8005874 <__lshift>
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d059      	beq.n	8004fc6 <_dtoa_r+0x8f6>
 8004f12:	4621      	mov	r1, r4
 8004f14:	4648      	mov	r0, r9
 8004f16:	f000 fd19 	bl	800594c <__mcmp>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	da53      	bge.n	8004fc6 <_dtoa_r+0x8f6>
 8004f1e:	1e7b      	subs	r3, r7, #1
 8004f20:	9304      	str	r3, [sp, #16]
 8004f22:	4649      	mov	r1, r9
 8004f24:	2300      	movs	r3, #0
 8004f26:	220a      	movs	r2, #10
 8004f28:	4658      	mov	r0, fp
 8004f2a:	f000 faf7 	bl	800551c <__multadd>
 8004f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f30:	4681      	mov	r9, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8172 	beq.w	800521c <_dtoa_r+0xb4c>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	220a      	movs	r2, #10
 8004f3e:	4658      	mov	r0, fp
 8004f40:	f000 faec 	bl	800551c <__multadd>
 8004f44:	9b00      	ldr	r3, [sp, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	4605      	mov	r5, r0
 8004f4a:	dc67      	bgt.n	800501c <_dtoa_r+0x94c>
 8004f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	dc41      	bgt.n	8004fd6 <_dtoa_r+0x906>
 8004f52:	e063      	b.n	800501c <_dtoa_r+0x94c>
 8004f54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004f56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004f5a:	e746      	b.n	8004dea <_dtoa_r+0x71a>
 8004f5c:	9b07      	ldr	r3, [sp, #28]
 8004f5e:	1e5c      	subs	r4, r3, #1
 8004f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f62:	42a3      	cmp	r3, r4
 8004f64:	bfbf      	itttt	lt
 8004f66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004f68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004f6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004f6c:	1ae3      	sublt	r3, r4, r3
 8004f6e:	bfb4      	ite	lt
 8004f70:	18d2      	addlt	r2, r2, r3
 8004f72:	1b1c      	subge	r4, r3, r4
 8004f74:	9b07      	ldr	r3, [sp, #28]
 8004f76:	bfbc      	itt	lt
 8004f78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004f7a:	2400      	movlt	r4, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bfb5      	itete	lt
 8004f80:	eba8 0603 	sublt.w	r6, r8, r3
 8004f84:	9b07      	ldrge	r3, [sp, #28]
 8004f86:	2300      	movlt	r3, #0
 8004f88:	4646      	movge	r6, r8
 8004f8a:	e730      	b.n	8004dee <_dtoa_r+0x71e>
 8004f8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004f90:	4646      	mov	r6, r8
 8004f92:	e735      	b.n	8004e00 <_dtoa_r+0x730>
 8004f94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f96:	e75c      	b.n	8004e52 <_dtoa_r+0x782>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e788      	b.n	8004eae <_dtoa_r+0x7de>
 8004f9c:	3fe00000 	.word	0x3fe00000
 8004fa0:	40240000 	.word	0x40240000
 8004fa4:	40140000 	.word	0x40140000
 8004fa8:	9b02      	ldr	r3, [sp, #8]
 8004faa:	e780      	b.n	8004eae <_dtoa_r+0x7de>
 8004fac:	2300      	movs	r3, #0
 8004fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fb0:	e782      	b.n	8004eb8 <_dtoa_r+0x7e8>
 8004fb2:	d099      	beq.n	8004ee8 <_dtoa_r+0x818>
 8004fb4:	9a08      	ldr	r2, [sp, #32]
 8004fb6:	331c      	adds	r3, #28
 8004fb8:	441a      	add	r2, r3
 8004fba:	4498      	add	r8, r3
 8004fbc:	441e      	add	r6, r3
 8004fbe:	9208      	str	r2, [sp, #32]
 8004fc0:	e792      	b.n	8004ee8 <_dtoa_r+0x818>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	e7f6      	b.n	8004fb4 <_dtoa_r+0x8e4>
 8004fc6:	9b07      	ldr	r3, [sp, #28]
 8004fc8:	9704      	str	r7, [sp, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	dc20      	bgt.n	8005010 <_dtoa_r+0x940>
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	dd1e      	ble.n	8005014 <_dtoa_r+0x944>
 8004fd6:	9b00      	ldr	r3, [sp, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f47f aec0 	bne.w	8004d5e <_dtoa_r+0x68e>
 8004fde:	4621      	mov	r1, r4
 8004fe0:	2205      	movs	r2, #5
 8004fe2:	4658      	mov	r0, fp
 8004fe4:	f000 fa9a 	bl	800551c <__multadd>
 8004fe8:	4601      	mov	r1, r0
 8004fea:	4604      	mov	r4, r0
 8004fec:	4648      	mov	r0, r9
 8004fee:	f000 fcad 	bl	800594c <__mcmp>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	f77f aeb3 	ble.w	8004d5e <_dtoa_r+0x68e>
 8004ff8:	4656      	mov	r6, sl
 8004ffa:	2331      	movs	r3, #49	@ 0x31
 8004ffc:	f806 3b01 	strb.w	r3, [r6], #1
 8005000:	9b04      	ldr	r3, [sp, #16]
 8005002:	3301      	adds	r3, #1
 8005004:	9304      	str	r3, [sp, #16]
 8005006:	e6ae      	b.n	8004d66 <_dtoa_r+0x696>
 8005008:	9c07      	ldr	r4, [sp, #28]
 800500a:	9704      	str	r7, [sp, #16]
 800500c:	4625      	mov	r5, r4
 800500e:	e7f3      	b.n	8004ff8 <_dtoa_r+0x928>
 8005010:	9b07      	ldr	r3, [sp, #28]
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8104 	beq.w	8005224 <_dtoa_r+0xb54>
 800501c:	2e00      	cmp	r6, #0
 800501e:	dd05      	ble.n	800502c <_dtoa_r+0x95c>
 8005020:	4629      	mov	r1, r5
 8005022:	4632      	mov	r2, r6
 8005024:	4658      	mov	r0, fp
 8005026:	f000 fc25 	bl	8005874 <__lshift>
 800502a:	4605      	mov	r5, r0
 800502c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800502e:	2b00      	cmp	r3, #0
 8005030:	d05a      	beq.n	80050e8 <_dtoa_r+0xa18>
 8005032:	6869      	ldr	r1, [r5, #4]
 8005034:	4658      	mov	r0, fp
 8005036:	f000 fa0f 	bl	8005458 <_Balloc>
 800503a:	4606      	mov	r6, r0
 800503c:	b928      	cbnz	r0, 800504a <_dtoa_r+0x97a>
 800503e:	4b84      	ldr	r3, [pc, #528]	@ (8005250 <_dtoa_r+0xb80>)
 8005040:	4602      	mov	r2, r0
 8005042:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005046:	f7ff bb5a 	b.w	80046fe <_dtoa_r+0x2e>
 800504a:	692a      	ldr	r2, [r5, #16]
 800504c:	3202      	adds	r2, #2
 800504e:	0092      	lsls	r2, r2, #2
 8005050:	f105 010c 	add.w	r1, r5, #12
 8005054:	300c      	adds	r0, #12
 8005056:	f7ff faa4 	bl	80045a2 <memcpy>
 800505a:	2201      	movs	r2, #1
 800505c:	4631      	mov	r1, r6
 800505e:	4658      	mov	r0, fp
 8005060:	f000 fc08 	bl	8005874 <__lshift>
 8005064:	f10a 0301 	add.w	r3, sl, #1
 8005068:	9307      	str	r3, [sp, #28]
 800506a:	9b00      	ldr	r3, [sp, #0]
 800506c:	4453      	add	r3, sl
 800506e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005070:	9b02      	ldr	r3, [sp, #8]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	462f      	mov	r7, r5
 8005078:	930a      	str	r3, [sp, #40]	@ 0x28
 800507a:	4605      	mov	r5, r0
 800507c:	9b07      	ldr	r3, [sp, #28]
 800507e:	4621      	mov	r1, r4
 8005080:	3b01      	subs	r3, #1
 8005082:	4648      	mov	r0, r9
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	f7ff fa9a 	bl	80045be <quorem>
 800508a:	4639      	mov	r1, r7
 800508c:	9002      	str	r0, [sp, #8]
 800508e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005092:	4648      	mov	r0, r9
 8005094:	f000 fc5a 	bl	800594c <__mcmp>
 8005098:	462a      	mov	r2, r5
 800509a:	9008      	str	r0, [sp, #32]
 800509c:	4621      	mov	r1, r4
 800509e:	4658      	mov	r0, fp
 80050a0:	f000 fc70 	bl	8005984 <__mdiff>
 80050a4:	68c2      	ldr	r2, [r0, #12]
 80050a6:	4606      	mov	r6, r0
 80050a8:	bb02      	cbnz	r2, 80050ec <_dtoa_r+0xa1c>
 80050aa:	4601      	mov	r1, r0
 80050ac:	4648      	mov	r0, r9
 80050ae:	f000 fc4d 	bl	800594c <__mcmp>
 80050b2:	4602      	mov	r2, r0
 80050b4:	4631      	mov	r1, r6
 80050b6:	4658      	mov	r0, fp
 80050b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80050ba:	f000 fa0d 	bl	80054d8 <_Bfree>
 80050be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80050c2:	9e07      	ldr	r6, [sp, #28]
 80050c4:	ea43 0102 	orr.w	r1, r3, r2
 80050c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050ca:	4319      	orrs	r1, r3
 80050cc:	d110      	bne.n	80050f0 <_dtoa_r+0xa20>
 80050ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80050d2:	d029      	beq.n	8005128 <_dtoa_r+0xa58>
 80050d4:	9b08      	ldr	r3, [sp, #32]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	dd02      	ble.n	80050e0 <_dtoa_r+0xa10>
 80050da:	9b02      	ldr	r3, [sp, #8]
 80050dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80050e0:	9b00      	ldr	r3, [sp, #0]
 80050e2:	f883 8000 	strb.w	r8, [r3]
 80050e6:	e63f      	b.n	8004d68 <_dtoa_r+0x698>
 80050e8:	4628      	mov	r0, r5
 80050ea:	e7bb      	b.n	8005064 <_dtoa_r+0x994>
 80050ec:	2201      	movs	r2, #1
 80050ee:	e7e1      	b.n	80050b4 <_dtoa_r+0x9e4>
 80050f0:	9b08      	ldr	r3, [sp, #32]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	db04      	blt.n	8005100 <_dtoa_r+0xa30>
 80050f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050f8:	430b      	orrs	r3, r1
 80050fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80050fc:	430b      	orrs	r3, r1
 80050fe:	d120      	bne.n	8005142 <_dtoa_r+0xa72>
 8005100:	2a00      	cmp	r2, #0
 8005102:	dded      	ble.n	80050e0 <_dtoa_r+0xa10>
 8005104:	4649      	mov	r1, r9
 8005106:	2201      	movs	r2, #1
 8005108:	4658      	mov	r0, fp
 800510a:	f000 fbb3 	bl	8005874 <__lshift>
 800510e:	4621      	mov	r1, r4
 8005110:	4681      	mov	r9, r0
 8005112:	f000 fc1b 	bl	800594c <__mcmp>
 8005116:	2800      	cmp	r0, #0
 8005118:	dc03      	bgt.n	8005122 <_dtoa_r+0xa52>
 800511a:	d1e1      	bne.n	80050e0 <_dtoa_r+0xa10>
 800511c:	f018 0f01 	tst.w	r8, #1
 8005120:	d0de      	beq.n	80050e0 <_dtoa_r+0xa10>
 8005122:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005126:	d1d8      	bne.n	80050da <_dtoa_r+0xa0a>
 8005128:	9a00      	ldr	r2, [sp, #0]
 800512a:	2339      	movs	r3, #57	@ 0x39
 800512c:	7013      	strb	r3, [r2, #0]
 800512e:	4633      	mov	r3, r6
 8005130:	461e      	mov	r6, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005138:	2a39      	cmp	r2, #57	@ 0x39
 800513a:	d052      	beq.n	80051e2 <_dtoa_r+0xb12>
 800513c:	3201      	adds	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e612      	b.n	8004d68 <_dtoa_r+0x698>
 8005142:	2a00      	cmp	r2, #0
 8005144:	dd07      	ble.n	8005156 <_dtoa_r+0xa86>
 8005146:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800514a:	d0ed      	beq.n	8005128 <_dtoa_r+0xa58>
 800514c:	9a00      	ldr	r2, [sp, #0]
 800514e:	f108 0301 	add.w	r3, r8, #1
 8005152:	7013      	strb	r3, [r2, #0]
 8005154:	e608      	b.n	8004d68 <_dtoa_r+0x698>
 8005156:	9b07      	ldr	r3, [sp, #28]
 8005158:	9a07      	ldr	r2, [sp, #28]
 800515a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800515e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005160:	4293      	cmp	r3, r2
 8005162:	d028      	beq.n	80051b6 <_dtoa_r+0xae6>
 8005164:	4649      	mov	r1, r9
 8005166:	2300      	movs	r3, #0
 8005168:	220a      	movs	r2, #10
 800516a:	4658      	mov	r0, fp
 800516c:	f000 f9d6 	bl	800551c <__multadd>
 8005170:	42af      	cmp	r7, r5
 8005172:	4681      	mov	r9, r0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	f04f 020a 	mov.w	r2, #10
 800517c:	4639      	mov	r1, r7
 800517e:	4658      	mov	r0, fp
 8005180:	d107      	bne.n	8005192 <_dtoa_r+0xac2>
 8005182:	f000 f9cb 	bl	800551c <__multadd>
 8005186:	4607      	mov	r7, r0
 8005188:	4605      	mov	r5, r0
 800518a:	9b07      	ldr	r3, [sp, #28]
 800518c:	3301      	adds	r3, #1
 800518e:	9307      	str	r3, [sp, #28]
 8005190:	e774      	b.n	800507c <_dtoa_r+0x9ac>
 8005192:	f000 f9c3 	bl	800551c <__multadd>
 8005196:	4629      	mov	r1, r5
 8005198:	4607      	mov	r7, r0
 800519a:	2300      	movs	r3, #0
 800519c:	220a      	movs	r2, #10
 800519e:	4658      	mov	r0, fp
 80051a0:	f000 f9bc 	bl	800551c <__multadd>
 80051a4:	4605      	mov	r5, r0
 80051a6:	e7f0      	b.n	800518a <_dtoa_r+0xaba>
 80051a8:	9b00      	ldr	r3, [sp, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bfcc      	ite	gt
 80051ae:	461e      	movgt	r6, r3
 80051b0:	2601      	movle	r6, #1
 80051b2:	4456      	add	r6, sl
 80051b4:	2700      	movs	r7, #0
 80051b6:	4649      	mov	r1, r9
 80051b8:	2201      	movs	r2, #1
 80051ba:	4658      	mov	r0, fp
 80051bc:	f000 fb5a 	bl	8005874 <__lshift>
 80051c0:	4621      	mov	r1, r4
 80051c2:	4681      	mov	r9, r0
 80051c4:	f000 fbc2 	bl	800594c <__mcmp>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	dcb0      	bgt.n	800512e <_dtoa_r+0xa5e>
 80051cc:	d102      	bne.n	80051d4 <_dtoa_r+0xb04>
 80051ce:	f018 0f01 	tst.w	r8, #1
 80051d2:	d1ac      	bne.n	800512e <_dtoa_r+0xa5e>
 80051d4:	4633      	mov	r3, r6
 80051d6:	461e      	mov	r6, r3
 80051d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051dc:	2a30      	cmp	r2, #48	@ 0x30
 80051de:	d0fa      	beq.n	80051d6 <_dtoa_r+0xb06>
 80051e0:	e5c2      	b.n	8004d68 <_dtoa_r+0x698>
 80051e2:	459a      	cmp	sl, r3
 80051e4:	d1a4      	bne.n	8005130 <_dtoa_r+0xa60>
 80051e6:	9b04      	ldr	r3, [sp, #16]
 80051e8:	3301      	adds	r3, #1
 80051ea:	9304      	str	r3, [sp, #16]
 80051ec:	2331      	movs	r3, #49	@ 0x31
 80051ee:	f88a 3000 	strb.w	r3, [sl]
 80051f2:	e5b9      	b.n	8004d68 <_dtoa_r+0x698>
 80051f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80051f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005254 <_dtoa_r+0xb84>
 80051fa:	b11b      	cbz	r3, 8005204 <_dtoa_r+0xb34>
 80051fc:	f10a 0308 	add.w	r3, sl, #8
 8005200:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	4650      	mov	r0, sl
 8005206:	b019      	add	sp, #100	@ 0x64
 8005208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800520e:	2b01      	cmp	r3, #1
 8005210:	f77f ae37 	ble.w	8004e82 <_dtoa_r+0x7b2>
 8005214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005216:	930a      	str	r3, [sp, #40]	@ 0x28
 8005218:	2001      	movs	r0, #1
 800521a:	e655      	b.n	8004ec8 <_dtoa_r+0x7f8>
 800521c:	9b00      	ldr	r3, [sp, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f77f aed6 	ble.w	8004fd0 <_dtoa_r+0x900>
 8005224:	4656      	mov	r6, sl
 8005226:	4621      	mov	r1, r4
 8005228:	4648      	mov	r0, r9
 800522a:	f7ff f9c8 	bl	80045be <quorem>
 800522e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005232:	f806 8b01 	strb.w	r8, [r6], #1
 8005236:	9b00      	ldr	r3, [sp, #0]
 8005238:	eba6 020a 	sub.w	r2, r6, sl
 800523c:	4293      	cmp	r3, r2
 800523e:	ddb3      	ble.n	80051a8 <_dtoa_r+0xad8>
 8005240:	4649      	mov	r1, r9
 8005242:	2300      	movs	r3, #0
 8005244:	220a      	movs	r2, #10
 8005246:	4658      	mov	r0, fp
 8005248:	f000 f968 	bl	800551c <__multadd>
 800524c:	4681      	mov	r9, r0
 800524e:	e7ea      	b.n	8005226 <_dtoa_r+0xb56>
 8005250:	08006760 	.word	0x08006760
 8005254:	080066e4 	.word	0x080066e4

08005258 <_free_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4605      	mov	r5, r0
 800525c:	2900      	cmp	r1, #0
 800525e:	d041      	beq.n	80052e4 <_free_r+0x8c>
 8005260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005264:	1f0c      	subs	r4, r1, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	bfb8      	it	lt
 800526a:	18e4      	addlt	r4, r4, r3
 800526c:	f000 f8e8 	bl	8005440 <__malloc_lock>
 8005270:	4a1d      	ldr	r2, [pc, #116]	@ (80052e8 <_free_r+0x90>)
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	b933      	cbnz	r3, 8005284 <_free_r+0x2c>
 8005276:	6063      	str	r3, [r4, #4]
 8005278:	6014      	str	r4, [r2, #0]
 800527a:	4628      	mov	r0, r5
 800527c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005280:	f000 b8e4 	b.w	800544c <__malloc_unlock>
 8005284:	42a3      	cmp	r3, r4
 8005286:	d908      	bls.n	800529a <_free_r+0x42>
 8005288:	6820      	ldr	r0, [r4, #0]
 800528a:	1821      	adds	r1, r4, r0
 800528c:	428b      	cmp	r3, r1
 800528e:	bf01      	itttt	eq
 8005290:	6819      	ldreq	r1, [r3, #0]
 8005292:	685b      	ldreq	r3, [r3, #4]
 8005294:	1809      	addeq	r1, r1, r0
 8005296:	6021      	streq	r1, [r4, #0]
 8005298:	e7ed      	b.n	8005276 <_free_r+0x1e>
 800529a:	461a      	mov	r2, r3
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	b10b      	cbz	r3, 80052a4 <_free_r+0x4c>
 80052a0:	42a3      	cmp	r3, r4
 80052a2:	d9fa      	bls.n	800529a <_free_r+0x42>
 80052a4:	6811      	ldr	r1, [r2, #0]
 80052a6:	1850      	adds	r0, r2, r1
 80052a8:	42a0      	cmp	r0, r4
 80052aa:	d10b      	bne.n	80052c4 <_free_r+0x6c>
 80052ac:	6820      	ldr	r0, [r4, #0]
 80052ae:	4401      	add	r1, r0
 80052b0:	1850      	adds	r0, r2, r1
 80052b2:	4283      	cmp	r3, r0
 80052b4:	6011      	str	r1, [r2, #0]
 80052b6:	d1e0      	bne.n	800527a <_free_r+0x22>
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	6053      	str	r3, [r2, #4]
 80052be:	4408      	add	r0, r1
 80052c0:	6010      	str	r0, [r2, #0]
 80052c2:	e7da      	b.n	800527a <_free_r+0x22>
 80052c4:	d902      	bls.n	80052cc <_free_r+0x74>
 80052c6:	230c      	movs	r3, #12
 80052c8:	602b      	str	r3, [r5, #0]
 80052ca:	e7d6      	b.n	800527a <_free_r+0x22>
 80052cc:	6820      	ldr	r0, [r4, #0]
 80052ce:	1821      	adds	r1, r4, r0
 80052d0:	428b      	cmp	r3, r1
 80052d2:	bf04      	itt	eq
 80052d4:	6819      	ldreq	r1, [r3, #0]
 80052d6:	685b      	ldreq	r3, [r3, #4]
 80052d8:	6063      	str	r3, [r4, #4]
 80052da:	bf04      	itt	eq
 80052dc:	1809      	addeq	r1, r1, r0
 80052de:	6021      	streq	r1, [r4, #0]
 80052e0:	6054      	str	r4, [r2, #4]
 80052e2:	e7ca      	b.n	800527a <_free_r+0x22>
 80052e4:	bd38      	pop	{r3, r4, r5, pc}
 80052e6:	bf00      	nop
 80052e8:	200003d0 	.word	0x200003d0

080052ec <malloc>:
 80052ec:	4b02      	ldr	r3, [pc, #8]	@ (80052f8 <malloc+0xc>)
 80052ee:	4601      	mov	r1, r0
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	f000 b825 	b.w	8005340 <_malloc_r>
 80052f6:	bf00      	nop
 80052f8:	20000018 	.word	0x20000018

080052fc <sbrk_aligned>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	4e0f      	ldr	r6, [pc, #60]	@ (800533c <sbrk_aligned+0x40>)
 8005300:	460c      	mov	r4, r1
 8005302:	6831      	ldr	r1, [r6, #0]
 8005304:	4605      	mov	r5, r0
 8005306:	b911      	cbnz	r1, 800530e <sbrk_aligned+0x12>
 8005308:	f000 fe46 	bl	8005f98 <_sbrk_r>
 800530c:	6030      	str	r0, [r6, #0]
 800530e:	4621      	mov	r1, r4
 8005310:	4628      	mov	r0, r5
 8005312:	f000 fe41 	bl	8005f98 <_sbrk_r>
 8005316:	1c43      	adds	r3, r0, #1
 8005318:	d103      	bne.n	8005322 <sbrk_aligned+0x26>
 800531a:	f04f 34ff 	mov.w	r4, #4294967295
 800531e:	4620      	mov	r0, r4
 8005320:	bd70      	pop	{r4, r5, r6, pc}
 8005322:	1cc4      	adds	r4, r0, #3
 8005324:	f024 0403 	bic.w	r4, r4, #3
 8005328:	42a0      	cmp	r0, r4
 800532a:	d0f8      	beq.n	800531e <sbrk_aligned+0x22>
 800532c:	1a21      	subs	r1, r4, r0
 800532e:	4628      	mov	r0, r5
 8005330:	f000 fe32 	bl	8005f98 <_sbrk_r>
 8005334:	3001      	adds	r0, #1
 8005336:	d1f2      	bne.n	800531e <sbrk_aligned+0x22>
 8005338:	e7ef      	b.n	800531a <sbrk_aligned+0x1e>
 800533a:	bf00      	nop
 800533c:	200003cc 	.word	0x200003cc

08005340 <_malloc_r>:
 8005340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005344:	1ccd      	adds	r5, r1, #3
 8005346:	f025 0503 	bic.w	r5, r5, #3
 800534a:	3508      	adds	r5, #8
 800534c:	2d0c      	cmp	r5, #12
 800534e:	bf38      	it	cc
 8005350:	250c      	movcc	r5, #12
 8005352:	2d00      	cmp	r5, #0
 8005354:	4606      	mov	r6, r0
 8005356:	db01      	blt.n	800535c <_malloc_r+0x1c>
 8005358:	42a9      	cmp	r1, r5
 800535a:	d904      	bls.n	8005366 <_malloc_r+0x26>
 800535c:	230c      	movs	r3, #12
 800535e:	6033      	str	r3, [r6, #0]
 8005360:	2000      	movs	r0, #0
 8005362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005366:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800543c <_malloc_r+0xfc>
 800536a:	f000 f869 	bl	8005440 <__malloc_lock>
 800536e:	f8d8 3000 	ldr.w	r3, [r8]
 8005372:	461c      	mov	r4, r3
 8005374:	bb44      	cbnz	r4, 80053c8 <_malloc_r+0x88>
 8005376:	4629      	mov	r1, r5
 8005378:	4630      	mov	r0, r6
 800537a:	f7ff ffbf 	bl	80052fc <sbrk_aligned>
 800537e:	1c43      	adds	r3, r0, #1
 8005380:	4604      	mov	r4, r0
 8005382:	d158      	bne.n	8005436 <_malloc_r+0xf6>
 8005384:	f8d8 4000 	ldr.w	r4, [r8]
 8005388:	4627      	mov	r7, r4
 800538a:	2f00      	cmp	r7, #0
 800538c:	d143      	bne.n	8005416 <_malloc_r+0xd6>
 800538e:	2c00      	cmp	r4, #0
 8005390:	d04b      	beq.n	800542a <_malloc_r+0xea>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	4639      	mov	r1, r7
 8005396:	4630      	mov	r0, r6
 8005398:	eb04 0903 	add.w	r9, r4, r3
 800539c:	f000 fdfc 	bl	8005f98 <_sbrk_r>
 80053a0:	4581      	cmp	r9, r0
 80053a2:	d142      	bne.n	800542a <_malloc_r+0xea>
 80053a4:	6821      	ldr	r1, [r4, #0]
 80053a6:	1a6d      	subs	r5, r5, r1
 80053a8:	4629      	mov	r1, r5
 80053aa:	4630      	mov	r0, r6
 80053ac:	f7ff ffa6 	bl	80052fc <sbrk_aligned>
 80053b0:	3001      	adds	r0, #1
 80053b2:	d03a      	beq.n	800542a <_malloc_r+0xea>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	442b      	add	r3, r5
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	f8d8 3000 	ldr.w	r3, [r8]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	bb62      	cbnz	r2, 800541c <_malloc_r+0xdc>
 80053c2:	f8c8 7000 	str.w	r7, [r8]
 80053c6:	e00f      	b.n	80053e8 <_malloc_r+0xa8>
 80053c8:	6822      	ldr	r2, [r4, #0]
 80053ca:	1b52      	subs	r2, r2, r5
 80053cc:	d420      	bmi.n	8005410 <_malloc_r+0xd0>
 80053ce:	2a0b      	cmp	r2, #11
 80053d0:	d917      	bls.n	8005402 <_malloc_r+0xc2>
 80053d2:	1961      	adds	r1, r4, r5
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	6025      	str	r5, [r4, #0]
 80053d8:	bf18      	it	ne
 80053da:	6059      	strne	r1, [r3, #4]
 80053dc:	6863      	ldr	r3, [r4, #4]
 80053de:	bf08      	it	eq
 80053e0:	f8c8 1000 	streq.w	r1, [r8]
 80053e4:	5162      	str	r2, [r4, r5]
 80053e6:	604b      	str	r3, [r1, #4]
 80053e8:	4630      	mov	r0, r6
 80053ea:	f000 f82f 	bl	800544c <__malloc_unlock>
 80053ee:	f104 000b 	add.w	r0, r4, #11
 80053f2:	1d23      	adds	r3, r4, #4
 80053f4:	f020 0007 	bic.w	r0, r0, #7
 80053f8:	1ac2      	subs	r2, r0, r3
 80053fa:	bf1c      	itt	ne
 80053fc:	1a1b      	subne	r3, r3, r0
 80053fe:	50a3      	strne	r3, [r4, r2]
 8005400:	e7af      	b.n	8005362 <_malloc_r+0x22>
 8005402:	6862      	ldr	r2, [r4, #4]
 8005404:	42a3      	cmp	r3, r4
 8005406:	bf0c      	ite	eq
 8005408:	f8c8 2000 	streq.w	r2, [r8]
 800540c:	605a      	strne	r2, [r3, #4]
 800540e:	e7eb      	b.n	80053e8 <_malloc_r+0xa8>
 8005410:	4623      	mov	r3, r4
 8005412:	6864      	ldr	r4, [r4, #4]
 8005414:	e7ae      	b.n	8005374 <_malloc_r+0x34>
 8005416:	463c      	mov	r4, r7
 8005418:	687f      	ldr	r7, [r7, #4]
 800541a:	e7b6      	b.n	800538a <_malloc_r+0x4a>
 800541c:	461a      	mov	r2, r3
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	42a3      	cmp	r3, r4
 8005422:	d1fb      	bne.n	800541c <_malloc_r+0xdc>
 8005424:	2300      	movs	r3, #0
 8005426:	6053      	str	r3, [r2, #4]
 8005428:	e7de      	b.n	80053e8 <_malloc_r+0xa8>
 800542a:	230c      	movs	r3, #12
 800542c:	6033      	str	r3, [r6, #0]
 800542e:	4630      	mov	r0, r6
 8005430:	f000 f80c 	bl	800544c <__malloc_unlock>
 8005434:	e794      	b.n	8005360 <_malloc_r+0x20>
 8005436:	6005      	str	r5, [r0, #0]
 8005438:	e7d6      	b.n	80053e8 <_malloc_r+0xa8>
 800543a:	bf00      	nop
 800543c:	200003d0 	.word	0x200003d0

08005440 <__malloc_lock>:
 8005440:	4801      	ldr	r0, [pc, #4]	@ (8005448 <__malloc_lock+0x8>)
 8005442:	f7ff b8ac 	b.w	800459e <__retarget_lock_acquire_recursive>
 8005446:	bf00      	nop
 8005448:	200003c8 	.word	0x200003c8

0800544c <__malloc_unlock>:
 800544c:	4801      	ldr	r0, [pc, #4]	@ (8005454 <__malloc_unlock+0x8>)
 800544e:	f7ff b8a7 	b.w	80045a0 <__retarget_lock_release_recursive>
 8005452:	bf00      	nop
 8005454:	200003c8 	.word	0x200003c8

08005458 <_Balloc>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	69c6      	ldr	r6, [r0, #28]
 800545c:	4604      	mov	r4, r0
 800545e:	460d      	mov	r5, r1
 8005460:	b976      	cbnz	r6, 8005480 <_Balloc+0x28>
 8005462:	2010      	movs	r0, #16
 8005464:	f7ff ff42 	bl	80052ec <malloc>
 8005468:	4602      	mov	r2, r0
 800546a:	61e0      	str	r0, [r4, #28]
 800546c:	b920      	cbnz	r0, 8005478 <_Balloc+0x20>
 800546e:	4b18      	ldr	r3, [pc, #96]	@ (80054d0 <_Balloc+0x78>)
 8005470:	4818      	ldr	r0, [pc, #96]	@ (80054d4 <_Balloc+0x7c>)
 8005472:	216b      	movs	r1, #107	@ 0x6b
 8005474:	f000 fda0 	bl	8005fb8 <__assert_func>
 8005478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800547c:	6006      	str	r6, [r0, #0]
 800547e:	60c6      	str	r6, [r0, #12]
 8005480:	69e6      	ldr	r6, [r4, #28]
 8005482:	68f3      	ldr	r3, [r6, #12]
 8005484:	b183      	cbz	r3, 80054a8 <_Balloc+0x50>
 8005486:	69e3      	ldr	r3, [r4, #28]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800548e:	b9b8      	cbnz	r0, 80054c0 <_Balloc+0x68>
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f605 	lsl.w	r6, r1, r5
 8005496:	1d72      	adds	r2, r6, #5
 8005498:	0092      	lsls	r2, r2, #2
 800549a:	4620      	mov	r0, r4
 800549c:	f000 fdaa 	bl	8005ff4 <_calloc_r>
 80054a0:	b160      	cbz	r0, 80054bc <_Balloc+0x64>
 80054a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054a6:	e00e      	b.n	80054c6 <_Balloc+0x6e>
 80054a8:	2221      	movs	r2, #33	@ 0x21
 80054aa:	2104      	movs	r1, #4
 80054ac:	4620      	mov	r0, r4
 80054ae:	f000 fda1 	bl	8005ff4 <_calloc_r>
 80054b2:	69e3      	ldr	r3, [r4, #28]
 80054b4:	60f0      	str	r0, [r6, #12]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e4      	bne.n	8005486 <_Balloc+0x2e>
 80054bc:	2000      	movs	r0, #0
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	6802      	ldr	r2, [r0, #0]
 80054c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054c6:	2300      	movs	r3, #0
 80054c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054cc:	e7f7      	b.n	80054be <_Balloc+0x66>
 80054ce:	bf00      	nop
 80054d0:	080066f1 	.word	0x080066f1
 80054d4:	08006771 	.word	0x08006771

080054d8 <_Bfree>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	69c6      	ldr	r6, [r0, #28]
 80054dc:	4605      	mov	r5, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	b976      	cbnz	r6, 8005500 <_Bfree+0x28>
 80054e2:	2010      	movs	r0, #16
 80054e4:	f7ff ff02 	bl	80052ec <malloc>
 80054e8:	4602      	mov	r2, r0
 80054ea:	61e8      	str	r0, [r5, #28]
 80054ec:	b920      	cbnz	r0, 80054f8 <_Bfree+0x20>
 80054ee:	4b09      	ldr	r3, [pc, #36]	@ (8005514 <_Bfree+0x3c>)
 80054f0:	4809      	ldr	r0, [pc, #36]	@ (8005518 <_Bfree+0x40>)
 80054f2:	218f      	movs	r1, #143	@ 0x8f
 80054f4:	f000 fd60 	bl	8005fb8 <__assert_func>
 80054f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054fc:	6006      	str	r6, [r0, #0]
 80054fe:	60c6      	str	r6, [r0, #12]
 8005500:	b13c      	cbz	r4, 8005512 <_Bfree+0x3a>
 8005502:	69eb      	ldr	r3, [r5, #28]
 8005504:	6862      	ldr	r2, [r4, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800550c:	6021      	str	r1, [r4, #0]
 800550e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	080066f1 	.word	0x080066f1
 8005518:	08006771 	.word	0x08006771

0800551c <__multadd>:
 800551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005520:	690d      	ldr	r5, [r1, #16]
 8005522:	4607      	mov	r7, r0
 8005524:	460c      	mov	r4, r1
 8005526:	461e      	mov	r6, r3
 8005528:	f101 0c14 	add.w	ip, r1, #20
 800552c:	2000      	movs	r0, #0
 800552e:	f8dc 3000 	ldr.w	r3, [ip]
 8005532:	b299      	uxth	r1, r3
 8005534:	fb02 6101 	mla	r1, r2, r1, r6
 8005538:	0c1e      	lsrs	r6, r3, #16
 800553a:	0c0b      	lsrs	r3, r1, #16
 800553c:	fb02 3306 	mla	r3, r2, r6, r3
 8005540:	b289      	uxth	r1, r1
 8005542:	3001      	adds	r0, #1
 8005544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005548:	4285      	cmp	r5, r0
 800554a:	f84c 1b04 	str.w	r1, [ip], #4
 800554e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005552:	dcec      	bgt.n	800552e <__multadd+0x12>
 8005554:	b30e      	cbz	r6, 800559a <__multadd+0x7e>
 8005556:	68a3      	ldr	r3, [r4, #8]
 8005558:	42ab      	cmp	r3, r5
 800555a:	dc19      	bgt.n	8005590 <__multadd+0x74>
 800555c:	6861      	ldr	r1, [r4, #4]
 800555e:	4638      	mov	r0, r7
 8005560:	3101      	adds	r1, #1
 8005562:	f7ff ff79 	bl	8005458 <_Balloc>
 8005566:	4680      	mov	r8, r0
 8005568:	b928      	cbnz	r0, 8005576 <__multadd+0x5a>
 800556a:	4602      	mov	r2, r0
 800556c:	4b0c      	ldr	r3, [pc, #48]	@ (80055a0 <__multadd+0x84>)
 800556e:	480d      	ldr	r0, [pc, #52]	@ (80055a4 <__multadd+0x88>)
 8005570:	21ba      	movs	r1, #186	@ 0xba
 8005572:	f000 fd21 	bl	8005fb8 <__assert_func>
 8005576:	6922      	ldr	r2, [r4, #16]
 8005578:	3202      	adds	r2, #2
 800557a:	f104 010c 	add.w	r1, r4, #12
 800557e:	0092      	lsls	r2, r2, #2
 8005580:	300c      	adds	r0, #12
 8005582:	f7ff f80e 	bl	80045a2 <memcpy>
 8005586:	4621      	mov	r1, r4
 8005588:	4638      	mov	r0, r7
 800558a:	f7ff ffa5 	bl	80054d8 <_Bfree>
 800558e:	4644      	mov	r4, r8
 8005590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005594:	3501      	adds	r5, #1
 8005596:	615e      	str	r6, [r3, #20]
 8005598:	6125      	str	r5, [r4, #16]
 800559a:	4620      	mov	r0, r4
 800559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a0:	08006760 	.word	0x08006760
 80055a4:	08006771 	.word	0x08006771

080055a8 <__hi0bits>:
 80055a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80055ac:	4603      	mov	r3, r0
 80055ae:	bf36      	itet	cc
 80055b0:	0403      	lslcc	r3, r0, #16
 80055b2:	2000      	movcs	r0, #0
 80055b4:	2010      	movcc	r0, #16
 80055b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055ba:	bf3c      	itt	cc
 80055bc:	021b      	lslcc	r3, r3, #8
 80055be:	3008      	addcc	r0, #8
 80055c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055c4:	bf3c      	itt	cc
 80055c6:	011b      	lslcc	r3, r3, #4
 80055c8:	3004      	addcc	r0, #4
 80055ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ce:	bf3c      	itt	cc
 80055d0:	009b      	lslcc	r3, r3, #2
 80055d2:	3002      	addcc	r0, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	db05      	blt.n	80055e4 <__hi0bits+0x3c>
 80055d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80055dc:	f100 0001 	add.w	r0, r0, #1
 80055e0:	bf08      	it	eq
 80055e2:	2020      	moveq	r0, #32
 80055e4:	4770      	bx	lr

080055e6 <__lo0bits>:
 80055e6:	6803      	ldr	r3, [r0, #0]
 80055e8:	4602      	mov	r2, r0
 80055ea:	f013 0007 	ands.w	r0, r3, #7
 80055ee:	d00b      	beq.n	8005608 <__lo0bits+0x22>
 80055f0:	07d9      	lsls	r1, r3, #31
 80055f2:	d421      	bmi.n	8005638 <__lo0bits+0x52>
 80055f4:	0798      	lsls	r0, r3, #30
 80055f6:	bf49      	itett	mi
 80055f8:	085b      	lsrmi	r3, r3, #1
 80055fa:	089b      	lsrpl	r3, r3, #2
 80055fc:	2001      	movmi	r0, #1
 80055fe:	6013      	strmi	r3, [r2, #0]
 8005600:	bf5c      	itt	pl
 8005602:	6013      	strpl	r3, [r2, #0]
 8005604:	2002      	movpl	r0, #2
 8005606:	4770      	bx	lr
 8005608:	b299      	uxth	r1, r3
 800560a:	b909      	cbnz	r1, 8005610 <__lo0bits+0x2a>
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	2010      	movs	r0, #16
 8005610:	b2d9      	uxtb	r1, r3
 8005612:	b909      	cbnz	r1, 8005618 <__lo0bits+0x32>
 8005614:	3008      	adds	r0, #8
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	0719      	lsls	r1, r3, #28
 800561a:	bf04      	itt	eq
 800561c:	091b      	lsreq	r3, r3, #4
 800561e:	3004      	addeq	r0, #4
 8005620:	0799      	lsls	r1, r3, #30
 8005622:	bf04      	itt	eq
 8005624:	089b      	lsreq	r3, r3, #2
 8005626:	3002      	addeq	r0, #2
 8005628:	07d9      	lsls	r1, r3, #31
 800562a:	d403      	bmi.n	8005634 <__lo0bits+0x4e>
 800562c:	085b      	lsrs	r3, r3, #1
 800562e:	f100 0001 	add.w	r0, r0, #1
 8005632:	d003      	beq.n	800563c <__lo0bits+0x56>
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	4770      	bx	lr
 8005638:	2000      	movs	r0, #0
 800563a:	4770      	bx	lr
 800563c:	2020      	movs	r0, #32
 800563e:	4770      	bx	lr

08005640 <__i2b>:
 8005640:	b510      	push	{r4, lr}
 8005642:	460c      	mov	r4, r1
 8005644:	2101      	movs	r1, #1
 8005646:	f7ff ff07 	bl	8005458 <_Balloc>
 800564a:	4602      	mov	r2, r0
 800564c:	b928      	cbnz	r0, 800565a <__i2b+0x1a>
 800564e:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <__i2b+0x24>)
 8005650:	4805      	ldr	r0, [pc, #20]	@ (8005668 <__i2b+0x28>)
 8005652:	f240 1145 	movw	r1, #325	@ 0x145
 8005656:	f000 fcaf 	bl	8005fb8 <__assert_func>
 800565a:	2301      	movs	r3, #1
 800565c:	6144      	str	r4, [r0, #20]
 800565e:	6103      	str	r3, [r0, #16]
 8005660:	bd10      	pop	{r4, pc}
 8005662:	bf00      	nop
 8005664:	08006760 	.word	0x08006760
 8005668:	08006771 	.word	0x08006771

0800566c <__multiply>:
 800566c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005670:	4614      	mov	r4, r2
 8005672:	690a      	ldr	r2, [r1, #16]
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	429a      	cmp	r2, r3
 8005678:	bfa8      	it	ge
 800567a:	4623      	movge	r3, r4
 800567c:	460f      	mov	r7, r1
 800567e:	bfa4      	itt	ge
 8005680:	460c      	movge	r4, r1
 8005682:	461f      	movge	r7, r3
 8005684:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005688:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800568c:	68a3      	ldr	r3, [r4, #8]
 800568e:	6861      	ldr	r1, [r4, #4]
 8005690:	eb0a 0609 	add.w	r6, sl, r9
 8005694:	42b3      	cmp	r3, r6
 8005696:	b085      	sub	sp, #20
 8005698:	bfb8      	it	lt
 800569a:	3101      	addlt	r1, #1
 800569c:	f7ff fedc 	bl	8005458 <_Balloc>
 80056a0:	b930      	cbnz	r0, 80056b0 <__multiply+0x44>
 80056a2:	4602      	mov	r2, r0
 80056a4:	4b44      	ldr	r3, [pc, #272]	@ (80057b8 <__multiply+0x14c>)
 80056a6:	4845      	ldr	r0, [pc, #276]	@ (80057bc <__multiply+0x150>)
 80056a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80056ac:	f000 fc84 	bl	8005fb8 <__assert_func>
 80056b0:	f100 0514 	add.w	r5, r0, #20
 80056b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80056b8:	462b      	mov	r3, r5
 80056ba:	2200      	movs	r2, #0
 80056bc:	4543      	cmp	r3, r8
 80056be:	d321      	bcc.n	8005704 <__multiply+0x98>
 80056c0:	f107 0114 	add.w	r1, r7, #20
 80056c4:	f104 0214 	add.w	r2, r4, #20
 80056c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80056cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80056d0:	9302      	str	r3, [sp, #8]
 80056d2:	1b13      	subs	r3, r2, r4
 80056d4:	3b15      	subs	r3, #21
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	3304      	adds	r3, #4
 80056dc:	f104 0715 	add.w	r7, r4, #21
 80056e0:	42ba      	cmp	r2, r7
 80056e2:	bf38      	it	cc
 80056e4:	2304      	movcc	r3, #4
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	9b02      	ldr	r3, [sp, #8]
 80056ea:	9103      	str	r1, [sp, #12]
 80056ec:	428b      	cmp	r3, r1
 80056ee:	d80c      	bhi.n	800570a <__multiply+0x9e>
 80056f0:	2e00      	cmp	r6, #0
 80056f2:	dd03      	ble.n	80056fc <__multiply+0x90>
 80056f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d05b      	beq.n	80057b4 <__multiply+0x148>
 80056fc:	6106      	str	r6, [r0, #16]
 80056fe:	b005      	add	sp, #20
 8005700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005704:	f843 2b04 	str.w	r2, [r3], #4
 8005708:	e7d8      	b.n	80056bc <__multiply+0x50>
 800570a:	f8b1 a000 	ldrh.w	sl, [r1]
 800570e:	f1ba 0f00 	cmp.w	sl, #0
 8005712:	d024      	beq.n	800575e <__multiply+0xf2>
 8005714:	f104 0e14 	add.w	lr, r4, #20
 8005718:	46a9      	mov	r9, r5
 800571a:	f04f 0c00 	mov.w	ip, #0
 800571e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005722:	f8d9 3000 	ldr.w	r3, [r9]
 8005726:	fa1f fb87 	uxth.w	fp, r7
 800572a:	b29b      	uxth	r3, r3
 800572c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005730:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005734:	f8d9 7000 	ldr.w	r7, [r9]
 8005738:	4463      	add	r3, ip
 800573a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800573e:	fb0a c70b 	mla	r7, sl, fp, ip
 8005742:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005746:	b29b      	uxth	r3, r3
 8005748:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800574c:	4572      	cmp	r2, lr
 800574e:	f849 3b04 	str.w	r3, [r9], #4
 8005752:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005756:	d8e2      	bhi.n	800571e <__multiply+0xb2>
 8005758:	9b01      	ldr	r3, [sp, #4]
 800575a:	f845 c003 	str.w	ip, [r5, r3]
 800575e:	9b03      	ldr	r3, [sp, #12]
 8005760:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005764:	3104      	adds	r1, #4
 8005766:	f1b9 0f00 	cmp.w	r9, #0
 800576a:	d021      	beq.n	80057b0 <__multiply+0x144>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	f104 0c14 	add.w	ip, r4, #20
 8005772:	46ae      	mov	lr, r5
 8005774:	f04f 0a00 	mov.w	sl, #0
 8005778:	f8bc b000 	ldrh.w	fp, [ip]
 800577c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005780:	fb09 770b 	mla	r7, r9, fp, r7
 8005784:	4457      	add	r7, sl
 8005786:	b29b      	uxth	r3, r3
 8005788:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800578c:	f84e 3b04 	str.w	r3, [lr], #4
 8005790:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005794:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005798:	f8be 3000 	ldrh.w	r3, [lr]
 800579c:	fb09 330a 	mla	r3, r9, sl, r3
 80057a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80057a4:	4562      	cmp	r2, ip
 80057a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057aa:	d8e5      	bhi.n	8005778 <__multiply+0x10c>
 80057ac:	9f01      	ldr	r7, [sp, #4]
 80057ae:	51eb      	str	r3, [r5, r7]
 80057b0:	3504      	adds	r5, #4
 80057b2:	e799      	b.n	80056e8 <__multiply+0x7c>
 80057b4:	3e01      	subs	r6, #1
 80057b6:	e79b      	b.n	80056f0 <__multiply+0x84>
 80057b8:	08006760 	.word	0x08006760
 80057bc:	08006771 	.word	0x08006771

080057c0 <__pow5mult>:
 80057c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c4:	4615      	mov	r5, r2
 80057c6:	f012 0203 	ands.w	r2, r2, #3
 80057ca:	4607      	mov	r7, r0
 80057cc:	460e      	mov	r6, r1
 80057ce:	d007      	beq.n	80057e0 <__pow5mult+0x20>
 80057d0:	4c25      	ldr	r4, [pc, #148]	@ (8005868 <__pow5mult+0xa8>)
 80057d2:	3a01      	subs	r2, #1
 80057d4:	2300      	movs	r3, #0
 80057d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057da:	f7ff fe9f 	bl	800551c <__multadd>
 80057de:	4606      	mov	r6, r0
 80057e0:	10ad      	asrs	r5, r5, #2
 80057e2:	d03d      	beq.n	8005860 <__pow5mult+0xa0>
 80057e4:	69fc      	ldr	r4, [r7, #28]
 80057e6:	b97c      	cbnz	r4, 8005808 <__pow5mult+0x48>
 80057e8:	2010      	movs	r0, #16
 80057ea:	f7ff fd7f 	bl	80052ec <malloc>
 80057ee:	4602      	mov	r2, r0
 80057f0:	61f8      	str	r0, [r7, #28]
 80057f2:	b928      	cbnz	r0, 8005800 <__pow5mult+0x40>
 80057f4:	4b1d      	ldr	r3, [pc, #116]	@ (800586c <__pow5mult+0xac>)
 80057f6:	481e      	ldr	r0, [pc, #120]	@ (8005870 <__pow5mult+0xb0>)
 80057f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80057fc:	f000 fbdc 	bl	8005fb8 <__assert_func>
 8005800:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005804:	6004      	str	r4, [r0, #0]
 8005806:	60c4      	str	r4, [r0, #12]
 8005808:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800580c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005810:	b94c      	cbnz	r4, 8005826 <__pow5mult+0x66>
 8005812:	f240 2171 	movw	r1, #625	@ 0x271
 8005816:	4638      	mov	r0, r7
 8005818:	f7ff ff12 	bl	8005640 <__i2b>
 800581c:	2300      	movs	r3, #0
 800581e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005822:	4604      	mov	r4, r0
 8005824:	6003      	str	r3, [r0, #0]
 8005826:	f04f 0900 	mov.w	r9, #0
 800582a:	07eb      	lsls	r3, r5, #31
 800582c:	d50a      	bpl.n	8005844 <__pow5mult+0x84>
 800582e:	4631      	mov	r1, r6
 8005830:	4622      	mov	r2, r4
 8005832:	4638      	mov	r0, r7
 8005834:	f7ff ff1a 	bl	800566c <__multiply>
 8005838:	4631      	mov	r1, r6
 800583a:	4680      	mov	r8, r0
 800583c:	4638      	mov	r0, r7
 800583e:	f7ff fe4b 	bl	80054d8 <_Bfree>
 8005842:	4646      	mov	r6, r8
 8005844:	106d      	asrs	r5, r5, #1
 8005846:	d00b      	beq.n	8005860 <__pow5mult+0xa0>
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	b938      	cbnz	r0, 800585c <__pow5mult+0x9c>
 800584c:	4622      	mov	r2, r4
 800584e:	4621      	mov	r1, r4
 8005850:	4638      	mov	r0, r7
 8005852:	f7ff ff0b 	bl	800566c <__multiply>
 8005856:	6020      	str	r0, [r4, #0]
 8005858:	f8c0 9000 	str.w	r9, [r0]
 800585c:	4604      	mov	r4, r0
 800585e:	e7e4      	b.n	800582a <__pow5mult+0x6a>
 8005860:	4630      	mov	r0, r6
 8005862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005866:	bf00      	nop
 8005868:	080067cc 	.word	0x080067cc
 800586c:	080066f1 	.word	0x080066f1
 8005870:	08006771 	.word	0x08006771

08005874 <__lshift>:
 8005874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005878:	460c      	mov	r4, r1
 800587a:	6849      	ldr	r1, [r1, #4]
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005882:	68a3      	ldr	r3, [r4, #8]
 8005884:	4607      	mov	r7, r0
 8005886:	4691      	mov	r9, r2
 8005888:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800588c:	f108 0601 	add.w	r6, r8, #1
 8005890:	42b3      	cmp	r3, r6
 8005892:	db0b      	blt.n	80058ac <__lshift+0x38>
 8005894:	4638      	mov	r0, r7
 8005896:	f7ff fddf 	bl	8005458 <_Balloc>
 800589a:	4605      	mov	r5, r0
 800589c:	b948      	cbnz	r0, 80058b2 <__lshift+0x3e>
 800589e:	4602      	mov	r2, r0
 80058a0:	4b28      	ldr	r3, [pc, #160]	@ (8005944 <__lshift+0xd0>)
 80058a2:	4829      	ldr	r0, [pc, #164]	@ (8005948 <__lshift+0xd4>)
 80058a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80058a8:	f000 fb86 	bl	8005fb8 <__assert_func>
 80058ac:	3101      	adds	r1, #1
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	e7ee      	b.n	8005890 <__lshift+0x1c>
 80058b2:	2300      	movs	r3, #0
 80058b4:	f100 0114 	add.w	r1, r0, #20
 80058b8:	f100 0210 	add.w	r2, r0, #16
 80058bc:	4618      	mov	r0, r3
 80058be:	4553      	cmp	r3, sl
 80058c0:	db33      	blt.n	800592a <__lshift+0xb6>
 80058c2:	6920      	ldr	r0, [r4, #16]
 80058c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058c8:	f104 0314 	add.w	r3, r4, #20
 80058cc:	f019 091f 	ands.w	r9, r9, #31
 80058d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80058d8:	d02b      	beq.n	8005932 <__lshift+0xbe>
 80058da:	f1c9 0e20 	rsb	lr, r9, #32
 80058de:	468a      	mov	sl, r1
 80058e0:	2200      	movs	r2, #0
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	fa00 f009 	lsl.w	r0, r0, r9
 80058e8:	4310      	orrs	r0, r2
 80058ea:	f84a 0b04 	str.w	r0, [sl], #4
 80058ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80058f2:	459c      	cmp	ip, r3
 80058f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80058f8:	d8f3      	bhi.n	80058e2 <__lshift+0x6e>
 80058fa:	ebac 0304 	sub.w	r3, ip, r4
 80058fe:	3b15      	subs	r3, #21
 8005900:	f023 0303 	bic.w	r3, r3, #3
 8005904:	3304      	adds	r3, #4
 8005906:	f104 0015 	add.w	r0, r4, #21
 800590a:	4584      	cmp	ip, r0
 800590c:	bf38      	it	cc
 800590e:	2304      	movcc	r3, #4
 8005910:	50ca      	str	r2, [r1, r3]
 8005912:	b10a      	cbz	r2, 8005918 <__lshift+0xa4>
 8005914:	f108 0602 	add.w	r6, r8, #2
 8005918:	3e01      	subs	r6, #1
 800591a:	4638      	mov	r0, r7
 800591c:	612e      	str	r6, [r5, #16]
 800591e:	4621      	mov	r1, r4
 8005920:	f7ff fdda 	bl	80054d8 <_Bfree>
 8005924:	4628      	mov	r0, r5
 8005926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592a:	f842 0f04 	str.w	r0, [r2, #4]!
 800592e:	3301      	adds	r3, #1
 8005930:	e7c5      	b.n	80058be <__lshift+0x4a>
 8005932:	3904      	subs	r1, #4
 8005934:	f853 2b04 	ldr.w	r2, [r3], #4
 8005938:	f841 2f04 	str.w	r2, [r1, #4]!
 800593c:	459c      	cmp	ip, r3
 800593e:	d8f9      	bhi.n	8005934 <__lshift+0xc0>
 8005940:	e7ea      	b.n	8005918 <__lshift+0xa4>
 8005942:	bf00      	nop
 8005944:	08006760 	.word	0x08006760
 8005948:	08006771 	.word	0x08006771

0800594c <__mcmp>:
 800594c:	690a      	ldr	r2, [r1, #16]
 800594e:	4603      	mov	r3, r0
 8005950:	6900      	ldr	r0, [r0, #16]
 8005952:	1a80      	subs	r0, r0, r2
 8005954:	b530      	push	{r4, r5, lr}
 8005956:	d10e      	bne.n	8005976 <__mcmp+0x2a>
 8005958:	3314      	adds	r3, #20
 800595a:	3114      	adds	r1, #20
 800595c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005960:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005964:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005968:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800596c:	4295      	cmp	r5, r2
 800596e:	d003      	beq.n	8005978 <__mcmp+0x2c>
 8005970:	d205      	bcs.n	800597e <__mcmp+0x32>
 8005972:	f04f 30ff 	mov.w	r0, #4294967295
 8005976:	bd30      	pop	{r4, r5, pc}
 8005978:	42a3      	cmp	r3, r4
 800597a:	d3f3      	bcc.n	8005964 <__mcmp+0x18>
 800597c:	e7fb      	b.n	8005976 <__mcmp+0x2a>
 800597e:	2001      	movs	r0, #1
 8005980:	e7f9      	b.n	8005976 <__mcmp+0x2a>
	...

08005984 <__mdiff>:
 8005984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	4689      	mov	r9, r1
 800598a:	4606      	mov	r6, r0
 800598c:	4611      	mov	r1, r2
 800598e:	4648      	mov	r0, r9
 8005990:	4614      	mov	r4, r2
 8005992:	f7ff ffdb 	bl	800594c <__mcmp>
 8005996:	1e05      	subs	r5, r0, #0
 8005998:	d112      	bne.n	80059c0 <__mdiff+0x3c>
 800599a:	4629      	mov	r1, r5
 800599c:	4630      	mov	r0, r6
 800599e:	f7ff fd5b 	bl	8005458 <_Balloc>
 80059a2:	4602      	mov	r2, r0
 80059a4:	b928      	cbnz	r0, 80059b2 <__mdiff+0x2e>
 80059a6:	4b3f      	ldr	r3, [pc, #252]	@ (8005aa4 <__mdiff+0x120>)
 80059a8:	f240 2137 	movw	r1, #567	@ 0x237
 80059ac:	483e      	ldr	r0, [pc, #248]	@ (8005aa8 <__mdiff+0x124>)
 80059ae:	f000 fb03 	bl	8005fb8 <__assert_func>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80059b8:	4610      	mov	r0, r2
 80059ba:	b003      	add	sp, #12
 80059bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c0:	bfbc      	itt	lt
 80059c2:	464b      	movlt	r3, r9
 80059c4:	46a1      	movlt	r9, r4
 80059c6:	4630      	mov	r0, r6
 80059c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80059cc:	bfba      	itte	lt
 80059ce:	461c      	movlt	r4, r3
 80059d0:	2501      	movlt	r5, #1
 80059d2:	2500      	movge	r5, #0
 80059d4:	f7ff fd40 	bl	8005458 <_Balloc>
 80059d8:	4602      	mov	r2, r0
 80059da:	b918      	cbnz	r0, 80059e4 <__mdiff+0x60>
 80059dc:	4b31      	ldr	r3, [pc, #196]	@ (8005aa4 <__mdiff+0x120>)
 80059de:	f240 2145 	movw	r1, #581	@ 0x245
 80059e2:	e7e3      	b.n	80059ac <__mdiff+0x28>
 80059e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80059e8:	6926      	ldr	r6, [r4, #16]
 80059ea:	60c5      	str	r5, [r0, #12]
 80059ec:	f109 0310 	add.w	r3, r9, #16
 80059f0:	f109 0514 	add.w	r5, r9, #20
 80059f4:	f104 0e14 	add.w	lr, r4, #20
 80059f8:	f100 0b14 	add.w	fp, r0, #20
 80059fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005a00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	46d9      	mov	r9, fp
 8005a08:	f04f 0c00 	mov.w	ip, #0
 8005a0c:	9b01      	ldr	r3, [sp, #4]
 8005a0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005a12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	fa1f f38a 	uxth.w	r3, sl
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	b283      	uxth	r3, r0
 8005a20:	1acb      	subs	r3, r1, r3
 8005a22:	0c00      	lsrs	r0, r0, #16
 8005a24:	4463      	add	r3, ip
 8005a26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005a2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005a34:	4576      	cmp	r6, lr
 8005a36:	f849 3b04 	str.w	r3, [r9], #4
 8005a3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a3e:	d8e5      	bhi.n	8005a0c <__mdiff+0x88>
 8005a40:	1b33      	subs	r3, r6, r4
 8005a42:	3b15      	subs	r3, #21
 8005a44:	f023 0303 	bic.w	r3, r3, #3
 8005a48:	3415      	adds	r4, #21
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	42a6      	cmp	r6, r4
 8005a4e:	bf38      	it	cc
 8005a50:	2304      	movcc	r3, #4
 8005a52:	441d      	add	r5, r3
 8005a54:	445b      	add	r3, fp
 8005a56:	461e      	mov	r6, r3
 8005a58:	462c      	mov	r4, r5
 8005a5a:	4544      	cmp	r4, r8
 8005a5c:	d30e      	bcc.n	8005a7c <__mdiff+0xf8>
 8005a5e:	f108 0103 	add.w	r1, r8, #3
 8005a62:	1b49      	subs	r1, r1, r5
 8005a64:	f021 0103 	bic.w	r1, r1, #3
 8005a68:	3d03      	subs	r5, #3
 8005a6a:	45a8      	cmp	r8, r5
 8005a6c:	bf38      	it	cc
 8005a6e:	2100      	movcc	r1, #0
 8005a70:	440b      	add	r3, r1
 8005a72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a76:	b191      	cbz	r1, 8005a9e <__mdiff+0x11a>
 8005a78:	6117      	str	r7, [r2, #16]
 8005a7a:	e79d      	b.n	80059b8 <__mdiff+0x34>
 8005a7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005a80:	46e6      	mov	lr, ip
 8005a82:	0c08      	lsrs	r0, r1, #16
 8005a84:	fa1c fc81 	uxtah	ip, ip, r1
 8005a88:	4471      	add	r1, lr
 8005a8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005a8e:	b289      	uxth	r1, r1
 8005a90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005a94:	f846 1b04 	str.w	r1, [r6], #4
 8005a98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a9c:	e7dd      	b.n	8005a5a <__mdiff+0xd6>
 8005a9e:	3f01      	subs	r7, #1
 8005aa0:	e7e7      	b.n	8005a72 <__mdiff+0xee>
 8005aa2:	bf00      	nop
 8005aa4:	08006760 	.word	0x08006760
 8005aa8:	08006771 	.word	0x08006771

08005aac <__d2b>:
 8005aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ab0:	460f      	mov	r7, r1
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	ec59 8b10 	vmov	r8, r9, d0
 8005ab8:	4616      	mov	r6, r2
 8005aba:	f7ff fccd 	bl	8005458 <_Balloc>
 8005abe:	4604      	mov	r4, r0
 8005ac0:	b930      	cbnz	r0, 8005ad0 <__d2b+0x24>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	4b23      	ldr	r3, [pc, #140]	@ (8005b54 <__d2b+0xa8>)
 8005ac6:	4824      	ldr	r0, [pc, #144]	@ (8005b58 <__d2b+0xac>)
 8005ac8:	f240 310f 	movw	r1, #783	@ 0x30f
 8005acc:	f000 fa74 	bl	8005fb8 <__assert_func>
 8005ad0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ad4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ad8:	b10d      	cbz	r5, 8005ade <__d2b+0x32>
 8005ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ade:	9301      	str	r3, [sp, #4]
 8005ae0:	f1b8 0300 	subs.w	r3, r8, #0
 8005ae4:	d023      	beq.n	8005b2e <__d2b+0x82>
 8005ae6:	4668      	mov	r0, sp
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	f7ff fd7c 	bl	80055e6 <__lo0bits>
 8005aee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005af2:	b1d0      	cbz	r0, 8005b2a <__d2b+0x7e>
 8005af4:	f1c0 0320 	rsb	r3, r0, #32
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	430b      	orrs	r3, r1
 8005afe:	40c2      	lsrs	r2, r0
 8005b00:	6163      	str	r3, [r4, #20]
 8005b02:	9201      	str	r2, [sp, #4]
 8005b04:	9b01      	ldr	r3, [sp, #4]
 8005b06:	61a3      	str	r3, [r4, #24]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2201      	moveq	r2, #1
 8005b0e:	2202      	movne	r2, #2
 8005b10:	6122      	str	r2, [r4, #16]
 8005b12:	b1a5      	cbz	r5, 8005b3e <__d2b+0x92>
 8005b14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005b18:	4405      	add	r5, r0
 8005b1a:	603d      	str	r5, [r7, #0]
 8005b1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005b20:	6030      	str	r0, [r6, #0]
 8005b22:	4620      	mov	r0, r4
 8005b24:	b003      	add	sp, #12
 8005b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b2a:	6161      	str	r1, [r4, #20]
 8005b2c:	e7ea      	b.n	8005b04 <__d2b+0x58>
 8005b2e:	a801      	add	r0, sp, #4
 8005b30:	f7ff fd59 	bl	80055e6 <__lo0bits>
 8005b34:	9b01      	ldr	r3, [sp, #4]
 8005b36:	6163      	str	r3, [r4, #20]
 8005b38:	3020      	adds	r0, #32
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	e7e8      	b.n	8005b10 <__d2b+0x64>
 8005b3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005b46:	6038      	str	r0, [r7, #0]
 8005b48:	6918      	ldr	r0, [r3, #16]
 8005b4a:	f7ff fd2d 	bl	80055a8 <__hi0bits>
 8005b4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b52:	e7e5      	b.n	8005b20 <__d2b+0x74>
 8005b54:	08006760 	.word	0x08006760
 8005b58:	08006771 	.word	0x08006771

08005b5c <__ssputs_r>:
 8005b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b60:	688e      	ldr	r6, [r1, #8]
 8005b62:	461f      	mov	r7, r3
 8005b64:	42be      	cmp	r6, r7
 8005b66:	680b      	ldr	r3, [r1, #0]
 8005b68:	4682      	mov	sl, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	4690      	mov	r8, r2
 8005b6e:	d82d      	bhi.n	8005bcc <__ssputs_r+0x70>
 8005b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b78:	d026      	beq.n	8005bc8 <__ssputs_r+0x6c>
 8005b7a:	6965      	ldr	r5, [r4, #20]
 8005b7c:	6909      	ldr	r1, [r1, #16]
 8005b7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b82:	eba3 0901 	sub.w	r9, r3, r1
 8005b86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b8a:	1c7b      	adds	r3, r7, #1
 8005b8c:	444b      	add	r3, r9
 8005b8e:	106d      	asrs	r5, r5, #1
 8005b90:	429d      	cmp	r5, r3
 8005b92:	bf38      	it	cc
 8005b94:	461d      	movcc	r5, r3
 8005b96:	0553      	lsls	r3, r2, #21
 8005b98:	d527      	bpl.n	8005bea <__ssputs_r+0x8e>
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	f7ff fbd0 	bl	8005340 <_malloc_r>
 8005ba0:	4606      	mov	r6, r0
 8005ba2:	b360      	cbz	r0, 8005bfe <__ssputs_r+0xa2>
 8005ba4:	6921      	ldr	r1, [r4, #16]
 8005ba6:	464a      	mov	r2, r9
 8005ba8:	f7fe fcfb 	bl	80045a2 <memcpy>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	6126      	str	r6, [r4, #16]
 8005bba:	6165      	str	r5, [r4, #20]
 8005bbc:	444e      	add	r6, r9
 8005bbe:	eba5 0509 	sub.w	r5, r5, r9
 8005bc2:	6026      	str	r6, [r4, #0]
 8005bc4:	60a5      	str	r5, [r4, #8]
 8005bc6:	463e      	mov	r6, r7
 8005bc8:	42be      	cmp	r6, r7
 8005bca:	d900      	bls.n	8005bce <__ssputs_r+0x72>
 8005bcc:	463e      	mov	r6, r7
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	4632      	mov	r2, r6
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	f000 f9c6 	bl	8005f64 <memmove>
 8005bd8:	68a3      	ldr	r3, [r4, #8]
 8005bda:	1b9b      	subs	r3, r3, r6
 8005bdc:	60a3      	str	r3, [r4, #8]
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	4433      	add	r3, r6
 8005be2:	6023      	str	r3, [r4, #0]
 8005be4:	2000      	movs	r0, #0
 8005be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bea:	462a      	mov	r2, r5
 8005bec:	f000 fa28 	bl	8006040 <_realloc_r>
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d1e0      	bne.n	8005bb8 <__ssputs_r+0x5c>
 8005bf6:	6921      	ldr	r1, [r4, #16]
 8005bf8:	4650      	mov	r0, sl
 8005bfa:	f7ff fb2d 	bl	8005258 <_free_r>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	f8ca 3000 	str.w	r3, [sl]
 8005c04:	89a3      	ldrh	r3, [r4, #12]
 8005c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c0a:	81a3      	strh	r3, [r4, #12]
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	e7e9      	b.n	8005be6 <__ssputs_r+0x8a>
	...

08005c14 <_svfiprintf_r>:
 8005c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c18:	4698      	mov	r8, r3
 8005c1a:	898b      	ldrh	r3, [r1, #12]
 8005c1c:	061b      	lsls	r3, r3, #24
 8005c1e:	b09d      	sub	sp, #116	@ 0x74
 8005c20:	4607      	mov	r7, r0
 8005c22:	460d      	mov	r5, r1
 8005c24:	4614      	mov	r4, r2
 8005c26:	d510      	bpl.n	8005c4a <_svfiprintf_r+0x36>
 8005c28:	690b      	ldr	r3, [r1, #16]
 8005c2a:	b973      	cbnz	r3, 8005c4a <_svfiprintf_r+0x36>
 8005c2c:	2140      	movs	r1, #64	@ 0x40
 8005c2e:	f7ff fb87 	bl	8005340 <_malloc_r>
 8005c32:	6028      	str	r0, [r5, #0]
 8005c34:	6128      	str	r0, [r5, #16]
 8005c36:	b930      	cbnz	r0, 8005c46 <_svfiprintf_r+0x32>
 8005c38:	230c      	movs	r3, #12
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c40:	b01d      	add	sp, #116	@ 0x74
 8005c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c46:	2340      	movs	r3, #64	@ 0x40
 8005c48:	616b      	str	r3, [r5, #20]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c4e:	2320      	movs	r3, #32
 8005c50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c58:	2330      	movs	r3, #48	@ 0x30
 8005c5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005df8 <_svfiprintf_r+0x1e4>
 8005c5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c62:	f04f 0901 	mov.w	r9, #1
 8005c66:	4623      	mov	r3, r4
 8005c68:	469a      	mov	sl, r3
 8005c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c6e:	b10a      	cbz	r2, 8005c74 <_svfiprintf_r+0x60>
 8005c70:	2a25      	cmp	r2, #37	@ 0x25
 8005c72:	d1f9      	bne.n	8005c68 <_svfiprintf_r+0x54>
 8005c74:	ebba 0b04 	subs.w	fp, sl, r4
 8005c78:	d00b      	beq.n	8005c92 <_svfiprintf_r+0x7e>
 8005c7a:	465b      	mov	r3, fp
 8005c7c:	4622      	mov	r2, r4
 8005c7e:	4629      	mov	r1, r5
 8005c80:	4638      	mov	r0, r7
 8005c82:	f7ff ff6b 	bl	8005b5c <__ssputs_r>
 8005c86:	3001      	adds	r0, #1
 8005c88:	f000 80a7 	beq.w	8005dda <_svfiprintf_r+0x1c6>
 8005c8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c8e:	445a      	add	r2, fp
 8005c90:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c92:	f89a 3000 	ldrb.w	r3, [sl]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 809f 	beq.w	8005dda <_svfiprintf_r+0x1c6>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ca6:	f10a 0a01 	add.w	sl, sl, #1
 8005caa:	9304      	str	r3, [sp, #16]
 8005cac:	9307      	str	r3, [sp, #28]
 8005cae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cb4:	4654      	mov	r4, sl
 8005cb6:	2205      	movs	r2, #5
 8005cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cbc:	484e      	ldr	r0, [pc, #312]	@ (8005df8 <_svfiprintf_r+0x1e4>)
 8005cbe:	f7fa fa8f 	bl	80001e0 <memchr>
 8005cc2:	9a04      	ldr	r2, [sp, #16]
 8005cc4:	b9d8      	cbnz	r0, 8005cfe <_svfiprintf_r+0xea>
 8005cc6:	06d0      	lsls	r0, r2, #27
 8005cc8:	bf44      	itt	mi
 8005cca:	2320      	movmi	r3, #32
 8005ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cd0:	0711      	lsls	r1, r2, #28
 8005cd2:	bf44      	itt	mi
 8005cd4:	232b      	movmi	r3, #43	@ 0x2b
 8005cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cda:	f89a 3000 	ldrb.w	r3, [sl]
 8005cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ce0:	d015      	beq.n	8005d0e <_svfiprintf_r+0xfa>
 8005ce2:	9a07      	ldr	r2, [sp, #28]
 8005ce4:	4654      	mov	r4, sl
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	f04f 0c0a 	mov.w	ip, #10
 8005cec:	4621      	mov	r1, r4
 8005cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cf2:	3b30      	subs	r3, #48	@ 0x30
 8005cf4:	2b09      	cmp	r3, #9
 8005cf6:	d94b      	bls.n	8005d90 <_svfiprintf_r+0x17c>
 8005cf8:	b1b0      	cbz	r0, 8005d28 <_svfiprintf_r+0x114>
 8005cfa:	9207      	str	r2, [sp, #28]
 8005cfc:	e014      	b.n	8005d28 <_svfiprintf_r+0x114>
 8005cfe:	eba0 0308 	sub.w	r3, r0, r8
 8005d02:	fa09 f303 	lsl.w	r3, r9, r3
 8005d06:	4313      	orrs	r3, r2
 8005d08:	9304      	str	r3, [sp, #16]
 8005d0a:	46a2      	mov	sl, r4
 8005d0c:	e7d2      	b.n	8005cb4 <_svfiprintf_r+0xa0>
 8005d0e:	9b03      	ldr	r3, [sp, #12]
 8005d10:	1d19      	adds	r1, r3, #4
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	9103      	str	r1, [sp, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bfbb      	ittet	lt
 8005d1a:	425b      	neglt	r3, r3
 8005d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8005d20:	9307      	strge	r3, [sp, #28]
 8005d22:	9307      	strlt	r3, [sp, #28]
 8005d24:	bfb8      	it	lt
 8005d26:	9204      	strlt	r2, [sp, #16]
 8005d28:	7823      	ldrb	r3, [r4, #0]
 8005d2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d2c:	d10a      	bne.n	8005d44 <_svfiprintf_r+0x130>
 8005d2e:	7863      	ldrb	r3, [r4, #1]
 8005d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d32:	d132      	bne.n	8005d9a <_svfiprintf_r+0x186>
 8005d34:	9b03      	ldr	r3, [sp, #12]
 8005d36:	1d1a      	adds	r2, r3, #4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	9203      	str	r2, [sp, #12]
 8005d3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d40:	3402      	adds	r4, #2
 8005d42:	9305      	str	r3, [sp, #20]
 8005d44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e08 <_svfiprintf_r+0x1f4>
 8005d48:	7821      	ldrb	r1, [r4, #0]
 8005d4a:	2203      	movs	r2, #3
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	f7fa fa47 	bl	80001e0 <memchr>
 8005d52:	b138      	cbz	r0, 8005d64 <_svfiprintf_r+0x150>
 8005d54:	9b04      	ldr	r3, [sp, #16]
 8005d56:	eba0 000a 	sub.w	r0, r0, sl
 8005d5a:	2240      	movs	r2, #64	@ 0x40
 8005d5c:	4082      	lsls	r2, r0
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	3401      	adds	r4, #1
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d68:	4824      	ldr	r0, [pc, #144]	@ (8005dfc <_svfiprintf_r+0x1e8>)
 8005d6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d6e:	2206      	movs	r2, #6
 8005d70:	f7fa fa36 	bl	80001e0 <memchr>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d036      	beq.n	8005de6 <_svfiprintf_r+0x1d2>
 8005d78:	4b21      	ldr	r3, [pc, #132]	@ (8005e00 <_svfiprintf_r+0x1ec>)
 8005d7a:	bb1b      	cbnz	r3, 8005dc4 <_svfiprintf_r+0x1b0>
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	3307      	adds	r3, #7
 8005d80:	f023 0307 	bic.w	r3, r3, #7
 8005d84:	3308      	adds	r3, #8
 8005d86:	9303      	str	r3, [sp, #12]
 8005d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d8a:	4433      	add	r3, r6
 8005d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d8e:	e76a      	b.n	8005c66 <_svfiprintf_r+0x52>
 8005d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d94:	460c      	mov	r4, r1
 8005d96:	2001      	movs	r0, #1
 8005d98:	e7a8      	b.n	8005cec <_svfiprintf_r+0xd8>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	3401      	adds	r4, #1
 8005d9e:	9305      	str	r3, [sp, #20]
 8005da0:	4619      	mov	r1, r3
 8005da2:	f04f 0c0a 	mov.w	ip, #10
 8005da6:	4620      	mov	r0, r4
 8005da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dac:	3a30      	subs	r2, #48	@ 0x30
 8005dae:	2a09      	cmp	r2, #9
 8005db0:	d903      	bls.n	8005dba <_svfiprintf_r+0x1a6>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0c6      	beq.n	8005d44 <_svfiprintf_r+0x130>
 8005db6:	9105      	str	r1, [sp, #20]
 8005db8:	e7c4      	b.n	8005d44 <_svfiprintf_r+0x130>
 8005dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e7f0      	b.n	8005da6 <_svfiprintf_r+0x192>
 8005dc4:	ab03      	add	r3, sp, #12
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	462a      	mov	r2, r5
 8005dca:	4b0e      	ldr	r3, [pc, #56]	@ (8005e04 <_svfiprintf_r+0x1f0>)
 8005dcc:	a904      	add	r1, sp, #16
 8005dce:	4638      	mov	r0, r7
 8005dd0:	f7fd fe8a 	bl	8003ae8 <_printf_float>
 8005dd4:	1c42      	adds	r2, r0, #1
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	d1d6      	bne.n	8005d88 <_svfiprintf_r+0x174>
 8005dda:	89ab      	ldrh	r3, [r5, #12]
 8005ddc:	065b      	lsls	r3, r3, #25
 8005dde:	f53f af2d 	bmi.w	8005c3c <_svfiprintf_r+0x28>
 8005de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005de4:	e72c      	b.n	8005c40 <_svfiprintf_r+0x2c>
 8005de6:	ab03      	add	r3, sp, #12
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	462a      	mov	r2, r5
 8005dec:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <_svfiprintf_r+0x1f0>)
 8005dee:	a904      	add	r1, sp, #16
 8005df0:	4638      	mov	r0, r7
 8005df2:	f7fe f911 	bl	8004018 <_printf_i>
 8005df6:	e7ed      	b.n	8005dd4 <_svfiprintf_r+0x1c0>
 8005df8:	080068c8 	.word	0x080068c8
 8005dfc:	080068d2 	.word	0x080068d2
 8005e00:	08003ae9 	.word	0x08003ae9
 8005e04:	08005b5d 	.word	0x08005b5d
 8005e08:	080068ce 	.word	0x080068ce

08005e0c <__sflush_r>:
 8005e0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e14:	0716      	lsls	r6, r2, #28
 8005e16:	4605      	mov	r5, r0
 8005e18:	460c      	mov	r4, r1
 8005e1a:	d454      	bmi.n	8005ec6 <__sflush_r+0xba>
 8005e1c:	684b      	ldr	r3, [r1, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	dc02      	bgt.n	8005e28 <__sflush_r+0x1c>
 8005e22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dd48      	ble.n	8005eba <__sflush_r+0xae>
 8005e28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e2a:	2e00      	cmp	r6, #0
 8005e2c:	d045      	beq.n	8005eba <__sflush_r+0xae>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e34:	682f      	ldr	r7, [r5, #0]
 8005e36:	6a21      	ldr	r1, [r4, #32]
 8005e38:	602b      	str	r3, [r5, #0]
 8005e3a:	d030      	beq.n	8005e9e <__sflush_r+0x92>
 8005e3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	0759      	lsls	r1, r3, #29
 8005e42:	d505      	bpl.n	8005e50 <__sflush_r+0x44>
 8005e44:	6863      	ldr	r3, [r4, #4]
 8005e46:	1ad2      	subs	r2, r2, r3
 8005e48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e4a:	b10b      	cbz	r3, 8005e50 <__sflush_r+0x44>
 8005e4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e4e:	1ad2      	subs	r2, r2, r3
 8005e50:	2300      	movs	r3, #0
 8005e52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e54:	6a21      	ldr	r1, [r4, #32]
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b0      	blx	r6
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	d106      	bne.n	8005e6e <__sflush_r+0x62>
 8005e60:	6829      	ldr	r1, [r5, #0]
 8005e62:	291d      	cmp	r1, #29
 8005e64:	d82b      	bhi.n	8005ebe <__sflush_r+0xb2>
 8005e66:	4a2a      	ldr	r2, [pc, #168]	@ (8005f10 <__sflush_r+0x104>)
 8005e68:	410a      	asrs	r2, r1
 8005e6a:	07d6      	lsls	r6, r2, #31
 8005e6c:	d427      	bmi.n	8005ebe <__sflush_r+0xb2>
 8005e6e:	2200      	movs	r2, #0
 8005e70:	6062      	str	r2, [r4, #4]
 8005e72:	04d9      	lsls	r1, r3, #19
 8005e74:	6922      	ldr	r2, [r4, #16]
 8005e76:	6022      	str	r2, [r4, #0]
 8005e78:	d504      	bpl.n	8005e84 <__sflush_r+0x78>
 8005e7a:	1c42      	adds	r2, r0, #1
 8005e7c:	d101      	bne.n	8005e82 <__sflush_r+0x76>
 8005e7e:	682b      	ldr	r3, [r5, #0]
 8005e80:	b903      	cbnz	r3, 8005e84 <__sflush_r+0x78>
 8005e82:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e86:	602f      	str	r7, [r5, #0]
 8005e88:	b1b9      	cbz	r1, 8005eba <__sflush_r+0xae>
 8005e8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e8e:	4299      	cmp	r1, r3
 8005e90:	d002      	beq.n	8005e98 <__sflush_r+0x8c>
 8005e92:	4628      	mov	r0, r5
 8005e94:	f7ff f9e0 	bl	8005258 <_free_r>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e9c:	e00d      	b.n	8005eba <__sflush_r+0xae>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b0      	blx	r6
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	1c50      	adds	r0, r2, #1
 8005ea8:	d1c9      	bne.n	8005e3e <__sflush_r+0x32>
 8005eaa:	682b      	ldr	r3, [r5, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0c6      	beq.n	8005e3e <__sflush_r+0x32>
 8005eb0:	2b1d      	cmp	r3, #29
 8005eb2:	d001      	beq.n	8005eb8 <__sflush_r+0xac>
 8005eb4:	2b16      	cmp	r3, #22
 8005eb6:	d11e      	bne.n	8005ef6 <__sflush_r+0xea>
 8005eb8:	602f      	str	r7, [r5, #0]
 8005eba:	2000      	movs	r0, #0
 8005ebc:	e022      	b.n	8005f04 <__sflush_r+0xf8>
 8005ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ec2:	b21b      	sxth	r3, r3
 8005ec4:	e01b      	b.n	8005efe <__sflush_r+0xf2>
 8005ec6:	690f      	ldr	r7, [r1, #16]
 8005ec8:	2f00      	cmp	r7, #0
 8005eca:	d0f6      	beq.n	8005eba <__sflush_r+0xae>
 8005ecc:	0793      	lsls	r3, r2, #30
 8005ece:	680e      	ldr	r6, [r1, #0]
 8005ed0:	bf08      	it	eq
 8005ed2:	694b      	ldreq	r3, [r1, #20]
 8005ed4:	600f      	str	r7, [r1, #0]
 8005ed6:	bf18      	it	ne
 8005ed8:	2300      	movne	r3, #0
 8005eda:	eba6 0807 	sub.w	r8, r6, r7
 8005ede:	608b      	str	r3, [r1, #8]
 8005ee0:	f1b8 0f00 	cmp.w	r8, #0
 8005ee4:	dde9      	ble.n	8005eba <__sflush_r+0xae>
 8005ee6:	6a21      	ldr	r1, [r4, #32]
 8005ee8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005eea:	4643      	mov	r3, r8
 8005eec:	463a      	mov	r2, r7
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b0      	blx	r6
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	dc08      	bgt.n	8005f08 <__sflush_r+0xfc>
 8005ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005efe:	81a3      	strh	r3, [r4, #12]
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
 8005f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f08:	4407      	add	r7, r0
 8005f0a:	eba8 0800 	sub.w	r8, r8, r0
 8005f0e:	e7e7      	b.n	8005ee0 <__sflush_r+0xd4>
 8005f10:	dfbffffe 	.word	0xdfbffffe

08005f14 <_fflush_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	690b      	ldr	r3, [r1, #16]
 8005f18:	4605      	mov	r5, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	b913      	cbnz	r3, 8005f24 <_fflush_r+0x10>
 8005f1e:	2500      	movs	r5, #0
 8005f20:	4628      	mov	r0, r5
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	b118      	cbz	r0, 8005f2e <_fflush_r+0x1a>
 8005f26:	6a03      	ldr	r3, [r0, #32]
 8005f28:	b90b      	cbnz	r3, 8005f2e <_fflush_r+0x1a>
 8005f2a:	f7fe fa21 	bl	8004370 <__sinit>
 8005f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f3      	beq.n	8005f1e <_fflush_r+0xa>
 8005f36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f38:	07d0      	lsls	r0, r2, #31
 8005f3a:	d404      	bmi.n	8005f46 <_fflush_r+0x32>
 8005f3c:	0599      	lsls	r1, r3, #22
 8005f3e:	d402      	bmi.n	8005f46 <_fflush_r+0x32>
 8005f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f42:	f7fe fb2c 	bl	800459e <__retarget_lock_acquire_recursive>
 8005f46:	4628      	mov	r0, r5
 8005f48:	4621      	mov	r1, r4
 8005f4a:	f7ff ff5f 	bl	8005e0c <__sflush_r>
 8005f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f50:	07da      	lsls	r2, r3, #31
 8005f52:	4605      	mov	r5, r0
 8005f54:	d4e4      	bmi.n	8005f20 <_fflush_r+0xc>
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	059b      	lsls	r3, r3, #22
 8005f5a:	d4e1      	bmi.n	8005f20 <_fflush_r+0xc>
 8005f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f5e:	f7fe fb1f 	bl	80045a0 <__retarget_lock_release_recursive>
 8005f62:	e7dd      	b.n	8005f20 <_fflush_r+0xc>

08005f64 <memmove>:
 8005f64:	4288      	cmp	r0, r1
 8005f66:	b510      	push	{r4, lr}
 8005f68:	eb01 0402 	add.w	r4, r1, r2
 8005f6c:	d902      	bls.n	8005f74 <memmove+0x10>
 8005f6e:	4284      	cmp	r4, r0
 8005f70:	4623      	mov	r3, r4
 8005f72:	d807      	bhi.n	8005f84 <memmove+0x20>
 8005f74:	1e43      	subs	r3, r0, #1
 8005f76:	42a1      	cmp	r1, r4
 8005f78:	d008      	beq.n	8005f8c <memmove+0x28>
 8005f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f82:	e7f8      	b.n	8005f76 <memmove+0x12>
 8005f84:	4402      	add	r2, r0
 8005f86:	4601      	mov	r1, r0
 8005f88:	428a      	cmp	r2, r1
 8005f8a:	d100      	bne.n	8005f8e <memmove+0x2a>
 8005f8c:	bd10      	pop	{r4, pc}
 8005f8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f96:	e7f7      	b.n	8005f88 <memmove+0x24>

08005f98 <_sbrk_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d06      	ldr	r5, [pc, #24]	@ (8005fb4 <_sbrk_r+0x1c>)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	f7fb fb18 	bl	80015d8 <_sbrk>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_sbrk_r+0x1a>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_sbrk_r+0x1a>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	200003c4 	.word	0x200003c4

08005fb8 <__assert_func>:
 8005fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fba:	4614      	mov	r4, r2
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4b09      	ldr	r3, [pc, #36]	@ (8005fe4 <__assert_func+0x2c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	68d8      	ldr	r0, [r3, #12]
 8005fc6:	b954      	cbnz	r4, 8005fde <__assert_func+0x26>
 8005fc8:	4b07      	ldr	r3, [pc, #28]	@ (8005fe8 <__assert_func+0x30>)
 8005fca:	461c      	mov	r4, r3
 8005fcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005fd0:	9100      	str	r1, [sp, #0]
 8005fd2:	462b      	mov	r3, r5
 8005fd4:	4905      	ldr	r1, [pc, #20]	@ (8005fec <__assert_func+0x34>)
 8005fd6:	f000 f86f 	bl	80060b8 <fiprintf>
 8005fda:	f000 f87f 	bl	80060dc <abort>
 8005fde:	4b04      	ldr	r3, [pc, #16]	@ (8005ff0 <__assert_func+0x38>)
 8005fe0:	e7f4      	b.n	8005fcc <__assert_func+0x14>
 8005fe2:	bf00      	nop
 8005fe4:	20000018 	.word	0x20000018
 8005fe8:	0800691e 	.word	0x0800691e
 8005fec:	080068f0 	.word	0x080068f0
 8005ff0:	080068e3 	.word	0x080068e3

08005ff4 <_calloc_r>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	fba1 5402 	umull	r5, r4, r1, r2
 8005ffa:	b93c      	cbnz	r4, 800600c <_calloc_r+0x18>
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	f7ff f99f 	bl	8005340 <_malloc_r>
 8006002:	4606      	mov	r6, r0
 8006004:	b928      	cbnz	r0, 8006012 <_calloc_r+0x1e>
 8006006:	2600      	movs	r6, #0
 8006008:	4630      	mov	r0, r6
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	220c      	movs	r2, #12
 800600e:	6002      	str	r2, [r0, #0]
 8006010:	e7f9      	b.n	8006006 <_calloc_r+0x12>
 8006012:	462a      	mov	r2, r5
 8006014:	4621      	mov	r1, r4
 8006016:	f7fe fa44 	bl	80044a2 <memset>
 800601a:	e7f5      	b.n	8006008 <_calloc_r+0x14>

0800601c <__ascii_mbtowc>:
 800601c:	b082      	sub	sp, #8
 800601e:	b901      	cbnz	r1, 8006022 <__ascii_mbtowc+0x6>
 8006020:	a901      	add	r1, sp, #4
 8006022:	b142      	cbz	r2, 8006036 <__ascii_mbtowc+0x1a>
 8006024:	b14b      	cbz	r3, 800603a <__ascii_mbtowc+0x1e>
 8006026:	7813      	ldrb	r3, [r2, #0]
 8006028:	600b      	str	r3, [r1, #0]
 800602a:	7812      	ldrb	r2, [r2, #0]
 800602c:	1e10      	subs	r0, r2, #0
 800602e:	bf18      	it	ne
 8006030:	2001      	movne	r0, #1
 8006032:	b002      	add	sp, #8
 8006034:	4770      	bx	lr
 8006036:	4610      	mov	r0, r2
 8006038:	e7fb      	b.n	8006032 <__ascii_mbtowc+0x16>
 800603a:	f06f 0001 	mvn.w	r0, #1
 800603e:	e7f8      	b.n	8006032 <__ascii_mbtowc+0x16>

08006040 <_realloc_r>:
 8006040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006044:	4680      	mov	r8, r0
 8006046:	4615      	mov	r5, r2
 8006048:	460c      	mov	r4, r1
 800604a:	b921      	cbnz	r1, 8006056 <_realloc_r+0x16>
 800604c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006050:	4611      	mov	r1, r2
 8006052:	f7ff b975 	b.w	8005340 <_malloc_r>
 8006056:	b92a      	cbnz	r2, 8006064 <_realloc_r+0x24>
 8006058:	f7ff f8fe 	bl	8005258 <_free_r>
 800605c:	2400      	movs	r4, #0
 800605e:	4620      	mov	r0, r4
 8006060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006064:	f000 f841 	bl	80060ea <_malloc_usable_size_r>
 8006068:	4285      	cmp	r5, r0
 800606a:	4606      	mov	r6, r0
 800606c:	d802      	bhi.n	8006074 <_realloc_r+0x34>
 800606e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006072:	d8f4      	bhi.n	800605e <_realloc_r+0x1e>
 8006074:	4629      	mov	r1, r5
 8006076:	4640      	mov	r0, r8
 8006078:	f7ff f962 	bl	8005340 <_malloc_r>
 800607c:	4607      	mov	r7, r0
 800607e:	2800      	cmp	r0, #0
 8006080:	d0ec      	beq.n	800605c <_realloc_r+0x1c>
 8006082:	42b5      	cmp	r5, r6
 8006084:	462a      	mov	r2, r5
 8006086:	4621      	mov	r1, r4
 8006088:	bf28      	it	cs
 800608a:	4632      	movcs	r2, r6
 800608c:	f7fe fa89 	bl	80045a2 <memcpy>
 8006090:	4621      	mov	r1, r4
 8006092:	4640      	mov	r0, r8
 8006094:	f7ff f8e0 	bl	8005258 <_free_r>
 8006098:	463c      	mov	r4, r7
 800609a:	e7e0      	b.n	800605e <_realloc_r+0x1e>

0800609c <__ascii_wctomb>:
 800609c:	4603      	mov	r3, r0
 800609e:	4608      	mov	r0, r1
 80060a0:	b141      	cbz	r1, 80060b4 <__ascii_wctomb+0x18>
 80060a2:	2aff      	cmp	r2, #255	@ 0xff
 80060a4:	d904      	bls.n	80060b0 <__ascii_wctomb+0x14>
 80060a6:	228a      	movs	r2, #138	@ 0x8a
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f04f 30ff 	mov.w	r0, #4294967295
 80060ae:	4770      	bx	lr
 80060b0:	700a      	strb	r2, [r1, #0]
 80060b2:	2001      	movs	r0, #1
 80060b4:	4770      	bx	lr
	...

080060b8 <fiprintf>:
 80060b8:	b40e      	push	{r1, r2, r3}
 80060ba:	b503      	push	{r0, r1, lr}
 80060bc:	4601      	mov	r1, r0
 80060be:	ab03      	add	r3, sp, #12
 80060c0:	4805      	ldr	r0, [pc, #20]	@ (80060d8 <fiprintf+0x20>)
 80060c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060c6:	6800      	ldr	r0, [r0, #0]
 80060c8:	9301      	str	r3, [sp, #4]
 80060ca:	f000 f83f 	bl	800614c <_vfiprintf_r>
 80060ce:	b002      	add	sp, #8
 80060d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060d4:	b003      	add	sp, #12
 80060d6:	4770      	bx	lr
 80060d8:	20000018 	.word	0x20000018

080060dc <abort>:
 80060dc:	b508      	push	{r3, lr}
 80060de:	2006      	movs	r0, #6
 80060e0:	f000 fa08 	bl	80064f4 <raise>
 80060e4:	2001      	movs	r0, #1
 80060e6:	f7fb f9ff 	bl	80014e8 <_exit>

080060ea <_malloc_usable_size_r>:
 80060ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ee:	1f18      	subs	r0, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	bfbc      	itt	lt
 80060f4:	580b      	ldrlt	r3, [r1, r0]
 80060f6:	18c0      	addlt	r0, r0, r3
 80060f8:	4770      	bx	lr

080060fa <__sfputc_r>:
 80060fa:	6893      	ldr	r3, [r2, #8]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	b410      	push	{r4}
 8006102:	6093      	str	r3, [r2, #8]
 8006104:	da08      	bge.n	8006118 <__sfputc_r+0x1e>
 8006106:	6994      	ldr	r4, [r2, #24]
 8006108:	42a3      	cmp	r3, r4
 800610a:	db01      	blt.n	8006110 <__sfputc_r+0x16>
 800610c:	290a      	cmp	r1, #10
 800610e:	d103      	bne.n	8006118 <__sfputc_r+0x1e>
 8006110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006114:	f000 b932 	b.w	800637c <__swbuf_r>
 8006118:	6813      	ldr	r3, [r2, #0]
 800611a:	1c58      	adds	r0, r3, #1
 800611c:	6010      	str	r0, [r2, #0]
 800611e:	7019      	strb	r1, [r3, #0]
 8006120:	4608      	mov	r0, r1
 8006122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006126:	4770      	bx	lr

08006128 <__sfputs_r>:
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	4606      	mov	r6, r0
 800612c:	460f      	mov	r7, r1
 800612e:	4614      	mov	r4, r2
 8006130:	18d5      	adds	r5, r2, r3
 8006132:	42ac      	cmp	r4, r5
 8006134:	d101      	bne.n	800613a <__sfputs_r+0x12>
 8006136:	2000      	movs	r0, #0
 8006138:	e007      	b.n	800614a <__sfputs_r+0x22>
 800613a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800613e:	463a      	mov	r2, r7
 8006140:	4630      	mov	r0, r6
 8006142:	f7ff ffda 	bl	80060fa <__sfputc_r>
 8006146:	1c43      	adds	r3, r0, #1
 8006148:	d1f3      	bne.n	8006132 <__sfputs_r+0xa>
 800614a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800614c <_vfiprintf_r>:
 800614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006150:	460d      	mov	r5, r1
 8006152:	b09d      	sub	sp, #116	@ 0x74
 8006154:	4614      	mov	r4, r2
 8006156:	4698      	mov	r8, r3
 8006158:	4606      	mov	r6, r0
 800615a:	b118      	cbz	r0, 8006164 <_vfiprintf_r+0x18>
 800615c:	6a03      	ldr	r3, [r0, #32]
 800615e:	b90b      	cbnz	r3, 8006164 <_vfiprintf_r+0x18>
 8006160:	f7fe f906 	bl	8004370 <__sinit>
 8006164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006166:	07d9      	lsls	r1, r3, #31
 8006168:	d405      	bmi.n	8006176 <_vfiprintf_r+0x2a>
 800616a:	89ab      	ldrh	r3, [r5, #12]
 800616c:	059a      	lsls	r2, r3, #22
 800616e:	d402      	bmi.n	8006176 <_vfiprintf_r+0x2a>
 8006170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006172:	f7fe fa14 	bl	800459e <__retarget_lock_acquire_recursive>
 8006176:	89ab      	ldrh	r3, [r5, #12]
 8006178:	071b      	lsls	r3, r3, #28
 800617a:	d501      	bpl.n	8006180 <_vfiprintf_r+0x34>
 800617c:	692b      	ldr	r3, [r5, #16]
 800617e:	b99b      	cbnz	r3, 80061a8 <_vfiprintf_r+0x5c>
 8006180:	4629      	mov	r1, r5
 8006182:	4630      	mov	r0, r6
 8006184:	f000 f938 	bl	80063f8 <__swsetup_r>
 8006188:	b170      	cbz	r0, 80061a8 <_vfiprintf_r+0x5c>
 800618a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800618c:	07dc      	lsls	r4, r3, #31
 800618e:	d504      	bpl.n	800619a <_vfiprintf_r+0x4e>
 8006190:	f04f 30ff 	mov.w	r0, #4294967295
 8006194:	b01d      	add	sp, #116	@ 0x74
 8006196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619a:	89ab      	ldrh	r3, [r5, #12]
 800619c:	0598      	lsls	r0, r3, #22
 800619e:	d4f7      	bmi.n	8006190 <_vfiprintf_r+0x44>
 80061a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061a2:	f7fe f9fd 	bl	80045a0 <__retarget_lock_release_recursive>
 80061a6:	e7f3      	b.n	8006190 <_vfiprintf_r+0x44>
 80061a8:	2300      	movs	r3, #0
 80061aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ac:	2320      	movs	r3, #32
 80061ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80061b6:	2330      	movs	r3, #48	@ 0x30
 80061b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006368 <_vfiprintf_r+0x21c>
 80061bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061c0:	f04f 0901 	mov.w	r9, #1
 80061c4:	4623      	mov	r3, r4
 80061c6:	469a      	mov	sl, r3
 80061c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061cc:	b10a      	cbz	r2, 80061d2 <_vfiprintf_r+0x86>
 80061ce:	2a25      	cmp	r2, #37	@ 0x25
 80061d0:	d1f9      	bne.n	80061c6 <_vfiprintf_r+0x7a>
 80061d2:	ebba 0b04 	subs.w	fp, sl, r4
 80061d6:	d00b      	beq.n	80061f0 <_vfiprintf_r+0xa4>
 80061d8:	465b      	mov	r3, fp
 80061da:	4622      	mov	r2, r4
 80061dc:	4629      	mov	r1, r5
 80061de:	4630      	mov	r0, r6
 80061e0:	f7ff ffa2 	bl	8006128 <__sfputs_r>
 80061e4:	3001      	adds	r0, #1
 80061e6:	f000 80a7 	beq.w	8006338 <_vfiprintf_r+0x1ec>
 80061ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061ec:	445a      	add	r2, fp
 80061ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80061f0:	f89a 3000 	ldrb.w	r3, [sl]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 809f 	beq.w	8006338 <_vfiprintf_r+0x1ec>
 80061fa:	2300      	movs	r3, #0
 80061fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006204:	f10a 0a01 	add.w	sl, sl, #1
 8006208:	9304      	str	r3, [sp, #16]
 800620a:	9307      	str	r3, [sp, #28]
 800620c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006210:	931a      	str	r3, [sp, #104]	@ 0x68
 8006212:	4654      	mov	r4, sl
 8006214:	2205      	movs	r2, #5
 8006216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800621a:	4853      	ldr	r0, [pc, #332]	@ (8006368 <_vfiprintf_r+0x21c>)
 800621c:	f7f9 ffe0 	bl	80001e0 <memchr>
 8006220:	9a04      	ldr	r2, [sp, #16]
 8006222:	b9d8      	cbnz	r0, 800625c <_vfiprintf_r+0x110>
 8006224:	06d1      	lsls	r1, r2, #27
 8006226:	bf44      	itt	mi
 8006228:	2320      	movmi	r3, #32
 800622a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800622e:	0713      	lsls	r3, r2, #28
 8006230:	bf44      	itt	mi
 8006232:	232b      	movmi	r3, #43	@ 0x2b
 8006234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006238:	f89a 3000 	ldrb.w	r3, [sl]
 800623c:	2b2a      	cmp	r3, #42	@ 0x2a
 800623e:	d015      	beq.n	800626c <_vfiprintf_r+0x120>
 8006240:	9a07      	ldr	r2, [sp, #28]
 8006242:	4654      	mov	r4, sl
 8006244:	2000      	movs	r0, #0
 8006246:	f04f 0c0a 	mov.w	ip, #10
 800624a:	4621      	mov	r1, r4
 800624c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006250:	3b30      	subs	r3, #48	@ 0x30
 8006252:	2b09      	cmp	r3, #9
 8006254:	d94b      	bls.n	80062ee <_vfiprintf_r+0x1a2>
 8006256:	b1b0      	cbz	r0, 8006286 <_vfiprintf_r+0x13a>
 8006258:	9207      	str	r2, [sp, #28]
 800625a:	e014      	b.n	8006286 <_vfiprintf_r+0x13a>
 800625c:	eba0 0308 	sub.w	r3, r0, r8
 8006260:	fa09 f303 	lsl.w	r3, r9, r3
 8006264:	4313      	orrs	r3, r2
 8006266:	9304      	str	r3, [sp, #16]
 8006268:	46a2      	mov	sl, r4
 800626a:	e7d2      	b.n	8006212 <_vfiprintf_r+0xc6>
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	1d19      	adds	r1, r3, #4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	9103      	str	r1, [sp, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	bfbb      	ittet	lt
 8006278:	425b      	neglt	r3, r3
 800627a:	f042 0202 	orrlt.w	r2, r2, #2
 800627e:	9307      	strge	r3, [sp, #28]
 8006280:	9307      	strlt	r3, [sp, #28]
 8006282:	bfb8      	it	lt
 8006284:	9204      	strlt	r2, [sp, #16]
 8006286:	7823      	ldrb	r3, [r4, #0]
 8006288:	2b2e      	cmp	r3, #46	@ 0x2e
 800628a:	d10a      	bne.n	80062a2 <_vfiprintf_r+0x156>
 800628c:	7863      	ldrb	r3, [r4, #1]
 800628e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006290:	d132      	bne.n	80062f8 <_vfiprintf_r+0x1ac>
 8006292:	9b03      	ldr	r3, [sp, #12]
 8006294:	1d1a      	adds	r2, r3, #4
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	9203      	str	r2, [sp, #12]
 800629a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800629e:	3402      	adds	r4, #2
 80062a0:	9305      	str	r3, [sp, #20]
 80062a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006378 <_vfiprintf_r+0x22c>
 80062a6:	7821      	ldrb	r1, [r4, #0]
 80062a8:	2203      	movs	r2, #3
 80062aa:	4650      	mov	r0, sl
 80062ac:	f7f9 ff98 	bl	80001e0 <memchr>
 80062b0:	b138      	cbz	r0, 80062c2 <_vfiprintf_r+0x176>
 80062b2:	9b04      	ldr	r3, [sp, #16]
 80062b4:	eba0 000a 	sub.w	r0, r0, sl
 80062b8:	2240      	movs	r2, #64	@ 0x40
 80062ba:	4082      	lsls	r2, r0
 80062bc:	4313      	orrs	r3, r2
 80062be:	3401      	adds	r4, #1
 80062c0:	9304      	str	r3, [sp, #16]
 80062c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c6:	4829      	ldr	r0, [pc, #164]	@ (800636c <_vfiprintf_r+0x220>)
 80062c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062cc:	2206      	movs	r2, #6
 80062ce:	f7f9 ff87 	bl	80001e0 <memchr>
 80062d2:	2800      	cmp	r0, #0
 80062d4:	d03f      	beq.n	8006356 <_vfiprintf_r+0x20a>
 80062d6:	4b26      	ldr	r3, [pc, #152]	@ (8006370 <_vfiprintf_r+0x224>)
 80062d8:	bb1b      	cbnz	r3, 8006322 <_vfiprintf_r+0x1d6>
 80062da:	9b03      	ldr	r3, [sp, #12]
 80062dc:	3307      	adds	r3, #7
 80062de:	f023 0307 	bic.w	r3, r3, #7
 80062e2:	3308      	adds	r3, #8
 80062e4:	9303      	str	r3, [sp, #12]
 80062e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e8:	443b      	add	r3, r7
 80062ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80062ec:	e76a      	b.n	80061c4 <_vfiprintf_r+0x78>
 80062ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80062f2:	460c      	mov	r4, r1
 80062f4:	2001      	movs	r0, #1
 80062f6:	e7a8      	b.n	800624a <_vfiprintf_r+0xfe>
 80062f8:	2300      	movs	r3, #0
 80062fa:	3401      	adds	r4, #1
 80062fc:	9305      	str	r3, [sp, #20]
 80062fe:	4619      	mov	r1, r3
 8006300:	f04f 0c0a 	mov.w	ip, #10
 8006304:	4620      	mov	r0, r4
 8006306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800630a:	3a30      	subs	r2, #48	@ 0x30
 800630c:	2a09      	cmp	r2, #9
 800630e:	d903      	bls.n	8006318 <_vfiprintf_r+0x1cc>
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0c6      	beq.n	80062a2 <_vfiprintf_r+0x156>
 8006314:	9105      	str	r1, [sp, #20]
 8006316:	e7c4      	b.n	80062a2 <_vfiprintf_r+0x156>
 8006318:	fb0c 2101 	mla	r1, ip, r1, r2
 800631c:	4604      	mov	r4, r0
 800631e:	2301      	movs	r3, #1
 8006320:	e7f0      	b.n	8006304 <_vfiprintf_r+0x1b8>
 8006322:	ab03      	add	r3, sp, #12
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	462a      	mov	r2, r5
 8006328:	4b12      	ldr	r3, [pc, #72]	@ (8006374 <_vfiprintf_r+0x228>)
 800632a:	a904      	add	r1, sp, #16
 800632c:	4630      	mov	r0, r6
 800632e:	f7fd fbdb 	bl	8003ae8 <_printf_float>
 8006332:	4607      	mov	r7, r0
 8006334:	1c78      	adds	r0, r7, #1
 8006336:	d1d6      	bne.n	80062e6 <_vfiprintf_r+0x19a>
 8006338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800633a:	07d9      	lsls	r1, r3, #31
 800633c:	d405      	bmi.n	800634a <_vfiprintf_r+0x1fe>
 800633e:	89ab      	ldrh	r3, [r5, #12]
 8006340:	059a      	lsls	r2, r3, #22
 8006342:	d402      	bmi.n	800634a <_vfiprintf_r+0x1fe>
 8006344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006346:	f7fe f92b 	bl	80045a0 <__retarget_lock_release_recursive>
 800634a:	89ab      	ldrh	r3, [r5, #12]
 800634c:	065b      	lsls	r3, r3, #25
 800634e:	f53f af1f 	bmi.w	8006190 <_vfiprintf_r+0x44>
 8006352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006354:	e71e      	b.n	8006194 <_vfiprintf_r+0x48>
 8006356:	ab03      	add	r3, sp, #12
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	462a      	mov	r2, r5
 800635c:	4b05      	ldr	r3, [pc, #20]	@ (8006374 <_vfiprintf_r+0x228>)
 800635e:	a904      	add	r1, sp, #16
 8006360:	4630      	mov	r0, r6
 8006362:	f7fd fe59 	bl	8004018 <_printf_i>
 8006366:	e7e4      	b.n	8006332 <_vfiprintf_r+0x1e6>
 8006368:	080068c8 	.word	0x080068c8
 800636c:	080068d2 	.word	0x080068d2
 8006370:	08003ae9 	.word	0x08003ae9
 8006374:	08006129 	.word	0x08006129
 8006378:	080068ce 	.word	0x080068ce

0800637c <__swbuf_r>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	460e      	mov	r6, r1
 8006380:	4614      	mov	r4, r2
 8006382:	4605      	mov	r5, r0
 8006384:	b118      	cbz	r0, 800638e <__swbuf_r+0x12>
 8006386:	6a03      	ldr	r3, [r0, #32]
 8006388:	b90b      	cbnz	r3, 800638e <__swbuf_r+0x12>
 800638a:	f7fd fff1 	bl	8004370 <__sinit>
 800638e:	69a3      	ldr	r3, [r4, #24]
 8006390:	60a3      	str	r3, [r4, #8]
 8006392:	89a3      	ldrh	r3, [r4, #12]
 8006394:	071a      	lsls	r2, r3, #28
 8006396:	d501      	bpl.n	800639c <__swbuf_r+0x20>
 8006398:	6923      	ldr	r3, [r4, #16]
 800639a:	b943      	cbnz	r3, 80063ae <__swbuf_r+0x32>
 800639c:	4621      	mov	r1, r4
 800639e:	4628      	mov	r0, r5
 80063a0:	f000 f82a 	bl	80063f8 <__swsetup_r>
 80063a4:	b118      	cbz	r0, 80063ae <__swbuf_r+0x32>
 80063a6:	f04f 37ff 	mov.w	r7, #4294967295
 80063aa:	4638      	mov	r0, r7
 80063ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	6922      	ldr	r2, [r4, #16]
 80063b2:	1a98      	subs	r0, r3, r2
 80063b4:	6963      	ldr	r3, [r4, #20]
 80063b6:	b2f6      	uxtb	r6, r6
 80063b8:	4283      	cmp	r3, r0
 80063ba:	4637      	mov	r7, r6
 80063bc:	dc05      	bgt.n	80063ca <__swbuf_r+0x4e>
 80063be:	4621      	mov	r1, r4
 80063c0:	4628      	mov	r0, r5
 80063c2:	f7ff fda7 	bl	8005f14 <_fflush_r>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d1ed      	bne.n	80063a6 <__swbuf_r+0x2a>
 80063ca:	68a3      	ldr	r3, [r4, #8]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	60a3      	str	r3, [r4, #8]
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	6022      	str	r2, [r4, #0]
 80063d6:	701e      	strb	r6, [r3, #0]
 80063d8:	6962      	ldr	r2, [r4, #20]
 80063da:	1c43      	adds	r3, r0, #1
 80063dc:	429a      	cmp	r2, r3
 80063de:	d004      	beq.n	80063ea <__swbuf_r+0x6e>
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	07db      	lsls	r3, r3, #31
 80063e4:	d5e1      	bpl.n	80063aa <__swbuf_r+0x2e>
 80063e6:	2e0a      	cmp	r6, #10
 80063e8:	d1df      	bne.n	80063aa <__swbuf_r+0x2e>
 80063ea:	4621      	mov	r1, r4
 80063ec:	4628      	mov	r0, r5
 80063ee:	f7ff fd91 	bl	8005f14 <_fflush_r>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d0d9      	beq.n	80063aa <__swbuf_r+0x2e>
 80063f6:	e7d6      	b.n	80063a6 <__swbuf_r+0x2a>

080063f8 <__swsetup_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4b29      	ldr	r3, [pc, #164]	@ (80064a0 <__swsetup_r+0xa8>)
 80063fc:	4605      	mov	r5, r0
 80063fe:	6818      	ldr	r0, [r3, #0]
 8006400:	460c      	mov	r4, r1
 8006402:	b118      	cbz	r0, 800640c <__swsetup_r+0x14>
 8006404:	6a03      	ldr	r3, [r0, #32]
 8006406:	b90b      	cbnz	r3, 800640c <__swsetup_r+0x14>
 8006408:	f7fd ffb2 	bl	8004370 <__sinit>
 800640c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006410:	0719      	lsls	r1, r3, #28
 8006412:	d422      	bmi.n	800645a <__swsetup_r+0x62>
 8006414:	06da      	lsls	r2, r3, #27
 8006416:	d407      	bmi.n	8006428 <__swsetup_r+0x30>
 8006418:	2209      	movs	r2, #9
 800641a:	602a      	str	r2, [r5, #0]
 800641c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	f04f 30ff 	mov.w	r0, #4294967295
 8006426:	e033      	b.n	8006490 <__swsetup_r+0x98>
 8006428:	0758      	lsls	r0, r3, #29
 800642a:	d512      	bpl.n	8006452 <__swsetup_r+0x5a>
 800642c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800642e:	b141      	cbz	r1, 8006442 <__swsetup_r+0x4a>
 8006430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006434:	4299      	cmp	r1, r3
 8006436:	d002      	beq.n	800643e <__swsetup_r+0x46>
 8006438:	4628      	mov	r0, r5
 800643a:	f7fe ff0d 	bl	8005258 <_free_r>
 800643e:	2300      	movs	r3, #0
 8006440:	6363      	str	r3, [r4, #52]	@ 0x34
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006448:	81a3      	strh	r3, [r4, #12]
 800644a:	2300      	movs	r3, #0
 800644c:	6063      	str	r3, [r4, #4]
 800644e:	6923      	ldr	r3, [r4, #16]
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	f043 0308 	orr.w	r3, r3, #8
 8006458:	81a3      	strh	r3, [r4, #12]
 800645a:	6923      	ldr	r3, [r4, #16]
 800645c:	b94b      	cbnz	r3, 8006472 <__swsetup_r+0x7a>
 800645e:	89a3      	ldrh	r3, [r4, #12]
 8006460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006468:	d003      	beq.n	8006472 <__swsetup_r+0x7a>
 800646a:	4621      	mov	r1, r4
 800646c:	4628      	mov	r0, r5
 800646e:	f000 f883 	bl	8006578 <__smakebuf_r>
 8006472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006476:	f013 0201 	ands.w	r2, r3, #1
 800647a:	d00a      	beq.n	8006492 <__swsetup_r+0x9a>
 800647c:	2200      	movs	r2, #0
 800647e:	60a2      	str	r2, [r4, #8]
 8006480:	6962      	ldr	r2, [r4, #20]
 8006482:	4252      	negs	r2, r2
 8006484:	61a2      	str	r2, [r4, #24]
 8006486:	6922      	ldr	r2, [r4, #16]
 8006488:	b942      	cbnz	r2, 800649c <__swsetup_r+0xa4>
 800648a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800648e:	d1c5      	bne.n	800641c <__swsetup_r+0x24>
 8006490:	bd38      	pop	{r3, r4, r5, pc}
 8006492:	0799      	lsls	r1, r3, #30
 8006494:	bf58      	it	pl
 8006496:	6962      	ldrpl	r2, [r4, #20]
 8006498:	60a2      	str	r2, [r4, #8]
 800649a:	e7f4      	b.n	8006486 <__swsetup_r+0x8e>
 800649c:	2000      	movs	r0, #0
 800649e:	e7f7      	b.n	8006490 <__swsetup_r+0x98>
 80064a0:	20000018 	.word	0x20000018

080064a4 <_raise_r>:
 80064a4:	291f      	cmp	r1, #31
 80064a6:	b538      	push	{r3, r4, r5, lr}
 80064a8:	4605      	mov	r5, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	d904      	bls.n	80064b8 <_raise_r+0x14>
 80064ae:	2316      	movs	r3, #22
 80064b0:	6003      	str	r3, [r0, #0]
 80064b2:	f04f 30ff 	mov.w	r0, #4294967295
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80064ba:	b112      	cbz	r2, 80064c2 <_raise_r+0x1e>
 80064bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064c0:	b94b      	cbnz	r3, 80064d6 <_raise_r+0x32>
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 f830 	bl	8006528 <_getpid_r>
 80064c8:	4622      	mov	r2, r4
 80064ca:	4601      	mov	r1, r0
 80064cc:	4628      	mov	r0, r5
 80064ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064d2:	f000 b817 	b.w	8006504 <_kill_r>
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d00a      	beq.n	80064f0 <_raise_r+0x4c>
 80064da:	1c59      	adds	r1, r3, #1
 80064dc:	d103      	bne.n	80064e6 <_raise_r+0x42>
 80064de:	2316      	movs	r3, #22
 80064e0:	6003      	str	r3, [r0, #0]
 80064e2:	2001      	movs	r0, #1
 80064e4:	e7e7      	b.n	80064b6 <_raise_r+0x12>
 80064e6:	2100      	movs	r1, #0
 80064e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80064ec:	4620      	mov	r0, r4
 80064ee:	4798      	blx	r3
 80064f0:	2000      	movs	r0, #0
 80064f2:	e7e0      	b.n	80064b6 <_raise_r+0x12>

080064f4 <raise>:
 80064f4:	4b02      	ldr	r3, [pc, #8]	@ (8006500 <raise+0xc>)
 80064f6:	4601      	mov	r1, r0
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	f7ff bfd3 	b.w	80064a4 <_raise_r>
 80064fe:	bf00      	nop
 8006500:	20000018 	.word	0x20000018

08006504 <_kill_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	4d07      	ldr	r5, [pc, #28]	@ (8006524 <_kill_r+0x20>)
 8006508:	2300      	movs	r3, #0
 800650a:	4604      	mov	r4, r0
 800650c:	4608      	mov	r0, r1
 800650e:	4611      	mov	r1, r2
 8006510:	602b      	str	r3, [r5, #0]
 8006512:	f7fa ffd9 	bl	80014c8 <_kill>
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	d102      	bne.n	8006520 <_kill_r+0x1c>
 800651a:	682b      	ldr	r3, [r5, #0]
 800651c:	b103      	cbz	r3, 8006520 <_kill_r+0x1c>
 800651e:	6023      	str	r3, [r4, #0]
 8006520:	bd38      	pop	{r3, r4, r5, pc}
 8006522:	bf00      	nop
 8006524:	200003c4 	.word	0x200003c4

08006528 <_getpid_r>:
 8006528:	f7fa bfc6 	b.w	80014b8 <_getpid>

0800652c <__swhatbuf_r>:
 800652c:	b570      	push	{r4, r5, r6, lr}
 800652e:	460c      	mov	r4, r1
 8006530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006534:	2900      	cmp	r1, #0
 8006536:	b096      	sub	sp, #88	@ 0x58
 8006538:	4615      	mov	r5, r2
 800653a:	461e      	mov	r6, r3
 800653c:	da0d      	bge.n	800655a <__swhatbuf_r+0x2e>
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006544:	f04f 0100 	mov.w	r1, #0
 8006548:	bf14      	ite	ne
 800654a:	2340      	movne	r3, #64	@ 0x40
 800654c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006550:	2000      	movs	r0, #0
 8006552:	6031      	str	r1, [r6, #0]
 8006554:	602b      	str	r3, [r5, #0]
 8006556:	b016      	add	sp, #88	@ 0x58
 8006558:	bd70      	pop	{r4, r5, r6, pc}
 800655a:	466a      	mov	r2, sp
 800655c:	f000 f848 	bl	80065f0 <_fstat_r>
 8006560:	2800      	cmp	r0, #0
 8006562:	dbec      	blt.n	800653e <__swhatbuf_r+0x12>
 8006564:	9901      	ldr	r1, [sp, #4]
 8006566:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800656a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800656e:	4259      	negs	r1, r3
 8006570:	4159      	adcs	r1, r3
 8006572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006576:	e7eb      	b.n	8006550 <__swhatbuf_r+0x24>

08006578 <__smakebuf_r>:
 8006578:	898b      	ldrh	r3, [r1, #12]
 800657a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800657c:	079d      	lsls	r5, r3, #30
 800657e:	4606      	mov	r6, r0
 8006580:	460c      	mov	r4, r1
 8006582:	d507      	bpl.n	8006594 <__smakebuf_r+0x1c>
 8006584:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	6123      	str	r3, [r4, #16]
 800658c:	2301      	movs	r3, #1
 800658e:	6163      	str	r3, [r4, #20]
 8006590:	b003      	add	sp, #12
 8006592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006594:	ab01      	add	r3, sp, #4
 8006596:	466a      	mov	r2, sp
 8006598:	f7ff ffc8 	bl	800652c <__swhatbuf_r>
 800659c:	9f00      	ldr	r7, [sp, #0]
 800659e:	4605      	mov	r5, r0
 80065a0:	4639      	mov	r1, r7
 80065a2:	4630      	mov	r0, r6
 80065a4:	f7fe fecc 	bl	8005340 <_malloc_r>
 80065a8:	b948      	cbnz	r0, 80065be <__smakebuf_r+0x46>
 80065aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ae:	059a      	lsls	r2, r3, #22
 80065b0:	d4ee      	bmi.n	8006590 <__smakebuf_r+0x18>
 80065b2:	f023 0303 	bic.w	r3, r3, #3
 80065b6:	f043 0302 	orr.w	r3, r3, #2
 80065ba:	81a3      	strh	r3, [r4, #12]
 80065bc:	e7e2      	b.n	8006584 <__smakebuf_r+0xc>
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	6020      	str	r0, [r4, #0]
 80065c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c6:	81a3      	strh	r3, [r4, #12]
 80065c8:	9b01      	ldr	r3, [sp, #4]
 80065ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80065ce:	b15b      	cbz	r3, 80065e8 <__smakebuf_r+0x70>
 80065d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065d4:	4630      	mov	r0, r6
 80065d6:	f000 f81d 	bl	8006614 <_isatty_r>
 80065da:	b128      	cbz	r0, 80065e8 <__smakebuf_r+0x70>
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	f023 0303 	bic.w	r3, r3, #3
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	431d      	orrs	r5, r3
 80065ec:	81a5      	strh	r5, [r4, #12]
 80065ee:	e7cf      	b.n	8006590 <__smakebuf_r+0x18>

080065f0 <_fstat_r>:
 80065f0:	b538      	push	{r3, r4, r5, lr}
 80065f2:	4d07      	ldr	r5, [pc, #28]	@ (8006610 <_fstat_r+0x20>)
 80065f4:	2300      	movs	r3, #0
 80065f6:	4604      	mov	r4, r0
 80065f8:	4608      	mov	r0, r1
 80065fa:	4611      	mov	r1, r2
 80065fc:	602b      	str	r3, [r5, #0]
 80065fe:	f7fa ffc3 	bl	8001588 <_fstat>
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	d102      	bne.n	800660c <_fstat_r+0x1c>
 8006606:	682b      	ldr	r3, [r5, #0]
 8006608:	b103      	cbz	r3, 800660c <_fstat_r+0x1c>
 800660a:	6023      	str	r3, [r4, #0]
 800660c:	bd38      	pop	{r3, r4, r5, pc}
 800660e:	bf00      	nop
 8006610:	200003c4 	.word	0x200003c4

08006614 <_isatty_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4d06      	ldr	r5, [pc, #24]	@ (8006630 <_isatty_r+0x1c>)
 8006618:	2300      	movs	r3, #0
 800661a:	4604      	mov	r4, r0
 800661c:	4608      	mov	r0, r1
 800661e:	602b      	str	r3, [r5, #0]
 8006620:	f7fa ffc2 	bl	80015a8 <_isatty>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d102      	bne.n	800662e <_isatty_r+0x1a>
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	b103      	cbz	r3, 800662e <_isatty_r+0x1a>
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	200003c4 	.word	0x200003c4

08006634 <_init>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	bf00      	nop
 8006638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663a:	bc08      	pop	{r3}
 800663c:	469e      	mov	lr, r3
 800663e:	4770      	bx	lr

08006640 <_fini>:
 8006640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006642:	bf00      	nop
 8006644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006646:	bc08      	pop	{r3}
 8006648:	469e      	mov	lr, r3
 800664a:	4770      	bx	lr
