
Receiving Data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007568  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08007708  08007708  00008708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab0  08007ab0  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007ab0  08007ab0  00008ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ab8  08007ab8  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ab8  08007ab8  00008ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007abc  08007abc  00008abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007ac0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  200001d4  08007c94  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000838  08007c94  00009838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c885  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f25  00000000  00000000  00015a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  000179b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ed  00000000  00000000  00018520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b63  00000000  00000000  00018e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e841  00000000  00000000  0001b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089abc  00000000  00000000  0002a1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3c6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c0  00000000  00000000  000b3cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000b7d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080076f0 	.word	0x080076f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080076f0 	.word	0x080076f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <decrypt>:

// Buffer for encryption/decryption operations (2 uint32_t for 8 bytes)
uint32_t data_buffer[2];

// Decryption Function
void decrypt(uint32_t v[2], const uint32_t k[4]) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b08d      	sub	sp, #52	@ 0x34
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
    uint32_t v0 = v[0], v1 = v[1], sum = 0xC6EF3720, i;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ebe:	4b26      	ldr	r3, [pc, #152]	@ (8000f58 <decrypt+0xb0>)
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t delta = 0x9E3779B9;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <decrypt+0xb4>)
 8000ec4:	61fb      	str	r3, [r7, #28]
    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	61bb      	str	r3, [r7, #24]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	3304      	adds	r3, #4
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	3308      	adds	r3, #8
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	330c      	adds	r3, #12
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 32; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
 8000ee8:	e026      	b.n	8000f38 <decrypt+0x90>
        v1 -= ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3);
 8000eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eec:	011a      	lsls	r2, r3, #4
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	441a      	add	r2, r3
 8000ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef6:	440b      	add	r3, r1
 8000ef8:	405a      	eors	r2, r3
 8000efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efc:	0959      	lsrs	r1, r3, #5
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	440b      	add	r3, r1
 8000f02:	4053      	eors	r3, r2
 8000f04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28
        v0 -= ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1);
 8000f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0c:	011a      	lsls	r2, r3, #4
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	441a      	add	r2, r3
 8000f12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f16:	440b      	add	r3, r1
 8000f18:	405a      	eors	r2, r3
 8000f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f1c:	0959      	lsrs	r1, r3, #5
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	440b      	add	r3, r1
 8000f22:	4053      	eors	r3, r2
 8000f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sum -= delta;
 8000f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 0; i < 32; i++) {
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	3301      	adds	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	2b1f      	cmp	r3, #31
 8000f3c:	d9d5      	bls.n	8000eea <decrypt+0x42>
    }
    v[0] = v0;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f42:	601a      	str	r2, [r3, #0]
    v[1] = v1;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3304      	adds	r3, #4
 8000f48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	3734      	adds	r7, #52	@ 0x34
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	c6ef3720 	.word	0xc6ef3720
 8000f5c:	9e3779b9 	.word	0x9e3779b9

08000f60 <decryptMessage>:

// Decrypt Message Function
void decryptMessage(uint8_t* input, size_t len) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
    // Ensure len is a multiple of 8
    if (len % 8 != 0) {
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <decryptMessage+0x1c>
        // Handle padding if necessary
        // For simplicity, ignore extra bytes
        len -= len % 8;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	f023 0307 	bic.w	r3, r3, #7
 8000f7a:	603b      	str	r3, [r7, #0]
    }

    // Copy input to buffer as uint32_t
    memcpy(data_buffer, input, len);
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	480f      	ldr	r0, [pc, #60]	@ (8000fc0 <decryptMessage+0x60>)
 8000f82:	f004 fb86 	bl	8005692 <memcpy>

    // Decrypt in blocks of 8 bytes (2 uint32_t)
    for (int i = 0; i < (len / 4); i += 2) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	e00a      	b.n	8000fa2 <decryptMessage+0x42>
        decrypt(&data_buffer[i], key);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <decryptMessage+0x60>)
 8000f92:	4413      	add	r3, r2
 8000f94:	490b      	ldr	r1, [pc, #44]	@ (8000fc4 <decryptMessage+0x64>)
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff86 	bl	8000ea8 <decrypt>
    for (int i = 0; i < (len / 4); i += 2) {
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	089a      	lsrs	r2, r3, #2
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8ef      	bhi.n	8000f8c <decryptMessage+0x2c>
    }

    // Copy back to input buffer
    memcpy(input, data_buffer, len);
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	4904      	ldr	r1, [pc, #16]	@ (8000fc0 <decryptMessage+0x60>)
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f004 fb6e 	bl	8005692 <memcpy>
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002d4 	.word	0x200002d4
 8000fc4:	08007714 	.word	0x08007714

08000fc8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1 && Size > 0) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001048 <HAL_UARTEx_RxEventCallback+0x80>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d130      	bne.n	800103e <HAL_UARTEx_RxEventCallback+0x76>
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d02d      	beq.n	800103e <HAL_UARTEx_RxEventCallback+0x76>
        // Store encrypted data first
        memcpy(RxData_Encrypted, RxData, sizeof(RxData));
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <HAL_UARTEx_RxEventCallback+0x84>)
 8000fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8001050 <HAL_UARTEx_RxEventCallback+0x88>)
 8000fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fea:	e883 0003 	stmia.w	r3, {r0, r1}

        // Decrypt the received data
        decryptMessage(RxData, sizeof(RxData));
 8000fee:	2108      	movs	r1, #8
 8000ff0:	4817      	ldr	r0, [pc, #92]	@ (8001050 <HAL_UARTEx_RxEventCallback+0x88>)
 8000ff2:	f7ff ffb5 	bl	8000f60 <decryptMessage>

        // Extract yPos from decrypted data
        yPos = RxData[0];
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <HAL_UARTEx_RxEventCallback+0x88>)
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000ffc:	701a      	strb	r2, [r3, #0]
        dataReceived = 1; // Set flag
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_UARTEx_RxEventCallback+0x90>)
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]

        // Re-enable reception before processing
        HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, sizeof(RxData));
 8001004:	2208      	movs	r2, #8
 8001006:	4912      	ldr	r1, [pc, #72]	@ (8001050 <HAL_UARTEx_RxEventCallback+0x88>)
 8001008:	480f      	ldr	r0, [pc, #60]	@ (8001048 <HAL_UARTEx_RxEventCallback+0x80>)
 800100a:	f002 fd12 	bl	8003a32 <HAL_UARTEx_ReceiveToIdle_IT>

        // Format and transmit debug message
        sprintf(msg, "yPos: %u\r\n", yPos);
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <HAL_UARTEx_RxEventCallback+0x8c>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4911      	ldr	r1, [pc, #68]	@ (800105c <HAL_UARTEx_RxEventCallback+0x94>)
 8001016:	4812      	ldr	r0, [pc, #72]	@ (8001060 <HAL_UARTEx_RxEventCallback+0x98>)
 8001018:	f004 fa3e 	bl	8005498 <siprintf>

        // Switch to transmit mode for debug output
        HAL_HalfDuplex_EnableTransmitter(&huart1);
 800101c:	480a      	ldr	r0, [pc, #40]	@ (8001048 <HAL_UARTEx_RxEventCallback+0x80>)
 800101e:	f003 f815 	bl	800404c <HAL_HalfDuplex_EnableTransmitter>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001022:	480f      	ldr	r0, [pc, #60]	@ (8001060 <HAL_UARTEx_RxEventCallback+0x98>)
 8001024:	f7ff f92c 	bl	8000280 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	490b      	ldr	r1, [pc, #44]	@ (8001060 <HAL_UARTEx_RxEventCallback+0x98>)
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <HAL_UARTEx_RxEventCallback+0x80>)
 8001034:	f002 fc72 	bl	800391c <HAL_UART_Transmit>
        HAL_HalfDuplex_EnableReceiver(&huart1);
 8001038:	4803      	ldr	r0, [pc, #12]	@ (8001048 <HAL_UARTEx_RxEventCallback+0x80>)
 800103a:	f003 f83b 	bl	80040b4 <HAL_HalfDuplex_EnableReceiver>
    }
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001f0 	.word	0x200001f0
 800104c:	20000294 	.word	0x20000294
 8001050:	2000028c 	.word	0x2000028c
 8001054:	2000029c 	.word	0x2000029c
 8001058:	200002d2 	.word	0x200002d2
 800105c:	08007708 	.word	0x08007708
 8001060:	200002a0 	.word	0x200002a0

08001064 <main>:


int main(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
    // Initialize the Hardware Abstraction Layer
    HAL_Init();
 8001068:	f000 fdba 	bl	8001be0 <HAL_Init>

    // Configure the system clock
    SystemClock_Config();
 800106c:	f000 f8b8 	bl	80011e0 <SystemClock_Config>

    // Initialize all configured peripherals
    MX_GPIO_Init();
 8001070:	f000 f862 	bl	8001138 <MX_GPIO_Init>
    MX_I2C1_Init();  // Add this line
 8001074:	f000 f91e 	bl	80012b4 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8001078:	f000 f834 	bl	80010e4 <MX_USART1_UART_Init>

    // Initialize the OLED display
    SSD1306_Init();  // Add this line
 800107c:	f000 f94e 	bl	800131c <SSD1306_Init>

    // Clear the display initially
    SSD1306_Clear();
 8001080:	f000 fab6 	bl	80015f0 <SSD1306_Clear>
    SSD1306_UpdateScreen();
 8001084:	f000 fa0e 	bl	80014a4 <SSD1306_UpdateScreen>

    // Initialize UART Reception in Half-Duplex Mode
    HAL_HalfDuplex_EnableReceiver(&huart1);
 8001088:	4811      	ldr	r0, [pc, #68]	@ (80010d0 <main+0x6c>)
 800108a:	f003 f813 	bl	80040b4 <HAL_HalfDuplex_EnableReceiver>
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, sizeof(RxData));
 800108e:	2208      	movs	r2, #8
 8001090:	4910      	ldr	r1, [pc, #64]	@ (80010d4 <main+0x70>)
 8001092:	480f      	ldr	r0, [pc, #60]	@ (80010d0 <main+0x6c>)
 8001094:	f002 fccd 	bl	8003a32 <HAL_UARTEx_ReceiveToIdle_IT>

    while(1) {
		if (dataReceived) {
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <main+0x74>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0fa      	beq.n	8001098 <main+0x34>
			dataReceived = 0; // Reset flag
 80010a2:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <main+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]

			// Update OLED Display
			SSD1306_ShiftBufferLeft();
 80010a8:	f000 fb46 	bl	8001738 <SSD1306_ShiftBufferLeft>
			SSD1306_DrawVerticalLineInRightmostColumn(prevYPos, yPos, SSD1306_COLOR_WHITE);
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <main+0x78>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4a0b      	ldr	r2, [pc, #44]	@ (80010e0 <main+0x7c>)
 80010b2:	7811      	ldrb	r1, [r2, #0]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fb64 	bl	8001784 <SSD1306_DrawVerticalLineInRightmostColumn>
			SSD1306_UpdateScreen();
 80010bc:	f000 f9f2 	bl	80014a4 <SSD1306_UpdateScreen>
			prevYPos = yPos;
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <main+0x7c>)
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <main+0x78>)
 80010c6:	701a      	strb	r2, [r3, #0]

			// Optional: Add a small delay if necessary
			HAL_Delay(10);
 80010c8:	200a      	movs	r0, #10
 80010ca:	f000 fdfb 	bl	8001cc4 <HAL_Delay>
		if (dataReceived) {
 80010ce:	e7e3      	b.n	8001098 <main+0x34>
 80010d0:	200001f0 	.word	0x200001f0
 80010d4:	2000028c 	.word	0x2000028c
 80010d8:	200002d2 	.word	0x200002d2
 80010dc:	2000029d 	.word	0x2000029d
 80010e0:	2000029c 	.word	0x2000029c

080010e4 <MX_USART1_UART_Init>:
		}
	}
}

static void MX_USART1_UART_Init(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <MX_USART1_UART_Init+0x50>)
 80010ec:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f4:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX; // Enable both TX and RX for Half-Duplex
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]

    if (HAL_HalfDuplex_Init(&huart1) != HAL_OK) {
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 800111c:	f002 fba6 	bl	800386c <HAL_HalfDuplex_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8001126:	f000 f8f3 	bl	8001310 <Error_Handler>
    }
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001f0 	.word	0x200001f0
 8001134:	40011000 	.word	0x40011000

08001138 <MX_GPIO_Init>:

static void MX_GPIO_Init(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b21      	ldr	r3, [pc, #132]	@ (80011d8 <MX_GPIO_Init+0xa0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a20      	ldr	r2, [pc, #128]	@ (80011d8 <MX_GPIO_Init+0xa0>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <MX_GPIO_Init+0xa0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MX_GPIO_Init+0xa0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a19      	ldr	r2, [pc, #100]	@ (80011d8 <MX_GPIO_Init+0xa0>)
 8001174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <MX_GPIO_Init+0xa0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <MX_GPIO_Init+0xa0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a12      	ldr	r2, [pc, #72]	@ (80011d8 <MX_GPIO_Init+0xa0>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <MX_GPIO_Init+0xa0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

    // Configure PC13 as Input with External Interrupt
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4619      	mov	r1, r3
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <MX_GPIO_Init+0xa4>)
 80011ba:	f000 ff4b 	bl	8002054 <HAL_GPIO_Init>

    // Set EXTI Line 15_10 Interrupt Priority and Enable it
    HAL_NVIC_SetPriority(EXTI15_10_IRQn,0,0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2028      	movs	r0, #40	@ 0x28
 80011c4:	f000 fe7d 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c8:	2028      	movs	r0, #40	@ 0x28
 80011ca:	f000 fe96 	bl	8001efa <HAL_NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020800 	.word	0x40020800

080011e0 <SystemClock_Config>:

void SystemClock_Config(void){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b094      	sub	sp, #80	@ 0x50
 80011e4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0320 	add.w	r3, r7, #32
 80011ea:	2230      	movs	r2, #48	@ 0x30
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 f9cf 	bl	8005592 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <SystemClock_Config+0xcc>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	4a27      	ldr	r2, [pc, #156]	@ (80012ac <SystemClock_Config+0xcc>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	@ 0x40
 8001214:	4b25      	ldr	r3, [pc, #148]	@ (80012ac <SystemClock_Config+0xcc>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <SystemClock_Config+0xd0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800122c:	4a20      	ldr	r2, [pc, #128]	@ (80012b0 <SystemClock_Config+0xd0>)
 800122e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <SystemClock_Config+0xd0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]

    // Initialize RCC Oscillators
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001248:	2310      	movs	r3, #16
 800124a:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001250:	2300      	movs	r3, #0
 8001252:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001254:	2308      	movs	r3, #8
 8001256:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 8001258:	2354      	movs	r3, #84	@ 0x54
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001260:	2304      	movs	r3, #4
 8001262:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fe67 	bl	8002f3c <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x98>
        Error_Handler();
 8001274:	f000 f84c 	bl	8001310 <Error_Handler>
    }

    // Initialize CPU, AHB and APB Clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2302      	movs	r3, #2
 800127e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001288:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK){
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2102      	movs	r1, #2
 8001294:	4618      	mov	r0, r3
 8001296:	f002 f8c9 	bl	800342c <HAL_RCC_ClockConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xc4>
        Error_Handler();
 80012a0:	f000 f836 	bl	8001310 <Error_Handler>
    }
}
 80012a4:	bf00      	nop
 80012a6:	3750      	adds	r7, #80	@ 0x50
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000

080012b4 <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012ba:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <MX_I2C1_Init+0x54>)
 80012bc:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012c0:	4a12      	ldr	r2, [pc, #72]	@ (800130c <MX_I2C1_Init+0x58>)
 80012c2:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012d6:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80012f0:	4804      	ldr	r0, [pc, #16]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012f2:	f001 f857 	bl	80023a4 <HAL_I2C_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C1_Init+0x4c>
        Error_Handler();
 80012fc:	f000 f808 	bl	8001310 <Error_Handler>
    }
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000238 	.word	0x20000238
 8001308:	40005400 	.word	0x40005400
 800130c:	00061a80 	.word	0x00061a80

08001310 <Error_Handler>:

void Error_Handler(void){
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
}
 8001316:	bf00      	nop
    __disable_irq();
    while (1){}
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <Error_Handler+0x8>

0800131c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001322:	f000 f96f 	bl	8001604 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001326:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800132a:	2201      	movs	r2, #1
 800132c:	2178      	movs	r1, #120	@ 0x78
 800132e:	485b      	ldr	r0, [pc, #364]	@ (800149c <SSD1306_Init+0x180>)
 8001330:	f001 fa7a 	bl	8002828 <HAL_I2C_IsDeviceReady>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800133a:	2300      	movs	r3, #0
 800133c:	e0a9      	b.n	8001492 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800133e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001342:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001344:	e002      	b.n	800134c <SSD1306_Init+0x30>
		p--;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3b01      	subs	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f9      	bne.n	8001346 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001352:	22ae      	movs	r2, #174	@ 0xae
 8001354:	2100      	movs	r1, #0
 8001356:	2078      	movs	r0, #120	@ 0x78
 8001358:	f000 f9d0 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800135c:	2220      	movs	r2, #32
 800135e:	2100      	movs	r1, #0
 8001360:	2078      	movs	r0, #120	@ 0x78
 8001362:	f000 f9cb 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001366:	2210      	movs	r2, #16
 8001368:	2100      	movs	r1, #0
 800136a:	2078      	movs	r0, #120	@ 0x78
 800136c:	f000 f9c6 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001370:	22b0      	movs	r2, #176	@ 0xb0
 8001372:	2100      	movs	r1, #0
 8001374:	2078      	movs	r0, #120	@ 0x78
 8001376:	f000 f9c1 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800137a:	22c8      	movs	r2, #200	@ 0xc8
 800137c:	2100      	movs	r1, #0
 800137e:	2078      	movs	r0, #120	@ 0x78
 8001380:	f000 f9bc 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2078      	movs	r0, #120	@ 0x78
 800138a:	f000 f9b7 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800138e:	2210      	movs	r2, #16
 8001390:	2100      	movs	r1, #0
 8001392:	2078      	movs	r0, #120	@ 0x78
 8001394:	f000 f9b2 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001398:	2240      	movs	r2, #64	@ 0x40
 800139a:	2100      	movs	r1, #0
 800139c:	2078      	movs	r0, #120	@ 0x78
 800139e:	f000 f9ad 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80013a2:	2281      	movs	r2, #129	@ 0x81
 80013a4:	2100      	movs	r1, #0
 80013a6:	2078      	movs	r0, #120	@ 0x78
 80013a8:	f000 f9a8 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80013ac:	22ff      	movs	r2, #255	@ 0xff
 80013ae:	2100      	movs	r1, #0
 80013b0:	2078      	movs	r0, #120	@ 0x78
 80013b2:	f000 f9a3 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80013b6:	22a1      	movs	r2, #161	@ 0xa1
 80013b8:	2100      	movs	r1, #0
 80013ba:	2078      	movs	r0, #120	@ 0x78
 80013bc:	f000 f99e 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80013c0:	22a6      	movs	r2, #166	@ 0xa6
 80013c2:	2100      	movs	r1, #0
 80013c4:	2078      	movs	r0, #120	@ 0x78
 80013c6:	f000 f999 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80013ca:	22a8      	movs	r2, #168	@ 0xa8
 80013cc:	2100      	movs	r1, #0
 80013ce:	2078      	movs	r0, #120	@ 0x78
 80013d0:	f000 f994 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80013d4:	223f      	movs	r2, #63	@ 0x3f
 80013d6:	2100      	movs	r1, #0
 80013d8:	2078      	movs	r0, #120	@ 0x78
 80013da:	f000 f98f 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013de:	22a4      	movs	r2, #164	@ 0xa4
 80013e0:	2100      	movs	r1, #0
 80013e2:	2078      	movs	r0, #120	@ 0x78
 80013e4:	f000 f98a 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80013e8:	22d3      	movs	r2, #211	@ 0xd3
 80013ea:	2100      	movs	r1, #0
 80013ec:	2078      	movs	r0, #120	@ 0x78
 80013ee:	f000 f985 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2078      	movs	r0, #120	@ 0x78
 80013f8:	f000 f980 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80013fc:	22d5      	movs	r2, #213	@ 0xd5
 80013fe:	2100      	movs	r1, #0
 8001400:	2078      	movs	r0, #120	@ 0x78
 8001402:	f000 f97b 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001406:	22f0      	movs	r2, #240	@ 0xf0
 8001408:	2100      	movs	r1, #0
 800140a:	2078      	movs	r0, #120	@ 0x78
 800140c:	f000 f976 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001410:	22d9      	movs	r2, #217	@ 0xd9
 8001412:	2100      	movs	r1, #0
 8001414:	2078      	movs	r0, #120	@ 0x78
 8001416:	f000 f971 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800141a:	2222      	movs	r2, #34	@ 0x22
 800141c:	2100      	movs	r1, #0
 800141e:	2078      	movs	r0, #120	@ 0x78
 8001420:	f000 f96c 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001424:	22da      	movs	r2, #218	@ 0xda
 8001426:	2100      	movs	r1, #0
 8001428:	2078      	movs	r0, #120	@ 0x78
 800142a:	f000 f967 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800142e:	2212      	movs	r2, #18
 8001430:	2100      	movs	r1, #0
 8001432:	2078      	movs	r0, #120	@ 0x78
 8001434:	f000 f962 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001438:	22db      	movs	r2, #219	@ 0xdb
 800143a:	2100      	movs	r1, #0
 800143c:	2078      	movs	r0, #120	@ 0x78
 800143e:	f000 f95d 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001442:	2220      	movs	r2, #32
 8001444:	2100      	movs	r1, #0
 8001446:	2078      	movs	r0, #120	@ 0x78
 8001448:	f000 f958 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800144c:	228d      	movs	r2, #141	@ 0x8d
 800144e:	2100      	movs	r1, #0
 8001450:	2078      	movs	r0, #120	@ 0x78
 8001452:	f000 f953 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001456:	2214      	movs	r2, #20
 8001458:	2100      	movs	r1, #0
 800145a:	2078      	movs	r0, #120	@ 0x78
 800145c:	f000 f94e 	bl	80016fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001460:	22af      	movs	r2, #175	@ 0xaf
 8001462:	2100      	movs	r1, #0
 8001464:	2078      	movs	r0, #120	@ 0x78
 8001466:	f000 f949 	bl	80016fc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800146a:	222e      	movs	r2, #46	@ 0x2e
 800146c:	2100      	movs	r1, #0
 800146e:	2078      	movs	r0, #120	@ 0x78
 8001470:	f000 f944 	bl	80016fc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f843 	bl	8001500 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800147a:	f000 f813 	bl	80014a4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800147e:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <SSD1306_Init+0x184>)
 8001480:	2200      	movs	r2, #0
 8001482:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <SSD1306_Init+0x184>)
 8001486:	2200      	movs	r2, #0
 8001488:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800148a:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <SSD1306_Init+0x184>)
 800148c:	2201      	movs	r2, #1
 800148e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001490:	2301      	movs	r3, #1
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000238 	.word	0x20000238
 80014a0:	200006dc 	.word	0x200006dc

080014a4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80014aa:	2300      	movs	r3, #0
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	e01d      	b.n	80014ec <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	3b50      	subs	r3, #80	@ 0x50
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	2100      	movs	r1, #0
 80014ba:	2078      	movs	r0, #120	@ 0x78
 80014bc:	f000 f91e 	bl	80016fc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	2078      	movs	r0, #120	@ 0x78
 80014c6:	f000 f919 	bl	80016fc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80014ca:	2210      	movs	r2, #16
 80014cc:	2100      	movs	r1, #0
 80014ce:	2078      	movs	r0, #120	@ 0x78
 80014d0:	f000 f914 	bl	80016fc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	01db      	lsls	r3, r3, #7
 80014d8:	4a08      	ldr	r2, [pc, #32]	@ (80014fc <SSD1306_UpdateScreen+0x58>)
 80014da:	441a      	add	r2, r3
 80014dc:	2380      	movs	r3, #128	@ 0x80
 80014de:	2140      	movs	r1, #64	@ 0x40
 80014e0:	2078      	movs	r0, #120	@ 0x78
 80014e2:	f000 f8a5 	bl	8001630 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	3301      	adds	r3, #1
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b07      	cmp	r3, #7
 80014f0:	d9de      	bls.n	80014b0 <SSD1306_UpdateScreen+0xc>
	}
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200002dc 	.word	0x200002dc

08001500 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <SSD1306_Fill+0x14>
 8001510:	2300      	movs	r3, #0
 8001512:	e000      	b.n	8001516 <SSD1306_Fill+0x16>
 8001514:	23ff      	movs	r3, #255	@ 0xff
 8001516:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800151a:	4619      	mov	r1, r3
 800151c:	4803      	ldr	r0, [pc, #12]	@ (800152c <SSD1306_Fill+0x2c>)
 800151e:	f004 f838 	bl	8005592 <memset>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200002dc 	.word	0x200002dc

08001530 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	80fb      	strh	r3, [r7, #6]
 800153a:	460b      	mov	r3, r1
 800153c:	80bb      	strh	r3, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	70fb      	strb	r3, [r7, #3]
	if (
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	2b7f      	cmp	r3, #127	@ 0x7f
 8001546:	d848      	bhi.n	80015da <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001548:	88bb      	ldrh	r3, [r7, #4]
 800154a:	2b3f      	cmp	r3, #63	@ 0x3f
 800154c:	d845      	bhi.n	80015da <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800154e:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <SSD1306_DrawPixel+0xb8>)
 8001550:	791b      	ldrb	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf0c      	ite	eq
 800155c:	2301      	moveq	r3, #1
 800155e:	2300      	movne	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d11a      	bne.n	80015a0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800156a:	88fa      	ldrh	r2, [r7, #6]
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	08db      	lsrs	r3, r3, #3
 8001570:	b298      	uxth	r0, r3
 8001572:	4603      	mov	r3, r0
 8001574:	01db      	lsls	r3, r3, #7
 8001576:	4413      	add	r3, r2
 8001578:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <SSD1306_DrawPixel+0xbc>)
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	b25a      	sxtb	r2, r3
 800157e:	88bb      	ldrh	r3, [r7, #4]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	2101      	movs	r1, #1
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	b25b      	sxtb	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b259      	sxtb	r1, r3
 8001590:	88fa      	ldrh	r2, [r7, #6]
 8001592:	4603      	mov	r3, r0
 8001594:	01db      	lsls	r3, r3, #7
 8001596:	4413      	add	r3, r2
 8001598:	b2c9      	uxtb	r1, r1
 800159a:	4a14      	ldr	r2, [pc, #80]	@ (80015ec <SSD1306_DrawPixel+0xbc>)
 800159c:	54d1      	strb	r1, [r2, r3]
 800159e:	e01d      	b.n	80015dc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015a0:	88fa      	ldrh	r2, [r7, #6]
 80015a2:	88bb      	ldrh	r3, [r7, #4]
 80015a4:	08db      	lsrs	r3, r3, #3
 80015a6:	b298      	uxth	r0, r3
 80015a8:	4603      	mov	r3, r0
 80015aa:	01db      	lsls	r3, r3, #7
 80015ac:	4413      	add	r3, r2
 80015ae:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <SSD1306_DrawPixel+0xbc>)
 80015b0:	5cd3      	ldrb	r3, [r2, r3]
 80015b2:	b25a      	sxtb	r2, r3
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	4013      	ands	r3, r2
 80015c8:	b259      	sxtb	r1, r3
 80015ca:	88fa      	ldrh	r2, [r7, #6]
 80015cc:	4603      	mov	r3, r0
 80015ce:	01db      	lsls	r3, r3, #7
 80015d0:	4413      	add	r3, r2
 80015d2:	b2c9      	uxtb	r1, r1
 80015d4:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <SSD1306_DrawPixel+0xbc>)
 80015d6:	54d1      	strb	r1, [r2, r3]
 80015d8:	e000      	b.n	80015dc <SSD1306_DrawPixel+0xac>
		return;
 80015da:	bf00      	nop
	}
}
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200006dc 	.word	0x200006dc
 80015ec:	200002dc 	.word	0x200002dc

080015f0 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff ff83 	bl	8001500 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80015fa:	f7ff ff53 	bl	80014a4 <SSD1306_UpdateScreen>
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800160a:	4b08      	ldr	r3, [pc, #32]	@ (800162c <ssd1306_I2C_Init+0x28>)
 800160c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800160e:	e002      	b.n	8001616 <ssd1306_I2C_Init+0x12>
		p--;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f9      	bne.n	8001610 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	0003d090 	.word	0x0003d090

08001630 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b0c7      	sub	sp, #284	@ 0x11c
 8001634:	af02      	add	r7, sp, #8
 8001636:	4604      	mov	r4, r0
 8001638:	4608      	mov	r0, r1
 800163a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800163e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001642:	600a      	str	r2, [r1, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800164a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800164e:	4622      	mov	r2, r4
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001656:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800165a:	4602      	mov	r2, r0
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001662:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001666:	460a      	mov	r2, r1
 8001668:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800166a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800166e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001672:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001676:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800167a:	7812      	ldrb	r2, [r2, #0]
 800167c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800167e:	2300      	movs	r3, #0
 8001680:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001684:	e015      	b.n	80016b2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001686:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800168a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800168e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	441a      	add	r2, r3
 8001696:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800169a:	3301      	adds	r3, #1
 800169c:	7811      	ldrb	r1, [r2, #0]
 800169e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016a2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016a6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80016a8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016ac:	3301      	adds	r3, #1
 80016ae:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80016b2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016bc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80016c0:	8812      	ldrh	r2, [r2, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d8df      	bhi.n	8001686 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80016c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016ca:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b299      	uxth	r1, r3
 80016d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	b29b      	uxth	r3, r3
 80016e0:	f107 020c 	add.w	r2, r7, #12
 80016e4:	200a      	movs	r0, #10
 80016e6:	9000      	str	r0, [sp, #0]
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <ssd1306_I2C_WriteMulti+0xc8>)
 80016ea:	f000 ff9f 	bl	800262c <HAL_I2C_Master_Transmit>
}
 80016ee:	bf00      	nop
 80016f0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	20000238 	.word	0x20000238

080016fc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af02      	add	r7, sp, #8
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	460b      	mov	r3, r1
 8001708:	71bb      	strb	r3, [r7, #6]
 800170a:	4613      	mov	r3, r2
 800170c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001712:	797b      	ldrb	r3, [r7, #5]
 8001714:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	b299      	uxth	r1, r3
 800171a:	f107 020c 	add.w	r2, r7, #12
 800171e:	230a      	movs	r3, #10
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2302      	movs	r3, #2
 8001724:	4803      	ldr	r0, [pc, #12]	@ (8001734 <ssd1306_I2C_Write+0x38>)
 8001726:	f000 ff81 	bl	800262c <HAL_I2C_Master_Transmit>
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000238 	.word	0x20000238

08001738 <SSD1306_ShiftBufferLeft>:

void SSD1306_ShiftBufferLeft(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < SSD1306_HEIGHT / 8; page++) {
 800173e:	2300      	movs	r3, #0
 8001740:	71fb      	strb	r3, [r7, #7]
 8001742:	e015      	b.n	8001770 <SSD1306_ShiftBufferLeft+0x38>
        memmove(&SSD1306_Buffer[page * SSD1306_WIDTH],
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	01db      	lsls	r3, r3, #7
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <SSD1306_ShiftBufferLeft+0x48>)
 800174a:	1898      	adds	r0, r3, r2
                &SSD1306_Buffer[page * SSD1306_WIDTH + 1],
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	01db      	lsls	r3, r3, #7
 8001750:	3301      	adds	r3, #1
 8001752:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <SSD1306_ShiftBufferLeft+0x48>)
 8001754:	4413      	add	r3, r2
        memmove(&SSD1306_Buffer[page * SSD1306_WIDTH],
 8001756:	227f      	movs	r2, #127	@ 0x7f
 8001758:	4619      	mov	r1, r3
 800175a:	f003 ff00 	bl	800555e <memmove>
                SSD1306_WIDTH - 1);
        SSD1306_Buffer[page * SSD1306_WIDTH + (SSD1306_WIDTH - 1)] = 0x00; // Clear the last column
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	01db      	lsls	r3, r3, #7
 8001762:	337f      	adds	r3, #127	@ 0x7f
 8001764:	4a06      	ldr	r2, [pc, #24]	@ (8001780 <SSD1306_ShiftBufferLeft+0x48>)
 8001766:	2100      	movs	r1, #0
 8001768:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = 0; page < SSD1306_HEIGHT / 8; page++) {
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	3301      	adds	r3, #1
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	2b07      	cmp	r3, #7
 8001774:	d9e6      	bls.n	8001744 <SSD1306_ShiftBufferLeft+0xc>
    }
}
 8001776:	bf00      	nop
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200002dc 	.word	0x200002dc

08001784 <SSD1306_DrawVerticalLineInRightmostColumn>:

void SSD1306_DrawVerticalLineInRightmostColumn(uint8_t y1, uint8_t y2, SSD1306_COLOR_t color) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	460b      	mov	r3, r1
 8001790:	71bb      	strb	r3, [r7, #6]
 8001792:	4613      	mov	r3, r2
 8001794:	717b      	strb	r3, [r7, #5]
    if (y1 > y2) {
 8001796:	79fa      	ldrb	r2, [r7, #7]
 8001798:	79bb      	ldrb	r3, [r7, #6]
 800179a:	429a      	cmp	r2, r3
 800179c:	d905      	bls.n	80017aa <SSD1306_DrawVerticalLineInRightmostColumn+0x26>
        uint8_t temp = y1;
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	73bb      	strb	r3, [r7, #14]
        y1 = y2;
 80017a2:	79bb      	ldrb	r3, [r7, #6]
 80017a4:	71fb      	strb	r3, [r7, #7]
        y2 = temp;
 80017a6:	7bbb      	ldrb	r3, [r7, #14]
 80017a8:	71bb      	strb	r3, [r7, #6]
    }
    for (uint8_t y = y1; y <= y2; y++) {
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e009      	b.n	80017c4 <SSD1306_DrawVerticalLineInRightmostColumn+0x40>
        SSD1306_DrawPixel(SSD1306_WIDTH - 1, y, color);
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	797a      	ldrb	r2, [r7, #5]
 80017b6:	4619      	mov	r1, r3
 80017b8:	207f      	movs	r0, #127	@ 0x7f
 80017ba:	f7ff feb9 	bl	8001530 <SSD1306_DrawPixel>
    for (uint8_t y = y1; y <= y2; y++) {
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	3301      	adds	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	7bfa      	ldrb	r2, [r7, #15]
 80017c6:	79bb      	ldrb	r3, [r7, #6]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d9f1      	bls.n	80017b0 <SSD1306_DrawVerticalLineInRightmostColumn+0x2c>
    }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_MspInit+0x4c>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001824 <HAL_MspInit+0x4c>)
 80017e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_MspInit+0x4c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <HAL_MspInit+0x4c>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a19      	ldr	r2, [pc, #100]	@ (80018ac <HAL_I2C_MspInit+0x84>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d12c      	bne.n	80018a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001866:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186c:	2312      	movs	r3, #18
 800186e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001878:	2304      	movs	r3, #4
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <HAL_I2C_MspInit+0x8c>)
 8001884:	f000 fbe6 	bl	8002054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	4a07      	ldr	r2, [pc, #28]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 8001892:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001896:	6413      	str	r3, [r2, #64]	@ 0x40
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	@ 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40005400 	.word	0x40005400
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020400 	.word	0x40020400

080018b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	@ 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a1d      	ldr	r2, [pc, #116]	@ (800194c <HAL_UART_MspInit+0x94>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d134      	bne.n	8001944 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <HAL_UART_MspInit+0x98>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001950 <HAL_UART_MspInit+0x98>)
 80018e4:	f043 0310 	orr.w	r3, r3, #16
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <HAL_UART_MspInit+0x98>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_UART_MspInit+0x98>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <HAL_UART_MspInit+0x98>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <HAL_UART_MspInit+0x98>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001912:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001918:	2312      	movs	r3, #18
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191c:	2301      	movs	r3, #1
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001924:	2307      	movs	r3, #7
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4809      	ldr	r0, [pc, #36]	@ (8001954 <HAL_UART_MspInit+0x9c>)
 8001930:	f000 fb90 	bl	8002054 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2025      	movs	r0, #37	@ 0x25
 800193a:	f000 fac2 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800193e:	2025      	movs	r0, #37	@ 0x25
 8001940:	f000 fadb 	bl	8001efa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	@ 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40011000 	.word	0x40011000
 8001950:	40023800 	.word	0x40023800
 8001954:	40020000 	.word	0x40020000

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <NMI_Handler+0x4>

08001960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <MemManage_Handler+0x4>

08001970 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <UsageFault_Handler+0x4>

08001980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ae:	f000 f969 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <USART1_IRQHandler+0x10>)
 80019be:	f002 f895 	bl	8003aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200001f0 	.word	0x200001f0

080019cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019d4:	f000 fcc2 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_kill>:

int _kill(int pid, int sig)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f6:	f003 fe1f 	bl	8005638 <__errno>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2216      	movs	r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_exit>:

void _exit (int status)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffe7 	bl	80019ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a1e:	bf00      	nop
 8001a20:	e7fd      	b.n	8001a1e <_exit+0x12>

08001a22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e00a      	b.n	8001a4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a34:	f3af 8000 	nop.w
 8001a38:	4601      	mov	r1, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	60ba      	str	r2, [r7, #8]
 8001a40:	b2ca      	uxtb	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf0      	blt.n	8001a34 <_read+0x12>
  }

  return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e009      	b.n	8001a82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	60ba      	str	r2, [r7, #8]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbf1      	blt.n	8001a6e <_write+0x12>
  }
  return len;
 8001a8a:	687b      	ldr	r3, [r7, #4]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_close>:

int _close(int file)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001abc:	605a      	str	r2, [r3, #4]
  return 0;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_isatty>:

int _isatty(int file)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b085      	sub	sp, #20
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f003 fd84 	bl	8005638 <__errno>
 8001b30:	4603      	mov	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20018000 	.word	0x20018000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	200006e4 	.word	0x200006e4
 8001b64:	20000838 	.word	0x20000838

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	@ (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b90:	f7ff ffea 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b94:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b96:	490d      	ldr	r1, [pc, #52]	@ (8001bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b98:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bac:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001bba:	f003 fd43 	bl	8005644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bbe:	f7ff fa51 	bl	8001064 <main>
  bx  lr    
 8001bc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bcc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001bd0:	08007ac0 	.word	0x08007ac0
  ldr r2, =_sbss
 8001bd4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001bd8:	20000838 	.word	0x20000838

08001bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC_IRQHandler>
	...

08001be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <HAL_Init+0x40>)
 8001bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <HAL_Init+0x40>)
 8001bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	@ (8001c20 <HAL_Init+0x40>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f94f 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	200f      	movs	r0, #15
 8001c10:	f000 f808 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff fde0 	bl	80017d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_InitTick+0x54>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_InitTick+0x58>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f967 	bl	8001f16 <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 f92f 	bl	8001ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	@ (8001c80 <HAL_InitTick+0x5c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_IncTick+0x20>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_IncTick+0x24>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <HAL_IncTick+0x24>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	200006e8 	.word	0x200006e8

08001cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	@ (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	200006e8 	.word	0x200006e8

08001cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ffee 	bl	8001cac <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <HAL_Delay+0x44>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffde 	bl	8001cac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8f7      	bhi.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000008 	.word	0x20000008

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db0b      	blt.n	8001d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4907      	ldr	r1, [pc, #28]	@ (8001da8 <__NVIC_EnableIRQ+0x38>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	@ (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	@ (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	@ 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	@ 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff29 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed4:	f7ff ff3e 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff ff8e 	bl	8001e00 <NVIC_EncodePriority>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff5d 	bl	8001dac <__NVIC_SetPriority>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff31 	bl	8001d70 <__NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffa2 	bl	8001e68 <SysTick_Config>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff feb6 	bl	8001cac <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d008      	beq.n	8001f60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2280      	movs	r2, #128	@ 0x80
 8001f52:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e052      	b.n	8002006 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0216 	bic.w	r2, r2, #22
 8001f6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d103      	bne.n	8001f90 <HAL_DMA_Abort+0x62>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0208 	bic.w	r2, r2, #8
 8001f9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb0:	e013      	b.n	8001fda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb2:	f7ff fe7b 	bl	8001cac <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d90c      	bls.n	8001fda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e015      	b.n	8002006 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1e4      	bne.n	8001fb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fec:	223f      	movs	r2, #63	@ 0x3f
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d004      	beq.n	800202c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2280      	movs	r2, #128	@ 0x80
 8002026:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e00c      	b.n	8002046 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2205      	movs	r2, #5
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	@ 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	e159      	b.n	8002324 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002070:	2201      	movs	r2, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	429a      	cmp	r2, r3
 800208a:	f040 8148 	bne.w	800231e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d005      	beq.n	80020a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d130      	bne.n	8002108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 0201 	and.w	r2, r3, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b03      	cmp	r3, #3
 8002112:	d017      	beq.n	8002144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d123      	bne.n	8002198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	08da      	lsrs	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3208      	adds	r2, #8
 8002158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	220f      	movs	r2, #15
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	08da      	lsrs	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	69b9      	ldr	r1, [r7, #24]
 8002194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0203 	and.w	r2, r3, #3
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80a2 	beq.w	800231e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b57      	ldr	r3, [pc, #348]	@ (800233c <HAL_GPIO_Init+0x2e8>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	4a56      	ldr	r2, [pc, #344]	@ (800233c <HAL_GPIO_Init+0x2e8>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ea:	4b54      	ldr	r3, [pc, #336]	@ (800233c <HAL_GPIO_Init+0x2e8>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021f6:	4a52      	ldr	r2, [pc, #328]	@ (8002340 <HAL_GPIO_Init+0x2ec>)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a49      	ldr	r2, [pc, #292]	@ (8002344 <HAL_GPIO_Init+0x2f0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d019      	beq.n	8002256 <HAL_GPIO_Init+0x202>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a48      	ldr	r2, [pc, #288]	@ (8002348 <HAL_GPIO_Init+0x2f4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0x1fe>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a47      	ldr	r2, [pc, #284]	@ (800234c <HAL_GPIO_Init+0x2f8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00d      	beq.n	800224e <HAL_GPIO_Init+0x1fa>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a46      	ldr	r2, [pc, #280]	@ (8002350 <HAL_GPIO_Init+0x2fc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x1f6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a45      	ldr	r2, [pc, #276]	@ (8002354 <HAL_GPIO_Init+0x300>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_GPIO_Init+0x1f2>
 8002242:	2304      	movs	r3, #4
 8002244:	e008      	b.n	8002258 <HAL_GPIO_Init+0x204>
 8002246:	2307      	movs	r3, #7
 8002248:	e006      	b.n	8002258 <HAL_GPIO_Init+0x204>
 800224a:	2303      	movs	r3, #3
 800224c:	e004      	b.n	8002258 <HAL_GPIO_Init+0x204>
 800224e:	2302      	movs	r3, #2
 8002250:	e002      	b.n	8002258 <HAL_GPIO_Init+0x204>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0x204>
 8002256:	2300      	movs	r3, #0
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	f002 0203 	and.w	r2, r2, #3
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	4093      	lsls	r3, r2
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002268:	4935      	ldr	r1, [pc, #212]	@ (8002340 <HAL_GPIO_Init+0x2ec>)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	3302      	adds	r3, #2
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002276:	4b38      	ldr	r3, [pc, #224]	@ (8002358 <HAL_GPIO_Init+0x304>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229a:	4a2f      	ldr	r2, [pc, #188]	@ (8002358 <HAL_GPIO_Init+0x304>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002358 <HAL_GPIO_Init+0x304>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c4:	4a24      	ldr	r2, [pc, #144]	@ (8002358 <HAL_GPIO_Init+0x304>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ca:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <HAL_GPIO_Init+0x304>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002358 <HAL_GPIO_Init+0x304>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f4:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <HAL_GPIO_Init+0x304>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002318:	4a0f      	ldr	r2, [pc, #60]	@ (8002358 <HAL_GPIO_Init+0x304>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3301      	adds	r3, #1
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b0f      	cmp	r3, #15
 8002328:	f67f aea2 	bls.w	8002070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	3724      	adds	r7, #36	@ 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	40013800 	.word	0x40013800
 8002344:	40020000 	.word	0x40020000
 8002348:	40020400 	.word	0x40020400
 800234c:	40020800 	.word	0x40020800
 8002350:	40020c00 	.word	0x40020c00
 8002354:	40021000 	.word	0x40021000
 8002358:	40013c00 	.word	0x40013c00

0800235c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002366:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002372:	4a05      	ldr	r2, [pc, #20]	@ (8002388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f806 	bl	800238c <HAL_GPIO_EXTI_Callback>
  }
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40013c00 	.word	0x40013c00

0800238c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e12b      	b.n	800260e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fa2c 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2224      	movs	r2, #36	@ 0x24
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002406:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002408:	f001 fa08 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 800240c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4a81      	ldr	r2, [pc, #516]	@ (8002618 <HAL_I2C_Init+0x274>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d807      	bhi.n	8002428 <HAL_I2C_Init+0x84>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a80      	ldr	r2, [pc, #512]	@ (800261c <HAL_I2C_Init+0x278>)
 800241c:	4293      	cmp	r3, r2
 800241e:	bf94      	ite	ls
 8002420:	2301      	movls	r3, #1
 8002422:	2300      	movhi	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e006      	b.n	8002436 <HAL_I2C_Init+0x92>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4a7d      	ldr	r2, [pc, #500]	@ (8002620 <HAL_I2C_Init+0x27c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	bf94      	ite	ls
 8002430:	2301      	movls	r3, #1
 8002432:	2300      	movhi	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0e7      	b.n	800260e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4a78      	ldr	r2, [pc, #480]	@ (8002624 <HAL_I2C_Init+0x280>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0c9b      	lsrs	r3, r3, #18
 8002448:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a6a      	ldr	r2, [pc, #424]	@ (8002618 <HAL_I2C_Init+0x274>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d802      	bhi.n	8002478 <HAL_I2C_Init+0xd4>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3301      	adds	r3, #1
 8002476:	e009      	b.n	800248c <HAL_I2C_Init+0xe8>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	4a69      	ldr	r2, [pc, #420]	@ (8002628 <HAL_I2C_Init+0x284>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	099b      	lsrs	r3, r3, #6
 800248a:	3301      	adds	r3, #1
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	430b      	orrs	r3, r1
 8002492:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800249e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	495c      	ldr	r1, [pc, #368]	@ (8002618 <HAL_I2C_Init+0x274>)
 80024a8:	428b      	cmp	r3, r1
 80024aa:	d819      	bhi.n	80024e0 <HAL_I2C_Init+0x13c>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1e59      	subs	r1, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ba:	1c59      	adds	r1, r3, #1
 80024bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024c0:	400b      	ands	r3, r1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_I2C_Init+0x138>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1e59      	subs	r1, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024da:	e051      	b.n	8002580 <HAL_I2C_Init+0x1dc>
 80024dc:	2304      	movs	r3, #4
 80024de:	e04f      	b.n	8002580 <HAL_I2C_Init+0x1dc>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d111      	bne.n	800250c <HAL_I2C_Init+0x168>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1e58      	subs	r0, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	440b      	add	r3, r1
 80024f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e012      	b.n	8002532 <HAL_I2C_Init+0x18e>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e58      	subs	r0, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	0099      	lsls	r1, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002522:	3301      	adds	r3, #1
 8002524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Init+0x196>
 8002536:	2301      	movs	r3, #1
 8002538:	e022      	b.n	8002580 <HAL_I2C_Init+0x1dc>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10e      	bne.n	8002560 <HAL_I2C_Init+0x1bc>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1e58      	subs	r0, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	440b      	add	r3, r1
 8002550:	fbb0 f3f3 	udiv	r3, r0, r3
 8002554:	3301      	adds	r3, #1
 8002556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800255e:	e00f      	b.n	8002580 <HAL_I2C_Init+0x1dc>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1e58      	subs	r0, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	0099      	lsls	r1, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	fbb0 f3f3 	udiv	r3, r0, r3
 8002576:	3301      	adds	r3, #1
 8002578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	6809      	ldr	r1, [r1, #0]
 8002584:	4313      	orrs	r3, r2
 8002586:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69da      	ldr	r2, [r3, #28]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6911      	ldr	r1, [r2, #16]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68d2      	ldr	r2, [r2, #12]
 80025ba:	4311      	orrs	r1, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	000186a0 	.word	0x000186a0
 800261c:	001e847f 	.word	0x001e847f
 8002620:	003d08ff 	.word	0x003d08ff
 8002624:	431bde83 	.word	0x431bde83
 8002628:	10624dd3 	.word	0x10624dd3

0800262c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	461a      	mov	r2, r3
 8002638:	460b      	mov	r3, r1
 800263a:	817b      	strh	r3, [r7, #10]
 800263c:	4613      	mov	r3, r2
 800263e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff fb34 	bl	8001cac <HAL_GetTick>
 8002644:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b20      	cmp	r3, #32
 8002650:	f040 80e0 	bne.w	8002814 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	2319      	movs	r3, #25
 800265a:	2201      	movs	r2, #1
 800265c:	4970      	ldr	r1, [pc, #448]	@ (8002820 <HAL_I2C_Master_Transmit+0x1f4>)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fa92 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
 800266c:	e0d3      	b.n	8002816 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_I2C_Master_Transmit+0x50>
 8002678:	2302      	movs	r3, #2
 800267a:	e0cc      	b.n	8002816 <HAL_I2C_Master_Transmit+0x1ea>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b01      	cmp	r3, #1
 8002690:	d007      	beq.n	80026a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0201 	orr.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2221      	movs	r2, #33	@ 0x21
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2210      	movs	r2, #16
 80026be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	893a      	ldrh	r2, [r7, #8]
 80026d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4a50      	ldr	r2, [pc, #320]	@ (8002824 <HAL_I2C_Master_Transmit+0x1f8>)
 80026e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026e4:	8979      	ldrh	r1, [r7, #10]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	6a3a      	ldr	r2, [r7, #32]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f9ca 	bl	8002a84 <I2C_MasterRequestWrite>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e08d      	b.n	8002816 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002710:	e066      	b.n	80027e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	6a39      	ldr	r1, [r7, #32]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 fb50 	bl	8002dbc <I2C_WaitOnTXEFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	2b04      	cmp	r3, #4
 8002728:	d107      	bne.n	800273a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002738:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06b      	b.n	8002816 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b04      	cmp	r3, #4
 800277a:	d11b      	bne.n	80027b4 <HAL_I2C_Master_Transmit+0x188>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002780:	2b00      	cmp	r3, #0
 8002782:	d017      	beq.n	80027b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	6a39      	ldr	r1, [r7, #32]
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fb47 	bl	8002e4c <I2C_WaitOnBTFFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00d      	beq.n	80027e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d107      	bne.n	80027dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e01a      	b.n	8002816 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d194      	bne.n	8002712 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	00100002 	.word	0x00100002
 8002824:	ffff0000 	.word	0xffff0000

08002828 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	@ 0x28
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	460b      	mov	r3, r1
 8002836:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff fa38 	bl	8001cac <HAL_GetTick>
 800283c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b20      	cmp	r3, #32
 800284c:	f040 8111 	bne.w	8002a72 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2319      	movs	r3, #25
 8002856:	2201      	movs	r2, #1
 8002858:	4988      	ldr	r1, [pc, #544]	@ (8002a7c <HAL_I2C_IsDeviceReady+0x254>)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f994 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
 8002868:	e104      	b.n	8002a74 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_I2C_IsDeviceReady+0x50>
 8002874:	2302      	movs	r3, #2
 8002876:	e0fd      	b.n	8002a74 <HAL_I2C_IsDeviceReady+0x24c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b01      	cmp	r3, #1
 800288c:	d007      	beq.n	800289e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2224      	movs	r2, #36	@ 0x24
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a70      	ldr	r2, [pc, #448]	@ (8002a80 <HAL_I2C_IsDeviceReady+0x258>)
 80028c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2200      	movs	r2, #0
 80028da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f952 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00d      	beq.n	8002906 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028f8:	d103      	bne.n	8002902 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002900:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0b6      	b.n	8002a74 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002906:	897b      	ldrh	r3, [r7, #10]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002914:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002916:	f7ff f9c9 	bl	8001cac <HAL_GetTick>
 800291a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	bf0c      	ite	eq
 800292a:	2301      	moveq	r3, #1
 800292c:	2300      	movne	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002940:	bf0c      	ite	eq
 8002942:	2301      	moveq	r3, #1
 8002944:	2300      	movne	r3, #0
 8002946:	b2db      	uxtb	r3, r3
 8002948:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800294a:	e025      	b.n	8002998 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800294c:	f7ff f9ae 	bl	8001cac <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <HAL_I2C_IsDeviceReady+0x13a>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	22a0      	movs	r2, #160	@ 0xa0
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b02      	cmp	r3, #2
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80029a2:	d005      	beq.n	80029b0 <HAL_I2C_IsDeviceReady+0x188>
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_I2C_IsDeviceReady+0x188>
 80029aa:	7dbb      	ldrb	r3, [r7, #22]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0cd      	beq.n	800294c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d129      	bne.n	8002a1a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2319      	movs	r3, #25
 80029f2:	2201      	movs	r2, #1
 80029f4:	4921      	ldr	r1, [pc, #132]	@ (8002a7c <HAL_I2C_IsDeviceReady+0x254>)
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f8c6 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e036      	b.n	8002a74 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e02c      	b.n	8002a74 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a28:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a32:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	2319      	movs	r3, #25
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	490f      	ldr	r1, [pc, #60]	@ (8002a7c <HAL_I2C_IsDeviceReady+0x254>)
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f8a2 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e012      	b.n	8002a74 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	f4ff af32 	bcc.w	80028c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a72:	2302      	movs	r3, #2
  }
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	00100002 	.word	0x00100002
 8002a80:	ffff0000 	.word	0xffff0000

08002a84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	460b      	mov	r3, r1
 8002a92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d006      	beq.n	8002aae <I2C_MasterRequestWrite+0x2a>
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d003      	beq.n	8002aae <I2C_MasterRequestWrite+0x2a>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002aac:	d108      	bne.n	8002ac0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	e00b      	b.n	8002ad8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac4:	2b12      	cmp	r3, #18
 8002ac6:	d107      	bne.n	8002ad8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ad6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f84f 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00d      	beq.n	8002b0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002afe:	d103      	bne.n	8002b08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e035      	b.n	8002b78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b14:	d108      	bne.n	8002b28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b16:	897b      	ldrh	r3, [r7, #10]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b24:	611a      	str	r2, [r3, #16]
 8002b26:	e01b      	b.n	8002b60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b28:	897b      	ldrh	r3, [r7, #10]
 8002b2a:	11db      	asrs	r3, r3, #7
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 0306 	and.w	r3, r3, #6
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f063 030f 	orn	r3, r3, #15
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	490e      	ldr	r1, [pc, #56]	@ (8002b80 <I2C_MasterRequestWrite+0xfc>)
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f898 	bl	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e010      	b.n	8002b78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4907      	ldr	r1, [pc, #28]	@ (8002b84 <I2C_MasterRequestWrite+0x100>)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f888 	bl	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	00010008 	.word	0x00010008
 8002b84:	00010002 	.word	0x00010002

08002b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b98:	e048      	b.n	8002c2c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d044      	beq.n	8002c2c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba2:	f7ff f883 	bl	8001cac <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d302      	bcc.n	8002bb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d139      	bne.n	8002c2c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	0c1b      	lsrs	r3, r3, #16
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d10d      	bne.n	8002bde <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	e00c      	b.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	43da      	mvns	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4013      	ands	r3, r2
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d116      	bne.n	8002c2c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e023      	b.n	8002c74 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	0c1b      	lsrs	r3, r3, #16
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d10d      	bne.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	43da      	mvns	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4013      	ands	r3, r2
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	e00c      	b.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	43da      	mvns	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d093      	beq.n	8002b9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c8a:	e071      	b.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c9a:	d123      	bne.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002caa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	f043 0204 	orr.w	r2, r3, #4
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e067      	b.n	8002db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d041      	beq.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cec:	f7fe ffde 	bl	8001cac <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d302      	bcc.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d136      	bne.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d10c      	bne.n	8002d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4013      	ands	r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bf14      	ite	ne
 8002d1e:	2301      	movne	r3, #1
 8002d20:	2300      	moveq	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	e00b      	b.n	8002d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	43da      	mvns	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	4013      	ands	r3, r2
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf14      	ite	ne
 8002d38:	2301      	movne	r3, #1
 8002d3a:	2300      	moveq	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	f043 0220 	orr.w	r2, r3, #32
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e021      	b.n	8002db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d10c      	bne.n	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	43da      	mvns	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf14      	ite	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e00b      	b.n	8002dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bf14      	ite	ne
 8002da6:	2301      	movne	r3, #1
 8002da8:	2300      	moveq	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f47f af6d 	bne.w	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dc8:	e034      	b.n	8002e34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f886 	bl	8002edc <I2C_IsAcknowledgeFailed>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e034      	b.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d028      	beq.n	8002e34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7fe ff63 	bl	8001cac <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11d      	bne.n	8002e34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e02:	2b80      	cmp	r3, #128	@ 0x80
 8002e04:	d016      	beq.n	8002e34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e007      	b.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3e:	2b80      	cmp	r3, #128	@ 0x80
 8002e40:	d1c3      	bne.n	8002dca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e58:	e034      	b.n	8002ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f83e 	bl	8002edc <I2C_IsAcknowledgeFailed>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e034      	b.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d028      	beq.n	8002ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e72:	f7fe ff1b 	bl	8001cac <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d11d      	bne.n	8002ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d016      	beq.n	8002ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	f043 0220 	orr.w	r2, r3, #32
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e007      	b.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d1c3      	bne.n	8002e5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef2:	d11b      	bne.n	8002f2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002efc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	f043 0204 	orr.w	r2, r3, #4
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e267      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d075      	beq.n	8003046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f5a:	4b88      	ldr	r3, [pc, #544]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d00c      	beq.n	8002f80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f66:	4b85      	ldr	r3, [pc, #532]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d112      	bne.n	8002f98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f72:	4b82      	ldr	r3, [pc, #520]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f7e:	d10b      	bne.n	8002f98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	4b7e      	ldr	r3, [pc, #504]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d05b      	beq.n	8003044 <HAL_RCC_OscConfig+0x108>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d157      	bne.n	8003044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e242      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa0:	d106      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x74>
 8002fa2:	4b76      	ldr	r3, [pc, #472]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a75      	ldr	r2, [pc, #468]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e01d      	b.n	8002fec <HAL_RCC_OscConfig+0xb0>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x98>
 8002fba:	4b70      	ldr	r3, [pc, #448]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a6f      	ldr	r2, [pc, #444]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	4b6d      	ldr	r3, [pc, #436]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a6c      	ldr	r2, [pc, #432]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e00b      	b.n	8002fec <HAL_RCC_OscConfig+0xb0>
 8002fd4:	4b69      	ldr	r3, [pc, #420]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a68      	ldr	r2, [pc, #416]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	4b66      	ldr	r3, [pc, #408]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a65      	ldr	r2, [pc, #404]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d013      	beq.n	800301c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fe5a 	bl	8001cac <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7fe fe56 	bl	8001cac <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	@ 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e207      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	4b5b      	ldr	r3, [pc, #364]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0xc0>
 800301a:	e014      	b.n	8003046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe fe46 	bl	8001cac <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003024:	f7fe fe42 	bl	8001cac <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	@ 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e1f3      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	4b51      	ldr	r3, [pc, #324]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0xe8>
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d063      	beq.n	800311a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003052:	4b4a      	ldr	r3, [pc, #296]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305e:	4b47      	ldr	r3, [pc, #284]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003066:	2b08      	cmp	r3, #8
 8003068:	d11c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306a:	4b44      	ldr	r3, [pc, #272]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d116      	bne.n	80030a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003076:	4b41      	ldr	r3, [pc, #260]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_RCC_OscConfig+0x152>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e1c7      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308e:	4b3b      	ldr	r3, [pc, #236]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4937      	ldr	r1, [pc, #220]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a2:	e03a      	b.n	800311a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d020      	beq.n	80030ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ac:	4b34      	ldr	r3, [pc, #208]	@ (8003180 <HAL_RCC_OscConfig+0x244>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe fdfb 	bl	8001cac <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ba:	f7fe fdf7 	bl	8001cac <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e1a8      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030cc:	4b2b      	ldr	r3, [pc, #172]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d8:	4b28      	ldr	r3, [pc, #160]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4925      	ldr	r1, [pc, #148]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
 80030ec:	e015      	b.n	800311a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ee:	4b24      	ldr	r3, [pc, #144]	@ (8003180 <HAL_RCC_OscConfig+0x244>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe fdda 	bl	8001cac <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fc:	f7fe fdd6 	bl	8001cac <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e187      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310e:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d036      	beq.n	8003194 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d016      	beq.n	800315c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312e:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <HAL_RCC_OscConfig+0x248>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003134:	f7fe fdba 	bl	8001cac <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313c:	f7fe fdb6 	bl	8001cac <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e167      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x200>
 800315a:	e01b      	b.n	8003194 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315c:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <HAL_RCC_OscConfig+0x248>)
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003162:	f7fe fda3 	bl	8001cac <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	e00e      	b.n	8003188 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316a:	f7fe fd9f 	bl	8001cac <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d907      	bls.n	8003188 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e150      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
 800317c:	40023800 	.word	0x40023800
 8003180:	42470000 	.word	0x42470000
 8003184:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003188:	4b88      	ldr	r3, [pc, #544]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800318a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ea      	bne.n	800316a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8097 	beq.w	80032d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a6:	4b81      	ldr	r3, [pc, #516]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10f      	bne.n	80031d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	4b7d      	ldr	r3, [pc, #500]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	4a7c      	ldr	r2, [pc, #496]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031c2:	4b7a      	ldr	r3, [pc, #488]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b77      	ldr	r3, [pc, #476]	@ (80033b0 <HAL_RCC_OscConfig+0x474>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031de:	4b74      	ldr	r3, [pc, #464]	@ (80033b0 <HAL_RCC_OscConfig+0x474>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a73      	ldr	r2, [pc, #460]	@ (80033b0 <HAL_RCC_OscConfig+0x474>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7fe fd5f 	bl	8001cac <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7fe fd5b 	bl	8001cac <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e10c      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4b6a      	ldr	r3, [pc, #424]	@ (80033b0 <HAL_RCC_OscConfig+0x474>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x2ea>
 8003218:	4b64      	ldr	r3, [pc, #400]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321c:	4a63      	ldr	r2, [pc, #396]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	@ 0x70
 8003224:	e01c      	b.n	8003260 <HAL_RCC_OscConfig+0x324>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b05      	cmp	r3, #5
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x30c>
 800322e:	4b5f      	ldr	r3, [pc, #380]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	4a5e      	ldr	r2, [pc, #376]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	6713      	str	r3, [r2, #112]	@ 0x70
 800323a:	4b5c      	ldr	r3, [pc, #368]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323e:	4a5b      	ldr	r2, [pc, #364]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6713      	str	r3, [r2, #112]	@ 0x70
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0x324>
 8003248:	4b58      	ldr	r3, [pc, #352]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324c:	4a57      	ldr	r2, [pc, #348]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	6713      	str	r3, [r2, #112]	@ 0x70
 8003254:	4b55      	ldr	r3, [pc, #340]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003258:	4a54      	ldr	r2, [pc, #336]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800325a:	f023 0304 	bic.w	r3, r3, #4
 800325e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d015      	beq.n	8003294 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe fd20 	bl	8001cac <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe fd1c 	bl	8001cac <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0cb      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003286:	4b49      	ldr	r3, [pc, #292]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0ee      	beq.n	8003270 <HAL_RCC_OscConfig+0x334>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003294:	f7fe fd0a 	bl	8001cac <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fe fd06 	bl	8001cac <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0b5      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b2:	4b3e      	ldr	r3, [pc, #248]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1ee      	bne.n	800329c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c4:	4b39      	ldr	r3, [pc, #228]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	4a38      	ldr	r2, [pc, #224]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80032ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80a1 	beq.w	800341c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032da:	4b34      	ldr	r3, [pc, #208]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d05c      	beq.n	80033a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d141      	bne.n	8003372 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b31      	ldr	r3, [pc, #196]	@ (80033b4 <HAL_RCC_OscConfig+0x478>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe fcda 	bl	8001cac <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe fcd6 	bl	8001cac <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e087      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	4b27      	ldr	r3, [pc, #156]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	3b01      	subs	r3, #1
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	491b      	ldr	r1, [pc, #108]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003344:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <HAL_RCC_OscConfig+0x478>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fe fcaf 	bl	8001cac <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003352:	f7fe fcab 	bl	8001cac <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e05c      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003364:	4b11      	ldr	r3, [pc, #68]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x416>
 8003370:	e054      	b.n	800341c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b10      	ldr	r3, [pc, #64]	@ (80033b4 <HAL_RCC_OscConfig+0x478>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fe fc98 	bl	8001cac <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7fe fc94 	bl	8001cac <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e045      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x444>
 800339e:	e03d      	b.n	800341c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e038      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40007000 	.word	0x40007000
 80033b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <HAL_RCC_OscConfig+0x4ec>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d028      	beq.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d121      	bne.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d11a      	bne.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033e8:	4013      	ands	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d111      	bne.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	085b      	lsrs	r3, r3, #1
 8003400:	3b01      	subs	r3, #1
 8003402:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d107      	bne.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003412:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800

0800342c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0cc      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003440:	4b68      	ldr	r3, [pc, #416]	@ (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d90c      	bls.n	8003468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b65      	ldr	r3, [pc, #404]	@ (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b63      	ldr	r3, [pc, #396]	@ (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0b8      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d020      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003480:	4b59      	ldr	r3, [pc, #356]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a58      	ldr	r2, [pc, #352]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800348a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003498:	4b53      	ldr	r3, [pc, #332]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a52      	ldr	r2, [pc, #328]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a4:	4b50      	ldr	r3, [pc, #320]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	494d      	ldr	r1, [pc, #308]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d044      	beq.n	800354c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d119      	bne.n	800350a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e07f      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d003      	beq.n	80034ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d107      	bne.n	80034fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ea:	4b3f      	ldr	r3, [pc, #252]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d109      	bne.n	800350a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e06f      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fa:	4b3b      	ldr	r3, [pc, #236]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e067      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800350a:	4b37      	ldr	r3, [pc, #220]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f023 0203 	bic.w	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4934      	ldr	r1, [pc, #208]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	4313      	orrs	r3, r2
 800351a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800351c:	f7fe fbc6 	bl	8001cac <HAL_GetTick>
 8003520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	e00a      	b.n	800353a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003524:	f7fe fbc2 	bl	8001cac <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e04f      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353a:	4b2b      	ldr	r3, [pc, #172]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 020c 	and.w	r2, r3, #12
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	429a      	cmp	r2, r3
 800354a:	d1eb      	bne.n	8003524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800354c:	4b25      	ldr	r3, [pc, #148]	@ (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d20c      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b22      	ldr	r3, [pc, #136]	@ (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b20      	ldr	r3, [pc, #128]	@ (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e032      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003580:	4b19      	ldr	r3, [pc, #100]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4916      	ldr	r1, [pc, #88]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359e:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	490e      	ldr	r1, [pc, #56]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035b2:	f000 f821 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 80035b6:	4602      	mov	r2, r0
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	490a      	ldr	r1, [pc, #40]	@ (80035ec <HAL_RCC_ClockConfig+0x1c0>)
 80035c4:	5ccb      	ldrb	r3, [r1, r3]
 80035c6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ca:	4a09      	ldr	r2, [pc, #36]	@ (80035f0 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035ce:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fb26 	bl	8001c24 <HAL_InitTick>

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023c00 	.word	0x40023c00
 80035e8:	40023800 	.word	0x40023800
 80035ec:	08007724 	.word	0x08007724
 80035f0:	20000000 	.word	0x20000000
 80035f4:	20000004 	.word	0x20000004

080035f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035fc:	b094      	sub	sp, #80	@ 0x50
 80035fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003610:	4b79      	ldr	r3, [pc, #484]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b08      	cmp	r3, #8
 800361a:	d00d      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x40>
 800361c:	2b08      	cmp	r3, #8
 800361e:	f200 80e1 	bhi.w	80037e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x34>
 8003626:	2b04      	cmp	r3, #4
 8003628:	d003      	beq.n	8003632 <HAL_RCC_GetSysClockFreq+0x3a>
 800362a:	e0db      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800362c:	4b73      	ldr	r3, [pc, #460]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x204>)
 800362e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003630:	e0db      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003632:	4b73      	ldr	r3, [pc, #460]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x208>)
 8003634:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003636:	e0d8      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003638:	4b6f      	ldr	r3, [pc, #444]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003640:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003642:	4b6d      	ldr	r3, [pc, #436]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d063      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364e:	4b6a      	ldr	r3, [pc, #424]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	099b      	lsrs	r3, r3, #6
 8003654:	2200      	movs	r2, #0
 8003656:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003658:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003660:	633b      	str	r3, [r7, #48]	@ 0x30
 8003662:	2300      	movs	r3, #0
 8003664:	637b      	str	r3, [r7, #52]	@ 0x34
 8003666:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800366a:	4622      	mov	r2, r4
 800366c:	462b      	mov	r3, r5
 800366e:	f04f 0000 	mov.w	r0, #0
 8003672:	f04f 0100 	mov.w	r1, #0
 8003676:	0159      	lsls	r1, r3, #5
 8003678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800367c:	0150      	lsls	r0, r2, #5
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4621      	mov	r1, r4
 8003684:	1a51      	subs	r1, r2, r1
 8003686:	6139      	str	r1, [r7, #16]
 8003688:	4629      	mov	r1, r5
 800368a:	eb63 0301 	sbc.w	r3, r3, r1
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800369c:	4659      	mov	r1, fp
 800369e:	018b      	lsls	r3, r1, #6
 80036a0:	4651      	mov	r1, sl
 80036a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a6:	4651      	mov	r1, sl
 80036a8:	018a      	lsls	r2, r1, #6
 80036aa:	4651      	mov	r1, sl
 80036ac:	ebb2 0801 	subs.w	r8, r2, r1
 80036b0:	4659      	mov	r1, fp
 80036b2:	eb63 0901 	sbc.w	r9, r3, r1
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ca:	4690      	mov	r8, r2
 80036cc:	4699      	mov	r9, r3
 80036ce:	4623      	mov	r3, r4
 80036d0:	eb18 0303 	adds.w	r3, r8, r3
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	462b      	mov	r3, r5
 80036d8:	eb49 0303 	adc.w	r3, r9, r3
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036ea:	4629      	mov	r1, r5
 80036ec:	024b      	lsls	r3, r1, #9
 80036ee:	4621      	mov	r1, r4
 80036f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036f4:	4621      	mov	r1, r4
 80036f6:	024a      	lsls	r2, r1, #9
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036fe:	2200      	movs	r2, #0
 8003700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003702:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003708:	f7fd fa56 	bl	8000bb8 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003714:	e058      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003716:	4b38      	ldr	r3, [pc, #224]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	099b      	lsrs	r3, r3, #6
 800371c:	2200      	movs	r2, #0
 800371e:	4618      	mov	r0, r3
 8003720:	4611      	mov	r1, r2
 8003722:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
 800372c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003730:	4642      	mov	r2, r8
 8003732:	464b      	mov	r3, r9
 8003734:	f04f 0000 	mov.w	r0, #0
 8003738:	f04f 0100 	mov.w	r1, #0
 800373c:	0159      	lsls	r1, r3, #5
 800373e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003742:	0150      	lsls	r0, r2, #5
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4641      	mov	r1, r8
 800374a:	ebb2 0a01 	subs.w	sl, r2, r1
 800374e:	4649      	mov	r1, r9
 8003750:	eb63 0b01 	sbc.w	fp, r3, r1
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003768:	ebb2 040a 	subs.w	r4, r2, sl
 800376c:	eb63 050b 	sbc.w	r5, r3, fp
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	00eb      	lsls	r3, r5, #3
 800377a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377e:	00e2      	lsls	r2, r4, #3
 8003780:	4614      	mov	r4, r2
 8003782:	461d      	mov	r5, r3
 8003784:	4643      	mov	r3, r8
 8003786:	18e3      	adds	r3, r4, r3
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	464b      	mov	r3, r9
 800378c:	eb45 0303 	adc.w	r3, r5, r3
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800379e:	4629      	mov	r1, r5
 80037a0:	028b      	lsls	r3, r1, #10
 80037a2:	4621      	mov	r1, r4
 80037a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a8:	4621      	mov	r1, r4
 80037aa:	028a      	lsls	r2, r1, #10
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b2:	2200      	movs	r2, #0
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	61fa      	str	r2, [r7, #28]
 80037b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037bc:	f7fd f9fc 	bl	8000bb8 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4613      	mov	r3, r2
 80037c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	3301      	adds	r3, #1
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80037d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037e2:	e002      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e4:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x204>)
 80037e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3750      	adds	r7, #80	@ 0x50
 80037f0:	46bd      	mov	sp, r7
 80037f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	00f42400 	.word	0x00f42400
 8003800:	007a1200 	.word	0x007a1200

08003804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003808:	4b03      	ldr	r3, [pc, #12]	@ (8003818 <HAL_RCC_GetHCLKFreq+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000000 	.word	0x20000000

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003820:	f7ff fff0 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	@ (800383c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	0a9b      	lsrs	r3, r3, #10
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4903      	ldr	r1, [pc, #12]	@ (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	08007734 	.word	0x08007734

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003848:	f7ff ffdc 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	@ (8003864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0b5b      	lsrs	r3, r3, #13
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	@ (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	08007734 	.word	0x08007734

0800386c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e04a      	b.n	8003914 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fe f810 	bl	80018b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	@ 0x24
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fe63 	bl	800457c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80038d4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0208 	orr.w	r2, r2, #8
 80038e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08a      	sub	sp, #40	@ 0x28
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b20      	cmp	r3, #32
 800393a:	d175      	bne.n	8003a28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_UART_Transmit+0x2c>
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e06e      	b.n	8003a2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2221      	movs	r2, #33	@ 0x21
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800395a:	f7fe f9a7 	bl	8001cac <HAL_GetTick>
 800395e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	88fa      	ldrh	r2, [r7, #6]
 800396a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003974:	d108      	bne.n	8003988 <HAL_UART_Transmit+0x6c>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d104      	bne.n	8003988 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	e003      	b.n	8003990 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003990:	e02e      	b.n	80039f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	2180      	movs	r1, #128	@ 0x80
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fbbd 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e03a      	b.n	8003a2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	3302      	adds	r3, #2
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	e007      	b.n	80039e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	781a      	ldrb	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3301      	adds	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1cb      	bne.n	8003992 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2140      	movs	r1, #64	@ 0x40
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fb89 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e006      	b.n	8003a2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e000      	b.n	8003a2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
  }
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b08c      	sub	sp, #48	@ 0x30
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d14a      	bne.n	8003ae2 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e043      	b.n	8003ae4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fbad 	bl	80041ce <UART_Start_Receive_IT>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d12c      	bne.n	8003adc <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d125      	bne.n	8003ad6 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	617b      	str	r3, [r7, #20]
   return(result);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f043 0310 	orr.w	r3, r3, #16
 8003ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ac0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6a39      	ldr	r1, [r7, #32]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e5      	bne.n	8003aa0 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8003ad4:	e002      	b.n	8003adc <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003adc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ae0:	e000      	b.n	8003ae4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3730      	adds	r7, #48	@ 0x30
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b0ba      	sub	sp, #232	@ 0xe8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_UART_IRQHandler+0x66>
 8003b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fc58 	bl	8004400 <UART_Receive_IT>
      return;
 8003b50:	e25b      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80de 	beq.w	8003d18 <HAL_UART_IRQHandler+0x22c>
 8003b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d106      	bne.n	8003b76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80d1 	beq.w	8003d18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_UART_IRQHandler+0xae>
 8003b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f043 0201 	orr.w	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_UART_IRQHandler+0xd2>
 8003ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	f043 0202 	orr.w	r2, r3, #2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <HAL_UART_IRQHandler+0xf6>
 8003bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bda:	f043 0204 	orr.w	r2, r3, #4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d011      	beq.n	8003c12 <HAL_UART_IRQHandler+0x126>
 8003bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0a:	f043 0208 	orr.w	r2, r3, #8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 81f2 	beq.w	8004000 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_UART_IRQHandler+0x14e>
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fbe3 	bl	8004400 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c44:	2b40      	cmp	r3, #64	@ 0x40
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <HAL_UART_IRQHandler+0x17a>
 8003c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d04f      	beq.n	8003d06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 faeb 	bl	8004242 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c76:	2b40      	cmp	r3, #64	@ 0x40
 8003c78:	d141      	bne.n	8003cfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3314      	adds	r3, #20
 8003ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003caa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1d9      	bne.n	8003c7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d013      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8003ecc <HAL_UART_IRQHandler+0x3e0>)
 8003cd4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe f997 	bl	800200e <HAL_DMA_Abort_IT>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d016      	beq.n	8003d14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	e00e      	b.n	8003d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f99e 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	e00a      	b.n	8003d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f99a 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	e006      	b.n	8003d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f996 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d12:	e175      	b.n	8004000 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d14:	bf00      	nop
    return;
 8003d16:	e173      	b.n	8004000 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	f040 814f 	bne.w	8003fc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8148 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8141 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5e:	2b40      	cmp	r3, #64	@ 0x40
 8003d60:	f040 80b6 	bne.w	8003ed0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8145 	beq.w	8004004 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d82:	429a      	cmp	r2, r3
 8003d84:	f080 813e 	bcs.w	8004004 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d9a:	f000 8088 	beq.w	8003eae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003dca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003dd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1d9      	bne.n	8003d9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003dfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3314      	adds	r3, #20
 8003e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e1      	bne.n	8003dea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3314      	adds	r3, #20
 8003e46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e3      	bne.n	8003e26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e7e:	f023 0310 	bic.w	r3, r3, #16
 8003e82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e3      	bne.n	8003e6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fe f840 	bl	8001f2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7fd f87f 	bl	8000fc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eca:	e09b      	b.n	8004004 <HAL_UART_IRQHandler+0x518>
 8003ecc:	08004309 	.word	0x08004309
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 808e 	beq.w	8004008 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8089 	beq.w	8004008 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e3      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f52:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e3      	bne.n	8003f2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0310 	bic.w	r3, r3, #16
 8003f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f98:	61fa      	str	r2, [r7, #28]
 8003f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	69b9      	ldr	r1, [r7, #24]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e3      	bne.n	8003f74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fd f805 	bl	8000fc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fbe:	e023      	b.n	8004008 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x4f4>
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f9a9 	bl	8004330 <UART_Transmit_IT>
    return;
 8003fde:	e014      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00e      	beq.n	800400a <HAL_UART_IRQHandler+0x51e>
 8003fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f9e9 	bl	80043d0 <UART_EndTransmit_IT>
    return;
 8003ffe:	e004      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
    return;
 8004000:	bf00      	nop
 8004002:	e002      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
      return;
 8004004:	bf00      	nop
 8004006:	e000      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
      return;
 8004008:	bf00      	nop
  }
}
 800400a:	37e8      	adds	r7, #232	@ 0xe8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8004062:	2302      	movs	r3, #2
 8004064:	e020      	b.n	80040a8 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2224      	movs	r2, #36	@ 0x24
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f023 030c 	bic.w	r3, r3, #12
 8004084:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f043 0308 	orr.w	r3, r3, #8
 800408c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_HalfDuplex_EnableReceiver+0x1a>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e020      	b.n	8004110 <HAL_HalfDuplex_EnableReceiver+0x5c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2224      	movs	r2, #36	@ 0x24
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f023 030c 	bic.w	r3, r3, #12
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f043 0304 	orr.w	r3, r3, #4
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	4613      	mov	r3, r2
 800412a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412c:	e03b      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d037      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004136:	f7fd fdb9 	bl	8001cac <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	6a3a      	ldr	r2, [r7, #32]
 8004142:	429a      	cmp	r2, r3
 8004144:	d302      	bcc.n	800414c <UART_WaitOnFlagUntilTimeout+0x30>
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e03a      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d023      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b80      	cmp	r3, #128	@ 0x80
 8004162:	d020      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b40      	cmp	r3, #64	@ 0x40
 8004168:	d01d      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b08      	cmp	r3, #8
 8004176:	d116      	bne.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f857 	bl	8004242 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2208      	movs	r2, #8
 8004198:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e00f      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4013      	ands	r3, r2
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	bf0c      	ite	eq
 80041b6:	2301      	moveq	r3, #1
 80041b8:	2300      	movne	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d0b4      	beq.n	800412e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	4613      	mov	r3, r2
 80041da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	88fa      	ldrh	r2, [r7, #6]
 80041e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	88fa      	ldrh	r2, [r7, #6]
 80041ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2222      	movs	r2, #34	@ 0x22
 80041f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004212:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0220 	orr.w	r2, r2, #32
 8004232:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004242:	b480      	push	{r7}
 8004244:	b095      	sub	sp, #84	@ 0x54
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800425a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800426a:	643a      	str	r2, [r7, #64]	@ 0x40
 800426c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004270:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e5      	bne.n	800424a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3314      	adds	r3, #20
 8004284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	61fb      	str	r3, [r7, #28]
   return(result);
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800429e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e5      	bne.n	800427e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d119      	bne.n	80042ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	330c      	adds	r3, #12
 80042c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f023 0310 	bic.w	r3, r3, #16
 80042d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042da:	61ba      	str	r2, [r7, #24]
 80042dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	6979      	ldr	r1, [r7, #20]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	613b      	str	r3, [r7, #16]
   return(result);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e5      	bne.n	80042ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042fc:	bf00      	nop
 80042fe:	3754      	adds	r7, #84	@ 0x54
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004314:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff fe88 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b21      	cmp	r3, #33	@ 0x21
 8004342:	d13e      	bne.n	80043c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800434c:	d114      	bne.n	8004378 <UART_Transmit_IT+0x48>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d110      	bne.n	8004378 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800436a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	1c9a      	adds	r2, r3, #2
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	621a      	str	r2, [r3, #32]
 8004376:	e008      	b.n	800438a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	1c59      	adds	r1, r3, #1
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6211      	str	r1, [r2, #32]
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29b      	uxth	r3, r3
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	4619      	mov	r1, r3
 8004398:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff fe0d 	bl	8004010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	@ 0x30
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b22      	cmp	r3, #34	@ 0x22
 8004412:	f040 80ae 	bne.w	8004572 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800441e:	d117      	bne.n	8004450 <UART_Receive_IT+0x50>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d113      	bne.n	8004450 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443e:	b29a      	uxth	r2, r3
 8004440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004442:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004448:	1c9a      	adds	r2, r3, #2
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	629a      	str	r2, [r3, #40]	@ 0x28
 800444e:	e026      	b.n	800449e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004462:	d007      	beq.n	8004474 <UART_Receive_IT+0x74>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <UART_Receive_IT+0x82>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d106      	bne.n	8004482 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	b2da      	uxtb	r2, r3
 800447c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e008      	b.n	8004494 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800448e:	b2da      	uxtb	r2, r3
 8004490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004492:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	4619      	mov	r1, r3
 80044ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d15d      	bne.n	800456e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0220 	bic.w	r2, r2, #32
 80044c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d135      	bne.n	8004564 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	613b      	str	r3, [r7, #16]
   return(result);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f023 0310 	bic.w	r3, r3, #16
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800451e:	623a      	str	r2, [r7, #32]
 8004520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	69f9      	ldr	r1, [r7, #28]
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	61bb      	str	r3, [r7, #24]
   return(result);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e5      	bne.n	80044fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b10      	cmp	r3, #16
 800453e:	d10a      	bne.n	8004556 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800455a:	4619      	mov	r1, r3
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7fc fd33 	bl	8000fc8 <HAL_UARTEx_RxEventCallback>
 8004562:	e002      	b.n	800456a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff fd5d 	bl	8004024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	e002      	b.n	8004574 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	e000      	b.n	8004574 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004572:	2302      	movs	r3, #2
  }
}
 8004574:	4618      	mov	r0, r3
 8004576:	3730      	adds	r7, #48	@ 0x30
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800457c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004580:	b0c0      	sub	sp, #256	@ 0x100
 8004582:	af00      	add	r7, sp, #0
 8004584:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004598:	68d9      	ldr	r1, [r3, #12]
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	ea40 0301 	orr.w	r3, r0, r1
 80045a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045d4:	f021 010c 	bic.w	r1, r1, #12
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045e2:	430b      	orrs	r3, r1
 80045e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f6:	6999      	ldr	r1, [r3, #24]
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	ea40 0301 	orr.w	r3, r0, r1
 8004602:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b8f      	ldr	r3, [pc, #572]	@ (8004848 <UART_SetConfig+0x2cc>)
 800460c:	429a      	cmp	r2, r3
 800460e:	d005      	beq.n	800461c <UART_SetConfig+0xa0>
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b8d      	ldr	r3, [pc, #564]	@ (800484c <UART_SetConfig+0x2d0>)
 8004618:	429a      	cmp	r2, r3
 800461a:	d104      	bne.n	8004626 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800461c:	f7ff f912 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 8004620:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004624:	e003      	b.n	800462e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004626:	f7ff f8f9 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 800462a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004638:	f040 810c 	bne.w	8004854 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800463c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004640:	2200      	movs	r2, #0
 8004642:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004646:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800464a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800464e:	4622      	mov	r2, r4
 8004650:	462b      	mov	r3, r5
 8004652:	1891      	adds	r1, r2, r2
 8004654:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004656:	415b      	adcs	r3, r3
 8004658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800465a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800465e:	4621      	mov	r1, r4
 8004660:	eb12 0801 	adds.w	r8, r2, r1
 8004664:	4629      	mov	r1, r5
 8004666:	eb43 0901 	adc.w	r9, r3, r1
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800467a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800467e:	4690      	mov	r8, r2
 8004680:	4699      	mov	r9, r3
 8004682:	4623      	mov	r3, r4
 8004684:	eb18 0303 	adds.w	r3, r8, r3
 8004688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800468c:	462b      	mov	r3, r5
 800468e:	eb49 0303 	adc.w	r3, r9, r3
 8004692:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046aa:	460b      	mov	r3, r1
 80046ac:	18db      	adds	r3, r3, r3
 80046ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80046b0:	4613      	mov	r3, r2
 80046b2:	eb42 0303 	adc.w	r3, r2, r3
 80046b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80046b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046c0:	f7fc fa7a 	bl	8000bb8 <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4b61      	ldr	r3, [pc, #388]	@ (8004850 <UART_SetConfig+0x2d4>)
 80046ca:	fba3 2302 	umull	r2, r3, r3, r2
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	011c      	lsls	r4, r3, #4
 80046d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	1891      	adds	r1, r2, r2
 80046ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046ec:	415b      	adcs	r3, r3
 80046ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046f4:	4641      	mov	r1, r8
 80046f6:	eb12 0a01 	adds.w	sl, r2, r1
 80046fa:	4649      	mov	r1, r9
 80046fc:	eb43 0b01 	adc.w	fp, r3, r1
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800470c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004714:	4692      	mov	sl, r2
 8004716:	469b      	mov	fp, r3
 8004718:	4643      	mov	r3, r8
 800471a:	eb1a 0303 	adds.w	r3, sl, r3
 800471e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004722:	464b      	mov	r3, r9
 8004724:	eb4b 0303 	adc.w	r3, fp, r3
 8004728:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004738:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800473c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004740:	460b      	mov	r3, r1
 8004742:	18db      	adds	r3, r3, r3
 8004744:	643b      	str	r3, [r7, #64]	@ 0x40
 8004746:	4613      	mov	r3, r2
 8004748:	eb42 0303 	adc.w	r3, r2, r3
 800474c:	647b      	str	r3, [r7, #68]	@ 0x44
 800474e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004752:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004756:	f7fc fa2f 	bl	8000bb8 <__aeabi_uldivmod>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4611      	mov	r1, r2
 8004760:	4b3b      	ldr	r3, [pc, #236]	@ (8004850 <UART_SetConfig+0x2d4>)
 8004762:	fba3 2301 	umull	r2, r3, r3, r1
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2264      	movs	r2, #100	@ 0x64
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	1acb      	subs	r3, r1, r3
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004776:	4b36      	ldr	r3, [pc, #216]	@ (8004850 <UART_SetConfig+0x2d4>)
 8004778:	fba3 2302 	umull	r2, r3, r3, r2
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004784:	441c      	add	r4, r3
 8004786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800478a:	2200      	movs	r2, #0
 800478c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004790:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004794:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004798:	4642      	mov	r2, r8
 800479a:	464b      	mov	r3, r9
 800479c:	1891      	adds	r1, r2, r2
 800479e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047a0:	415b      	adcs	r3, r3
 80047a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047a8:	4641      	mov	r1, r8
 80047aa:	1851      	adds	r1, r2, r1
 80047ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80047ae:	4649      	mov	r1, r9
 80047b0:	414b      	adcs	r3, r1
 80047b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047c0:	4659      	mov	r1, fp
 80047c2:	00cb      	lsls	r3, r1, #3
 80047c4:	4651      	mov	r1, sl
 80047c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ca:	4651      	mov	r1, sl
 80047cc:	00ca      	lsls	r2, r1, #3
 80047ce:	4610      	mov	r0, r2
 80047d0:	4619      	mov	r1, r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	4642      	mov	r2, r8
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047dc:	464b      	mov	r3, r9
 80047de:	460a      	mov	r2, r1
 80047e0:	eb42 0303 	adc.w	r3, r2, r3
 80047e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047fc:	460b      	mov	r3, r1
 80047fe:	18db      	adds	r3, r3, r3
 8004800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004802:	4613      	mov	r3, r2
 8004804:	eb42 0303 	adc.w	r3, r2, r3
 8004808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800480a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800480e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004812:	f7fc f9d1 	bl	8000bb8 <__aeabi_uldivmod>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4b0d      	ldr	r3, [pc, #52]	@ (8004850 <UART_SetConfig+0x2d4>)
 800481c:	fba3 1302 	umull	r1, r3, r3, r2
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	2164      	movs	r1, #100	@ 0x64
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	3332      	adds	r3, #50	@ 0x32
 800482e:	4a08      	ldr	r2, [pc, #32]	@ (8004850 <UART_SetConfig+0x2d4>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	f003 0207 	and.w	r2, r3, #7
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4422      	add	r2, r4
 8004842:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004844:	e106      	b.n	8004a54 <UART_SetConfig+0x4d8>
 8004846:	bf00      	nop
 8004848:	40011000 	.word	0x40011000
 800484c:	40011400 	.word	0x40011400
 8004850:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004858:	2200      	movs	r2, #0
 800485a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800485e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004862:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004866:	4642      	mov	r2, r8
 8004868:	464b      	mov	r3, r9
 800486a:	1891      	adds	r1, r2, r2
 800486c:	6239      	str	r1, [r7, #32]
 800486e:	415b      	adcs	r3, r3
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
 8004872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004876:	4641      	mov	r1, r8
 8004878:	1854      	adds	r4, r2, r1
 800487a:	4649      	mov	r1, r9
 800487c:	eb43 0501 	adc.w	r5, r3, r1
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	00eb      	lsls	r3, r5, #3
 800488a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800488e:	00e2      	lsls	r2, r4, #3
 8004890:	4614      	mov	r4, r2
 8004892:	461d      	mov	r5, r3
 8004894:	4643      	mov	r3, r8
 8004896:	18e3      	adds	r3, r4, r3
 8004898:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800489c:	464b      	mov	r3, r9
 800489e:	eb45 0303 	adc.w	r3, r5, r3
 80048a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048c2:	4629      	mov	r1, r5
 80048c4:	008b      	lsls	r3, r1, #2
 80048c6:	4621      	mov	r1, r4
 80048c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048cc:	4621      	mov	r1, r4
 80048ce:	008a      	lsls	r2, r1, #2
 80048d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048d4:	f7fc f970 	bl	8000bb8 <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4b60      	ldr	r3, [pc, #384]	@ (8004a60 <UART_SetConfig+0x4e4>)
 80048de:	fba3 2302 	umull	r2, r3, r3, r2
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	011c      	lsls	r4, r3, #4
 80048e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048f8:	4642      	mov	r2, r8
 80048fa:	464b      	mov	r3, r9
 80048fc:	1891      	adds	r1, r2, r2
 80048fe:	61b9      	str	r1, [r7, #24]
 8004900:	415b      	adcs	r3, r3
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004908:	4641      	mov	r1, r8
 800490a:	1851      	adds	r1, r2, r1
 800490c:	6139      	str	r1, [r7, #16]
 800490e:	4649      	mov	r1, r9
 8004910:	414b      	adcs	r3, r1
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004920:	4659      	mov	r1, fp
 8004922:	00cb      	lsls	r3, r1, #3
 8004924:	4651      	mov	r1, sl
 8004926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492a:	4651      	mov	r1, sl
 800492c:	00ca      	lsls	r2, r1, #3
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	4603      	mov	r3, r0
 8004934:	4642      	mov	r2, r8
 8004936:	189b      	adds	r3, r3, r2
 8004938:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800493c:	464b      	mov	r3, r9
 800493e:	460a      	mov	r2, r1
 8004940:	eb42 0303 	adc.w	r3, r2, r3
 8004944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004952:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004960:	4649      	mov	r1, r9
 8004962:	008b      	lsls	r3, r1, #2
 8004964:	4641      	mov	r1, r8
 8004966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800496a:	4641      	mov	r1, r8
 800496c:	008a      	lsls	r2, r1, #2
 800496e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004972:	f7fc f921 	bl	8000bb8 <__aeabi_uldivmod>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4611      	mov	r1, r2
 800497c:	4b38      	ldr	r3, [pc, #224]	@ (8004a60 <UART_SetConfig+0x4e4>)
 800497e:	fba3 2301 	umull	r2, r3, r3, r1
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	@ 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1acb      	subs	r3, r1, r3
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	3332      	adds	r3, #50	@ 0x32
 8004990:	4a33      	ldr	r2, [pc, #204]	@ (8004a60 <UART_SetConfig+0x4e4>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800499c:	441c      	add	r4, r3
 800499e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049a2:	2200      	movs	r2, #0
 80049a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80049a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80049a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049ac:	4642      	mov	r2, r8
 80049ae:	464b      	mov	r3, r9
 80049b0:	1891      	adds	r1, r2, r2
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	415b      	adcs	r3, r3
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049bc:	4641      	mov	r1, r8
 80049be:	1851      	adds	r1, r2, r1
 80049c0:	6039      	str	r1, [r7, #0]
 80049c2:	4649      	mov	r1, r9
 80049c4:	414b      	adcs	r3, r1
 80049c6:	607b      	str	r3, [r7, #4]
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049d4:	4659      	mov	r1, fp
 80049d6:	00cb      	lsls	r3, r1, #3
 80049d8:	4651      	mov	r1, sl
 80049da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049de:	4651      	mov	r1, sl
 80049e0:	00ca      	lsls	r2, r1, #3
 80049e2:	4610      	mov	r0, r2
 80049e4:	4619      	mov	r1, r3
 80049e6:	4603      	mov	r3, r0
 80049e8:	4642      	mov	r2, r8
 80049ea:	189b      	adds	r3, r3, r2
 80049ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ee:	464b      	mov	r3, r9
 80049f0:	460a      	mov	r2, r1
 80049f2:	eb42 0303 	adc.w	r3, r2, r3
 80049f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a02:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a10:	4649      	mov	r1, r9
 8004a12:	008b      	lsls	r3, r1, #2
 8004a14:	4641      	mov	r1, r8
 8004a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a1a:	4641      	mov	r1, r8
 8004a1c:	008a      	lsls	r2, r1, #2
 8004a1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a22:	f7fc f8c9 	bl	8000bb8 <__aeabi_uldivmod>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a60 <UART_SetConfig+0x4e4>)
 8004a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a30:	095b      	lsrs	r3, r3, #5
 8004a32:	2164      	movs	r1, #100	@ 0x64
 8004a34:	fb01 f303 	mul.w	r3, r1, r3
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	3332      	adds	r3, #50	@ 0x32
 8004a3e:	4a08      	ldr	r2, [pc, #32]	@ (8004a60 <UART_SetConfig+0x4e4>)
 8004a40:	fba2 2303 	umull	r2, r3, r2, r3
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	f003 020f 	and.w	r2, r3, #15
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4422      	add	r2, r4
 8004a52:	609a      	str	r2, [r3, #8]
}
 8004a54:	bf00      	nop
 8004a56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a60:	51eb851f 	.word	0x51eb851f

08004a64 <__cvt>:
 8004a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	ec57 6b10 	vmov	r6, r7, d0
 8004a6c:	2f00      	cmp	r7, #0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	4619      	mov	r1, r3
 8004a72:	463b      	mov	r3, r7
 8004a74:	bfbb      	ittet	lt
 8004a76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004a7a:	461f      	movlt	r7, r3
 8004a7c:	2300      	movge	r3, #0
 8004a7e:	232d      	movlt	r3, #45	@ 0x2d
 8004a80:	700b      	strb	r3, [r1, #0]
 8004a82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004a88:	4691      	mov	r9, r2
 8004a8a:	f023 0820 	bic.w	r8, r3, #32
 8004a8e:	bfbc      	itt	lt
 8004a90:	4632      	movlt	r2, r6
 8004a92:	4616      	movlt	r6, r2
 8004a94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a98:	d005      	beq.n	8004aa6 <__cvt+0x42>
 8004a9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a9e:	d100      	bne.n	8004aa2 <__cvt+0x3e>
 8004aa0:	3401      	adds	r4, #1
 8004aa2:	2102      	movs	r1, #2
 8004aa4:	e000      	b.n	8004aa8 <__cvt+0x44>
 8004aa6:	2103      	movs	r1, #3
 8004aa8:	ab03      	add	r3, sp, #12
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	ab02      	add	r3, sp, #8
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	ec47 6b10 	vmov	d0, r6, r7
 8004ab4:	4653      	mov	r3, sl
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	f000 fe82 	bl	80057c0 <_dtoa_r>
 8004abc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	d119      	bne.n	8004af8 <__cvt+0x94>
 8004ac4:	f019 0f01 	tst.w	r9, #1
 8004ac8:	d00e      	beq.n	8004ae8 <__cvt+0x84>
 8004aca:	eb00 0904 	add.w	r9, r0, r4
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	4639      	mov	r1, r7
 8004ad6:	f7fb ffff 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ada:	b108      	cbz	r0, 8004ae0 <__cvt+0x7c>
 8004adc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ae0:	2230      	movs	r2, #48	@ 0x30
 8004ae2:	9b03      	ldr	r3, [sp, #12]
 8004ae4:	454b      	cmp	r3, r9
 8004ae6:	d31e      	bcc.n	8004b26 <__cvt+0xc2>
 8004ae8:	9b03      	ldr	r3, [sp, #12]
 8004aea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004aec:	1b5b      	subs	r3, r3, r5
 8004aee:	4628      	mov	r0, r5
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	b004      	add	sp, #16
 8004af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004afc:	eb00 0904 	add.w	r9, r0, r4
 8004b00:	d1e5      	bne.n	8004ace <__cvt+0x6a>
 8004b02:	7803      	ldrb	r3, [r0, #0]
 8004b04:	2b30      	cmp	r3, #48	@ 0x30
 8004b06:	d10a      	bne.n	8004b1e <__cvt+0xba>
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	4639      	mov	r1, r7
 8004b10:	f7fb ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b14:	b918      	cbnz	r0, 8004b1e <__cvt+0xba>
 8004b16:	f1c4 0401 	rsb	r4, r4, #1
 8004b1a:	f8ca 4000 	str.w	r4, [sl]
 8004b1e:	f8da 3000 	ldr.w	r3, [sl]
 8004b22:	4499      	add	r9, r3
 8004b24:	e7d3      	b.n	8004ace <__cvt+0x6a>
 8004b26:	1c59      	adds	r1, r3, #1
 8004b28:	9103      	str	r1, [sp, #12]
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	e7d9      	b.n	8004ae2 <__cvt+0x7e>

08004b2e <__exponent>:
 8004b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b30:	2900      	cmp	r1, #0
 8004b32:	bfba      	itte	lt
 8004b34:	4249      	neglt	r1, r1
 8004b36:	232d      	movlt	r3, #45	@ 0x2d
 8004b38:	232b      	movge	r3, #43	@ 0x2b
 8004b3a:	2909      	cmp	r1, #9
 8004b3c:	7002      	strb	r2, [r0, #0]
 8004b3e:	7043      	strb	r3, [r0, #1]
 8004b40:	dd29      	ble.n	8004b96 <__exponent+0x68>
 8004b42:	f10d 0307 	add.w	r3, sp, #7
 8004b46:	461d      	mov	r5, r3
 8004b48:	270a      	movs	r7, #10
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b50:	fb07 1416 	mls	r4, r7, r6, r1
 8004b54:	3430      	adds	r4, #48	@ 0x30
 8004b56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	2c63      	cmp	r4, #99	@ 0x63
 8004b5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b62:	4631      	mov	r1, r6
 8004b64:	dcf1      	bgt.n	8004b4a <__exponent+0x1c>
 8004b66:	3130      	adds	r1, #48	@ 0x30
 8004b68:	1e94      	subs	r4, r2, #2
 8004b6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b6e:	1c41      	adds	r1, r0, #1
 8004b70:	4623      	mov	r3, r4
 8004b72:	42ab      	cmp	r3, r5
 8004b74:	d30a      	bcc.n	8004b8c <__exponent+0x5e>
 8004b76:	f10d 0309 	add.w	r3, sp, #9
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	42ac      	cmp	r4, r5
 8004b7e:	bf88      	it	hi
 8004b80:	2300      	movhi	r3, #0
 8004b82:	3302      	adds	r3, #2
 8004b84:	4403      	add	r3, r0
 8004b86:	1a18      	subs	r0, r3, r0
 8004b88:	b003      	add	sp, #12
 8004b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b94:	e7ed      	b.n	8004b72 <__exponent+0x44>
 8004b96:	2330      	movs	r3, #48	@ 0x30
 8004b98:	3130      	adds	r1, #48	@ 0x30
 8004b9a:	7083      	strb	r3, [r0, #2]
 8004b9c:	70c1      	strb	r1, [r0, #3]
 8004b9e:	1d03      	adds	r3, r0, #4
 8004ba0:	e7f1      	b.n	8004b86 <__exponent+0x58>
	...

08004ba4 <_printf_float>:
 8004ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba8:	b08d      	sub	sp, #52	@ 0x34
 8004baa:	460c      	mov	r4, r1
 8004bac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004bb0:	4616      	mov	r6, r2
 8004bb2:	461f      	mov	r7, r3
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	f000 fcf5 	bl	80055a4 <_localeconv_r>
 8004bba:	6803      	ldr	r3, [r0, #0]
 8004bbc:	9304      	str	r3, [sp, #16]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fb fb5e 	bl	8000280 <strlen>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8004bcc:	9005      	str	r0, [sp, #20]
 8004bce:	3307      	adds	r3, #7
 8004bd0:	f023 0307 	bic.w	r3, r3, #7
 8004bd4:	f103 0208 	add.w	r2, r3, #8
 8004bd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004bdc:	f8d4 b000 	ldr.w	fp, [r4]
 8004be0:	f8c8 2000 	str.w	r2, [r8]
 8004be4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004be8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004bec:	9307      	str	r3, [sp, #28]
 8004bee:	f8cd 8018 	str.w	r8, [sp, #24]
 8004bf2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bfa:	4b9c      	ldr	r3, [pc, #624]	@ (8004e6c <_printf_float+0x2c8>)
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	f7fb ff9c 	bl	8000b3c <__aeabi_dcmpun>
 8004c04:	bb70      	cbnz	r0, 8004c64 <_printf_float+0xc0>
 8004c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c0a:	4b98      	ldr	r3, [pc, #608]	@ (8004e6c <_printf_float+0x2c8>)
 8004c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c10:	f7fb ff76 	bl	8000b00 <__aeabi_dcmple>
 8004c14:	bb30      	cbnz	r0, 8004c64 <_printf_float+0xc0>
 8004c16:	2200      	movs	r2, #0
 8004c18:	2300      	movs	r3, #0
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	f7fb ff65 	bl	8000aec <__aeabi_dcmplt>
 8004c22:	b110      	cbz	r0, 8004c2a <_printf_float+0x86>
 8004c24:	232d      	movs	r3, #45	@ 0x2d
 8004c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c2a:	4a91      	ldr	r2, [pc, #580]	@ (8004e70 <_printf_float+0x2cc>)
 8004c2c:	4b91      	ldr	r3, [pc, #580]	@ (8004e74 <_printf_float+0x2d0>)
 8004c2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c32:	bf94      	ite	ls
 8004c34:	4690      	movls	r8, r2
 8004c36:	4698      	movhi	r8, r3
 8004c38:	2303      	movs	r3, #3
 8004c3a:	6123      	str	r3, [r4, #16]
 8004c3c:	f02b 0304 	bic.w	r3, fp, #4
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	f04f 0900 	mov.w	r9, #0
 8004c46:	9700      	str	r7, [sp, #0]
 8004c48:	4633      	mov	r3, r6
 8004c4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f000 f9d2 	bl	8004ff8 <_printf_common>
 8004c54:	3001      	adds	r0, #1
 8004c56:	f040 808d 	bne.w	8004d74 <_printf_float+0x1d0>
 8004c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5e:	b00d      	add	sp, #52	@ 0x34
 8004c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c64:	4642      	mov	r2, r8
 8004c66:	464b      	mov	r3, r9
 8004c68:	4640      	mov	r0, r8
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	f7fb ff66 	bl	8000b3c <__aeabi_dcmpun>
 8004c70:	b140      	cbz	r0, 8004c84 <_printf_float+0xe0>
 8004c72:	464b      	mov	r3, r9
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bfbc      	itt	lt
 8004c78:	232d      	movlt	r3, #45	@ 0x2d
 8004c7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e78 <_printf_float+0x2d4>)
 8004c80:	4b7e      	ldr	r3, [pc, #504]	@ (8004e7c <_printf_float+0x2d8>)
 8004c82:	e7d4      	b.n	8004c2e <_printf_float+0x8a>
 8004c84:	6863      	ldr	r3, [r4, #4]
 8004c86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004c8a:	9206      	str	r2, [sp, #24]
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	d13b      	bne.n	8004d08 <_printf_float+0x164>
 8004c90:	2306      	movs	r3, #6
 8004c92:	6063      	str	r3, [r4, #4]
 8004c94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004c98:	2300      	movs	r3, #0
 8004c9a:	6022      	str	r2, [r4, #0]
 8004c9c:	9303      	str	r3, [sp, #12]
 8004c9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004ca0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004ca4:	ab09      	add	r3, sp, #36	@ 0x24
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	6861      	ldr	r1, [r4, #4]
 8004caa:	ec49 8b10 	vmov	d0, r8, r9
 8004cae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f7ff fed6 	bl	8004a64 <__cvt>
 8004cb8:	9b06      	ldr	r3, [sp, #24]
 8004cba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004cbc:	2b47      	cmp	r3, #71	@ 0x47
 8004cbe:	4680      	mov	r8, r0
 8004cc0:	d129      	bne.n	8004d16 <_printf_float+0x172>
 8004cc2:	1cc8      	adds	r0, r1, #3
 8004cc4:	db02      	blt.n	8004ccc <_printf_float+0x128>
 8004cc6:	6863      	ldr	r3, [r4, #4]
 8004cc8:	4299      	cmp	r1, r3
 8004cca:	dd41      	ble.n	8004d50 <_printf_float+0x1ac>
 8004ccc:	f1aa 0a02 	sub.w	sl, sl, #2
 8004cd0:	fa5f fa8a 	uxtb.w	sl, sl
 8004cd4:	3901      	subs	r1, #1
 8004cd6:	4652      	mov	r2, sl
 8004cd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004cdc:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cde:	f7ff ff26 	bl	8004b2e <__exponent>
 8004ce2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ce4:	1813      	adds	r3, r2, r0
 8004ce6:	2a01      	cmp	r2, #1
 8004ce8:	4681      	mov	r9, r0
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	dc02      	bgt.n	8004cf4 <_printf_float+0x150>
 8004cee:	6822      	ldr	r2, [r4, #0]
 8004cf0:	07d2      	lsls	r2, r2, #31
 8004cf2:	d501      	bpl.n	8004cf8 <_printf_float+0x154>
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	6123      	str	r3, [r4, #16]
 8004cf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0a2      	beq.n	8004c46 <_printf_float+0xa2>
 8004d00:	232d      	movs	r3, #45	@ 0x2d
 8004d02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d06:	e79e      	b.n	8004c46 <_printf_float+0xa2>
 8004d08:	9a06      	ldr	r2, [sp, #24]
 8004d0a:	2a47      	cmp	r2, #71	@ 0x47
 8004d0c:	d1c2      	bne.n	8004c94 <_printf_float+0xf0>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1c0      	bne.n	8004c94 <_printf_float+0xf0>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e7bd      	b.n	8004c92 <_printf_float+0xee>
 8004d16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d1a:	d9db      	bls.n	8004cd4 <_printf_float+0x130>
 8004d1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d20:	d118      	bne.n	8004d54 <_printf_float+0x1b0>
 8004d22:	2900      	cmp	r1, #0
 8004d24:	6863      	ldr	r3, [r4, #4]
 8004d26:	dd0b      	ble.n	8004d40 <_printf_float+0x19c>
 8004d28:	6121      	str	r1, [r4, #16]
 8004d2a:	b913      	cbnz	r3, 8004d32 <_printf_float+0x18e>
 8004d2c:	6822      	ldr	r2, [r4, #0]
 8004d2e:	07d0      	lsls	r0, r2, #31
 8004d30:	d502      	bpl.n	8004d38 <_printf_float+0x194>
 8004d32:	3301      	adds	r3, #1
 8004d34:	440b      	add	r3, r1
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d3a:	f04f 0900 	mov.w	r9, #0
 8004d3e:	e7db      	b.n	8004cf8 <_printf_float+0x154>
 8004d40:	b913      	cbnz	r3, 8004d48 <_printf_float+0x1a4>
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	07d2      	lsls	r2, r2, #31
 8004d46:	d501      	bpl.n	8004d4c <_printf_float+0x1a8>
 8004d48:	3302      	adds	r3, #2
 8004d4a:	e7f4      	b.n	8004d36 <_printf_float+0x192>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e7f2      	b.n	8004d36 <_printf_float+0x192>
 8004d50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d56:	4299      	cmp	r1, r3
 8004d58:	db05      	blt.n	8004d66 <_printf_float+0x1c2>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	6121      	str	r1, [r4, #16]
 8004d5e:	07d8      	lsls	r0, r3, #31
 8004d60:	d5ea      	bpl.n	8004d38 <_printf_float+0x194>
 8004d62:	1c4b      	adds	r3, r1, #1
 8004d64:	e7e7      	b.n	8004d36 <_printf_float+0x192>
 8004d66:	2900      	cmp	r1, #0
 8004d68:	bfd4      	ite	le
 8004d6a:	f1c1 0202 	rsble	r2, r1, #2
 8004d6e:	2201      	movgt	r2, #1
 8004d70:	4413      	add	r3, r2
 8004d72:	e7e0      	b.n	8004d36 <_printf_float+0x192>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	055a      	lsls	r2, r3, #21
 8004d78:	d407      	bmi.n	8004d8a <_printf_float+0x1e6>
 8004d7a:	6923      	ldr	r3, [r4, #16]
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	4631      	mov	r1, r6
 8004d80:	4628      	mov	r0, r5
 8004d82:	47b8      	blx	r7
 8004d84:	3001      	adds	r0, #1
 8004d86:	d12b      	bne.n	8004de0 <_printf_float+0x23c>
 8004d88:	e767      	b.n	8004c5a <_printf_float+0xb6>
 8004d8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d8e:	f240 80dd 	bls.w	8004f4c <_printf_float+0x3a8>
 8004d92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d96:	2200      	movs	r2, #0
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f7fb fe9d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d033      	beq.n	8004e0a <_printf_float+0x266>
 8004da2:	4a37      	ldr	r2, [pc, #220]	@ (8004e80 <_printf_float+0x2dc>)
 8004da4:	2301      	movs	r3, #1
 8004da6:	4631      	mov	r1, r6
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b8      	blx	r7
 8004dac:	3001      	adds	r0, #1
 8004dae:	f43f af54 	beq.w	8004c5a <_printf_float+0xb6>
 8004db2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004db6:	4543      	cmp	r3, r8
 8004db8:	db02      	blt.n	8004dc0 <_printf_float+0x21c>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	07d8      	lsls	r0, r3, #31
 8004dbe:	d50f      	bpl.n	8004de0 <_printf_float+0x23c>
 8004dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	47b8      	blx	r7
 8004dca:	3001      	adds	r0, #1
 8004dcc:	f43f af45 	beq.w	8004c5a <_printf_float+0xb6>
 8004dd0:	f04f 0900 	mov.w	r9, #0
 8004dd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dd8:	f104 0a1a 	add.w	sl, r4, #26
 8004ddc:	45c8      	cmp	r8, r9
 8004dde:	dc09      	bgt.n	8004df4 <_printf_float+0x250>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	079b      	lsls	r3, r3, #30
 8004de4:	f100 8103 	bmi.w	8004fee <_printf_float+0x44a>
 8004de8:	68e0      	ldr	r0, [r4, #12]
 8004dea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004dec:	4298      	cmp	r0, r3
 8004dee:	bfb8      	it	lt
 8004df0:	4618      	movlt	r0, r3
 8004df2:	e734      	b.n	8004c5e <_printf_float+0xba>
 8004df4:	2301      	movs	r3, #1
 8004df6:	4652      	mov	r2, sl
 8004df8:	4631      	mov	r1, r6
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	47b8      	blx	r7
 8004dfe:	3001      	adds	r0, #1
 8004e00:	f43f af2b 	beq.w	8004c5a <_printf_float+0xb6>
 8004e04:	f109 0901 	add.w	r9, r9, #1
 8004e08:	e7e8      	b.n	8004ddc <_printf_float+0x238>
 8004e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	dc39      	bgt.n	8004e84 <_printf_float+0x2e0>
 8004e10:	4a1b      	ldr	r2, [pc, #108]	@ (8004e80 <_printf_float+0x2dc>)
 8004e12:	2301      	movs	r3, #1
 8004e14:	4631      	mov	r1, r6
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	f43f af1d 	beq.w	8004c5a <_printf_float+0xb6>
 8004e20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004e24:	ea59 0303 	orrs.w	r3, r9, r3
 8004e28:	d102      	bne.n	8004e30 <_printf_float+0x28c>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	07d9      	lsls	r1, r3, #31
 8004e2e:	d5d7      	bpl.n	8004de0 <_printf_float+0x23c>
 8004e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e34:	4631      	mov	r1, r6
 8004e36:	4628      	mov	r0, r5
 8004e38:	47b8      	blx	r7
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	f43f af0d 	beq.w	8004c5a <_printf_float+0xb6>
 8004e40:	f04f 0a00 	mov.w	sl, #0
 8004e44:	f104 0b1a 	add.w	fp, r4, #26
 8004e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e4a:	425b      	negs	r3, r3
 8004e4c:	4553      	cmp	r3, sl
 8004e4e:	dc01      	bgt.n	8004e54 <_printf_float+0x2b0>
 8004e50:	464b      	mov	r3, r9
 8004e52:	e793      	b.n	8004d7c <_printf_float+0x1d8>
 8004e54:	2301      	movs	r3, #1
 8004e56:	465a      	mov	r2, fp
 8004e58:	4631      	mov	r1, r6
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	47b8      	blx	r7
 8004e5e:	3001      	adds	r0, #1
 8004e60:	f43f aefb 	beq.w	8004c5a <_printf_float+0xb6>
 8004e64:	f10a 0a01 	add.w	sl, sl, #1
 8004e68:	e7ee      	b.n	8004e48 <_printf_float+0x2a4>
 8004e6a:	bf00      	nop
 8004e6c:	7fefffff 	.word	0x7fefffff
 8004e70:	0800773c 	.word	0x0800773c
 8004e74:	08007740 	.word	0x08007740
 8004e78:	08007744 	.word	0x08007744
 8004e7c:	08007748 	.word	0x08007748
 8004e80:	0800774c 	.word	0x0800774c
 8004e84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e8a:	4553      	cmp	r3, sl
 8004e8c:	bfa8      	it	ge
 8004e8e:	4653      	movge	r3, sl
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	4699      	mov	r9, r3
 8004e94:	dc36      	bgt.n	8004f04 <_printf_float+0x360>
 8004e96:	f04f 0b00 	mov.w	fp, #0
 8004e9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e9e:	f104 021a 	add.w	r2, r4, #26
 8004ea2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ea4:	9306      	str	r3, [sp, #24]
 8004ea6:	eba3 0309 	sub.w	r3, r3, r9
 8004eaa:	455b      	cmp	r3, fp
 8004eac:	dc31      	bgt.n	8004f12 <_printf_float+0x36e>
 8004eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eb0:	459a      	cmp	sl, r3
 8004eb2:	dc3a      	bgt.n	8004f2a <_printf_float+0x386>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	07da      	lsls	r2, r3, #31
 8004eb8:	d437      	bmi.n	8004f2a <_printf_float+0x386>
 8004eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ebc:	ebaa 0903 	sub.w	r9, sl, r3
 8004ec0:	9b06      	ldr	r3, [sp, #24]
 8004ec2:	ebaa 0303 	sub.w	r3, sl, r3
 8004ec6:	4599      	cmp	r9, r3
 8004ec8:	bfa8      	it	ge
 8004eca:	4699      	movge	r9, r3
 8004ecc:	f1b9 0f00 	cmp.w	r9, #0
 8004ed0:	dc33      	bgt.n	8004f3a <_printf_float+0x396>
 8004ed2:	f04f 0800 	mov.w	r8, #0
 8004ed6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eda:	f104 0b1a 	add.w	fp, r4, #26
 8004ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ee0:	ebaa 0303 	sub.w	r3, sl, r3
 8004ee4:	eba3 0309 	sub.w	r3, r3, r9
 8004ee8:	4543      	cmp	r3, r8
 8004eea:	f77f af79 	ble.w	8004de0 <_printf_float+0x23c>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	465a      	mov	r2, fp
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b8      	blx	r7
 8004ef8:	3001      	adds	r0, #1
 8004efa:	f43f aeae 	beq.w	8004c5a <_printf_float+0xb6>
 8004efe:	f108 0801 	add.w	r8, r8, #1
 8004f02:	e7ec      	b.n	8004ede <_printf_float+0x33a>
 8004f04:	4642      	mov	r2, r8
 8004f06:	4631      	mov	r1, r6
 8004f08:	4628      	mov	r0, r5
 8004f0a:	47b8      	blx	r7
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d1c2      	bne.n	8004e96 <_printf_float+0x2f2>
 8004f10:	e6a3      	b.n	8004c5a <_printf_float+0xb6>
 8004f12:	2301      	movs	r3, #1
 8004f14:	4631      	mov	r1, r6
 8004f16:	4628      	mov	r0, r5
 8004f18:	9206      	str	r2, [sp, #24]
 8004f1a:	47b8      	blx	r7
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	f43f ae9c 	beq.w	8004c5a <_printf_float+0xb6>
 8004f22:	9a06      	ldr	r2, [sp, #24]
 8004f24:	f10b 0b01 	add.w	fp, fp, #1
 8004f28:	e7bb      	b.n	8004ea2 <_printf_float+0x2fe>
 8004f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b8      	blx	r7
 8004f34:	3001      	adds	r0, #1
 8004f36:	d1c0      	bne.n	8004eba <_printf_float+0x316>
 8004f38:	e68f      	b.n	8004c5a <_printf_float+0xb6>
 8004f3a:	9a06      	ldr	r2, [sp, #24]
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	4442      	add	r2, r8
 8004f40:	4631      	mov	r1, r6
 8004f42:	4628      	mov	r0, r5
 8004f44:	47b8      	blx	r7
 8004f46:	3001      	adds	r0, #1
 8004f48:	d1c3      	bne.n	8004ed2 <_printf_float+0x32e>
 8004f4a:	e686      	b.n	8004c5a <_printf_float+0xb6>
 8004f4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f50:	f1ba 0f01 	cmp.w	sl, #1
 8004f54:	dc01      	bgt.n	8004f5a <_printf_float+0x3b6>
 8004f56:	07db      	lsls	r3, r3, #31
 8004f58:	d536      	bpl.n	8004fc8 <_printf_float+0x424>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4628      	mov	r0, r5
 8004f62:	47b8      	blx	r7
 8004f64:	3001      	adds	r0, #1
 8004f66:	f43f ae78 	beq.w	8004c5a <_printf_float+0xb6>
 8004f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	f43f ae70 	beq.w	8004c5a <_printf_float+0xb6>
 8004f7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2300      	movs	r3, #0
 8004f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f86:	f7fb fda7 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f8a:	b9c0      	cbnz	r0, 8004fbe <_printf_float+0x41a>
 8004f8c:	4653      	mov	r3, sl
 8004f8e:	f108 0201 	add.w	r2, r8, #1
 8004f92:	4631      	mov	r1, r6
 8004f94:	4628      	mov	r0, r5
 8004f96:	47b8      	blx	r7
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d10c      	bne.n	8004fb6 <_printf_float+0x412>
 8004f9c:	e65d      	b.n	8004c5a <_printf_float+0xb6>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	465a      	mov	r2, fp
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	47b8      	blx	r7
 8004fa8:	3001      	adds	r0, #1
 8004faa:	f43f ae56 	beq.w	8004c5a <_printf_float+0xb6>
 8004fae:	f108 0801 	add.w	r8, r8, #1
 8004fb2:	45d0      	cmp	r8, sl
 8004fb4:	dbf3      	blt.n	8004f9e <_printf_float+0x3fa>
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004fbc:	e6df      	b.n	8004d7e <_printf_float+0x1da>
 8004fbe:	f04f 0800 	mov.w	r8, #0
 8004fc2:	f104 0b1a 	add.w	fp, r4, #26
 8004fc6:	e7f4      	b.n	8004fb2 <_printf_float+0x40e>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	4642      	mov	r2, r8
 8004fcc:	e7e1      	b.n	8004f92 <_printf_float+0x3ee>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	464a      	mov	r2, r9
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	47b8      	blx	r7
 8004fd8:	3001      	adds	r0, #1
 8004fda:	f43f ae3e 	beq.w	8004c5a <_printf_float+0xb6>
 8004fde:	f108 0801 	add.w	r8, r8, #1
 8004fe2:	68e3      	ldr	r3, [r4, #12]
 8004fe4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004fe6:	1a5b      	subs	r3, r3, r1
 8004fe8:	4543      	cmp	r3, r8
 8004fea:	dcf0      	bgt.n	8004fce <_printf_float+0x42a>
 8004fec:	e6fc      	b.n	8004de8 <_printf_float+0x244>
 8004fee:	f04f 0800 	mov.w	r8, #0
 8004ff2:	f104 0919 	add.w	r9, r4, #25
 8004ff6:	e7f4      	b.n	8004fe2 <_printf_float+0x43e>

08004ff8 <_printf_common>:
 8004ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ffc:	4616      	mov	r6, r2
 8004ffe:	4698      	mov	r8, r3
 8005000:	688a      	ldr	r2, [r1, #8]
 8005002:	690b      	ldr	r3, [r1, #16]
 8005004:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005008:	4293      	cmp	r3, r2
 800500a:	bfb8      	it	lt
 800500c:	4613      	movlt	r3, r2
 800500e:	6033      	str	r3, [r6, #0]
 8005010:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005014:	4607      	mov	r7, r0
 8005016:	460c      	mov	r4, r1
 8005018:	b10a      	cbz	r2, 800501e <_printf_common+0x26>
 800501a:	3301      	adds	r3, #1
 800501c:	6033      	str	r3, [r6, #0]
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	0699      	lsls	r1, r3, #26
 8005022:	bf42      	ittt	mi
 8005024:	6833      	ldrmi	r3, [r6, #0]
 8005026:	3302      	addmi	r3, #2
 8005028:	6033      	strmi	r3, [r6, #0]
 800502a:	6825      	ldr	r5, [r4, #0]
 800502c:	f015 0506 	ands.w	r5, r5, #6
 8005030:	d106      	bne.n	8005040 <_printf_common+0x48>
 8005032:	f104 0a19 	add.w	sl, r4, #25
 8005036:	68e3      	ldr	r3, [r4, #12]
 8005038:	6832      	ldr	r2, [r6, #0]
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	42ab      	cmp	r3, r5
 800503e:	dc26      	bgt.n	800508e <_printf_common+0x96>
 8005040:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005044:	6822      	ldr	r2, [r4, #0]
 8005046:	3b00      	subs	r3, #0
 8005048:	bf18      	it	ne
 800504a:	2301      	movne	r3, #1
 800504c:	0692      	lsls	r2, r2, #26
 800504e:	d42b      	bmi.n	80050a8 <_printf_common+0xb0>
 8005050:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005054:	4641      	mov	r1, r8
 8005056:	4638      	mov	r0, r7
 8005058:	47c8      	blx	r9
 800505a:	3001      	adds	r0, #1
 800505c:	d01e      	beq.n	800509c <_printf_common+0xa4>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	6922      	ldr	r2, [r4, #16]
 8005062:	f003 0306 	and.w	r3, r3, #6
 8005066:	2b04      	cmp	r3, #4
 8005068:	bf02      	ittt	eq
 800506a:	68e5      	ldreq	r5, [r4, #12]
 800506c:	6833      	ldreq	r3, [r6, #0]
 800506e:	1aed      	subeq	r5, r5, r3
 8005070:	68a3      	ldr	r3, [r4, #8]
 8005072:	bf0c      	ite	eq
 8005074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005078:	2500      	movne	r5, #0
 800507a:	4293      	cmp	r3, r2
 800507c:	bfc4      	itt	gt
 800507e:	1a9b      	subgt	r3, r3, r2
 8005080:	18ed      	addgt	r5, r5, r3
 8005082:	2600      	movs	r6, #0
 8005084:	341a      	adds	r4, #26
 8005086:	42b5      	cmp	r5, r6
 8005088:	d11a      	bne.n	80050c0 <_printf_common+0xc8>
 800508a:	2000      	movs	r0, #0
 800508c:	e008      	b.n	80050a0 <_printf_common+0xa8>
 800508e:	2301      	movs	r3, #1
 8005090:	4652      	mov	r2, sl
 8005092:	4641      	mov	r1, r8
 8005094:	4638      	mov	r0, r7
 8005096:	47c8      	blx	r9
 8005098:	3001      	adds	r0, #1
 800509a:	d103      	bne.n	80050a4 <_printf_common+0xac>
 800509c:	f04f 30ff 	mov.w	r0, #4294967295
 80050a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a4:	3501      	adds	r5, #1
 80050a6:	e7c6      	b.n	8005036 <_printf_common+0x3e>
 80050a8:	18e1      	adds	r1, r4, r3
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	2030      	movs	r0, #48	@ 0x30
 80050ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050b2:	4422      	add	r2, r4
 80050b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050bc:	3302      	adds	r3, #2
 80050be:	e7c7      	b.n	8005050 <_printf_common+0x58>
 80050c0:	2301      	movs	r3, #1
 80050c2:	4622      	mov	r2, r4
 80050c4:	4641      	mov	r1, r8
 80050c6:	4638      	mov	r0, r7
 80050c8:	47c8      	blx	r9
 80050ca:	3001      	adds	r0, #1
 80050cc:	d0e6      	beq.n	800509c <_printf_common+0xa4>
 80050ce:	3601      	adds	r6, #1
 80050d0:	e7d9      	b.n	8005086 <_printf_common+0x8e>
	...

080050d4 <_printf_i>:
 80050d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050d8:	7e0f      	ldrb	r7, [r1, #24]
 80050da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050dc:	2f78      	cmp	r7, #120	@ 0x78
 80050de:	4691      	mov	r9, r2
 80050e0:	4680      	mov	r8, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	469a      	mov	sl, r3
 80050e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050ea:	d807      	bhi.n	80050fc <_printf_i+0x28>
 80050ec:	2f62      	cmp	r7, #98	@ 0x62
 80050ee:	d80a      	bhi.n	8005106 <_printf_i+0x32>
 80050f0:	2f00      	cmp	r7, #0
 80050f2:	f000 80d2 	beq.w	800529a <_printf_i+0x1c6>
 80050f6:	2f58      	cmp	r7, #88	@ 0x58
 80050f8:	f000 80b9 	beq.w	800526e <_printf_i+0x19a>
 80050fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005100:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005104:	e03a      	b.n	800517c <_printf_i+0xa8>
 8005106:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800510a:	2b15      	cmp	r3, #21
 800510c:	d8f6      	bhi.n	80050fc <_printf_i+0x28>
 800510e:	a101      	add	r1, pc, #4	@ (adr r1, 8005114 <_printf_i+0x40>)
 8005110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005114:	0800516d 	.word	0x0800516d
 8005118:	08005181 	.word	0x08005181
 800511c:	080050fd 	.word	0x080050fd
 8005120:	080050fd 	.word	0x080050fd
 8005124:	080050fd 	.word	0x080050fd
 8005128:	080050fd 	.word	0x080050fd
 800512c:	08005181 	.word	0x08005181
 8005130:	080050fd 	.word	0x080050fd
 8005134:	080050fd 	.word	0x080050fd
 8005138:	080050fd 	.word	0x080050fd
 800513c:	080050fd 	.word	0x080050fd
 8005140:	08005281 	.word	0x08005281
 8005144:	080051ab 	.word	0x080051ab
 8005148:	0800523b 	.word	0x0800523b
 800514c:	080050fd 	.word	0x080050fd
 8005150:	080050fd 	.word	0x080050fd
 8005154:	080052a3 	.word	0x080052a3
 8005158:	080050fd 	.word	0x080050fd
 800515c:	080051ab 	.word	0x080051ab
 8005160:	080050fd 	.word	0x080050fd
 8005164:	080050fd 	.word	0x080050fd
 8005168:	08005243 	.word	0x08005243
 800516c:	6833      	ldr	r3, [r6, #0]
 800516e:	1d1a      	adds	r2, r3, #4
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6032      	str	r2, [r6, #0]
 8005174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005178:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800517c:	2301      	movs	r3, #1
 800517e:	e09d      	b.n	80052bc <_printf_i+0x1e8>
 8005180:	6833      	ldr	r3, [r6, #0]
 8005182:	6820      	ldr	r0, [r4, #0]
 8005184:	1d19      	adds	r1, r3, #4
 8005186:	6031      	str	r1, [r6, #0]
 8005188:	0606      	lsls	r6, r0, #24
 800518a:	d501      	bpl.n	8005190 <_printf_i+0xbc>
 800518c:	681d      	ldr	r5, [r3, #0]
 800518e:	e003      	b.n	8005198 <_printf_i+0xc4>
 8005190:	0645      	lsls	r5, r0, #25
 8005192:	d5fb      	bpl.n	800518c <_printf_i+0xb8>
 8005194:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005198:	2d00      	cmp	r5, #0
 800519a:	da03      	bge.n	80051a4 <_printf_i+0xd0>
 800519c:	232d      	movs	r3, #45	@ 0x2d
 800519e:	426d      	negs	r5, r5
 80051a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051a4:	4859      	ldr	r0, [pc, #356]	@ (800530c <_printf_i+0x238>)
 80051a6:	230a      	movs	r3, #10
 80051a8:	e011      	b.n	80051ce <_printf_i+0xfa>
 80051aa:	6821      	ldr	r1, [r4, #0]
 80051ac:	6833      	ldr	r3, [r6, #0]
 80051ae:	0608      	lsls	r0, r1, #24
 80051b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80051b4:	d402      	bmi.n	80051bc <_printf_i+0xe8>
 80051b6:	0649      	lsls	r1, r1, #25
 80051b8:	bf48      	it	mi
 80051ba:	b2ad      	uxthmi	r5, r5
 80051bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80051be:	4853      	ldr	r0, [pc, #332]	@ (800530c <_printf_i+0x238>)
 80051c0:	6033      	str	r3, [r6, #0]
 80051c2:	bf14      	ite	ne
 80051c4:	230a      	movne	r3, #10
 80051c6:	2308      	moveq	r3, #8
 80051c8:	2100      	movs	r1, #0
 80051ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051ce:	6866      	ldr	r6, [r4, #4]
 80051d0:	60a6      	str	r6, [r4, #8]
 80051d2:	2e00      	cmp	r6, #0
 80051d4:	bfa2      	ittt	ge
 80051d6:	6821      	ldrge	r1, [r4, #0]
 80051d8:	f021 0104 	bicge.w	r1, r1, #4
 80051dc:	6021      	strge	r1, [r4, #0]
 80051de:	b90d      	cbnz	r5, 80051e4 <_printf_i+0x110>
 80051e0:	2e00      	cmp	r6, #0
 80051e2:	d04b      	beq.n	800527c <_printf_i+0x1a8>
 80051e4:	4616      	mov	r6, r2
 80051e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80051ea:	fb03 5711 	mls	r7, r3, r1, r5
 80051ee:	5dc7      	ldrb	r7, [r0, r7]
 80051f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051f4:	462f      	mov	r7, r5
 80051f6:	42bb      	cmp	r3, r7
 80051f8:	460d      	mov	r5, r1
 80051fa:	d9f4      	bls.n	80051e6 <_printf_i+0x112>
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d10b      	bne.n	8005218 <_printf_i+0x144>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	07df      	lsls	r7, r3, #31
 8005204:	d508      	bpl.n	8005218 <_printf_i+0x144>
 8005206:	6923      	ldr	r3, [r4, #16]
 8005208:	6861      	ldr	r1, [r4, #4]
 800520a:	4299      	cmp	r1, r3
 800520c:	bfde      	ittt	le
 800520e:	2330      	movle	r3, #48	@ 0x30
 8005210:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005214:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005218:	1b92      	subs	r2, r2, r6
 800521a:	6122      	str	r2, [r4, #16]
 800521c:	f8cd a000 	str.w	sl, [sp]
 8005220:	464b      	mov	r3, r9
 8005222:	aa03      	add	r2, sp, #12
 8005224:	4621      	mov	r1, r4
 8005226:	4640      	mov	r0, r8
 8005228:	f7ff fee6 	bl	8004ff8 <_printf_common>
 800522c:	3001      	adds	r0, #1
 800522e:	d14a      	bne.n	80052c6 <_printf_i+0x1f2>
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	b004      	add	sp, #16
 8005236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	f043 0320 	orr.w	r3, r3, #32
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	4833      	ldr	r0, [pc, #204]	@ (8005310 <_printf_i+0x23c>)
 8005244:	2778      	movs	r7, #120	@ 0x78
 8005246:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	6831      	ldr	r1, [r6, #0]
 800524e:	061f      	lsls	r7, r3, #24
 8005250:	f851 5b04 	ldr.w	r5, [r1], #4
 8005254:	d402      	bmi.n	800525c <_printf_i+0x188>
 8005256:	065f      	lsls	r7, r3, #25
 8005258:	bf48      	it	mi
 800525a:	b2ad      	uxthmi	r5, r5
 800525c:	6031      	str	r1, [r6, #0]
 800525e:	07d9      	lsls	r1, r3, #31
 8005260:	bf44      	itt	mi
 8005262:	f043 0320 	orrmi.w	r3, r3, #32
 8005266:	6023      	strmi	r3, [r4, #0]
 8005268:	b11d      	cbz	r5, 8005272 <_printf_i+0x19e>
 800526a:	2310      	movs	r3, #16
 800526c:	e7ac      	b.n	80051c8 <_printf_i+0xf4>
 800526e:	4827      	ldr	r0, [pc, #156]	@ (800530c <_printf_i+0x238>)
 8005270:	e7e9      	b.n	8005246 <_printf_i+0x172>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	f023 0320 	bic.w	r3, r3, #32
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	e7f6      	b.n	800526a <_printf_i+0x196>
 800527c:	4616      	mov	r6, r2
 800527e:	e7bd      	b.n	80051fc <_printf_i+0x128>
 8005280:	6833      	ldr	r3, [r6, #0]
 8005282:	6825      	ldr	r5, [r4, #0]
 8005284:	6961      	ldr	r1, [r4, #20]
 8005286:	1d18      	adds	r0, r3, #4
 8005288:	6030      	str	r0, [r6, #0]
 800528a:	062e      	lsls	r6, r5, #24
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	d501      	bpl.n	8005294 <_printf_i+0x1c0>
 8005290:	6019      	str	r1, [r3, #0]
 8005292:	e002      	b.n	800529a <_printf_i+0x1c6>
 8005294:	0668      	lsls	r0, r5, #25
 8005296:	d5fb      	bpl.n	8005290 <_printf_i+0x1bc>
 8005298:	8019      	strh	r1, [r3, #0]
 800529a:	2300      	movs	r3, #0
 800529c:	6123      	str	r3, [r4, #16]
 800529e:	4616      	mov	r6, r2
 80052a0:	e7bc      	b.n	800521c <_printf_i+0x148>
 80052a2:	6833      	ldr	r3, [r6, #0]
 80052a4:	1d1a      	adds	r2, r3, #4
 80052a6:	6032      	str	r2, [r6, #0]
 80052a8:	681e      	ldr	r6, [r3, #0]
 80052aa:	6862      	ldr	r2, [r4, #4]
 80052ac:	2100      	movs	r1, #0
 80052ae:	4630      	mov	r0, r6
 80052b0:	f7fa ff96 	bl	80001e0 <memchr>
 80052b4:	b108      	cbz	r0, 80052ba <_printf_i+0x1e6>
 80052b6:	1b80      	subs	r0, r0, r6
 80052b8:	6060      	str	r0, [r4, #4]
 80052ba:	6863      	ldr	r3, [r4, #4]
 80052bc:	6123      	str	r3, [r4, #16]
 80052be:	2300      	movs	r3, #0
 80052c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052c4:	e7aa      	b.n	800521c <_printf_i+0x148>
 80052c6:	6923      	ldr	r3, [r4, #16]
 80052c8:	4632      	mov	r2, r6
 80052ca:	4649      	mov	r1, r9
 80052cc:	4640      	mov	r0, r8
 80052ce:	47d0      	blx	sl
 80052d0:	3001      	adds	r0, #1
 80052d2:	d0ad      	beq.n	8005230 <_printf_i+0x15c>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	079b      	lsls	r3, r3, #30
 80052d8:	d413      	bmi.n	8005302 <_printf_i+0x22e>
 80052da:	68e0      	ldr	r0, [r4, #12]
 80052dc:	9b03      	ldr	r3, [sp, #12]
 80052de:	4298      	cmp	r0, r3
 80052e0:	bfb8      	it	lt
 80052e2:	4618      	movlt	r0, r3
 80052e4:	e7a6      	b.n	8005234 <_printf_i+0x160>
 80052e6:	2301      	movs	r3, #1
 80052e8:	4632      	mov	r2, r6
 80052ea:	4649      	mov	r1, r9
 80052ec:	4640      	mov	r0, r8
 80052ee:	47d0      	blx	sl
 80052f0:	3001      	adds	r0, #1
 80052f2:	d09d      	beq.n	8005230 <_printf_i+0x15c>
 80052f4:	3501      	adds	r5, #1
 80052f6:	68e3      	ldr	r3, [r4, #12]
 80052f8:	9903      	ldr	r1, [sp, #12]
 80052fa:	1a5b      	subs	r3, r3, r1
 80052fc:	42ab      	cmp	r3, r5
 80052fe:	dcf2      	bgt.n	80052e6 <_printf_i+0x212>
 8005300:	e7eb      	b.n	80052da <_printf_i+0x206>
 8005302:	2500      	movs	r5, #0
 8005304:	f104 0619 	add.w	r6, r4, #25
 8005308:	e7f5      	b.n	80052f6 <_printf_i+0x222>
 800530a:	bf00      	nop
 800530c:	0800774e 	.word	0x0800774e
 8005310:	0800775f 	.word	0x0800775f

08005314 <std>:
 8005314:	2300      	movs	r3, #0
 8005316:	b510      	push	{r4, lr}
 8005318:	4604      	mov	r4, r0
 800531a:	e9c0 3300 	strd	r3, r3, [r0]
 800531e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005322:	6083      	str	r3, [r0, #8]
 8005324:	8181      	strh	r1, [r0, #12]
 8005326:	6643      	str	r3, [r0, #100]	@ 0x64
 8005328:	81c2      	strh	r2, [r0, #14]
 800532a:	6183      	str	r3, [r0, #24]
 800532c:	4619      	mov	r1, r3
 800532e:	2208      	movs	r2, #8
 8005330:	305c      	adds	r0, #92	@ 0x5c
 8005332:	f000 f92e 	bl	8005592 <memset>
 8005336:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <std+0x58>)
 8005338:	6263      	str	r3, [r4, #36]	@ 0x24
 800533a:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <std+0x5c>)
 800533c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800533e:	4b0d      	ldr	r3, [pc, #52]	@ (8005374 <std+0x60>)
 8005340:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005342:	4b0d      	ldr	r3, [pc, #52]	@ (8005378 <std+0x64>)
 8005344:	6323      	str	r3, [r4, #48]	@ 0x30
 8005346:	4b0d      	ldr	r3, [pc, #52]	@ (800537c <std+0x68>)
 8005348:	6224      	str	r4, [r4, #32]
 800534a:	429c      	cmp	r4, r3
 800534c:	d006      	beq.n	800535c <std+0x48>
 800534e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005352:	4294      	cmp	r4, r2
 8005354:	d002      	beq.n	800535c <std+0x48>
 8005356:	33d0      	adds	r3, #208	@ 0xd0
 8005358:	429c      	cmp	r4, r3
 800535a:	d105      	bne.n	8005368 <std+0x54>
 800535c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005364:	f000 b992 	b.w	800568c <__retarget_lock_init_recursive>
 8005368:	bd10      	pop	{r4, pc}
 800536a:	bf00      	nop
 800536c:	080054d9 	.word	0x080054d9
 8005370:	080054fb 	.word	0x080054fb
 8005374:	08005533 	.word	0x08005533
 8005378:	08005557 	.word	0x08005557
 800537c:	200006ec 	.word	0x200006ec

08005380 <stdio_exit_handler>:
 8005380:	4a02      	ldr	r2, [pc, #8]	@ (800538c <stdio_exit_handler+0xc>)
 8005382:	4903      	ldr	r1, [pc, #12]	@ (8005390 <stdio_exit_handler+0x10>)
 8005384:	4803      	ldr	r0, [pc, #12]	@ (8005394 <stdio_exit_handler+0x14>)
 8005386:	f000 b869 	b.w	800545c <_fwalk_sglue>
 800538a:	bf00      	nop
 800538c:	2000000c 	.word	0x2000000c
 8005390:	08007005 	.word	0x08007005
 8005394:	2000001c 	.word	0x2000001c

08005398 <cleanup_stdio>:
 8005398:	6841      	ldr	r1, [r0, #4]
 800539a:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <cleanup_stdio+0x34>)
 800539c:	4299      	cmp	r1, r3
 800539e:	b510      	push	{r4, lr}
 80053a0:	4604      	mov	r4, r0
 80053a2:	d001      	beq.n	80053a8 <cleanup_stdio+0x10>
 80053a4:	f001 fe2e 	bl	8007004 <_fflush_r>
 80053a8:	68a1      	ldr	r1, [r4, #8]
 80053aa:	4b09      	ldr	r3, [pc, #36]	@ (80053d0 <cleanup_stdio+0x38>)
 80053ac:	4299      	cmp	r1, r3
 80053ae:	d002      	beq.n	80053b6 <cleanup_stdio+0x1e>
 80053b0:	4620      	mov	r0, r4
 80053b2:	f001 fe27 	bl	8007004 <_fflush_r>
 80053b6:	68e1      	ldr	r1, [r4, #12]
 80053b8:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <cleanup_stdio+0x3c>)
 80053ba:	4299      	cmp	r1, r3
 80053bc:	d004      	beq.n	80053c8 <cleanup_stdio+0x30>
 80053be:	4620      	mov	r0, r4
 80053c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c4:	f001 be1e 	b.w	8007004 <_fflush_r>
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	bf00      	nop
 80053cc:	200006ec 	.word	0x200006ec
 80053d0:	20000754 	.word	0x20000754
 80053d4:	200007bc 	.word	0x200007bc

080053d8 <global_stdio_init.part.0>:
 80053d8:	b510      	push	{r4, lr}
 80053da:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <global_stdio_init.part.0+0x30>)
 80053dc:	4c0b      	ldr	r4, [pc, #44]	@ (800540c <global_stdio_init.part.0+0x34>)
 80053de:	4a0c      	ldr	r2, [pc, #48]	@ (8005410 <global_stdio_init.part.0+0x38>)
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	4620      	mov	r0, r4
 80053e4:	2200      	movs	r2, #0
 80053e6:	2104      	movs	r1, #4
 80053e8:	f7ff ff94 	bl	8005314 <std>
 80053ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053f0:	2201      	movs	r2, #1
 80053f2:	2109      	movs	r1, #9
 80053f4:	f7ff ff8e 	bl	8005314 <std>
 80053f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053fc:	2202      	movs	r2, #2
 80053fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005402:	2112      	movs	r1, #18
 8005404:	f7ff bf86 	b.w	8005314 <std>
 8005408:	20000824 	.word	0x20000824
 800540c:	200006ec 	.word	0x200006ec
 8005410:	08005381 	.word	0x08005381

08005414 <__sfp_lock_acquire>:
 8005414:	4801      	ldr	r0, [pc, #4]	@ (800541c <__sfp_lock_acquire+0x8>)
 8005416:	f000 b93a 	b.w	800568e <__retarget_lock_acquire_recursive>
 800541a:	bf00      	nop
 800541c:	2000082d 	.word	0x2000082d

08005420 <__sfp_lock_release>:
 8005420:	4801      	ldr	r0, [pc, #4]	@ (8005428 <__sfp_lock_release+0x8>)
 8005422:	f000 b935 	b.w	8005690 <__retarget_lock_release_recursive>
 8005426:	bf00      	nop
 8005428:	2000082d 	.word	0x2000082d

0800542c <__sinit>:
 800542c:	b510      	push	{r4, lr}
 800542e:	4604      	mov	r4, r0
 8005430:	f7ff fff0 	bl	8005414 <__sfp_lock_acquire>
 8005434:	6a23      	ldr	r3, [r4, #32]
 8005436:	b11b      	cbz	r3, 8005440 <__sinit+0x14>
 8005438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800543c:	f7ff bff0 	b.w	8005420 <__sfp_lock_release>
 8005440:	4b04      	ldr	r3, [pc, #16]	@ (8005454 <__sinit+0x28>)
 8005442:	6223      	str	r3, [r4, #32]
 8005444:	4b04      	ldr	r3, [pc, #16]	@ (8005458 <__sinit+0x2c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f5      	bne.n	8005438 <__sinit+0xc>
 800544c:	f7ff ffc4 	bl	80053d8 <global_stdio_init.part.0>
 8005450:	e7f2      	b.n	8005438 <__sinit+0xc>
 8005452:	bf00      	nop
 8005454:	08005399 	.word	0x08005399
 8005458:	20000824 	.word	0x20000824

0800545c <_fwalk_sglue>:
 800545c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005460:	4607      	mov	r7, r0
 8005462:	4688      	mov	r8, r1
 8005464:	4614      	mov	r4, r2
 8005466:	2600      	movs	r6, #0
 8005468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800546c:	f1b9 0901 	subs.w	r9, r9, #1
 8005470:	d505      	bpl.n	800547e <_fwalk_sglue+0x22>
 8005472:	6824      	ldr	r4, [r4, #0]
 8005474:	2c00      	cmp	r4, #0
 8005476:	d1f7      	bne.n	8005468 <_fwalk_sglue+0xc>
 8005478:	4630      	mov	r0, r6
 800547a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800547e:	89ab      	ldrh	r3, [r5, #12]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d907      	bls.n	8005494 <_fwalk_sglue+0x38>
 8005484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005488:	3301      	adds	r3, #1
 800548a:	d003      	beq.n	8005494 <_fwalk_sglue+0x38>
 800548c:	4629      	mov	r1, r5
 800548e:	4638      	mov	r0, r7
 8005490:	47c0      	blx	r8
 8005492:	4306      	orrs	r6, r0
 8005494:	3568      	adds	r5, #104	@ 0x68
 8005496:	e7e9      	b.n	800546c <_fwalk_sglue+0x10>

08005498 <siprintf>:
 8005498:	b40e      	push	{r1, r2, r3}
 800549a:	b500      	push	{lr}
 800549c:	b09c      	sub	sp, #112	@ 0x70
 800549e:	ab1d      	add	r3, sp, #116	@ 0x74
 80054a0:	9002      	str	r0, [sp, #8]
 80054a2:	9006      	str	r0, [sp, #24]
 80054a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054a8:	4809      	ldr	r0, [pc, #36]	@ (80054d0 <siprintf+0x38>)
 80054aa:	9107      	str	r1, [sp, #28]
 80054ac:	9104      	str	r1, [sp, #16]
 80054ae:	4909      	ldr	r1, [pc, #36]	@ (80054d4 <siprintf+0x3c>)
 80054b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054b4:	9105      	str	r1, [sp, #20]
 80054b6:	6800      	ldr	r0, [r0, #0]
 80054b8:	9301      	str	r3, [sp, #4]
 80054ba:	a902      	add	r1, sp, #8
 80054bc:	f001 fc22 	bl	8006d04 <_svfiprintf_r>
 80054c0:	9b02      	ldr	r3, [sp, #8]
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	b01c      	add	sp, #112	@ 0x70
 80054c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054cc:	b003      	add	sp, #12
 80054ce:	4770      	bx	lr
 80054d0:	20000018 	.word	0x20000018
 80054d4:	ffff0208 	.word	0xffff0208

080054d8 <__sread>:
 80054d8:	b510      	push	{r4, lr}
 80054da:	460c      	mov	r4, r1
 80054dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e0:	f000 f886 	bl	80055f0 <_read_r>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	bfab      	itete	ge
 80054e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054ea:	89a3      	ldrhlt	r3, [r4, #12]
 80054ec:	181b      	addge	r3, r3, r0
 80054ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054f2:	bfac      	ite	ge
 80054f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054f6:	81a3      	strhlt	r3, [r4, #12]
 80054f8:	bd10      	pop	{r4, pc}

080054fa <__swrite>:
 80054fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fe:	461f      	mov	r7, r3
 8005500:	898b      	ldrh	r3, [r1, #12]
 8005502:	05db      	lsls	r3, r3, #23
 8005504:	4605      	mov	r5, r0
 8005506:	460c      	mov	r4, r1
 8005508:	4616      	mov	r6, r2
 800550a:	d505      	bpl.n	8005518 <__swrite+0x1e>
 800550c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005510:	2302      	movs	r3, #2
 8005512:	2200      	movs	r2, #0
 8005514:	f000 f85a 	bl	80055cc <_lseek_r>
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800551e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005522:	81a3      	strh	r3, [r4, #12]
 8005524:	4632      	mov	r2, r6
 8005526:	463b      	mov	r3, r7
 8005528:	4628      	mov	r0, r5
 800552a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800552e:	f000 b871 	b.w	8005614 <_write_r>

08005532 <__sseek>:
 8005532:	b510      	push	{r4, lr}
 8005534:	460c      	mov	r4, r1
 8005536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553a:	f000 f847 	bl	80055cc <_lseek_r>
 800553e:	1c43      	adds	r3, r0, #1
 8005540:	89a3      	ldrh	r3, [r4, #12]
 8005542:	bf15      	itete	ne
 8005544:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005546:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800554a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800554e:	81a3      	strheq	r3, [r4, #12]
 8005550:	bf18      	it	ne
 8005552:	81a3      	strhne	r3, [r4, #12]
 8005554:	bd10      	pop	{r4, pc}

08005556 <__sclose>:
 8005556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800555a:	f000 b827 	b.w	80055ac <_close_r>

0800555e <memmove>:
 800555e:	4288      	cmp	r0, r1
 8005560:	b510      	push	{r4, lr}
 8005562:	eb01 0402 	add.w	r4, r1, r2
 8005566:	d902      	bls.n	800556e <memmove+0x10>
 8005568:	4284      	cmp	r4, r0
 800556a:	4623      	mov	r3, r4
 800556c:	d807      	bhi.n	800557e <memmove+0x20>
 800556e:	1e43      	subs	r3, r0, #1
 8005570:	42a1      	cmp	r1, r4
 8005572:	d008      	beq.n	8005586 <memmove+0x28>
 8005574:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005578:	f803 2f01 	strb.w	r2, [r3, #1]!
 800557c:	e7f8      	b.n	8005570 <memmove+0x12>
 800557e:	4402      	add	r2, r0
 8005580:	4601      	mov	r1, r0
 8005582:	428a      	cmp	r2, r1
 8005584:	d100      	bne.n	8005588 <memmove+0x2a>
 8005586:	bd10      	pop	{r4, pc}
 8005588:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800558c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005590:	e7f7      	b.n	8005582 <memmove+0x24>

08005592 <memset>:
 8005592:	4402      	add	r2, r0
 8005594:	4603      	mov	r3, r0
 8005596:	4293      	cmp	r3, r2
 8005598:	d100      	bne.n	800559c <memset+0xa>
 800559a:	4770      	bx	lr
 800559c:	f803 1b01 	strb.w	r1, [r3], #1
 80055a0:	e7f9      	b.n	8005596 <memset+0x4>
	...

080055a4 <_localeconv_r>:
 80055a4:	4800      	ldr	r0, [pc, #0]	@ (80055a8 <_localeconv_r+0x4>)
 80055a6:	4770      	bx	lr
 80055a8:	20000158 	.word	0x20000158

080055ac <_close_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4d06      	ldr	r5, [pc, #24]	@ (80055c8 <_close_r+0x1c>)
 80055b0:	2300      	movs	r3, #0
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	f7fc fa6c 	bl	8001a94 <_close>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_close_r+0x1a>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_close_r+0x1a>
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	20000828 	.word	0x20000828

080055cc <_lseek_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4d07      	ldr	r5, [pc, #28]	@ (80055ec <_lseek_r+0x20>)
 80055d0:	4604      	mov	r4, r0
 80055d2:	4608      	mov	r0, r1
 80055d4:	4611      	mov	r1, r2
 80055d6:	2200      	movs	r2, #0
 80055d8:	602a      	str	r2, [r5, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	f7fc fa81 	bl	8001ae2 <_lseek>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <_lseek_r+0x1e>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	b103      	cbz	r3, 80055ea <_lseek_r+0x1e>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	20000828 	.word	0x20000828

080055f0 <_read_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4d07      	ldr	r5, [pc, #28]	@ (8005610 <_read_r+0x20>)
 80055f4:	4604      	mov	r4, r0
 80055f6:	4608      	mov	r0, r1
 80055f8:	4611      	mov	r1, r2
 80055fa:	2200      	movs	r2, #0
 80055fc:	602a      	str	r2, [r5, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	f7fc fa0f 	bl	8001a22 <_read>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_read_r+0x1e>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_read_r+0x1e>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	20000828 	.word	0x20000828

08005614 <_write_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d07      	ldr	r5, [pc, #28]	@ (8005634 <_write_r+0x20>)
 8005618:	4604      	mov	r4, r0
 800561a:	4608      	mov	r0, r1
 800561c:	4611      	mov	r1, r2
 800561e:	2200      	movs	r2, #0
 8005620:	602a      	str	r2, [r5, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	f7fc fa1a 	bl	8001a5c <_write>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_write_r+0x1e>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_write_r+0x1e>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	20000828 	.word	0x20000828

08005638 <__errno>:
 8005638:	4b01      	ldr	r3, [pc, #4]	@ (8005640 <__errno+0x8>)
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20000018 	.word	0x20000018

08005644 <__libc_init_array>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	4d0d      	ldr	r5, [pc, #52]	@ (800567c <__libc_init_array+0x38>)
 8005648:	4c0d      	ldr	r4, [pc, #52]	@ (8005680 <__libc_init_array+0x3c>)
 800564a:	1b64      	subs	r4, r4, r5
 800564c:	10a4      	asrs	r4, r4, #2
 800564e:	2600      	movs	r6, #0
 8005650:	42a6      	cmp	r6, r4
 8005652:	d109      	bne.n	8005668 <__libc_init_array+0x24>
 8005654:	4d0b      	ldr	r5, [pc, #44]	@ (8005684 <__libc_init_array+0x40>)
 8005656:	4c0c      	ldr	r4, [pc, #48]	@ (8005688 <__libc_init_array+0x44>)
 8005658:	f002 f84a 	bl	80076f0 <_init>
 800565c:	1b64      	subs	r4, r4, r5
 800565e:	10a4      	asrs	r4, r4, #2
 8005660:	2600      	movs	r6, #0
 8005662:	42a6      	cmp	r6, r4
 8005664:	d105      	bne.n	8005672 <__libc_init_array+0x2e>
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	f855 3b04 	ldr.w	r3, [r5], #4
 800566c:	4798      	blx	r3
 800566e:	3601      	adds	r6, #1
 8005670:	e7ee      	b.n	8005650 <__libc_init_array+0xc>
 8005672:	f855 3b04 	ldr.w	r3, [r5], #4
 8005676:	4798      	blx	r3
 8005678:	3601      	adds	r6, #1
 800567a:	e7f2      	b.n	8005662 <__libc_init_array+0x1e>
 800567c:	08007ab8 	.word	0x08007ab8
 8005680:	08007ab8 	.word	0x08007ab8
 8005684:	08007ab8 	.word	0x08007ab8
 8005688:	08007abc 	.word	0x08007abc

0800568c <__retarget_lock_init_recursive>:
 800568c:	4770      	bx	lr

0800568e <__retarget_lock_acquire_recursive>:
 800568e:	4770      	bx	lr

08005690 <__retarget_lock_release_recursive>:
 8005690:	4770      	bx	lr

08005692 <memcpy>:
 8005692:	440a      	add	r2, r1
 8005694:	4291      	cmp	r1, r2
 8005696:	f100 33ff 	add.w	r3, r0, #4294967295
 800569a:	d100      	bne.n	800569e <memcpy+0xc>
 800569c:	4770      	bx	lr
 800569e:	b510      	push	{r4, lr}
 80056a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056a8:	4291      	cmp	r1, r2
 80056aa:	d1f9      	bne.n	80056a0 <memcpy+0xe>
 80056ac:	bd10      	pop	{r4, pc}

080056ae <quorem>:
 80056ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b2:	6903      	ldr	r3, [r0, #16]
 80056b4:	690c      	ldr	r4, [r1, #16]
 80056b6:	42a3      	cmp	r3, r4
 80056b8:	4607      	mov	r7, r0
 80056ba:	db7e      	blt.n	80057ba <quorem+0x10c>
 80056bc:	3c01      	subs	r4, #1
 80056be:	f101 0814 	add.w	r8, r1, #20
 80056c2:	00a3      	lsls	r3, r4, #2
 80056c4:	f100 0514 	add.w	r5, r0, #20
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056d8:	3301      	adds	r3, #1
 80056da:	429a      	cmp	r2, r3
 80056dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80056e4:	d32e      	bcc.n	8005744 <quorem+0x96>
 80056e6:	f04f 0a00 	mov.w	sl, #0
 80056ea:	46c4      	mov	ip, r8
 80056ec:	46ae      	mov	lr, r5
 80056ee:	46d3      	mov	fp, sl
 80056f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056f4:	b298      	uxth	r0, r3
 80056f6:	fb06 a000 	mla	r0, r6, r0, sl
 80056fa:	0c02      	lsrs	r2, r0, #16
 80056fc:	0c1b      	lsrs	r3, r3, #16
 80056fe:	fb06 2303 	mla	r3, r6, r3, r2
 8005702:	f8de 2000 	ldr.w	r2, [lr]
 8005706:	b280      	uxth	r0, r0
 8005708:	b292      	uxth	r2, r2
 800570a:	1a12      	subs	r2, r2, r0
 800570c:	445a      	add	r2, fp
 800570e:	f8de 0000 	ldr.w	r0, [lr]
 8005712:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005716:	b29b      	uxth	r3, r3
 8005718:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800571c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005720:	b292      	uxth	r2, r2
 8005722:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005726:	45e1      	cmp	r9, ip
 8005728:	f84e 2b04 	str.w	r2, [lr], #4
 800572c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005730:	d2de      	bcs.n	80056f0 <quorem+0x42>
 8005732:	9b00      	ldr	r3, [sp, #0]
 8005734:	58eb      	ldr	r3, [r5, r3]
 8005736:	b92b      	cbnz	r3, 8005744 <quorem+0x96>
 8005738:	9b01      	ldr	r3, [sp, #4]
 800573a:	3b04      	subs	r3, #4
 800573c:	429d      	cmp	r5, r3
 800573e:	461a      	mov	r2, r3
 8005740:	d32f      	bcc.n	80057a2 <quorem+0xf4>
 8005742:	613c      	str	r4, [r7, #16]
 8005744:	4638      	mov	r0, r7
 8005746:	f001 f979 	bl	8006a3c <__mcmp>
 800574a:	2800      	cmp	r0, #0
 800574c:	db25      	blt.n	800579a <quorem+0xec>
 800574e:	4629      	mov	r1, r5
 8005750:	2000      	movs	r0, #0
 8005752:	f858 2b04 	ldr.w	r2, [r8], #4
 8005756:	f8d1 c000 	ldr.w	ip, [r1]
 800575a:	fa1f fe82 	uxth.w	lr, r2
 800575e:	fa1f f38c 	uxth.w	r3, ip
 8005762:	eba3 030e 	sub.w	r3, r3, lr
 8005766:	4403      	add	r3, r0
 8005768:	0c12      	lsrs	r2, r2, #16
 800576a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800576e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005772:	b29b      	uxth	r3, r3
 8005774:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005778:	45c1      	cmp	r9, r8
 800577a:	f841 3b04 	str.w	r3, [r1], #4
 800577e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005782:	d2e6      	bcs.n	8005752 <quorem+0xa4>
 8005784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005788:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800578c:	b922      	cbnz	r2, 8005798 <quorem+0xea>
 800578e:	3b04      	subs	r3, #4
 8005790:	429d      	cmp	r5, r3
 8005792:	461a      	mov	r2, r3
 8005794:	d30b      	bcc.n	80057ae <quorem+0x100>
 8005796:	613c      	str	r4, [r7, #16]
 8005798:	3601      	adds	r6, #1
 800579a:	4630      	mov	r0, r6
 800579c:	b003      	add	sp, #12
 800579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	3b04      	subs	r3, #4
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	d1cb      	bne.n	8005742 <quorem+0x94>
 80057aa:	3c01      	subs	r4, #1
 80057ac:	e7c6      	b.n	800573c <quorem+0x8e>
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	3b04      	subs	r3, #4
 80057b2:	2a00      	cmp	r2, #0
 80057b4:	d1ef      	bne.n	8005796 <quorem+0xe8>
 80057b6:	3c01      	subs	r4, #1
 80057b8:	e7ea      	b.n	8005790 <quorem+0xe2>
 80057ba:	2000      	movs	r0, #0
 80057bc:	e7ee      	b.n	800579c <quorem+0xee>
	...

080057c0 <_dtoa_r>:
 80057c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	69c7      	ldr	r7, [r0, #28]
 80057c6:	b099      	sub	sp, #100	@ 0x64
 80057c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80057cc:	ec55 4b10 	vmov	r4, r5, d0
 80057d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80057d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80057d4:	4683      	mov	fp, r0
 80057d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80057d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80057da:	b97f      	cbnz	r7, 80057fc <_dtoa_r+0x3c>
 80057dc:	2010      	movs	r0, #16
 80057de:	f000 fdfd 	bl	80063dc <malloc>
 80057e2:	4602      	mov	r2, r0
 80057e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80057e8:	b920      	cbnz	r0, 80057f4 <_dtoa_r+0x34>
 80057ea:	4ba7      	ldr	r3, [pc, #668]	@ (8005a88 <_dtoa_r+0x2c8>)
 80057ec:	21ef      	movs	r1, #239	@ 0xef
 80057ee:	48a7      	ldr	r0, [pc, #668]	@ (8005a8c <_dtoa_r+0x2cc>)
 80057f0:	f001 fc40 	bl	8007074 <__assert_func>
 80057f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80057f8:	6007      	str	r7, [r0, #0]
 80057fa:	60c7      	str	r7, [r0, #12]
 80057fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005800:	6819      	ldr	r1, [r3, #0]
 8005802:	b159      	cbz	r1, 800581c <_dtoa_r+0x5c>
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	604a      	str	r2, [r1, #4]
 8005808:	2301      	movs	r3, #1
 800580a:	4093      	lsls	r3, r2
 800580c:	608b      	str	r3, [r1, #8]
 800580e:	4658      	mov	r0, fp
 8005810:	f000 feda 	bl	80065c8 <_Bfree>
 8005814:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	1e2b      	subs	r3, r5, #0
 800581e:	bfb9      	ittee	lt
 8005820:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005824:	9303      	strlt	r3, [sp, #12]
 8005826:	2300      	movge	r3, #0
 8005828:	6033      	strge	r3, [r6, #0]
 800582a:	9f03      	ldr	r7, [sp, #12]
 800582c:	4b98      	ldr	r3, [pc, #608]	@ (8005a90 <_dtoa_r+0x2d0>)
 800582e:	bfbc      	itt	lt
 8005830:	2201      	movlt	r2, #1
 8005832:	6032      	strlt	r2, [r6, #0]
 8005834:	43bb      	bics	r3, r7
 8005836:	d112      	bne.n	800585e <_dtoa_r+0x9e>
 8005838:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800583a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005844:	4323      	orrs	r3, r4
 8005846:	f000 854d 	beq.w	80062e4 <_dtoa_r+0xb24>
 800584a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800584c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005aa4 <_dtoa_r+0x2e4>
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 854f 	beq.w	80062f4 <_dtoa_r+0xb34>
 8005856:	f10a 0303 	add.w	r3, sl, #3
 800585a:	f000 bd49 	b.w	80062f0 <_dtoa_r+0xb30>
 800585e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005862:	2200      	movs	r2, #0
 8005864:	ec51 0b17 	vmov	r0, r1, d7
 8005868:	2300      	movs	r3, #0
 800586a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800586e:	f7fb f933 	bl	8000ad8 <__aeabi_dcmpeq>
 8005872:	4680      	mov	r8, r0
 8005874:	b158      	cbz	r0, 800588e <_dtoa_r+0xce>
 8005876:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005878:	2301      	movs	r3, #1
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800587e:	b113      	cbz	r3, 8005886 <_dtoa_r+0xc6>
 8005880:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005882:	4b84      	ldr	r3, [pc, #528]	@ (8005a94 <_dtoa_r+0x2d4>)
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005aa8 <_dtoa_r+0x2e8>
 800588a:	f000 bd33 	b.w	80062f4 <_dtoa_r+0xb34>
 800588e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005892:	aa16      	add	r2, sp, #88	@ 0x58
 8005894:	a917      	add	r1, sp, #92	@ 0x5c
 8005896:	4658      	mov	r0, fp
 8005898:	f001 f980 	bl	8006b9c <__d2b>
 800589c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80058a0:	4681      	mov	r9, r0
 80058a2:	2e00      	cmp	r6, #0
 80058a4:	d077      	beq.n	8005996 <_dtoa_r+0x1d6>
 80058a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80058ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80058b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80058bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80058c0:	4619      	mov	r1, r3
 80058c2:	2200      	movs	r2, #0
 80058c4:	4b74      	ldr	r3, [pc, #464]	@ (8005a98 <_dtoa_r+0x2d8>)
 80058c6:	f7fa fce7 	bl	8000298 <__aeabi_dsub>
 80058ca:	a369      	add	r3, pc, #420	@ (adr r3, 8005a70 <_dtoa_r+0x2b0>)
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f7fa fe9a 	bl	8000608 <__aeabi_dmul>
 80058d4:	a368      	add	r3, pc, #416	@ (adr r3, 8005a78 <_dtoa_r+0x2b8>)
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f7fa fcdf 	bl	800029c <__adddf3>
 80058de:	4604      	mov	r4, r0
 80058e0:	4630      	mov	r0, r6
 80058e2:	460d      	mov	r5, r1
 80058e4:	f7fa fe26 	bl	8000534 <__aeabi_i2d>
 80058e8:	a365      	add	r3, pc, #404	@ (adr r3, 8005a80 <_dtoa_r+0x2c0>)
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f7fa fe8b 	bl	8000608 <__aeabi_dmul>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4620      	mov	r0, r4
 80058f8:	4629      	mov	r1, r5
 80058fa:	f7fa fccf 	bl	800029c <__adddf3>
 80058fe:	4604      	mov	r4, r0
 8005900:	460d      	mov	r5, r1
 8005902:	f7fb f931 	bl	8000b68 <__aeabi_d2iz>
 8005906:	2200      	movs	r2, #0
 8005908:	4607      	mov	r7, r0
 800590a:	2300      	movs	r3, #0
 800590c:	4620      	mov	r0, r4
 800590e:	4629      	mov	r1, r5
 8005910:	f7fb f8ec 	bl	8000aec <__aeabi_dcmplt>
 8005914:	b140      	cbz	r0, 8005928 <_dtoa_r+0x168>
 8005916:	4638      	mov	r0, r7
 8005918:	f7fa fe0c 	bl	8000534 <__aeabi_i2d>
 800591c:	4622      	mov	r2, r4
 800591e:	462b      	mov	r3, r5
 8005920:	f7fb f8da 	bl	8000ad8 <__aeabi_dcmpeq>
 8005924:	b900      	cbnz	r0, 8005928 <_dtoa_r+0x168>
 8005926:	3f01      	subs	r7, #1
 8005928:	2f16      	cmp	r7, #22
 800592a:	d851      	bhi.n	80059d0 <_dtoa_r+0x210>
 800592c:	4b5b      	ldr	r3, [pc, #364]	@ (8005a9c <_dtoa_r+0x2dc>)
 800592e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800593a:	f7fb f8d7 	bl	8000aec <__aeabi_dcmplt>
 800593e:	2800      	cmp	r0, #0
 8005940:	d048      	beq.n	80059d4 <_dtoa_r+0x214>
 8005942:	3f01      	subs	r7, #1
 8005944:	2300      	movs	r3, #0
 8005946:	9312      	str	r3, [sp, #72]	@ 0x48
 8005948:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800594a:	1b9b      	subs	r3, r3, r6
 800594c:	1e5a      	subs	r2, r3, #1
 800594e:	bf44      	itt	mi
 8005950:	f1c3 0801 	rsbmi	r8, r3, #1
 8005954:	2300      	movmi	r3, #0
 8005956:	9208      	str	r2, [sp, #32]
 8005958:	bf54      	ite	pl
 800595a:	f04f 0800 	movpl.w	r8, #0
 800595e:	9308      	strmi	r3, [sp, #32]
 8005960:	2f00      	cmp	r7, #0
 8005962:	db39      	blt.n	80059d8 <_dtoa_r+0x218>
 8005964:	9b08      	ldr	r3, [sp, #32]
 8005966:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005968:	443b      	add	r3, r7
 800596a:	9308      	str	r3, [sp, #32]
 800596c:	2300      	movs	r3, #0
 800596e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005972:	2b09      	cmp	r3, #9
 8005974:	d864      	bhi.n	8005a40 <_dtoa_r+0x280>
 8005976:	2b05      	cmp	r3, #5
 8005978:	bfc4      	itt	gt
 800597a:	3b04      	subgt	r3, #4
 800597c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800597e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005980:	f1a3 0302 	sub.w	r3, r3, #2
 8005984:	bfcc      	ite	gt
 8005986:	2400      	movgt	r4, #0
 8005988:	2401      	movle	r4, #1
 800598a:	2b03      	cmp	r3, #3
 800598c:	d863      	bhi.n	8005a56 <_dtoa_r+0x296>
 800598e:	e8df f003 	tbb	[pc, r3]
 8005992:	372a      	.short	0x372a
 8005994:	5535      	.short	0x5535
 8005996:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800599a:	441e      	add	r6, r3
 800599c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	bfc1      	itttt	gt
 80059a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80059a8:	409f      	lslgt	r7, r3
 80059aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80059ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80059b2:	bfd6      	itet	le
 80059b4:	f1c3 0320 	rsble	r3, r3, #32
 80059b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80059bc:	fa04 f003 	lslle.w	r0, r4, r3
 80059c0:	f7fa fda8 	bl	8000514 <__aeabi_ui2d>
 80059c4:	2201      	movs	r2, #1
 80059c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80059ca:	3e01      	subs	r6, #1
 80059cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80059ce:	e777      	b.n	80058c0 <_dtoa_r+0x100>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e7b8      	b.n	8005946 <_dtoa_r+0x186>
 80059d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80059d6:	e7b7      	b.n	8005948 <_dtoa_r+0x188>
 80059d8:	427b      	negs	r3, r7
 80059da:	930a      	str	r3, [sp, #40]	@ 0x28
 80059dc:	2300      	movs	r3, #0
 80059de:	eba8 0807 	sub.w	r8, r8, r7
 80059e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80059e4:	e7c4      	b.n	8005970 <_dtoa_r+0x1b0>
 80059e6:	2300      	movs	r3, #0
 80059e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	dc35      	bgt.n	8005a5c <_dtoa_r+0x29c>
 80059f0:	2301      	movs	r3, #1
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	9307      	str	r3, [sp, #28]
 80059f6:	461a      	mov	r2, r3
 80059f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80059fa:	e00b      	b.n	8005a14 <_dtoa_r+0x254>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e7f3      	b.n	80059e8 <_dtoa_r+0x228>
 8005a00:	2300      	movs	r3, #0
 8005a02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a06:	18fb      	adds	r3, r7, r3
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	9307      	str	r3, [sp, #28]
 8005a10:	bfb8      	it	lt
 8005a12:	2301      	movlt	r3, #1
 8005a14:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005a18:	2100      	movs	r1, #0
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	f102 0514 	add.w	r5, r2, #20
 8005a20:	429d      	cmp	r5, r3
 8005a22:	d91f      	bls.n	8005a64 <_dtoa_r+0x2a4>
 8005a24:	6041      	str	r1, [r0, #4]
 8005a26:	4658      	mov	r0, fp
 8005a28:	f000 fd8e 	bl	8006548 <_Balloc>
 8005a2c:	4682      	mov	sl, r0
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d13c      	bne.n	8005aac <_dtoa_r+0x2ec>
 8005a32:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa0 <_dtoa_r+0x2e0>)
 8005a34:	4602      	mov	r2, r0
 8005a36:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a3a:	e6d8      	b.n	80057ee <_dtoa_r+0x2e>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e7e0      	b.n	8005a02 <_dtoa_r+0x242>
 8005a40:	2401      	movs	r4, #1
 8005a42:	2300      	movs	r3, #0
 8005a44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a46:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	9307      	str	r3, [sp, #28]
 8005a50:	2200      	movs	r2, #0
 8005a52:	2312      	movs	r3, #18
 8005a54:	e7d0      	b.n	80059f8 <_dtoa_r+0x238>
 8005a56:	2301      	movs	r3, #1
 8005a58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a5a:	e7f5      	b.n	8005a48 <_dtoa_r+0x288>
 8005a5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	9307      	str	r3, [sp, #28]
 8005a62:	e7d7      	b.n	8005a14 <_dtoa_r+0x254>
 8005a64:	3101      	adds	r1, #1
 8005a66:	0052      	lsls	r2, r2, #1
 8005a68:	e7d8      	b.n	8005a1c <_dtoa_r+0x25c>
 8005a6a:	bf00      	nop
 8005a6c:	f3af 8000 	nop.w
 8005a70:	636f4361 	.word	0x636f4361
 8005a74:	3fd287a7 	.word	0x3fd287a7
 8005a78:	8b60c8b3 	.word	0x8b60c8b3
 8005a7c:	3fc68a28 	.word	0x3fc68a28
 8005a80:	509f79fb 	.word	0x509f79fb
 8005a84:	3fd34413 	.word	0x3fd34413
 8005a88:	0800777d 	.word	0x0800777d
 8005a8c:	08007794 	.word	0x08007794
 8005a90:	7ff00000 	.word	0x7ff00000
 8005a94:	0800774d 	.word	0x0800774d
 8005a98:	3ff80000 	.word	0x3ff80000
 8005a9c:	08007890 	.word	0x08007890
 8005aa0:	080077ec 	.word	0x080077ec
 8005aa4:	08007779 	.word	0x08007779
 8005aa8:	0800774c 	.word	0x0800774c
 8005aac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ab0:	6018      	str	r0, [r3, #0]
 8005ab2:	9b07      	ldr	r3, [sp, #28]
 8005ab4:	2b0e      	cmp	r3, #14
 8005ab6:	f200 80a4 	bhi.w	8005c02 <_dtoa_r+0x442>
 8005aba:	2c00      	cmp	r4, #0
 8005abc:	f000 80a1 	beq.w	8005c02 <_dtoa_r+0x442>
 8005ac0:	2f00      	cmp	r7, #0
 8005ac2:	dd33      	ble.n	8005b2c <_dtoa_r+0x36c>
 8005ac4:	4bad      	ldr	r3, [pc, #692]	@ (8005d7c <_dtoa_r+0x5bc>)
 8005ac6:	f007 020f 	and.w	r2, r7, #15
 8005aca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ace:	ed93 7b00 	vldr	d7, [r3]
 8005ad2:	05f8      	lsls	r0, r7, #23
 8005ad4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005ad8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005adc:	d516      	bpl.n	8005b0c <_dtoa_r+0x34c>
 8005ade:	4ba8      	ldr	r3, [pc, #672]	@ (8005d80 <_dtoa_r+0x5c0>)
 8005ae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ae4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ae8:	f7fa feb8 	bl	800085c <__aeabi_ddiv>
 8005aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005af0:	f004 040f 	and.w	r4, r4, #15
 8005af4:	2603      	movs	r6, #3
 8005af6:	4da2      	ldr	r5, [pc, #648]	@ (8005d80 <_dtoa_r+0x5c0>)
 8005af8:	b954      	cbnz	r4, 8005b10 <_dtoa_r+0x350>
 8005afa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b02:	f7fa feab 	bl	800085c <__aeabi_ddiv>
 8005b06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b0a:	e028      	b.n	8005b5e <_dtoa_r+0x39e>
 8005b0c:	2602      	movs	r6, #2
 8005b0e:	e7f2      	b.n	8005af6 <_dtoa_r+0x336>
 8005b10:	07e1      	lsls	r1, r4, #31
 8005b12:	d508      	bpl.n	8005b26 <_dtoa_r+0x366>
 8005b14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b1c:	f7fa fd74 	bl	8000608 <__aeabi_dmul>
 8005b20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b24:	3601      	adds	r6, #1
 8005b26:	1064      	asrs	r4, r4, #1
 8005b28:	3508      	adds	r5, #8
 8005b2a:	e7e5      	b.n	8005af8 <_dtoa_r+0x338>
 8005b2c:	f000 80d2 	beq.w	8005cd4 <_dtoa_r+0x514>
 8005b30:	427c      	negs	r4, r7
 8005b32:	4b92      	ldr	r3, [pc, #584]	@ (8005d7c <_dtoa_r+0x5bc>)
 8005b34:	4d92      	ldr	r5, [pc, #584]	@ (8005d80 <_dtoa_r+0x5c0>)
 8005b36:	f004 020f 	and.w	r2, r4, #15
 8005b3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b46:	f7fa fd5f 	bl	8000608 <__aeabi_dmul>
 8005b4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b4e:	1124      	asrs	r4, r4, #4
 8005b50:	2300      	movs	r3, #0
 8005b52:	2602      	movs	r6, #2
 8005b54:	2c00      	cmp	r4, #0
 8005b56:	f040 80b2 	bne.w	8005cbe <_dtoa_r+0x4fe>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1d3      	bne.n	8005b06 <_dtoa_r+0x346>
 8005b5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005b60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 80b7 	beq.w	8005cd8 <_dtoa_r+0x518>
 8005b6a:	4b86      	ldr	r3, [pc, #536]	@ (8005d84 <_dtoa_r+0x5c4>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4620      	mov	r0, r4
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7fa ffbb 	bl	8000aec <__aeabi_dcmplt>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	f000 80ae 	beq.w	8005cd8 <_dtoa_r+0x518>
 8005b7c:	9b07      	ldr	r3, [sp, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80aa 	beq.w	8005cd8 <_dtoa_r+0x518>
 8005b84:	9b00      	ldr	r3, [sp, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	dd37      	ble.n	8005bfa <_dtoa_r+0x43a>
 8005b8a:	1e7b      	subs	r3, r7, #1
 8005b8c:	9304      	str	r3, [sp, #16]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	4b7d      	ldr	r3, [pc, #500]	@ (8005d88 <_dtoa_r+0x5c8>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	4629      	mov	r1, r5
 8005b96:	f7fa fd37 	bl	8000608 <__aeabi_dmul>
 8005b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b9e:	9c00      	ldr	r4, [sp, #0]
 8005ba0:	3601      	adds	r6, #1
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f7fa fcc6 	bl	8000534 <__aeabi_i2d>
 8005ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bac:	f7fa fd2c 	bl	8000608 <__aeabi_dmul>
 8005bb0:	4b76      	ldr	r3, [pc, #472]	@ (8005d8c <_dtoa_r+0x5cc>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f7fa fb72 	bl	800029c <__adddf3>
 8005bb8:	4605      	mov	r5, r0
 8005bba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005bbe:	2c00      	cmp	r4, #0
 8005bc0:	f040 808d 	bne.w	8005cde <_dtoa_r+0x51e>
 8005bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bc8:	4b71      	ldr	r3, [pc, #452]	@ (8005d90 <_dtoa_r+0x5d0>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f7fa fb64 	bl	8000298 <__aeabi_dsub>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bd8:	462a      	mov	r2, r5
 8005bda:	4633      	mov	r3, r6
 8005bdc:	f7fa ffa4 	bl	8000b28 <__aeabi_dcmpgt>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	f040 828b 	bne.w	80060fc <_dtoa_r+0x93c>
 8005be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bea:	462a      	mov	r2, r5
 8005bec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005bf0:	f7fa ff7c 	bl	8000aec <__aeabi_dcmplt>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	f040 8128 	bne.w	8005e4a <_dtoa_r+0x68a>
 8005bfa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005bfe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005c02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f2c0 815a 	blt.w	8005ebe <_dtoa_r+0x6fe>
 8005c0a:	2f0e      	cmp	r7, #14
 8005c0c:	f300 8157 	bgt.w	8005ebe <_dtoa_r+0x6fe>
 8005c10:	4b5a      	ldr	r3, [pc, #360]	@ (8005d7c <_dtoa_r+0x5bc>)
 8005c12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c16:	ed93 7b00 	vldr	d7, [r3]
 8005c1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	ed8d 7b00 	vstr	d7, [sp]
 8005c22:	da03      	bge.n	8005c2c <_dtoa_r+0x46c>
 8005c24:	9b07      	ldr	r3, [sp, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f340 8101 	ble.w	8005e2e <_dtoa_r+0x66e>
 8005c2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c30:	4656      	mov	r6, sl
 8005c32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c36:	4620      	mov	r0, r4
 8005c38:	4629      	mov	r1, r5
 8005c3a:	f7fa fe0f 	bl	800085c <__aeabi_ddiv>
 8005c3e:	f7fa ff93 	bl	8000b68 <__aeabi_d2iz>
 8005c42:	4680      	mov	r8, r0
 8005c44:	f7fa fc76 	bl	8000534 <__aeabi_i2d>
 8005c48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c4c:	f7fa fcdc 	bl	8000608 <__aeabi_dmul>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4620      	mov	r0, r4
 8005c56:	4629      	mov	r1, r5
 8005c58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c5c:	f7fa fb1c 	bl	8000298 <__aeabi_dsub>
 8005c60:	f806 4b01 	strb.w	r4, [r6], #1
 8005c64:	9d07      	ldr	r5, [sp, #28]
 8005c66:	eba6 040a 	sub.w	r4, r6, sl
 8005c6a:	42a5      	cmp	r5, r4
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	f040 8117 	bne.w	8005ea2 <_dtoa_r+0x6e2>
 8005c74:	f7fa fb12 	bl	800029c <__adddf3>
 8005c78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	460d      	mov	r5, r1
 8005c80:	f7fa ff52 	bl	8000b28 <__aeabi_dcmpgt>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	f040 80f9 	bne.w	8005e7c <_dtoa_r+0x6bc>
 8005c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7fa ff21 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c96:	b118      	cbz	r0, 8005ca0 <_dtoa_r+0x4e0>
 8005c98:	f018 0f01 	tst.w	r8, #1
 8005c9c:	f040 80ee 	bne.w	8005e7c <_dtoa_r+0x6bc>
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	4658      	mov	r0, fp
 8005ca4:	f000 fc90 	bl	80065c8 <_Bfree>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	7033      	strb	r3, [r6, #0]
 8005cac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005cae:	3701      	adds	r7, #1
 8005cb0:	601f      	str	r7, [r3, #0]
 8005cb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 831d 	beq.w	80062f4 <_dtoa_r+0xb34>
 8005cba:	601e      	str	r6, [r3, #0]
 8005cbc:	e31a      	b.n	80062f4 <_dtoa_r+0xb34>
 8005cbe:	07e2      	lsls	r2, r4, #31
 8005cc0:	d505      	bpl.n	8005cce <_dtoa_r+0x50e>
 8005cc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cc6:	f7fa fc9f 	bl	8000608 <__aeabi_dmul>
 8005cca:	3601      	adds	r6, #1
 8005ccc:	2301      	movs	r3, #1
 8005cce:	1064      	asrs	r4, r4, #1
 8005cd0:	3508      	adds	r5, #8
 8005cd2:	e73f      	b.n	8005b54 <_dtoa_r+0x394>
 8005cd4:	2602      	movs	r6, #2
 8005cd6:	e742      	b.n	8005b5e <_dtoa_r+0x39e>
 8005cd8:	9c07      	ldr	r4, [sp, #28]
 8005cda:	9704      	str	r7, [sp, #16]
 8005cdc:	e761      	b.n	8005ba2 <_dtoa_r+0x3e2>
 8005cde:	4b27      	ldr	r3, [pc, #156]	@ (8005d7c <_dtoa_r+0x5bc>)
 8005ce0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ce2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ce6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cea:	4454      	add	r4, sl
 8005cec:	2900      	cmp	r1, #0
 8005cee:	d053      	beq.n	8005d98 <_dtoa_r+0x5d8>
 8005cf0:	4928      	ldr	r1, [pc, #160]	@ (8005d94 <_dtoa_r+0x5d4>)
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	f7fa fdb2 	bl	800085c <__aeabi_ddiv>
 8005cf8:	4633      	mov	r3, r6
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	f7fa facc 	bl	8000298 <__aeabi_dsub>
 8005d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d04:	4656      	mov	r6, sl
 8005d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d0a:	f7fa ff2d 	bl	8000b68 <__aeabi_d2iz>
 8005d0e:	4605      	mov	r5, r0
 8005d10:	f7fa fc10 	bl	8000534 <__aeabi_i2d>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d1c:	f7fa fabc 	bl	8000298 <__aeabi_dsub>
 8005d20:	3530      	adds	r5, #48	@ 0x30
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d2a:	f806 5b01 	strb.w	r5, [r6], #1
 8005d2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d32:	f7fa fedb 	bl	8000aec <__aeabi_dcmplt>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d171      	bne.n	8005e1e <_dtoa_r+0x65e>
 8005d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d3e:	4911      	ldr	r1, [pc, #68]	@ (8005d84 <_dtoa_r+0x5c4>)
 8005d40:	2000      	movs	r0, #0
 8005d42:	f7fa faa9 	bl	8000298 <__aeabi_dsub>
 8005d46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d4a:	f7fa fecf 	bl	8000aec <__aeabi_dcmplt>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	f040 8095 	bne.w	8005e7e <_dtoa_r+0x6be>
 8005d54:	42a6      	cmp	r6, r4
 8005d56:	f43f af50 	beq.w	8005bfa <_dtoa_r+0x43a>
 8005d5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d88 <_dtoa_r+0x5c8>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	f7fa fc51 	bl	8000608 <__aeabi_dmul>
 8005d66:	4b08      	ldr	r3, [pc, #32]	@ (8005d88 <_dtoa_r+0x5c8>)
 8005d68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d72:	f7fa fc49 	bl	8000608 <__aeabi_dmul>
 8005d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d7a:	e7c4      	b.n	8005d06 <_dtoa_r+0x546>
 8005d7c:	08007890 	.word	0x08007890
 8005d80:	08007868 	.word	0x08007868
 8005d84:	3ff00000 	.word	0x3ff00000
 8005d88:	40240000 	.word	0x40240000
 8005d8c:	401c0000 	.word	0x401c0000
 8005d90:	40140000 	.word	0x40140000
 8005d94:	3fe00000 	.word	0x3fe00000
 8005d98:	4631      	mov	r1, r6
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f7fa fc34 	bl	8000608 <__aeabi_dmul>
 8005da0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005da4:	9415      	str	r4, [sp, #84]	@ 0x54
 8005da6:	4656      	mov	r6, sl
 8005da8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dac:	f7fa fedc 	bl	8000b68 <__aeabi_d2iz>
 8005db0:	4605      	mov	r5, r0
 8005db2:	f7fa fbbf 	bl	8000534 <__aeabi_i2d>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dbe:	f7fa fa6b 	bl	8000298 <__aeabi_dsub>
 8005dc2:	3530      	adds	r5, #48	@ 0x30
 8005dc4:	f806 5b01 	strb.w	r5, [r6], #1
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	42a6      	cmp	r6, r4
 8005dce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	d124      	bne.n	8005e22 <_dtoa_r+0x662>
 8005dd8:	4bac      	ldr	r3, [pc, #688]	@ (800608c <_dtoa_r+0x8cc>)
 8005dda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005dde:	f7fa fa5d 	bl	800029c <__adddf3>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dea:	f7fa fe9d 	bl	8000b28 <__aeabi_dcmpgt>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d145      	bne.n	8005e7e <_dtoa_r+0x6be>
 8005df2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005df6:	49a5      	ldr	r1, [pc, #660]	@ (800608c <_dtoa_r+0x8cc>)
 8005df8:	2000      	movs	r0, #0
 8005dfa:	f7fa fa4d 	bl	8000298 <__aeabi_dsub>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e06:	f7fa fe71 	bl	8000aec <__aeabi_dcmplt>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	f43f aef5 	beq.w	8005bfa <_dtoa_r+0x43a>
 8005e10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005e12:	1e73      	subs	r3, r6, #1
 8005e14:	9315      	str	r3, [sp, #84]	@ 0x54
 8005e16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e1a:	2b30      	cmp	r3, #48	@ 0x30
 8005e1c:	d0f8      	beq.n	8005e10 <_dtoa_r+0x650>
 8005e1e:	9f04      	ldr	r7, [sp, #16]
 8005e20:	e73e      	b.n	8005ca0 <_dtoa_r+0x4e0>
 8005e22:	4b9b      	ldr	r3, [pc, #620]	@ (8006090 <_dtoa_r+0x8d0>)
 8005e24:	f7fa fbf0 	bl	8000608 <__aeabi_dmul>
 8005e28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e2c:	e7bc      	b.n	8005da8 <_dtoa_r+0x5e8>
 8005e2e:	d10c      	bne.n	8005e4a <_dtoa_r+0x68a>
 8005e30:	4b98      	ldr	r3, [pc, #608]	@ (8006094 <_dtoa_r+0x8d4>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e38:	f7fa fbe6 	bl	8000608 <__aeabi_dmul>
 8005e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e40:	f7fa fe68 	bl	8000b14 <__aeabi_dcmpge>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	f000 8157 	beq.w	80060f8 <_dtoa_r+0x938>
 8005e4a:	2400      	movs	r4, #0
 8005e4c:	4625      	mov	r5, r4
 8005e4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e50:	43db      	mvns	r3, r3
 8005e52:	9304      	str	r3, [sp, #16]
 8005e54:	4656      	mov	r6, sl
 8005e56:	2700      	movs	r7, #0
 8005e58:	4621      	mov	r1, r4
 8005e5a:	4658      	mov	r0, fp
 8005e5c:	f000 fbb4 	bl	80065c8 <_Bfree>
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	d0dc      	beq.n	8005e1e <_dtoa_r+0x65e>
 8005e64:	b12f      	cbz	r7, 8005e72 <_dtoa_r+0x6b2>
 8005e66:	42af      	cmp	r7, r5
 8005e68:	d003      	beq.n	8005e72 <_dtoa_r+0x6b2>
 8005e6a:	4639      	mov	r1, r7
 8005e6c:	4658      	mov	r0, fp
 8005e6e:	f000 fbab 	bl	80065c8 <_Bfree>
 8005e72:	4629      	mov	r1, r5
 8005e74:	4658      	mov	r0, fp
 8005e76:	f000 fba7 	bl	80065c8 <_Bfree>
 8005e7a:	e7d0      	b.n	8005e1e <_dtoa_r+0x65e>
 8005e7c:	9704      	str	r7, [sp, #16]
 8005e7e:	4633      	mov	r3, r6
 8005e80:	461e      	mov	r6, r3
 8005e82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e86:	2a39      	cmp	r2, #57	@ 0x39
 8005e88:	d107      	bne.n	8005e9a <_dtoa_r+0x6da>
 8005e8a:	459a      	cmp	sl, r3
 8005e8c:	d1f8      	bne.n	8005e80 <_dtoa_r+0x6c0>
 8005e8e:	9a04      	ldr	r2, [sp, #16]
 8005e90:	3201      	adds	r2, #1
 8005e92:	9204      	str	r2, [sp, #16]
 8005e94:	2230      	movs	r2, #48	@ 0x30
 8005e96:	f88a 2000 	strb.w	r2, [sl]
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	3201      	adds	r2, #1
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	e7bd      	b.n	8005e1e <_dtoa_r+0x65e>
 8005ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8006090 <_dtoa_r+0x8d0>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f7fa fbaf 	bl	8000608 <__aeabi_dmul>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2300      	movs	r3, #0
 8005eae:	4604      	mov	r4, r0
 8005eb0:	460d      	mov	r5, r1
 8005eb2:	f7fa fe11 	bl	8000ad8 <__aeabi_dcmpeq>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	f43f aebb 	beq.w	8005c32 <_dtoa_r+0x472>
 8005ebc:	e6f0      	b.n	8005ca0 <_dtoa_r+0x4e0>
 8005ebe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ec0:	2a00      	cmp	r2, #0
 8005ec2:	f000 80db 	beq.w	800607c <_dtoa_r+0x8bc>
 8005ec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ec8:	2a01      	cmp	r2, #1
 8005eca:	f300 80bf 	bgt.w	800604c <_dtoa_r+0x88c>
 8005ece:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	f000 80b7 	beq.w	8006044 <_dtoa_r+0x884>
 8005ed6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005eda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005edc:	4646      	mov	r6, r8
 8005ede:	9a08      	ldr	r2, [sp, #32]
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	441a      	add	r2, r3
 8005ee4:	4658      	mov	r0, fp
 8005ee6:	4498      	add	r8, r3
 8005ee8:	9208      	str	r2, [sp, #32]
 8005eea:	f000 fc21 	bl	8006730 <__i2b>
 8005eee:	4605      	mov	r5, r0
 8005ef0:	b15e      	cbz	r6, 8005f0a <_dtoa_r+0x74a>
 8005ef2:	9b08      	ldr	r3, [sp, #32]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dd08      	ble.n	8005f0a <_dtoa_r+0x74a>
 8005ef8:	42b3      	cmp	r3, r6
 8005efa:	9a08      	ldr	r2, [sp, #32]
 8005efc:	bfa8      	it	ge
 8005efe:	4633      	movge	r3, r6
 8005f00:	eba8 0803 	sub.w	r8, r8, r3
 8005f04:	1af6      	subs	r6, r6, r3
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	9308      	str	r3, [sp, #32]
 8005f0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f0c:	b1f3      	cbz	r3, 8005f4c <_dtoa_r+0x78c>
 8005f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80b7 	beq.w	8006084 <_dtoa_r+0x8c4>
 8005f16:	b18c      	cbz	r4, 8005f3c <_dtoa_r+0x77c>
 8005f18:	4629      	mov	r1, r5
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	4658      	mov	r0, fp
 8005f1e:	f000 fcc7 	bl	80068b0 <__pow5mult>
 8005f22:	464a      	mov	r2, r9
 8005f24:	4601      	mov	r1, r0
 8005f26:	4605      	mov	r5, r0
 8005f28:	4658      	mov	r0, fp
 8005f2a:	f000 fc17 	bl	800675c <__multiply>
 8005f2e:	4649      	mov	r1, r9
 8005f30:	9004      	str	r0, [sp, #16]
 8005f32:	4658      	mov	r0, fp
 8005f34:	f000 fb48 	bl	80065c8 <_Bfree>
 8005f38:	9b04      	ldr	r3, [sp, #16]
 8005f3a:	4699      	mov	r9, r3
 8005f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f3e:	1b1a      	subs	r2, r3, r4
 8005f40:	d004      	beq.n	8005f4c <_dtoa_r+0x78c>
 8005f42:	4649      	mov	r1, r9
 8005f44:	4658      	mov	r0, fp
 8005f46:	f000 fcb3 	bl	80068b0 <__pow5mult>
 8005f4a:	4681      	mov	r9, r0
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4658      	mov	r0, fp
 8005f50:	f000 fbee 	bl	8006730 <__i2b>
 8005f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f56:	4604      	mov	r4, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 81cf 	beq.w	80062fc <_dtoa_r+0xb3c>
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4601      	mov	r1, r0
 8005f62:	4658      	mov	r0, fp
 8005f64:	f000 fca4 	bl	80068b0 <__pow5mult>
 8005f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	f300 8095 	bgt.w	800609c <_dtoa_r+0x8dc>
 8005f72:	9b02      	ldr	r3, [sp, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 8087 	bne.w	8006088 <_dtoa_r+0x8c8>
 8005f7a:	9b03      	ldr	r3, [sp, #12]
 8005f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f040 8089 	bne.w	8006098 <_dtoa_r+0x8d8>
 8005f86:	9b03      	ldr	r3, [sp, #12]
 8005f88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f8c:	0d1b      	lsrs	r3, r3, #20
 8005f8e:	051b      	lsls	r3, r3, #20
 8005f90:	b12b      	cbz	r3, 8005f9e <_dtoa_r+0x7de>
 8005f92:	9b08      	ldr	r3, [sp, #32]
 8005f94:	3301      	adds	r3, #1
 8005f96:	9308      	str	r3, [sp, #32]
 8005f98:	f108 0801 	add.w	r8, r8, #1
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 81b0 	beq.w	8006308 <_dtoa_r+0xb48>
 8005fa8:	6923      	ldr	r3, [r4, #16]
 8005faa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fae:	6918      	ldr	r0, [r3, #16]
 8005fb0:	f000 fb72 	bl	8006698 <__hi0bits>
 8005fb4:	f1c0 0020 	rsb	r0, r0, #32
 8005fb8:	9b08      	ldr	r3, [sp, #32]
 8005fba:	4418      	add	r0, r3
 8005fbc:	f010 001f 	ands.w	r0, r0, #31
 8005fc0:	d077      	beq.n	80060b2 <_dtoa_r+0x8f2>
 8005fc2:	f1c0 0320 	rsb	r3, r0, #32
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	dd6b      	ble.n	80060a2 <_dtoa_r+0x8e2>
 8005fca:	9b08      	ldr	r3, [sp, #32]
 8005fcc:	f1c0 001c 	rsb	r0, r0, #28
 8005fd0:	4403      	add	r3, r0
 8005fd2:	4480      	add	r8, r0
 8005fd4:	4406      	add	r6, r0
 8005fd6:	9308      	str	r3, [sp, #32]
 8005fd8:	f1b8 0f00 	cmp.w	r8, #0
 8005fdc:	dd05      	ble.n	8005fea <_dtoa_r+0x82a>
 8005fde:	4649      	mov	r1, r9
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	4658      	mov	r0, fp
 8005fe4:	f000 fcbe 	bl	8006964 <__lshift>
 8005fe8:	4681      	mov	r9, r0
 8005fea:	9b08      	ldr	r3, [sp, #32]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dd05      	ble.n	8005ffc <_dtoa_r+0x83c>
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	4658      	mov	r0, fp
 8005ff6:	f000 fcb5 	bl	8006964 <__lshift>
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d059      	beq.n	80060b6 <_dtoa_r+0x8f6>
 8006002:	4621      	mov	r1, r4
 8006004:	4648      	mov	r0, r9
 8006006:	f000 fd19 	bl	8006a3c <__mcmp>
 800600a:	2800      	cmp	r0, #0
 800600c:	da53      	bge.n	80060b6 <_dtoa_r+0x8f6>
 800600e:	1e7b      	subs	r3, r7, #1
 8006010:	9304      	str	r3, [sp, #16]
 8006012:	4649      	mov	r1, r9
 8006014:	2300      	movs	r3, #0
 8006016:	220a      	movs	r2, #10
 8006018:	4658      	mov	r0, fp
 800601a:	f000 faf7 	bl	800660c <__multadd>
 800601e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006020:	4681      	mov	r9, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 8172 	beq.w	800630c <_dtoa_r+0xb4c>
 8006028:	2300      	movs	r3, #0
 800602a:	4629      	mov	r1, r5
 800602c:	220a      	movs	r2, #10
 800602e:	4658      	mov	r0, fp
 8006030:	f000 faec 	bl	800660c <__multadd>
 8006034:	9b00      	ldr	r3, [sp, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	4605      	mov	r5, r0
 800603a:	dc67      	bgt.n	800610c <_dtoa_r+0x94c>
 800603c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800603e:	2b02      	cmp	r3, #2
 8006040:	dc41      	bgt.n	80060c6 <_dtoa_r+0x906>
 8006042:	e063      	b.n	800610c <_dtoa_r+0x94c>
 8006044:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006046:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800604a:	e746      	b.n	8005eda <_dtoa_r+0x71a>
 800604c:	9b07      	ldr	r3, [sp, #28]
 800604e:	1e5c      	subs	r4, r3, #1
 8006050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006052:	42a3      	cmp	r3, r4
 8006054:	bfbf      	itttt	lt
 8006056:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006058:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800605a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800605c:	1ae3      	sublt	r3, r4, r3
 800605e:	bfb4      	ite	lt
 8006060:	18d2      	addlt	r2, r2, r3
 8006062:	1b1c      	subge	r4, r3, r4
 8006064:	9b07      	ldr	r3, [sp, #28]
 8006066:	bfbc      	itt	lt
 8006068:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800606a:	2400      	movlt	r4, #0
 800606c:	2b00      	cmp	r3, #0
 800606e:	bfb5      	itete	lt
 8006070:	eba8 0603 	sublt.w	r6, r8, r3
 8006074:	9b07      	ldrge	r3, [sp, #28]
 8006076:	2300      	movlt	r3, #0
 8006078:	4646      	movge	r6, r8
 800607a:	e730      	b.n	8005ede <_dtoa_r+0x71e>
 800607c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800607e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006080:	4646      	mov	r6, r8
 8006082:	e735      	b.n	8005ef0 <_dtoa_r+0x730>
 8006084:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006086:	e75c      	b.n	8005f42 <_dtoa_r+0x782>
 8006088:	2300      	movs	r3, #0
 800608a:	e788      	b.n	8005f9e <_dtoa_r+0x7de>
 800608c:	3fe00000 	.word	0x3fe00000
 8006090:	40240000 	.word	0x40240000
 8006094:	40140000 	.word	0x40140000
 8006098:	9b02      	ldr	r3, [sp, #8]
 800609a:	e780      	b.n	8005f9e <_dtoa_r+0x7de>
 800609c:	2300      	movs	r3, #0
 800609e:	930a      	str	r3, [sp, #40]	@ 0x28
 80060a0:	e782      	b.n	8005fa8 <_dtoa_r+0x7e8>
 80060a2:	d099      	beq.n	8005fd8 <_dtoa_r+0x818>
 80060a4:	9a08      	ldr	r2, [sp, #32]
 80060a6:	331c      	adds	r3, #28
 80060a8:	441a      	add	r2, r3
 80060aa:	4498      	add	r8, r3
 80060ac:	441e      	add	r6, r3
 80060ae:	9208      	str	r2, [sp, #32]
 80060b0:	e792      	b.n	8005fd8 <_dtoa_r+0x818>
 80060b2:	4603      	mov	r3, r0
 80060b4:	e7f6      	b.n	80060a4 <_dtoa_r+0x8e4>
 80060b6:	9b07      	ldr	r3, [sp, #28]
 80060b8:	9704      	str	r7, [sp, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	dc20      	bgt.n	8006100 <_dtoa_r+0x940>
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	dd1e      	ble.n	8006104 <_dtoa_r+0x944>
 80060c6:	9b00      	ldr	r3, [sp, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f47f aec0 	bne.w	8005e4e <_dtoa_r+0x68e>
 80060ce:	4621      	mov	r1, r4
 80060d0:	2205      	movs	r2, #5
 80060d2:	4658      	mov	r0, fp
 80060d4:	f000 fa9a 	bl	800660c <__multadd>
 80060d8:	4601      	mov	r1, r0
 80060da:	4604      	mov	r4, r0
 80060dc:	4648      	mov	r0, r9
 80060de:	f000 fcad 	bl	8006a3c <__mcmp>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f77f aeb3 	ble.w	8005e4e <_dtoa_r+0x68e>
 80060e8:	4656      	mov	r6, sl
 80060ea:	2331      	movs	r3, #49	@ 0x31
 80060ec:	f806 3b01 	strb.w	r3, [r6], #1
 80060f0:	9b04      	ldr	r3, [sp, #16]
 80060f2:	3301      	adds	r3, #1
 80060f4:	9304      	str	r3, [sp, #16]
 80060f6:	e6ae      	b.n	8005e56 <_dtoa_r+0x696>
 80060f8:	9c07      	ldr	r4, [sp, #28]
 80060fa:	9704      	str	r7, [sp, #16]
 80060fc:	4625      	mov	r5, r4
 80060fe:	e7f3      	b.n	80060e8 <_dtoa_r+0x928>
 8006100:	9b07      	ldr	r3, [sp, #28]
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 8104 	beq.w	8006314 <_dtoa_r+0xb54>
 800610c:	2e00      	cmp	r6, #0
 800610e:	dd05      	ble.n	800611c <_dtoa_r+0x95c>
 8006110:	4629      	mov	r1, r5
 8006112:	4632      	mov	r2, r6
 8006114:	4658      	mov	r0, fp
 8006116:	f000 fc25 	bl	8006964 <__lshift>
 800611a:	4605      	mov	r5, r0
 800611c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d05a      	beq.n	80061d8 <_dtoa_r+0xa18>
 8006122:	6869      	ldr	r1, [r5, #4]
 8006124:	4658      	mov	r0, fp
 8006126:	f000 fa0f 	bl	8006548 <_Balloc>
 800612a:	4606      	mov	r6, r0
 800612c:	b928      	cbnz	r0, 800613a <_dtoa_r+0x97a>
 800612e:	4b84      	ldr	r3, [pc, #528]	@ (8006340 <_dtoa_r+0xb80>)
 8006130:	4602      	mov	r2, r0
 8006132:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006136:	f7ff bb5a 	b.w	80057ee <_dtoa_r+0x2e>
 800613a:	692a      	ldr	r2, [r5, #16]
 800613c:	3202      	adds	r2, #2
 800613e:	0092      	lsls	r2, r2, #2
 8006140:	f105 010c 	add.w	r1, r5, #12
 8006144:	300c      	adds	r0, #12
 8006146:	f7ff faa4 	bl	8005692 <memcpy>
 800614a:	2201      	movs	r2, #1
 800614c:	4631      	mov	r1, r6
 800614e:	4658      	mov	r0, fp
 8006150:	f000 fc08 	bl	8006964 <__lshift>
 8006154:	f10a 0301 	add.w	r3, sl, #1
 8006158:	9307      	str	r3, [sp, #28]
 800615a:	9b00      	ldr	r3, [sp, #0]
 800615c:	4453      	add	r3, sl
 800615e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006160:	9b02      	ldr	r3, [sp, #8]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	462f      	mov	r7, r5
 8006168:	930a      	str	r3, [sp, #40]	@ 0x28
 800616a:	4605      	mov	r5, r0
 800616c:	9b07      	ldr	r3, [sp, #28]
 800616e:	4621      	mov	r1, r4
 8006170:	3b01      	subs	r3, #1
 8006172:	4648      	mov	r0, r9
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	f7ff fa9a 	bl	80056ae <quorem>
 800617a:	4639      	mov	r1, r7
 800617c:	9002      	str	r0, [sp, #8]
 800617e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006182:	4648      	mov	r0, r9
 8006184:	f000 fc5a 	bl	8006a3c <__mcmp>
 8006188:	462a      	mov	r2, r5
 800618a:	9008      	str	r0, [sp, #32]
 800618c:	4621      	mov	r1, r4
 800618e:	4658      	mov	r0, fp
 8006190:	f000 fc70 	bl	8006a74 <__mdiff>
 8006194:	68c2      	ldr	r2, [r0, #12]
 8006196:	4606      	mov	r6, r0
 8006198:	bb02      	cbnz	r2, 80061dc <_dtoa_r+0xa1c>
 800619a:	4601      	mov	r1, r0
 800619c:	4648      	mov	r0, r9
 800619e:	f000 fc4d 	bl	8006a3c <__mcmp>
 80061a2:	4602      	mov	r2, r0
 80061a4:	4631      	mov	r1, r6
 80061a6:	4658      	mov	r0, fp
 80061a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80061aa:	f000 fa0d 	bl	80065c8 <_Bfree>
 80061ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061b2:	9e07      	ldr	r6, [sp, #28]
 80061b4:	ea43 0102 	orr.w	r1, r3, r2
 80061b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ba:	4319      	orrs	r1, r3
 80061bc:	d110      	bne.n	80061e0 <_dtoa_r+0xa20>
 80061be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061c2:	d029      	beq.n	8006218 <_dtoa_r+0xa58>
 80061c4:	9b08      	ldr	r3, [sp, #32]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	dd02      	ble.n	80061d0 <_dtoa_r+0xa10>
 80061ca:	9b02      	ldr	r3, [sp, #8]
 80061cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80061d0:	9b00      	ldr	r3, [sp, #0]
 80061d2:	f883 8000 	strb.w	r8, [r3]
 80061d6:	e63f      	b.n	8005e58 <_dtoa_r+0x698>
 80061d8:	4628      	mov	r0, r5
 80061da:	e7bb      	b.n	8006154 <_dtoa_r+0x994>
 80061dc:	2201      	movs	r2, #1
 80061de:	e7e1      	b.n	80061a4 <_dtoa_r+0x9e4>
 80061e0:	9b08      	ldr	r3, [sp, #32]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	db04      	blt.n	80061f0 <_dtoa_r+0xa30>
 80061e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061e8:	430b      	orrs	r3, r1
 80061ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061ec:	430b      	orrs	r3, r1
 80061ee:	d120      	bne.n	8006232 <_dtoa_r+0xa72>
 80061f0:	2a00      	cmp	r2, #0
 80061f2:	dded      	ble.n	80061d0 <_dtoa_r+0xa10>
 80061f4:	4649      	mov	r1, r9
 80061f6:	2201      	movs	r2, #1
 80061f8:	4658      	mov	r0, fp
 80061fa:	f000 fbb3 	bl	8006964 <__lshift>
 80061fe:	4621      	mov	r1, r4
 8006200:	4681      	mov	r9, r0
 8006202:	f000 fc1b 	bl	8006a3c <__mcmp>
 8006206:	2800      	cmp	r0, #0
 8006208:	dc03      	bgt.n	8006212 <_dtoa_r+0xa52>
 800620a:	d1e1      	bne.n	80061d0 <_dtoa_r+0xa10>
 800620c:	f018 0f01 	tst.w	r8, #1
 8006210:	d0de      	beq.n	80061d0 <_dtoa_r+0xa10>
 8006212:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006216:	d1d8      	bne.n	80061ca <_dtoa_r+0xa0a>
 8006218:	9a00      	ldr	r2, [sp, #0]
 800621a:	2339      	movs	r3, #57	@ 0x39
 800621c:	7013      	strb	r3, [r2, #0]
 800621e:	4633      	mov	r3, r6
 8006220:	461e      	mov	r6, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006228:	2a39      	cmp	r2, #57	@ 0x39
 800622a:	d052      	beq.n	80062d2 <_dtoa_r+0xb12>
 800622c:	3201      	adds	r2, #1
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	e612      	b.n	8005e58 <_dtoa_r+0x698>
 8006232:	2a00      	cmp	r2, #0
 8006234:	dd07      	ble.n	8006246 <_dtoa_r+0xa86>
 8006236:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800623a:	d0ed      	beq.n	8006218 <_dtoa_r+0xa58>
 800623c:	9a00      	ldr	r2, [sp, #0]
 800623e:	f108 0301 	add.w	r3, r8, #1
 8006242:	7013      	strb	r3, [r2, #0]
 8006244:	e608      	b.n	8005e58 <_dtoa_r+0x698>
 8006246:	9b07      	ldr	r3, [sp, #28]
 8006248:	9a07      	ldr	r2, [sp, #28]
 800624a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800624e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006250:	4293      	cmp	r3, r2
 8006252:	d028      	beq.n	80062a6 <_dtoa_r+0xae6>
 8006254:	4649      	mov	r1, r9
 8006256:	2300      	movs	r3, #0
 8006258:	220a      	movs	r2, #10
 800625a:	4658      	mov	r0, fp
 800625c:	f000 f9d6 	bl	800660c <__multadd>
 8006260:	42af      	cmp	r7, r5
 8006262:	4681      	mov	r9, r0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	f04f 020a 	mov.w	r2, #10
 800626c:	4639      	mov	r1, r7
 800626e:	4658      	mov	r0, fp
 8006270:	d107      	bne.n	8006282 <_dtoa_r+0xac2>
 8006272:	f000 f9cb 	bl	800660c <__multadd>
 8006276:	4607      	mov	r7, r0
 8006278:	4605      	mov	r5, r0
 800627a:	9b07      	ldr	r3, [sp, #28]
 800627c:	3301      	adds	r3, #1
 800627e:	9307      	str	r3, [sp, #28]
 8006280:	e774      	b.n	800616c <_dtoa_r+0x9ac>
 8006282:	f000 f9c3 	bl	800660c <__multadd>
 8006286:	4629      	mov	r1, r5
 8006288:	4607      	mov	r7, r0
 800628a:	2300      	movs	r3, #0
 800628c:	220a      	movs	r2, #10
 800628e:	4658      	mov	r0, fp
 8006290:	f000 f9bc 	bl	800660c <__multadd>
 8006294:	4605      	mov	r5, r0
 8006296:	e7f0      	b.n	800627a <_dtoa_r+0xaba>
 8006298:	9b00      	ldr	r3, [sp, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	bfcc      	ite	gt
 800629e:	461e      	movgt	r6, r3
 80062a0:	2601      	movle	r6, #1
 80062a2:	4456      	add	r6, sl
 80062a4:	2700      	movs	r7, #0
 80062a6:	4649      	mov	r1, r9
 80062a8:	2201      	movs	r2, #1
 80062aa:	4658      	mov	r0, fp
 80062ac:	f000 fb5a 	bl	8006964 <__lshift>
 80062b0:	4621      	mov	r1, r4
 80062b2:	4681      	mov	r9, r0
 80062b4:	f000 fbc2 	bl	8006a3c <__mcmp>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	dcb0      	bgt.n	800621e <_dtoa_r+0xa5e>
 80062bc:	d102      	bne.n	80062c4 <_dtoa_r+0xb04>
 80062be:	f018 0f01 	tst.w	r8, #1
 80062c2:	d1ac      	bne.n	800621e <_dtoa_r+0xa5e>
 80062c4:	4633      	mov	r3, r6
 80062c6:	461e      	mov	r6, r3
 80062c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062cc:	2a30      	cmp	r2, #48	@ 0x30
 80062ce:	d0fa      	beq.n	80062c6 <_dtoa_r+0xb06>
 80062d0:	e5c2      	b.n	8005e58 <_dtoa_r+0x698>
 80062d2:	459a      	cmp	sl, r3
 80062d4:	d1a4      	bne.n	8006220 <_dtoa_r+0xa60>
 80062d6:	9b04      	ldr	r3, [sp, #16]
 80062d8:	3301      	adds	r3, #1
 80062da:	9304      	str	r3, [sp, #16]
 80062dc:	2331      	movs	r3, #49	@ 0x31
 80062de:	f88a 3000 	strb.w	r3, [sl]
 80062e2:	e5b9      	b.n	8005e58 <_dtoa_r+0x698>
 80062e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006344 <_dtoa_r+0xb84>
 80062ea:	b11b      	cbz	r3, 80062f4 <_dtoa_r+0xb34>
 80062ec:	f10a 0308 	add.w	r3, sl, #8
 80062f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	4650      	mov	r0, sl
 80062f6:	b019      	add	sp, #100	@ 0x64
 80062f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062fe:	2b01      	cmp	r3, #1
 8006300:	f77f ae37 	ble.w	8005f72 <_dtoa_r+0x7b2>
 8006304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006306:	930a      	str	r3, [sp, #40]	@ 0x28
 8006308:	2001      	movs	r0, #1
 800630a:	e655      	b.n	8005fb8 <_dtoa_r+0x7f8>
 800630c:	9b00      	ldr	r3, [sp, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f77f aed6 	ble.w	80060c0 <_dtoa_r+0x900>
 8006314:	4656      	mov	r6, sl
 8006316:	4621      	mov	r1, r4
 8006318:	4648      	mov	r0, r9
 800631a:	f7ff f9c8 	bl	80056ae <quorem>
 800631e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006322:	f806 8b01 	strb.w	r8, [r6], #1
 8006326:	9b00      	ldr	r3, [sp, #0]
 8006328:	eba6 020a 	sub.w	r2, r6, sl
 800632c:	4293      	cmp	r3, r2
 800632e:	ddb3      	ble.n	8006298 <_dtoa_r+0xad8>
 8006330:	4649      	mov	r1, r9
 8006332:	2300      	movs	r3, #0
 8006334:	220a      	movs	r2, #10
 8006336:	4658      	mov	r0, fp
 8006338:	f000 f968 	bl	800660c <__multadd>
 800633c:	4681      	mov	r9, r0
 800633e:	e7ea      	b.n	8006316 <_dtoa_r+0xb56>
 8006340:	080077ec 	.word	0x080077ec
 8006344:	08007770 	.word	0x08007770

08006348 <_free_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4605      	mov	r5, r0
 800634c:	2900      	cmp	r1, #0
 800634e:	d041      	beq.n	80063d4 <_free_r+0x8c>
 8006350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006354:	1f0c      	subs	r4, r1, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	bfb8      	it	lt
 800635a:	18e4      	addlt	r4, r4, r3
 800635c:	f000 f8e8 	bl	8006530 <__malloc_lock>
 8006360:	4a1d      	ldr	r2, [pc, #116]	@ (80063d8 <_free_r+0x90>)
 8006362:	6813      	ldr	r3, [r2, #0]
 8006364:	b933      	cbnz	r3, 8006374 <_free_r+0x2c>
 8006366:	6063      	str	r3, [r4, #4]
 8006368:	6014      	str	r4, [r2, #0]
 800636a:	4628      	mov	r0, r5
 800636c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006370:	f000 b8e4 	b.w	800653c <__malloc_unlock>
 8006374:	42a3      	cmp	r3, r4
 8006376:	d908      	bls.n	800638a <_free_r+0x42>
 8006378:	6820      	ldr	r0, [r4, #0]
 800637a:	1821      	adds	r1, r4, r0
 800637c:	428b      	cmp	r3, r1
 800637e:	bf01      	itttt	eq
 8006380:	6819      	ldreq	r1, [r3, #0]
 8006382:	685b      	ldreq	r3, [r3, #4]
 8006384:	1809      	addeq	r1, r1, r0
 8006386:	6021      	streq	r1, [r4, #0]
 8006388:	e7ed      	b.n	8006366 <_free_r+0x1e>
 800638a:	461a      	mov	r2, r3
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	b10b      	cbz	r3, 8006394 <_free_r+0x4c>
 8006390:	42a3      	cmp	r3, r4
 8006392:	d9fa      	bls.n	800638a <_free_r+0x42>
 8006394:	6811      	ldr	r1, [r2, #0]
 8006396:	1850      	adds	r0, r2, r1
 8006398:	42a0      	cmp	r0, r4
 800639a:	d10b      	bne.n	80063b4 <_free_r+0x6c>
 800639c:	6820      	ldr	r0, [r4, #0]
 800639e:	4401      	add	r1, r0
 80063a0:	1850      	adds	r0, r2, r1
 80063a2:	4283      	cmp	r3, r0
 80063a4:	6011      	str	r1, [r2, #0]
 80063a6:	d1e0      	bne.n	800636a <_free_r+0x22>
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	6053      	str	r3, [r2, #4]
 80063ae:	4408      	add	r0, r1
 80063b0:	6010      	str	r0, [r2, #0]
 80063b2:	e7da      	b.n	800636a <_free_r+0x22>
 80063b4:	d902      	bls.n	80063bc <_free_r+0x74>
 80063b6:	230c      	movs	r3, #12
 80063b8:	602b      	str	r3, [r5, #0]
 80063ba:	e7d6      	b.n	800636a <_free_r+0x22>
 80063bc:	6820      	ldr	r0, [r4, #0]
 80063be:	1821      	adds	r1, r4, r0
 80063c0:	428b      	cmp	r3, r1
 80063c2:	bf04      	itt	eq
 80063c4:	6819      	ldreq	r1, [r3, #0]
 80063c6:	685b      	ldreq	r3, [r3, #4]
 80063c8:	6063      	str	r3, [r4, #4]
 80063ca:	bf04      	itt	eq
 80063cc:	1809      	addeq	r1, r1, r0
 80063ce:	6021      	streq	r1, [r4, #0]
 80063d0:	6054      	str	r4, [r2, #4]
 80063d2:	e7ca      	b.n	800636a <_free_r+0x22>
 80063d4:	bd38      	pop	{r3, r4, r5, pc}
 80063d6:	bf00      	nop
 80063d8:	20000834 	.word	0x20000834

080063dc <malloc>:
 80063dc:	4b02      	ldr	r3, [pc, #8]	@ (80063e8 <malloc+0xc>)
 80063de:	4601      	mov	r1, r0
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	f000 b825 	b.w	8006430 <_malloc_r>
 80063e6:	bf00      	nop
 80063e8:	20000018 	.word	0x20000018

080063ec <sbrk_aligned>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	4e0f      	ldr	r6, [pc, #60]	@ (800642c <sbrk_aligned+0x40>)
 80063f0:	460c      	mov	r4, r1
 80063f2:	6831      	ldr	r1, [r6, #0]
 80063f4:	4605      	mov	r5, r0
 80063f6:	b911      	cbnz	r1, 80063fe <sbrk_aligned+0x12>
 80063f8:	f000 fe2c 	bl	8007054 <_sbrk_r>
 80063fc:	6030      	str	r0, [r6, #0]
 80063fe:	4621      	mov	r1, r4
 8006400:	4628      	mov	r0, r5
 8006402:	f000 fe27 	bl	8007054 <_sbrk_r>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d103      	bne.n	8006412 <sbrk_aligned+0x26>
 800640a:	f04f 34ff 	mov.w	r4, #4294967295
 800640e:	4620      	mov	r0, r4
 8006410:	bd70      	pop	{r4, r5, r6, pc}
 8006412:	1cc4      	adds	r4, r0, #3
 8006414:	f024 0403 	bic.w	r4, r4, #3
 8006418:	42a0      	cmp	r0, r4
 800641a:	d0f8      	beq.n	800640e <sbrk_aligned+0x22>
 800641c:	1a21      	subs	r1, r4, r0
 800641e:	4628      	mov	r0, r5
 8006420:	f000 fe18 	bl	8007054 <_sbrk_r>
 8006424:	3001      	adds	r0, #1
 8006426:	d1f2      	bne.n	800640e <sbrk_aligned+0x22>
 8006428:	e7ef      	b.n	800640a <sbrk_aligned+0x1e>
 800642a:	bf00      	nop
 800642c:	20000830 	.word	0x20000830

08006430 <_malloc_r>:
 8006430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006434:	1ccd      	adds	r5, r1, #3
 8006436:	f025 0503 	bic.w	r5, r5, #3
 800643a:	3508      	adds	r5, #8
 800643c:	2d0c      	cmp	r5, #12
 800643e:	bf38      	it	cc
 8006440:	250c      	movcc	r5, #12
 8006442:	2d00      	cmp	r5, #0
 8006444:	4606      	mov	r6, r0
 8006446:	db01      	blt.n	800644c <_malloc_r+0x1c>
 8006448:	42a9      	cmp	r1, r5
 800644a:	d904      	bls.n	8006456 <_malloc_r+0x26>
 800644c:	230c      	movs	r3, #12
 800644e:	6033      	str	r3, [r6, #0]
 8006450:	2000      	movs	r0, #0
 8006452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006456:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800652c <_malloc_r+0xfc>
 800645a:	f000 f869 	bl	8006530 <__malloc_lock>
 800645e:	f8d8 3000 	ldr.w	r3, [r8]
 8006462:	461c      	mov	r4, r3
 8006464:	bb44      	cbnz	r4, 80064b8 <_malloc_r+0x88>
 8006466:	4629      	mov	r1, r5
 8006468:	4630      	mov	r0, r6
 800646a:	f7ff ffbf 	bl	80063ec <sbrk_aligned>
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	4604      	mov	r4, r0
 8006472:	d158      	bne.n	8006526 <_malloc_r+0xf6>
 8006474:	f8d8 4000 	ldr.w	r4, [r8]
 8006478:	4627      	mov	r7, r4
 800647a:	2f00      	cmp	r7, #0
 800647c:	d143      	bne.n	8006506 <_malloc_r+0xd6>
 800647e:	2c00      	cmp	r4, #0
 8006480:	d04b      	beq.n	800651a <_malloc_r+0xea>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	4639      	mov	r1, r7
 8006486:	4630      	mov	r0, r6
 8006488:	eb04 0903 	add.w	r9, r4, r3
 800648c:	f000 fde2 	bl	8007054 <_sbrk_r>
 8006490:	4581      	cmp	r9, r0
 8006492:	d142      	bne.n	800651a <_malloc_r+0xea>
 8006494:	6821      	ldr	r1, [r4, #0]
 8006496:	1a6d      	subs	r5, r5, r1
 8006498:	4629      	mov	r1, r5
 800649a:	4630      	mov	r0, r6
 800649c:	f7ff ffa6 	bl	80063ec <sbrk_aligned>
 80064a0:	3001      	adds	r0, #1
 80064a2:	d03a      	beq.n	800651a <_malloc_r+0xea>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	442b      	add	r3, r5
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	f8d8 3000 	ldr.w	r3, [r8]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	bb62      	cbnz	r2, 800650c <_malloc_r+0xdc>
 80064b2:	f8c8 7000 	str.w	r7, [r8]
 80064b6:	e00f      	b.n	80064d8 <_malloc_r+0xa8>
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	1b52      	subs	r2, r2, r5
 80064bc:	d420      	bmi.n	8006500 <_malloc_r+0xd0>
 80064be:	2a0b      	cmp	r2, #11
 80064c0:	d917      	bls.n	80064f2 <_malloc_r+0xc2>
 80064c2:	1961      	adds	r1, r4, r5
 80064c4:	42a3      	cmp	r3, r4
 80064c6:	6025      	str	r5, [r4, #0]
 80064c8:	bf18      	it	ne
 80064ca:	6059      	strne	r1, [r3, #4]
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	bf08      	it	eq
 80064d0:	f8c8 1000 	streq.w	r1, [r8]
 80064d4:	5162      	str	r2, [r4, r5]
 80064d6:	604b      	str	r3, [r1, #4]
 80064d8:	4630      	mov	r0, r6
 80064da:	f000 f82f 	bl	800653c <__malloc_unlock>
 80064de:	f104 000b 	add.w	r0, r4, #11
 80064e2:	1d23      	adds	r3, r4, #4
 80064e4:	f020 0007 	bic.w	r0, r0, #7
 80064e8:	1ac2      	subs	r2, r0, r3
 80064ea:	bf1c      	itt	ne
 80064ec:	1a1b      	subne	r3, r3, r0
 80064ee:	50a3      	strne	r3, [r4, r2]
 80064f0:	e7af      	b.n	8006452 <_malloc_r+0x22>
 80064f2:	6862      	ldr	r2, [r4, #4]
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	bf0c      	ite	eq
 80064f8:	f8c8 2000 	streq.w	r2, [r8]
 80064fc:	605a      	strne	r2, [r3, #4]
 80064fe:	e7eb      	b.n	80064d8 <_malloc_r+0xa8>
 8006500:	4623      	mov	r3, r4
 8006502:	6864      	ldr	r4, [r4, #4]
 8006504:	e7ae      	b.n	8006464 <_malloc_r+0x34>
 8006506:	463c      	mov	r4, r7
 8006508:	687f      	ldr	r7, [r7, #4]
 800650a:	e7b6      	b.n	800647a <_malloc_r+0x4a>
 800650c:	461a      	mov	r2, r3
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	42a3      	cmp	r3, r4
 8006512:	d1fb      	bne.n	800650c <_malloc_r+0xdc>
 8006514:	2300      	movs	r3, #0
 8006516:	6053      	str	r3, [r2, #4]
 8006518:	e7de      	b.n	80064d8 <_malloc_r+0xa8>
 800651a:	230c      	movs	r3, #12
 800651c:	6033      	str	r3, [r6, #0]
 800651e:	4630      	mov	r0, r6
 8006520:	f000 f80c 	bl	800653c <__malloc_unlock>
 8006524:	e794      	b.n	8006450 <_malloc_r+0x20>
 8006526:	6005      	str	r5, [r0, #0]
 8006528:	e7d6      	b.n	80064d8 <_malloc_r+0xa8>
 800652a:	bf00      	nop
 800652c:	20000834 	.word	0x20000834

08006530 <__malloc_lock>:
 8006530:	4801      	ldr	r0, [pc, #4]	@ (8006538 <__malloc_lock+0x8>)
 8006532:	f7ff b8ac 	b.w	800568e <__retarget_lock_acquire_recursive>
 8006536:	bf00      	nop
 8006538:	2000082c 	.word	0x2000082c

0800653c <__malloc_unlock>:
 800653c:	4801      	ldr	r0, [pc, #4]	@ (8006544 <__malloc_unlock+0x8>)
 800653e:	f7ff b8a7 	b.w	8005690 <__retarget_lock_release_recursive>
 8006542:	bf00      	nop
 8006544:	2000082c 	.word	0x2000082c

08006548 <_Balloc>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	69c6      	ldr	r6, [r0, #28]
 800654c:	4604      	mov	r4, r0
 800654e:	460d      	mov	r5, r1
 8006550:	b976      	cbnz	r6, 8006570 <_Balloc+0x28>
 8006552:	2010      	movs	r0, #16
 8006554:	f7ff ff42 	bl	80063dc <malloc>
 8006558:	4602      	mov	r2, r0
 800655a:	61e0      	str	r0, [r4, #28]
 800655c:	b920      	cbnz	r0, 8006568 <_Balloc+0x20>
 800655e:	4b18      	ldr	r3, [pc, #96]	@ (80065c0 <_Balloc+0x78>)
 8006560:	4818      	ldr	r0, [pc, #96]	@ (80065c4 <_Balloc+0x7c>)
 8006562:	216b      	movs	r1, #107	@ 0x6b
 8006564:	f000 fd86 	bl	8007074 <__assert_func>
 8006568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800656c:	6006      	str	r6, [r0, #0]
 800656e:	60c6      	str	r6, [r0, #12]
 8006570:	69e6      	ldr	r6, [r4, #28]
 8006572:	68f3      	ldr	r3, [r6, #12]
 8006574:	b183      	cbz	r3, 8006598 <_Balloc+0x50>
 8006576:	69e3      	ldr	r3, [r4, #28]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800657e:	b9b8      	cbnz	r0, 80065b0 <_Balloc+0x68>
 8006580:	2101      	movs	r1, #1
 8006582:	fa01 f605 	lsl.w	r6, r1, r5
 8006586:	1d72      	adds	r2, r6, #5
 8006588:	0092      	lsls	r2, r2, #2
 800658a:	4620      	mov	r0, r4
 800658c:	f000 fd90 	bl	80070b0 <_calloc_r>
 8006590:	b160      	cbz	r0, 80065ac <_Balloc+0x64>
 8006592:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006596:	e00e      	b.n	80065b6 <_Balloc+0x6e>
 8006598:	2221      	movs	r2, #33	@ 0x21
 800659a:	2104      	movs	r1, #4
 800659c:	4620      	mov	r0, r4
 800659e:	f000 fd87 	bl	80070b0 <_calloc_r>
 80065a2:	69e3      	ldr	r3, [r4, #28]
 80065a4:	60f0      	str	r0, [r6, #12]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e4      	bne.n	8006576 <_Balloc+0x2e>
 80065ac:	2000      	movs	r0, #0
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	6802      	ldr	r2, [r0, #0]
 80065b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065b6:	2300      	movs	r3, #0
 80065b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065bc:	e7f7      	b.n	80065ae <_Balloc+0x66>
 80065be:	bf00      	nop
 80065c0:	0800777d 	.word	0x0800777d
 80065c4:	080077fd 	.word	0x080077fd

080065c8 <_Bfree>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	69c6      	ldr	r6, [r0, #28]
 80065cc:	4605      	mov	r5, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	b976      	cbnz	r6, 80065f0 <_Bfree+0x28>
 80065d2:	2010      	movs	r0, #16
 80065d4:	f7ff ff02 	bl	80063dc <malloc>
 80065d8:	4602      	mov	r2, r0
 80065da:	61e8      	str	r0, [r5, #28]
 80065dc:	b920      	cbnz	r0, 80065e8 <_Bfree+0x20>
 80065de:	4b09      	ldr	r3, [pc, #36]	@ (8006604 <_Bfree+0x3c>)
 80065e0:	4809      	ldr	r0, [pc, #36]	@ (8006608 <_Bfree+0x40>)
 80065e2:	218f      	movs	r1, #143	@ 0x8f
 80065e4:	f000 fd46 	bl	8007074 <__assert_func>
 80065e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065ec:	6006      	str	r6, [r0, #0]
 80065ee:	60c6      	str	r6, [r0, #12]
 80065f0:	b13c      	cbz	r4, 8006602 <_Bfree+0x3a>
 80065f2:	69eb      	ldr	r3, [r5, #28]
 80065f4:	6862      	ldr	r2, [r4, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065fc:	6021      	str	r1, [r4, #0]
 80065fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	0800777d 	.word	0x0800777d
 8006608:	080077fd 	.word	0x080077fd

0800660c <__multadd>:
 800660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006610:	690d      	ldr	r5, [r1, #16]
 8006612:	4607      	mov	r7, r0
 8006614:	460c      	mov	r4, r1
 8006616:	461e      	mov	r6, r3
 8006618:	f101 0c14 	add.w	ip, r1, #20
 800661c:	2000      	movs	r0, #0
 800661e:	f8dc 3000 	ldr.w	r3, [ip]
 8006622:	b299      	uxth	r1, r3
 8006624:	fb02 6101 	mla	r1, r2, r1, r6
 8006628:	0c1e      	lsrs	r6, r3, #16
 800662a:	0c0b      	lsrs	r3, r1, #16
 800662c:	fb02 3306 	mla	r3, r2, r6, r3
 8006630:	b289      	uxth	r1, r1
 8006632:	3001      	adds	r0, #1
 8006634:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006638:	4285      	cmp	r5, r0
 800663a:	f84c 1b04 	str.w	r1, [ip], #4
 800663e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006642:	dcec      	bgt.n	800661e <__multadd+0x12>
 8006644:	b30e      	cbz	r6, 800668a <__multadd+0x7e>
 8006646:	68a3      	ldr	r3, [r4, #8]
 8006648:	42ab      	cmp	r3, r5
 800664a:	dc19      	bgt.n	8006680 <__multadd+0x74>
 800664c:	6861      	ldr	r1, [r4, #4]
 800664e:	4638      	mov	r0, r7
 8006650:	3101      	adds	r1, #1
 8006652:	f7ff ff79 	bl	8006548 <_Balloc>
 8006656:	4680      	mov	r8, r0
 8006658:	b928      	cbnz	r0, 8006666 <__multadd+0x5a>
 800665a:	4602      	mov	r2, r0
 800665c:	4b0c      	ldr	r3, [pc, #48]	@ (8006690 <__multadd+0x84>)
 800665e:	480d      	ldr	r0, [pc, #52]	@ (8006694 <__multadd+0x88>)
 8006660:	21ba      	movs	r1, #186	@ 0xba
 8006662:	f000 fd07 	bl	8007074 <__assert_func>
 8006666:	6922      	ldr	r2, [r4, #16]
 8006668:	3202      	adds	r2, #2
 800666a:	f104 010c 	add.w	r1, r4, #12
 800666e:	0092      	lsls	r2, r2, #2
 8006670:	300c      	adds	r0, #12
 8006672:	f7ff f80e 	bl	8005692 <memcpy>
 8006676:	4621      	mov	r1, r4
 8006678:	4638      	mov	r0, r7
 800667a:	f7ff ffa5 	bl	80065c8 <_Bfree>
 800667e:	4644      	mov	r4, r8
 8006680:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006684:	3501      	adds	r5, #1
 8006686:	615e      	str	r6, [r3, #20]
 8006688:	6125      	str	r5, [r4, #16]
 800668a:	4620      	mov	r0, r4
 800668c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006690:	080077ec 	.word	0x080077ec
 8006694:	080077fd 	.word	0x080077fd

08006698 <__hi0bits>:
 8006698:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800669c:	4603      	mov	r3, r0
 800669e:	bf36      	itet	cc
 80066a0:	0403      	lslcc	r3, r0, #16
 80066a2:	2000      	movcs	r0, #0
 80066a4:	2010      	movcc	r0, #16
 80066a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066aa:	bf3c      	itt	cc
 80066ac:	021b      	lslcc	r3, r3, #8
 80066ae:	3008      	addcc	r0, #8
 80066b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066b4:	bf3c      	itt	cc
 80066b6:	011b      	lslcc	r3, r3, #4
 80066b8:	3004      	addcc	r0, #4
 80066ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066be:	bf3c      	itt	cc
 80066c0:	009b      	lslcc	r3, r3, #2
 80066c2:	3002      	addcc	r0, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	db05      	blt.n	80066d4 <__hi0bits+0x3c>
 80066c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80066cc:	f100 0001 	add.w	r0, r0, #1
 80066d0:	bf08      	it	eq
 80066d2:	2020      	moveq	r0, #32
 80066d4:	4770      	bx	lr

080066d6 <__lo0bits>:
 80066d6:	6803      	ldr	r3, [r0, #0]
 80066d8:	4602      	mov	r2, r0
 80066da:	f013 0007 	ands.w	r0, r3, #7
 80066de:	d00b      	beq.n	80066f8 <__lo0bits+0x22>
 80066e0:	07d9      	lsls	r1, r3, #31
 80066e2:	d421      	bmi.n	8006728 <__lo0bits+0x52>
 80066e4:	0798      	lsls	r0, r3, #30
 80066e6:	bf49      	itett	mi
 80066e8:	085b      	lsrmi	r3, r3, #1
 80066ea:	089b      	lsrpl	r3, r3, #2
 80066ec:	2001      	movmi	r0, #1
 80066ee:	6013      	strmi	r3, [r2, #0]
 80066f0:	bf5c      	itt	pl
 80066f2:	6013      	strpl	r3, [r2, #0]
 80066f4:	2002      	movpl	r0, #2
 80066f6:	4770      	bx	lr
 80066f8:	b299      	uxth	r1, r3
 80066fa:	b909      	cbnz	r1, 8006700 <__lo0bits+0x2a>
 80066fc:	0c1b      	lsrs	r3, r3, #16
 80066fe:	2010      	movs	r0, #16
 8006700:	b2d9      	uxtb	r1, r3
 8006702:	b909      	cbnz	r1, 8006708 <__lo0bits+0x32>
 8006704:	3008      	adds	r0, #8
 8006706:	0a1b      	lsrs	r3, r3, #8
 8006708:	0719      	lsls	r1, r3, #28
 800670a:	bf04      	itt	eq
 800670c:	091b      	lsreq	r3, r3, #4
 800670e:	3004      	addeq	r0, #4
 8006710:	0799      	lsls	r1, r3, #30
 8006712:	bf04      	itt	eq
 8006714:	089b      	lsreq	r3, r3, #2
 8006716:	3002      	addeq	r0, #2
 8006718:	07d9      	lsls	r1, r3, #31
 800671a:	d403      	bmi.n	8006724 <__lo0bits+0x4e>
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	f100 0001 	add.w	r0, r0, #1
 8006722:	d003      	beq.n	800672c <__lo0bits+0x56>
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	4770      	bx	lr
 8006728:	2000      	movs	r0, #0
 800672a:	4770      	bx	lr
 800672c:	2020      	movs	r0, #32
 800672e:	4770      	bx	lr

08006730 <__i2b>:
 8006730:	b510      	push	{r4, lr}
 8006732:	460c      	mov	r4, r1
 8006734:	2101      	movs	r1, #1
 8006736:	f7ff ff07 	bl	8006548 <_Balloc>
 800673a:	4602      	mov	r2, r0
 800673c:	b928      	cbnz	r0, 800674a <__i2b+0x1a>
 800673e:	4b05      	ldr	r3, [pc, #20]	@ (8006754 <__i2b+0x24>)
 8006740:	4805      	ldr	r0, [pc, #20]	@ (8006758 <__i2b+0x28>)
 8006742:	f240 1145 	movw	r1, #325	@ 0x145
 8006746:	f000 fc95 	bl	8007074 <__assert_func>
 800674a:	2301      	movs	r3, #1
 800674c:	6144      	str	r4, [r0, #20]
 800674e:	6103      	str	r3, [r0, #16]
 8006750:	bd10      	pop	{r4, pc}
 8006752:	bf00      	nop
 8006754:	080077ec 	.word	0x080077ec
 8006758:	080077fd 	.word	0x080077fd

0800675c <__multiply>:
 800675c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006760:	4614      	mov	r4, r2
 8006762:	690a      	ldr	r2, [r1, #16]
 8006764:	6923      	ldr	r3, [r4, #16]
 8006766:	429a      	cmp	r2, r3
 8006768:	bfa8      	it	ge
 800676a:	4623      	movge	r3, r4
 800676c:	460f      	mov	r7, r1
 800676e:	bfa4      	itt	ge
 8006770:	460c      	movge	r4, r1
 8006772:	461f      	movge	r7, r3
 8006774:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006778:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800677c:	68a3      	ldr	r3, [r4, #8]
 800677e:	6861      	ldr	r1, [r4, #4]
 8006780:	eb0a 0609 	add.w	r6, sl, r9
 8006784:	42b3      	cmp	r3, r6
 8006786:	b085      	sub	sp, #20
 8006788:	bfb8      	it	lt
 800678a:	3101      	addlt	r1, #1
 800678c:	f7ff fedc 	bl	8006548 <_Balloc>
 8006790:	b930      	cbnz	r0, 80067a0 <__multiply+0x44>
 8006792:	4602      	mov	r2, r0
 8006794:	4b44      	ldr	r3, [pc, #272]	@ (80068a8 <__multiply+0x14c>)
 8006796:	4845      	ldr	r0, [pc, #276]	@ (80068ac <__multiply+0x150>)
 8006798:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800679c:	f000 fc6a 	bl	8007074 <__assert_func>
 80067a0:	f100 0514 	add.w	r5, r0, #20
 80067a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067a8:	462b      	mov	r3, r5
 80067aa:	2200      	movs	r2, #0
 80067ac:	4543      	cmp	r3, r8
 80067ae:	d321      	bcc.n	80067f4 <__multiply+0x98>
 80067b0:	f107 0114 	add.w	r1, r7, #20
 80067b4:	f104 0214 	add.w	r2, r4, #20
 80067b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80067bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80067c0:	9302      	str	r3, [sp, #8]
 80067c2:	1b13      	subs	r3, r2, r4
 80067c4:	3b15      	subs	r3, #21
 80067c6:	f023 0303 	bic.w	r3, r3, #3
 80067ca:	3304      	adds	r3, #4
 80067cc:	f104 0715 	add.w	r7, r4, #21
 80067d0:	42ba      	cmp	r2, r7
 80067d2:	bf38      	it	cc
 80067d4:	2304      	movcc	r3, #4
 80067d6:	9301      	str	r3, [sp, #4]
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	9103      	str	r1, [sp, #12]
 80067dc:	428b      	cmp	r3, r1
 80067de:	d80c      	bhi.n	80067fa <__multiply+0x9e>
 80067e0:	2e00      	cmp	r6, #0
 80067e2:	dd03      	ble.n	80067ec <__multiply+0x90>
 80067e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d05b      	beq.n	80068a4 <__multiply+0x148>
 80067ec:	6106      	str	r6, [r0, #16]
 80067ee:	b005      	add	sp, #20
 80067f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f4:	f843 2b04 	str.w	r2, [r3], #4
 80067f8:	e7d8      	b.n	80067ac <__multiply+0x50>
 80067fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80067fe:	f1ba 0f00 	cmp.w	sl, #0
 8006802:	d024      	beq.n	800684e <__multiply+0xf2>
 8006804:	f104 0e14 	add.w	lr, r4, #20
 8006808:	46a9      	mov	r9, r5
 800680a:	f04f 0c00 	mov.w	ip, #0
 800680e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006812:	f8d9 3000 	ldr.w	r3, [r9]
 8006816:	fa1f fb87 	uxth.w	fp, r7
 800681a:	b29b      	uxth	r3, r3
 800681c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006820:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006824:	f8d9 7000 	ldr.w	r7, [r9]
 8006828:	4463      	add	r3, ip
 800682a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800682e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006832:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006836:	b29b      	uxth	r3, r3
 8006838:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800683c:	4572      	cmp	r2, lr
 800683e:	f849 3b04 	str.w	r3, [r9], #4
 8006842:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006846:	d8e2      	bhi.n	800680e <__multiply+0xb2>
 8006848:	9b01      	ldr	r3, [sp, #4]
 800684a:	f845 c003 	str.w	ip, [r5, r3]
 800684e:	9b03      	ldr	r3, [sp, #12]
 8006850:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006854:	3104      	adds	r1, #4
 8006856:	f1b9 0f00 	cmp.w	r9, #0
 800685a:	d021      	beq.n	80068a0 <__multiply+0x144>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	f104 0c14 	add.w	ip, r4, #20
 8006862:	46ae      	mov	lr, r5
 8006864:	f04f 0a00 	mov.w	sl, #0
 8006868:	f8bc b000 	ldrh.w	fp, [ip]
 800686c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006870:	fb09 770b 	mla	r7, r9, fp, r7
 8006874:	4457      	add	r7, sl
 8006876:	b29b      	uxth	r3, r3
 8006878:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800687c:	f84e 3b04 	str.w	r3, [lr], #4
 8006880:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006884:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006888:	f8be 3000 	ldrh.w	r3, [lr]
 800688c:	fb09 330a 	mla	r3, r9, sl, r3
 8006890:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006894:	4562      	cmp	r2, ip
 8006896:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800689a:	d8e5      	bhi.n	8006868 <__multiply+0x10c>
 800689c:	9f01      	ldr	r7, [sp, #4]
 800689e:	51eb      	str	r3, [r5, r7]
 80068a0:	3504      	adds	r5, #4
 80068a2:	e799      	b.n	80067d8 <__multiply+0x7c>
 80068a4:	3e01      	subs	r6, #1
 80068a6:	e79b      	b.n	80067e0 <__multiply+0x84>
 80068a8:	080077ec 	.word	0x080077ec
 80068ac:	080077fd 	.word	0x080077fd

080068b0 <__pow5mult>:
 80068b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068b4:	4615      	mov	r5, r2
 80068b6:	f012 0203 	ands.w	r2, r2, #3
 80068ba:	4607      	mov	r7, r0
 80068bc:	460e      	mov	r6, r1
 80068be:	d007      	beq.n	80068d0 <__pow5mult+0x20>
 80068c0:	4c25      	ldr	r4, [pc, #148]	@ (8006958 <__pow5mult+0xa8>)
 80068c2:	3a01      	subs	r2, #1
 80068c4:	2300      	movs	r3, #0
 80068c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068ca:	f7ff fe9f 	bl	800660c <__multadd>
 80068ce:	4606      	mov	r6, r0
 80068d0:	10ad      	asrs	r5, r5, #2
 80068d2:	d03d      	beq.n	8006950 <__pow5mult+0xa0>
 80068d4:	69fc      	ldr	r4, [r7, #28]
 80068d6:	b97c      	cbnz	r4, 80068f8 <__pow5mult+0x48>
 80068d8:	2010      	movs	r0, #16
 80068da:	f7ff fd7f 	bl	80063dc <malloc>
 80068de:	4602      	mov	r2, r0
 80068e0:	61f8      	str	r0, [r7, #28]
 80068e2:	b928      	cbnz	r0, 80068f0 <__pow5mult+0x40>
 80068e4:	4b1d      	ldr	r3, [pc, #116]	@ (800695c <__pow5mult+0xac>)
 80068e6:	481e      	ldr	r0, [pc, #120]	@ (8006960 <__pow5mult+0xb0>)
 80068e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80068ec:	f000 fbc2 	bl	8007074 <__assert_func>
 80068f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068f4:	6004      	str	r4, [r0, #0]
 80068f6:	60c4      	str	r4, [r0, #12]
 80068f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80068fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006900:	b94c      	cbnz	r4, 8006916 <__pow5mult+0x66>
 8006902:	f240 2171 	movw	r1, #625	@ 0x271
 8006906:	4638      	mov	r0, r7
 8006908:	f7ff ff12 	bl	8006730 <__i2b>
 800690c:	2300      	movs	r3, #0
 800690e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006912:	4604      	mov	r4, r0
 8006914:	6003      	str	r3, [r0, #0]
 8006916:	f04f 0900 	mov.w	r9, #0
 800691a:	07eb      	lsls	r3, r5, #31
 800691c:	d50a      	bpl.n	8006934 <__pow5mult+0x84>
 800691e:	4631      	mov	r1, r6
 8006920:	4622      	mov	r2, r4
 8006922:	4638      	mov	r0, r7
 8006924:	f7ff ff1a 	bl	800675c <__multiply>
 8006928:	4631      	mov	r1, r6
 800692a:	4680      	mov	r8, r0
 800692c:	4638      	mov	r0, r7
 800692e:	f7ff fe4b 	bl	80065c8 <_Bfree>
 8006932:	4646      	mov	r6, r8
 8006934:	106d      	asrs	r5, r5, #1
 8006936:	d00b      	beq.n	8006950 <__pow5mult+0xa0>
 8006938:	6820      	ldr	r0, [r4, #0]
 800693a:	b938      	cbnz	r0, 800694c <__pow5mult+0x9c>
 800693c:	4622      	mov	r2, r4
 800693e:	4621      	mov	r1, r4
 8006940:	4638      	mov	r0, r7
 8006942:	f7ff ff0b 	bl	800675c <__multiply>
 8006946:	6020      	str	r0, [r4, #0]
 8006948:	f8c0 9000 	str.w	r9, [r0]
 800694c:	4604      	mov	r4, r0
 800694e:	e7e4      	b.n	800691a <__pow5mult+0x6a>
 8006950:	4630      	mov	r0, r6
 8006952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006956:	bf00      	nop
 8006958:	08007858 	.word	0x08007858
 800695c:	0800777d 	.word	0x0800777d
 8006960:	080077fd 	.word	0x080077fd

08006964 <__lshift>:
 8006964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006968:	460c      	mov	r4, r1
 800696a:	6849      	ldr	r1, [r1, #4]
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006972:	68a3      	ldr	r3, [r4, #8]
 8006974:	4607      	mov	r7, r0
 8006976:	4691      	mov	r9, r2
 8006978:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800697c:	f108 0601 	add.w	r6, r8, #1
 8006980:	42b3      	cmp	r3, r6
 8006982:	db0b      	blt.n	800699c <__lshift+0x38>
 8006984:	4638      	mov	r0, r7
 8006986:	f7ff fddf 	bl	8006548 <_Balloc>
 800698a:	4605      	mov	r5, r0
 800698c:	b948      	cbnz	r0, 80069a2 <__lshift+0x3e>
 800698e:	4602      	mov	r2, r0
 8006990:	4b28      	ldr	r3, [pc, #160]	@ (8006a34 <__lshift+0xd0>)
 8006992:	4829      	ldr	r0, [pc, #164]	@ (8006a38 <__lshift+0xd4>)
 8006994:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006998:	f000 fb6c 	bl	8007074 <__assert_func>
 800699c:	3101      	adds	r1, #1
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	e7ee      	b.n	8006980 <__lshift+0x1c>
 80069a2:	2300      	movs	r3, #0
 80069a4:	f100 0114 	add.w	r1, r0, #20
 80069a8:	f100 0210 	add.w	r2, r0, #16
 80069ac:	4618      	mov	r0, r3
 80069ae:	4553      	cmp	r3, sl
 80069b0:	db33      	blt.n	8006a1a <__lshift+0xb6>
 80069b2:	6920      	ldr	r0, [r4, #16]
 80069b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069b8:	f104 0314 	add.w	r3, r4, #20
 80069bc:	f019 091f 	ands.w	r9, r9, #31
 80069c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069c8:	d02b      	beq.n	8006a22 <__lshift+0xbe>
 80069ca:	f1c9 0e20 	rsb	lr, r9, #32
 80069ce:	468a      	mov	sl, r1
 80069d0:	2200      	movs	r2, #0
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	fa00 f009 	lsl.w	r0, r0, r9
 80069d8:	4310      	orrs	r0, r2
 80069da:	f84a 0b04 	str.w	r0, [sl], #4
 80069de:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e2:	459c      	cmp	ip, r3
 80069e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80069e8:	d8f3      	bhi.n	80069d2 <__lshift+0x6e>
 80069ea:	ebac 0304 	sub.w	r3, ip, r4
 80069ee:	3b15      	subs	r3, #21
 80069f0:	f023 0303 	bic.w	r3, r3, #3
 80069f4:	3304      	adds	r3, #4
 80069f6:	f104 0015 	add.w	r0, r4, #21
 80069fa:	4584      	cmp	ip, r0
 80069fc:	bf38      	it	cc
 80069fe:	2304      	movcc	r3, #4
 8006a00:	50ca      	str	r2, [r1, r3]
 8006a02:	b10a      	cbz	r2, 8006a08 <__lshift+0xa4>
 8006a04:	f108 0602 	add.w	r6, r8, #2
 8006a08:	3e01      	subs	r6, #1
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	612e      	str	r6, [r5, #16]
 8006a0e:	4621      	mov	r1, r4
 8006a10:	f7ff fdda 	bl	80065c8 <_Bfree>
 8006a14:	4628      	mov	r0, r5
 8006a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a1e:	3301      	adds	r3, #1
 8006a20:	e7c5      	b.n	80069ae <__lshift+0x4a>
 8006a22:	3904      	subs	r1, #4
 8006a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a28:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a2c:	459c      	cmp	ip, r3
 8006a2e:	d8f9      	bhi.n	8006a24 <__lshift+0xc0>
 8006a30:	e7ea      	b.n	8006a08 <__lshift+0xa4>
 8006a32:	bf00      	nop
 8006a34:	080077ec 	.word	0x080077ec
 8006a38:	080077fd 	.word	0x080077fd

08006a3c <__mcmp>:
 8006a3c:	690a      	ldr	r2, [r1, #16]
 8006a3e:	4603      	mov	r3, r0
 8006a40:	6900      	ldr	r0, [r0, #16]
 8006a42:	1a80      	subs	r0, r0, r2
 8006a44:	b530      	push	{r4, r5, lr}
 8006a46:	d10e      	bne.n	8006a66 <__mcmp+0x2a>
 8006a48:	3314      	adds	r3, #20
 8006a4a:	3114      	adds	r1, #20
 8006a4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a5c:	4295      	cmp	r5, r2
 8006a5e:	d003      	beq.n	8006a68 <__mcmp+0x2c>
 8006a60:	d205      	bcs.n	8006a6e <__mcmp+0x32>
 8006a62:	f04f 30ff 	mov.w	r0, #4294967295
 8006a66:	bd30      	pop	{r4, r5, pc}
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	d3f3      	bcc.n	8006a54 <__mcmp+0x18>
 8006a6c:	e7fb      	b.n	8006a66 <__mcmp+0x2a>
 8006a6e:	2001      	movs	r0, #1
 8006a70:	e7f9      	b.n	8006a66 <__mcmp+0x2a>
	...

08006a74 <__mdiff>:
 8006a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a78:	4689      	mov	r9, r1
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4648      	mov	r0, r9
 8006a80:	4614      	mov	r4, r2
 8006a82:	f7ff ffdb 	bl	8006a3c <__mcmp>
 8006a86:	1e05      	subs	r5, r0, #0
 8006a88:	d112      	bne.n	8006ab0 <__mdiff+0x3c>
 8006a8a:	4629      	mov	r1, r5
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f7ff fd5b 	bl	8006548 <_Balloc>
 8006a92:	4602      	mov	r2, r0
 8006a94:	b928      	cbnz	r0, 8006aa2 <__mdiff+0x2e>
 8006a96:	4b3f      	ldr	r3, [pc, #252]	@ (8006b94 <__mdiff+0x120>)
 8006a98:	f240 2137 	movw	r1, #567	@ 0x237
 8006a9c:	483e      	ldr	r0, [pc, #248]	@ (8006b98 <__mdiff+0x124>)
 8006a9e:	f000 fae9 	bl	8007074 <__assert_func>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	b003      	add	sp, #12
 8006aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab0:	bfbc      	itt	lt
 8006ab2:	464b      	movlt	r3, r9
 8006ab4:	46a1      	movlt	r9, r4
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006abc:	bfba      	itte	lt
 8006abe:	461c      	movlt	r4, r3
 8006ac0:	2501      	movlt	r5, #1
 8006ac2:	2500      	movge	r5, #0
 8006ac4:	f7ff fd40 	bl	8006548 <_Balloc>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	b918      	cbnz	r0, 8006ad4 <__mdiff+0x60>
 8006acc:	4b31      	ldr	r3, [pc, #196]	@ (8006b94 <__mdiff+0x120>)
 8006ace:	f240 2145 	movw	r1, #581	@ 0x245
 8006ad2:	e7e3      	b.n	8006a9c <__mdiff+0x28>
 8006ad4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ad8:	6926      	ldr	r6, [r4, #16]
 8006ada:	60c5      	str	r5, [r0, #12]
 8006adc:	f109 0310 	add.w	r3, r9, #16
 8006ae0:	f109 0514 	add.w	r5, r9, #20
 8006ae4:	f104 0e14 	add.w	lr, r4, #20
 8006ae8:	f100 0b14 	add.w	fp, r0, #20
 8006aec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006af0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	46d9      	mov	r9, fp
 8006af8:	f04f 0c00 	mov.w	ip, #0
 8006afc:	9b01      	ldr	r3, [sp, #4]
 8006afe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006b02:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	fa1f f38a 	uxth.w	r3, sl
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	b283      	uxth	r3, r0
 8006b10:	1acb      	subs	r3, r1, r3
 8006b12:	0c00      	lsrs	r0, r0, #16
 8006b14:	4463      	add	r3, ip
 8006b16:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b24:	4576      	cmp	r6, lr
 8006b26:	f849 3b04 	str.w	r3, [r9], #4
 8006b2a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b2e:	d8e5      	bhi.n	8006afc <__mdiff+0x88>
 8006b30:	1b33      	subs	r3, r6, r4
 8006b32:	3b15      	subs	r3, #21
 8006b34:	f023 0303 	bic.w	r3, r3, #3
 8006b38:	3415      	adds	r4, #21
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	42a6      	cmp	r6, r4
 8006b3e:	bf38      	it	cc
 8006b40:	2304      	movcc	r3, #4
 8006b42:	441d      	add	r5, r3
 8006b44:	445b      	add	r3, fp
 8006b46:	461e      	mov	r6, r3
 8006b48:	462c      	mov	r4, r5
 8006b4a:	4544      	cmp	r4, r8
 8006b4c:	d30e      	bcc.n	8006b6c <__mdiff+0xf8>
 8006b4e:	f108 0103 	add.w	r1, r8, #3
 8006b52:	1b49      	subs	r1, r1, r5
 8006b54:	f021 0103 	bic.w	r1, r1, #3
 8006b58:	3d03      	subs	r5, #3
 8006b5a:	45a8      	cmp	r8, r5
 8006b5c:	bf38      	it	cc
 8006b5e:	2100      	movcc	r1, #0
 8006b60:	440b      	add	r3, r1
 8006b62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b66:	b191      	cbz	r1, 8006b8e <__mdiff+0x11a>
 8006b68:	6117      	str	r7, [r2, #16]
 8006b6a:	e79d      	b.n	8006aa8 <__mdiff+0x34>
 8006b6c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b70:	46e6      	mov	lr, ip
 8006b72:	0c08      	lsrs	r0, r1, #16
 8006b74:	fa1c fc81 	uxtah	ip, ip, r1
 8006b78:	4471      	add	r1, lr
 8006b7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b7e:	b289      	uxth	r1, r1
 8006b80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b84:	f846 1b04 	str.w	r1, [r6], #4
 8006b88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b8c:	e7dd      	b.n	8006b4a <__mdiff+0xd6>
 8006b8e:	3f01      	subs	r7, #1
 8006b90:	e7e7      	b.n	8006b62 <__mdiff+0xee>
 8006b92:	bf00      	nop
 8006b94:	080077ec 	.word	0x080077ec
 8006b98:	080077fd 	.word	0x080077fd

08006b9c <__d2b>:
 8006b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ba0:	460f      	mov	r7, r1
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	ec59 8b10 	vmov	r8, r9, d0
 8006ba8:	4616      	mov	r6, r2
 8006baa:	f7ff fccd 	bl	8006548 <_Balloc>
 8006bae:	4604      	mov	r4, r0
 8006bb0:	b930      	cbnz	r0, 8006bc0 <__d2b+0x24>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	4b23      	ldr	r3, [pc, #140]	@ (8006c44 <__d2b+0xa8>)
 8006bb6:	4824      	ldr	r0, [pc, #144]	@ (8006c48 <__d2b+0xac>)
 8006bb8:	f240 310f 	movw	r1, #783	@ 0x30f
 8006bbc:	f000 fa5a 	bl	8007074 <__assert_func>
 8006bc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bc8:	b10d      	cbz	r5, 8006bce <__d2b+0x32>
 8006bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	f1b8 0300 	subs.w	r3, r8, #0
 8006bd4:	d023      	beq.n	8006c1e <__d2b+0x82>
 8006bd6:	4668      	mov	r0, sp
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	f7ff fd7c 	bl	80066d6 <__lo0bits>
 8006bde:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006be2:	b1d0      	cbz	r0, 8006c1a <__d2b+0x7e>
 8006be4:	f1c0 0320 	rsb	r3, r0, #32
 8006be8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bec:	430b      	orrs	r3, r1
 8006bee:	40c2      	lsrs	r2, r0
 8006bf0:	6163      	str	r3, [r4, #20]
 8006bf2:	9201      	str	r2, [sp, #4]
 8006bf4:	9b01      	ldr	r3, [sp, #4]
 8006bf6:	61a3      	str	r3, [r4, #24]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	bf0c      	ite	eq
 8006bfc:	2201      	moveq	r2, #1
 8006bfe:	2202      	movne	r2, #2
 8006c00:	6122      	str	r2, [r4, #16]
 8006c02:	b1a5      	cbz	r5, 8006c2e <__d2b+0x92>
 8006c04:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c08:	4405      	add	r5, r0
 8006c0a:	603d      	str	r5, [r7, #0]
 8006c0c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c10:	6030      	str	r0, [r6, #0]
 8006c12:	4620      	mov	r0, r4
 8006c14:	b003      	add	sp, #12
 8006c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c1a:	6161      	str	r1, [r4, #20]
 8006c1c:	e7ea      	b.n	8006bf4 <__d2b+0x58>
 8006c1e:	a801      	add	r0, sp, #4
 8006c20:	f7ff fd59 	bl	80066d6 <__lo0bits>
 8006c24:	9b01      	ldr	r3, [sp, #4]
 8006c26:	6163      	str	r3, [r4, #20]
 8006c28:	3020      	adds	r0, #32
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	e7e8      	b.n	8006c00 <__d2b+0x64>
 8006c2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c36:	6038      	str	r0, [r7, #0]
 8006c38:	6918      	ldr	r0, [r3, #16]
 8006c3a:	f7ff fd2d 	bl	8006698 <__hi0bits>
 8006c3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c42:	e7e5      	b.n	8006c10 <__d2b+0x74>
 8006c44:	080077ec 	.word	0x080077ec
 8006c48:	080077fd 	.word	0x080077fd

08006c4c <__ssputs_r>:
 8006c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c50:	688e      	ldr	r6, [r1, #8]
 8006c52:	461f      	mov	r7, r3
 8006c54:	42be      	cmp	r6, r7
 8006c56:	680b      	ldr	r3, [r1, #0]
 8006c58:	4682      	mov	sl, r0
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	4690      	mov	r8, r2
 8006c5e:	d82d      	bhi.n	8006cbc <__ssputs_r+0x70>
 8006c60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c68:	d026      	beq.n	8006cb8 <__ssputs_r+0x6c>
 8006c6a:	6965      	ldr	r5, [r4, #20]
 8006c6c:	6909      	ldr	r1, [r1, #16]
 8006c6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c72:	eba3 0901 	sub.w	r9, r3, r1
 8006c76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c7a:	1c7b      	adds	r3, r7, #1
 8006c7c:	444b      	add	r3, r9
 8006c7e:	106d      	asrs	r5, r5, #1
 8006c80:	429d      	cmp	r5, r3
 8006c82:	bf38      	it	cc
 8006c84:	461d      	movcc	r5, r3
 8006c86:	0553      	lsls	r3, r2, #21
 8006c88:	d527      	bpl.n	8006cda <__ssputs_r+0x8e>
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	f7ff fbd0 	bl	8006430 <_malloc_r>
 8006c90:	4606      	mov	r6, r0
 8006c92:	b360      	cbz	r0, 8006cee <__ssputs_r+0xa2>
 8006c94:	6921      	ldr	r1, [r4, #16]
 8006c96:	464a      	mov	r2, r9
 8006c98:	f7fe fcfb 	bl	8005692 <memcpy>
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ca6:	81a3      	strh	r3, [r4, #12]
 8006ca8:	6126      	str	r6, [r4, #16]
 8006caa:	6165      	str	r5, [r4, #20]
 8006cac:	444e      	add	r6, r9
 8006cae:	eba5 0509 	sub.w	r5, r5, r9
 8006cb2:	6026      	str	r6, [r4, #0]
 8006cb4:	60a5      	str	r5, [r4, #8]
 8006cb6:	463e      	mov	r6, r7
 8006cb8:	42be      	cmp	r6, r7
 8006cba:	d900      	bls.n	8006cbe <__ssputs_r+0x72>
 8006cbc:	463e      	mov	r6, r7
 8006cbe:	6820      	ldr	r0, [r4, #0]
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	4641      	mov	r1, r8
 8006cc4:	f7fe fc4b 	bl	800555e <memmove>
 8006cc8:	68a3      	ldr	r3, [r4, #8]
 8006cca:	1b9b      	subs	r3, r3, r6
 8006ccc:	60a3      	str	r3, [r4, #8]
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	4433      	add	r3, r6
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cda:	462a      	mov	r2, r5
 8006cdc:	f000 fa0e 	bl	80070fc <_realloc_r>
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d1e0      	bne.n	8006ca8 <__ssputs_r+0x5c>
 8006ce6:	6921      	ldr	r1, [r4, #16]
 8006ce8:	4650      	mov	r0, sl
 8006cea:	f7ff fb2d 	bl	8006348 <_free_r>
 8006cee:	230c      	movs	r3, #12
 8006cf0:	f8ca 3000 	str.w	r3, [sl]
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	e7e9      	b.n	8006cd6 <__ssputs_r+0x8a>
	...

08006d04 <_svfiprintf_r>:
 8006d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d08:	4698      	mov	r8, r3
 8006d0a:	898b      	ldrh	r3, [r1, #12]
 8006d0c:	061b      	lsls	r3, r3, #24
 8006d0e:	b09d      	sub	sp, #116	@ 0x74
 8006d10:	4607      	mov	r7, r0
 8006d12:	460d      	mov	r5, r1
 8006d14:	4614      	mov	r4, r2
 8006d16:	d510      	bpl.n	8006d3a <_svfiprintf_r+0x36>
 8006d18:	690b      	ldr	r3, [r1, #16]
 8006d1a:	b973      	cbnz	r3, 8006d3a <_svfiprintf_r+0x36>
 8006d1c:	2140      	movs	r1, #64	@ 0x40
 8006d1e:	f7ff fb87 	bl	8006430 <_malloc_r>
 8006d22:	6028      	str	r0, [r5, #0]
 8006d24:	6128      	str	r0, [r5, #16]
 8006d26:	b930      	cbnz	r0, 8006d36 <_svfiprintf_r+0x32>
 8006d28:	230c      	movs	r3, #12
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d30:	b01d      	add	sp, #116	@ 0x74
 8006d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d36:	2340      	movs	r3, #64	@ 0x40
 8006d38:	616b      	str	r3, [r5, #20]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d3e:	2320      	movs	r3, #32
 8006d40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d48:	2330      	movs	r3, #48	@ 0x30
 8006d4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ee8 <_svfiprintf_r+0x1e4>
 8006d4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d52:	f04f 0901 	mov.w	r9, #1
 8006d56:	4623      	mov	r3, r4
 8006d58:	469a      	mov	sl, r3
 8006d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d5e:	b10a      	cbz	r2, 8006d64 <_svfiprintf_r+0x60>
 8006d60:	2a25      	cmp	r2, #37	@ 0x25
 8006d62:	d1f9      	bne.n	8006d58 <_svfiprintf_r+0x54>
 8006d64:	ebba 0b04 	subs.w	fp, sl, r4
 8006d68:	d00b      	beq.n	8006d82 <_svfiprintf_r+0x7e>
 8006d6a:	465b      	mov	r3, fp
 8006d6c:	4622      	mov	r2, r4
 8006d6e:	4629      	mov	r1, r5
 8006d70:	4638      	mov	r0, r7
 8006d72:	f7ff ff6b 	bl	8006c4c <__ssputs_r>
 8006d76:	3001      	adds	r0, #1
 8006d78:	f000 80a7 	beq.w	8006eca <_svfiprintf_r+0x1c6>
 8006d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d7e:	445a      	add	r2, fp
 8006d80:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d82:	f89a 3000 	ldrb.w	r3, [sl]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 809f 	beq.w	8006eca <_svfiprintf_r+0x1c6>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d96:	f10a 0a01 	add.w	sl, sl, #1
 8006d9a:	9304      	str	r3, [sp, #16]
 8006d9c:	9307      	str	r3, [sp, #28]
 8006d9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006da2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006da4:	4654      	mov	r4, sl
 8006da6:	2205      	movs	r2, #5
 8006da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dac:	484e      	ldr	r0, [pc, #312]	@ (8006ee8 <_svfiprintf_r+0x1e4>)
 8006dae:	f7f9 fa17 	bl	80001e0 <memchr>
 8006db2:	9a04      	ldr	r2, [sp, #16]
 8006db4:	b9d8      	cbnz	r0, 8006dee <_svfiprintf_r+0xea>
 8006db6:	06d0      	lsls	r0, r2, #27
 8006db8:	bf44      	itt	mi
 8006dba:	2320      	movmi	r3, #32
 8006dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dc0:	0711      	lsls	r1, r2, #28
 8006dc2:	bf44      	itt	mi
 8006dc4:	232b      	movmi	r3, #43	@ 0x2b
 8006dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dca:	f89a 3000 	ldrb.w	r3, [sl]
 8006dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dd0:	d015      	beq.n	8006dfe <_svfiprintf_r+0xfa>
 8006dd2:	9a07      	ldr	r2, [sp, #28]
 8006dd4:	4654      	mov	r4, sl
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	f04f 0c0a 	mov.w	ip, #10
 8006ddc:	4621      	mov	r1, r4
 8006dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006de2:	3b30      	subs	r3, #48	@ 0x30
 8006de4:	2b09      	cmp	r3, #9
 8006de6:	d94b      	bls.n	8006e80 <_svfiprintf_r+0x17c>
 8006de8:	b1b0      	cbz	r0, 8006e18 <_svfiprintf_r+0x114>
 8006dea:	9207      	str	r2, [sp, #28]
 8006dec:	e014      	b.n	8006e18 <_svfiprintf_r+0x114>
 8006dee:	eba0 0308 	sub.w	r3, r0, r8
 8006df2:	fa09 f303 	lsl.w	r3, r9, r3
 8006df6:	4313      	orrs	r3, r2
 8006df8:	9304      	str	r3, [sp, #16]
 8006dfa:	46a2      	mov	sl, r4
 8006dfc:	e7d2      	b.n	8006da4 <_svfiprintf_r+0xa0>
 8006dfe:	9b03      	ldr	r3, [sp, #12]
 8006e00:	1d19      	adds	r1, r3, #4
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	9103      	str	r1, [sp, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bfbb      	ittet	lt
 8006e0a:	425b      	neglt	r3, r3
 8006e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e10:	9307      	strge	r3, [sp, #28]
 8006e12:	9307      	strlt	r3, [sp, #28]
 8006e14:	bfb8      	it	lt
 8006e16:	9204      	strlt	r2, [sp, #16]
 8006e18:	7823      	ldrb	r3, [r4, #0]
 8006e1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e1c:	d10a      	bne.n	8006e34 <_svfiprintf_r+0x130>
 8006e1e:	7863      	ldrb	r3, [r4, #1]
 8006e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e22:	d132      	bne.n	8006e8a <_svfiprintf_r+0x186>
 8006e24:	9b03      	ldr	r3, [sp, #12]
 8006e26:	1d1a      	adds	r2, r3, #4
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	9203      	str	r2, [sp, #12]
 8006e2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e30:	3402      	adds	r4, #2
 8006e32:	9305      	str	r3, [sp, #20]
 8006e34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006ef8 <_svfiprintf_r+0x1f4>
 8006e38:	7821      	ldrb	r1, [r4, #0]
 8006e3a:	2203      	movs	r2, #3
 8006e3c:	4650      	mov	r0, sl
 8006e3e:	f7f9 f9cf 	bl	80001e0 <memchr>
 8006e42:	b138      	cbz	r0, 8006e54 <_svfiprintf_r+0x150>
 8006e44:	9b04      	ldr	r3, [sp, #16]
 8006e46:	eba0 000a 	sub.w	r0, r0, sl
 8006e4a:	2240      	movs	r2, #64	@ 0x40
 8006e4c:	4082      	lsls	r2, r0
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	3401      	adds	r4, #1
 8006e52:	9304      	str	r3, [sp, #16]
 8006e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e58:	4824      	ldr	r0, [pc, #144]	@ (8006eec <_svfiprintf_r+0x1e8>)
 8006e5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e5e:	2206      	movs	r2, #6
 8006e60:	f7f9 f9be 	bl	80001e0 <memchr>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d036      	beq.n	8006ed6 <_svfiprintf_r+0x1d2>
 8006e68:	4b21      	ldr	r3, [pc, #132]	@ (8006ef0 <_svfiprintf_r+0x1ec>)
 8006e6a:	bb1b      	cbnz	r3, 8006eb4 <_svfiprintf_r+0x1b0>
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	3307      	adds	r3, #7
 8006e70:	f023 0307 	bic.w	r3, r3, #7
 8006e74:	3308      	adds	r3, #8
 8006e76:	9303      	str	r3, [sp, #12]
 8006e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e7a:	4433      	add	r3, r6
 8006e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7e:	e76a      	b.n	8006d56 <_svfiprintf_r+0x52>
 8006e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e84:	460c      	mov	r4, r1
 8006e86:	2001      	movs	r0, #1
 8006e88:	e7a8      	b.n	8006ddc <_svfiprintf_r+0xd8>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	3401      	adds	r4, #1
 8006e8e:	9305      	str	r3, [sp, #20]
 8006e90:	4619      	mov	r1, r3
 8006e92:	f04f 0c0a 	mov.w	ip, #10
 8006e96:	4620      	mov	r0, r4
 8006e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e9c:	3a30      	subs	r2, #48	@ 0x30
 8006e9e:	2a09      	cmp	r2, #9
 8006ea0:	d903      	bls.n	8006eaa <_svfiprintf_r+0x1a6>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0c6      	beq.n	8006e34 <_svfiprintf_r+0x130>
 8006ea6:	9105      	str	r1, [sp, #20]
 8006ea8:	e7c4      	b.n	8006e34 <_svfiprintf_r+0x130>
 8006eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eae:	4604      	mov	r4, r0
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e7f0      	b.n	8006e96 <_svfiprintf_r+0x192>
 8006eb4:	ab03      	add	r3, sp, #12
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	462a      	mov	r2, r5
 8006eba:	4b0e      	ldr	r3, [pc, #56]	@ (8006ef4 <_svfiprintf_r+0x1f0>)
 8006ebc:	a904      	add	r1, sp, #16
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	f7fd fe70 	bl	8004ba4 <_printf_float>
 8006ec4:	1c42      	adds	r2, r0, #1
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	d1d6      	bne.n	8006e78 <_svfiprintf_r+0x174>
 8006eca:	89ab      	ldrh	r3, [r5, #12]
 8006ecc:	065b      	lsls	r3, r3, #25
 8006ece:	f53f af2d 	bmi.w	8006d2c <_svfiprintf_r+0x28>
 8006ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ed4:	e72c      	b.n	8006d30 <_svfiprintf_r+0x2c>
 8006ed6:	ab03      	add	r3, sp, #12
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	462a      	mov	r2, r5
 8006edc:	4b05      	ldr	r3, [pc, #20]	@ (8006ef4 <_svfiprintf_r+0x1f0>)
 8006ede:	a904      	add	r1, sp, #16
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	f7fe f8f7 	bl	80050d4 <_printf_i>
 8006ee6:	e7ed      	b.n	8006ec4 <_svfiprintf_r+0x1c0>
 8006ee8:	08007958 	.word	0x08007958
 8006eec:	08007962 	.word	0x08007962
 8006ef0:	08004ba5 	.word	0x08004ba5
 8006ef4:	08006c4d 	.word	0x08006c4d
 8006ef8:	0800795e 	.word	0x0800795e

08006efc <__sflush_r>:
 8006efc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	0716      	lsls	r6, r2, #28
 8006f06:	4605      	mov	r5, r0
 8006f08:	460c      	mov	r4, r1
 8006f0a:	d454      	bmi.n	8006fb6 <__sflush_r+0xba>
 8006f0c:	684b      	ldr	r3, [r1, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	dc02      	bgt.n	8006f18 <__sflush_r+0x1c>
 8006f12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	dd48      	ble.n	8006faa <__sflush_r+0xae>
 8006f18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f1a:	2e00      	cmp	r6, #0
 8006f1c:	d045      	beq.n	8006faa <__sflush_r+0xae>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f24:	682f      	ldr	r7, [r5, #0]
 8006f26:	6a21      	ldr	r1, [r4, #32]
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	d030      	beq.n	8006f8e <__sflush_r+0x92>
 8006f2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f2e:	89a3      	ldrh	r3, [r4, #12]
 8006f30:	0759      	lsls	r1, r3, #29
 8006f32:	d505      	bpl.n	8006f40 <__sflush_r+0x44>
 8006f34:	6863      	ldr	r3, [r4, #4]
 8006f36:	1ad2      	subs	r2, r2, r3
 8006f38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f3a:	b10b      	cbz	r3, 8006f40 <__sflush_r+0x44>
 8006f3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	2300      	movs	r3, #0
 8006f42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f44:	6a21      	ldr	r1, [r4, #32]
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b0      	blx	r6
 8006f4a:	1c43      	adds	r3, r0, #1
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	d106      	bne.n	8006f5e <__sflush_r+0x62>
 8006f50:	6829      	ldr	r1, [r5, #0]
 8006f52:	291d      	cmp	r1, #29
 8006f54:	d82b      	bhi.n	8006fae <__sflush_r+0xb2>
 8006f56:	4a2a      	ldr	r2, [pc, #168]	@ (8007000 <__sflush_r+0x104>)
 8006f58:	410a      	asrs	r2, r1
 8006f5a:	07d6      	lsls	r6, r2, #31
 8006f5c:	d427      	bmi.n	8006fae <__sflush_r+0xb2>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	6062      	str	r2, [r4, #4]
 8006f62:	04d9      	lsls	r1, r3, #19
 8006f64:	6922      	ldr	r2, [r4, #16]
 8006f66:	6022      	str	r2, [r4, #0]
 8006f68:	d504      	bpl.n	8006f74 <__sflush_r+0x78>
 8006f6a:	1c42      	adds	r2, r0, #1
 8006f6c:	d101      	bne.n	8006f72 <__sflush_r+0x76>
 8006f6e:	682b      	ldr	r3, [r5, #0]
 8006f70:	b903      	cbnz	r3, 8006f74 <__sflush_r+0x78>
 8006f72:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f76:	602f      	str	r7, [r5, #0]
 8006f78:	b1b9      	cbz	r1, 8006faa <__sflush_r+0xae>
 8006f7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f7e:	4299      	cmp	r1, r3
 8006f80:	d002      	beq.n	8006f88 <__sflush_r+0x8c>
 8006f82:	4628      	mov	r0, r5
 8006f84:	f7ff f9e0 	bl	8006348 <_free_r>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f8c:	e00d      	b.n	8006faa <__sflush_r+0xae>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4628      	mov	r0, r5
 8006f92:	47b0      	blx	r6
 8006f94:	4602      	mov	r2, r0
 8006f96:	1c50      	adds	r0, r2, #1
 8006f98:	d1c9      	bne.n	8006f2e <__sflush_r+0x32>
 8006f9a:	682b      	ldr	r3, [r5, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0c6      	beq.n	8006f2e <__sflush_r+0x32>
 8006fa0:	2b1d      	cmp	r3, #29
 8006fa2:	d001      	beq.n	8006fa8 <__sflush_r+0xac>
 8006fa4:	2b16      	cmp	r3, #22
 8006fa6:	d11e      	bne.n	8006fe6 <__sflush_r+0xea>
 8006fa8:	602f      	str	r7, [r5, #0]
 8006faa:	2000      	movs	r0, #0
 8006fac:	e022      	b.n	8006ff4 <__sflush_r+0xf8>
 8006fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fb2:	b21b      	sxth	r3, r3
 8006fb4:	e01b      	b.n	8006fee <__sflush_r+0xf2>
 8006fb6:	690f      	ldr	r7, [r1, #16]
 8006fb8:	2f00      	cmp	r7, #0
 8006fba:	d0f6      	beq.n	8006faa <__sflush_r+0xae>
 8006fbc:	0793      	lsls	r3, r2, #30
 8006fbe:	680e      	ldr	r6, [r1, #0]
 8006fc0:	bf08      	it	eq
 8006fc2:	694b      	ldreq	r3, [r1, #20]
 8006fc4:	600f      	str	r7, [r1, #0]
 8006fc6:	bf18      	it	ne
 8006fc8:	2300      	movne	r3, #0
 8006fca:	eba6 0807 	sub.w	r8, r6, r7
 8006fce:	608b      	str	r3, [r1, #8]
 8006fd0:	f1b8 0f00 	cmp.w	r8, #0
 8006fd4:	dde9      	ble.n	8006faa <__sflush_r+0xae>
 8006fd6:	6a21      	ldr	r1, [r4, #32]
 8006fd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006fda:	4643      	mov	r3, r8
 8006fdc:	463a      	mov	r2, r7
 8006fde:	4628      	mov	r0, r5
 8006fe0:	47b0      	blx	r6
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	dc08      	bgt.n	8006ff8 <__sflush_r+0xfc>
 8006fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fee:	81a3      	strh	r3, [r4, #12]
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff8:	4407      	add	r7, r0
 8006ffa:	eba8 0800 	sub.w	r8, r8, r0
 8006ffe:	e7e7      	b.n	8006fd0 <__sflush_r+0xd4>
 8007000:	dfbffffe 	.word	0xdfbffffe

08007004 <_fflush_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	690b      	ldr	r3, [r1, #16]
 8007008:	4605      	mov	r5, r0
 800700a:	460c      	mov	r4, r1
 800700c:	b913      	cbnz	r3, 8007014 <_fflush_r+0x10>
 800700e:	2500      	movs	r5, #0
 8007010:	4628      	mov	r0, r5
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	b118      	cbz	r0, 800701e <_fflush_r+0x1a>
 8007016:	6a03      	ldr	r3, [r0, #32]
 8007018:	b90b      	cbnz	r3, 800701e <_fflush_r+0x1a>
 800701a:	f7fe fa07 	bl	800542c <__sinit>
 800701e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0f3      	beq.n	800700e <_fflush_r+0xa>
 8007026:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007028:	07d0      	lsls	r0, r2, #31
 800702a:	d404      	bmi.n	8007036 <_fflush_r+0x32>
 800702c:	0599      	lsls	r1, r3, #22
 800702e:	d402      	bmi.n	8007036 <_fflush_r+0x32>
 8007030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007032:	f7fe fb2c 	bl	800568e <__retarget_lock_acquire_recursive>
 8007036:	4628      	mov	r0, r5
 8007038:	4621      	mov	r1, r4
 800703a:	f7ff ff5f 	bl	8006efc <__sflush_r>
 800703e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007040:	07da      	lsls	r2, r3, #31
 8007042:	4605      	mov	r5, r0
 8007044:	d4e4      	bmi.n	8007010 <_fflush_r+0xc>
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	059b      	lsls	r3, r3, #22
 800704a:	d4e1      	bmi.n	8007010 <_fflush_r+0xc>
 800704c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800704e:	f7fe fb1f 	bl	8005690 <__retarget_lock_release_recursive>
 8007052:	e7dd      	b.n	8007010 <_fflush_r+0xc>

08007054 <_sbrk_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4d06      	ldr	r5, [pc, #24]	@ (8007070 <_sbrk_r+0x1c>)
 8007058:	2300      	movs	r3, #0
 800705a:	4604      	mov	r4, r0
 800705c:	4608      	mov	r0, r1
 800705e:	602b      	str	r3, [r5, #0]
 8007060:	f7fa fd4c 	bl	8001afc <_sbrk>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_sbrk_r+0x1a>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_sbrk_r+0x1a>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	20000828 	.word	0x20000828

08007074 <__assert_func>:
 8007074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007076:	4614      	mov	r4, r2
 8007078:	461a      	mov	r2, r3
 800707a:	4b09      	ldr	r3, [pc, #36]	@ (80070a0 <__assert_func+0x2c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4605      	mov	r5, r0
 8007080:	68d8      	ldr	r0, [r3, #12]
 8007082:	b954      	cbnz	r4, 800709a <__assert_func+0x26>
 8007084:	4b07      	ldr	r3, [pc, #28]	@ (80070a4 <__assert_func+0x30>)
 8007086:	461c      	mov	r4, r3
 8007088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800708c:	9100      	str	r1, [sp, #0]
 800708e:	462b      	mov	r3, r5
 8007090:	4905      	ldr	r1, [pc, #20]	@ (80070a8 <__assert_func+0x34>)
 8007092:	f000 f86f 	bl	8007174 <fiprintf>
 8007096:	f000 f87f 	bl	8007198 <abort>
 800709a:	4b04      	ldr	r3, [pc, #16]	@ (80070ac <__assert_func+0x38>)
 800709c:	e7f4      	b.n	8007088 <__assert_func+0x14>
 800709e:	bf00      	nop
 80070a0:	20000018 	.word	0x20000018
 80070a4:	080079ae 	.word	0x080079ae
 80070a8:	08007980 	.word	0x08007980
 80070ac:	08007973 	.word	0x08007973

080070b0 <_calloc_r>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	fba1 5402 	umull	r5, r4, r1, r2
 80070b6:	b93c      	cbnz	r4, 80070c8 <_calloc_r+0x18>
 80070b8:	4629      	mov	r1, r5
 80070ba:	f7ff f9b9 	bl	8006430 <_malloc_r>
 80070be:	4606      	mov	r6, r0
 80070c0:	b928      	cbnz	r0, 80070ce <_calloc_r+0x1e>
 80070c2:	2600      	movs	r6, #0
 80070c4:	4630      	mov	r0, r6
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	220c      	movs	r2, #12
 80070ca:	6002      	str	r2, [r0, #0]
 80070cc:	e7f9      	b.n	80070c2 <_calloc_r+0x12>
 80070ce:	462a      	mov	r2, r5
 80070d0:	4621      	mov	r1, r4
 80070d2:	f7fe fa5e 	bl	8005592 <memset>
 80070d6:	e7f5      	b.n	80070c4 <_calloc_r+0x14>

080070d8 <__ascii_mbtowc>:
 80070d8:	b082      	sub	sp, #8
 80070da:	b901      	cbnz	r1, 80070de <__ascii_mbtowc+0x6>
 80070dc:	a901      	add	r1, sp, #4
 80070de:	b142      	cbz	r2, 80070f2 <__ascii_mbtowc+0x1a>
 80070e0:	b14b      	cbz	r3, 80070f6 <__ascii_mbtowc+0x1e>
 80070e2:	7813      	ldrb	r3, [r2, #0]
 80070e4:	600b      	str	r3, [r1, #0]
 80070e6:	7812      	ldrb	r2, [r2, #0]
 80070e8:	1e10      	subs	r0, r2, #0
 80070ea:	bf18      	it	ne
 80070ec:	2001      	movne	r0, #1
 80070ee:	b002      	add	sp, #8
 80070f0:	4770      	bx	lr
 80070f2:	4610      	mov	r0, r2
 80070f4:	e7fb      	b.n	80070ee <__ascii_mbtowc+0x16>
 80070f6:	f06f 0001 	mvn.w	r0, #1
 80070fa:	e7f8      	b.n	80070ee <__ascii_mbtowc+0x16>

080070fc <_realloc_r>:
 80070fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007100:	4680      	mov	r8, r0
 8007102:	4615      	mov	r5, r2
 8007104:	460c      	mov	r4, r1
 8007106:	b921      	cbnz	r1, 8007112 <_realloc_r+0x16>
 8007108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800710c:	4611      	mov	r1, r2
 800710e:	f7ff b98f 	b.w	8006430 <_malloc_r>
 8007112:	b92a      	cbnz	r2, 8007120 <_realloc_r+0x24>
 8007114:	f7ff f918 	bl	8006348 <_free_r>
 8007118:	2400      	movs	r4, #0
 800711a:	4620      	mov	r0, r4
 800711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007120:	f000 f841 	bl	80071a6 <_malloc_usable_size_r>
 8007124:	4285      	cmp	r5, r0
 8007126:	4606      	mov	r6, r0
 8007128:	d802      	bhi.n	8007130 <_realloc_r+0x34>
 800712a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800712e:	d8f4      	bhi.n	800711a <_realloc_r+0x1e>
 8007130:	4629      	mov	r1, r5
 8007132:	4640      	mov	r0, r8
 8007134:	f7ff f97c 	bl	8006430 <_malloc_r>
 8007138:	4607      	mov	r7, r0
 800713a:	2800      	cmp	r0, #0
 800713c:	d0ec      	beq.n	8007118 <_realloc_r+0x1c>
 800713e:	42b5      	cmp	r5, r6
 8007140:	462a      	mov	r2, r5
 8007142:	4621      	mov	r1, r4
 8007144:	bf28      	it	cs
 8007146:	4632      	movcs	r2, r6
 8007148:	f7fe faa3 	bl	8005692 <memcpy>
 800714c:	4621      	mov	r1, r4
 800714e:	4640      	mov	r0, r8
 8007150:	f7ff f8fa 	bl	8006348 <_free_r>
 8007154:	463c      	mov	r4, r7
 8007156:	e7e0      	b.n	800711a <_realloc_r+0x1e>

08007158 <__ascii_wctomb>:
 8007158:	4603      	mov	r3, r0
 800715a:	4608      	mov	r0, r1
 800715c:	b141      	cbz	r1, 8007170 <__ascii_wctomb+0x18>
 800715e:	2aff      	cmp	r2, #255	@ 0xff
 8007160:	d904      	bls.n	800716c <__ascii_wctomb+0x14>
 8007162:	228a      	movs	r2, #138	@ 0x8a
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	f04f 30ff 	mov.w	r0, #4294967295
 800716a:	4770      	bx	lr
 800716c:	700a      	strb	r2, [r1, #0]
 800716e:	2001      	movs	r0, #1
 8007170:	4770      	bx	lr
	...

08007174 <fiprintf>:
 8007174:	b40e      	push	{r1, r2, r3}
 8007176:	b503      	push	{r0, r1, lr}
 8007178:	4601      	mov	r1, r0
 800717a:	ab03      	add	r3, sp, #12
 800717c:	4805      	ldr	r0, [pc, #20]	@ (8007194 <fiprintf+0x20>)
 800717e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007182:	6800      	ldr	r0, [r0, #0]
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	f000 f83f 	bl	8007208 <_vfiprintf_r>
 800718a:	b002      	add	sp, #8
 800718c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007190:	b003      	add	sp, #12
 8007192:	4770      	bx	lr
 8007194:	20000018 	.word	0x20000018

08007198 <abort>:
 8007198:	b508      	push	{r3, lr}
 800719a:	2006      	movs	r0, #6
 800719c:	f000 fa08 	bl	80075b0 <raise>
 80071a0:	2001      	movs	r0, #1
 80071a2:	f7fa fc33 	bl	8001a0c <_exit>

080071a6 <_malloc_usable_size_r>:
 80071a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071aa:	1f18      	subs	r0, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bfbc      	itt	lt
 80071b0:	580b      	ldrlt	r3, [r1, r0]
 80071b2:	18c0      	addlt	r0, r0, r3
 80071b4:	4770      	bx	lr

080071b6 <__sfputc_r>:
 80071b6:	6893      	ldr	r3, [r2, #8]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	b410      	push	{r4}
 80071be:	6093      	str	r3, [r2, #8]
 80071c0:	da08      	bge.n	80071d4 <__sfputc_r+0x1e>
 80071c2:	6994      	ldr	r4, [r2, #24]
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	db01      	blt.n	80071cc <__sfputc_r+0x16>
 80071c8:	290a      	cmp	r1, #10
 80071ca:	d103      	bne.n	80071d4 <__sfputc_r+0x1e>
 80071cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071d0:	f000 b932 	b.w	8007438 <__swbuf_r>
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	1c58      	adds	r0, r3, #1
 80071d8:	6010      	str	r0, [r2, #0]
 80071da:	7019      	strb	r1, [r3, #0]
 80071dc:	4608      	mov	r0, r1
 80071de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <__sfputs_r>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	4606      	mov	r6, r0
 80071e8:	460f      	mov	r7, r1
 80071ea:	4614      	mov	r4, r2
 80071ec:	18d5      	adds	r5, r2, r3
 80071ee:	42ac      	cmp	r4, r5
 80071f0:	d101      	bne.n	80071f6 <__sfputs_r+0x12>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e007      	b.n	8007206 <__sfputs_r+0x22>
 80071f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071fa:	463a      	mov	r2, r7
 80071fc:	4630      	mov	r0, r6
 80071fe:	f7ff ffda 	bl	80071b6 <__sfputc_r>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	d1f3      	bne.n	80071ee <__sfputs_r+0xa>
 8007206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007208 <_vfiprintf_r>:
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	460d      	mov	r5, r1
 800720e:	b09d      	sub	sp, #116	@ 0x74
 8007210:	4614      	mov	r4, r2
 8007212:	4698      	mov	r8, r3
 8007214:	4606      	mov	r6, r0
 8007216:	b118      	cbz	r0, 8007220 <_vfiprintf_r+0x18>
 8007218:	6a03      	ldr	r3, [r0, #32]
 800721a:	b90b      	cbnz	r3, 8007220 <_vfiprintf_r+0x18>
 800721c:	f7fe f906 	bl	800542c <__sinit>
 8007220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007222:	07d9      	lsls	r1, r3, #31
 8007224:	d405      	bmi.n	8007232 <_vfiprintf_r+0x2a>
 8007226:	89ab      	ldrh	r3, [r5, #12]
 8007228:	059a      	lsls	r2, r3, #22
 800722a:	d402      	bmi.n	8007232 <_vfiprintf_r+0x2a>
 800722c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800722e:	f7fe fa2e 	bl	800568e <__retarget_lock_acquire_recursive>
 8007232:	89ab      	ldrh	r3, [r5, #12]
 8007234:	071b      	lsls	r3, r3, #28
 8007236:	d501      	bpl.n	800723c <_vfiprintf_r+0x34>
 8007238:	692b      	ldr	r3, [r5, #16]
 800723a:	b99b      	cbnz	r3, 8007264 <_vfiprintf_r+0x5c>
 800723c:	4629      	mov	r1, r5
 800723e:	4630      	mov	r0, r6
 8007240:	f000 f938 	bl	80074b4 <__swsetup_r>
 8007244:	b170      	cbz	r0, 8007264 <_vfiprintf_r+0x5c>
 8007246:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007248:	07dc      	lsls	r4, r3, #31
 800724a:	d504      	bpl.n	8007256 <_vfiprintf_r+0x4e>
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	b01d      	add	sp, #116	@ 0x74
 8007252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007256:	89ab      	ldrh	r3, [r5, #12]
 8007258:	0598      	lsls	r0, r3, #22
 800725a:	d4f7      	bmi.n	800724c <_vfiprintf_r+0x44>
 800725c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800725e:	f7fe fa17 	bl	8005690 <__retarget_lock_release_recursive>
 8007262:	e7f3      	b.n	800724c <_vfiprintf_r+0x44>
 8007264:	2300      	movs	r3, #0
 8007266:	9309      	str	r3, [sp, #36]	@ 0x24
 8007268:	2320      	movs	r3, #32
 800726a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800726e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007272:	2330      	movs	r3, #48	@ 0x30
 8007274:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007424 <_vfiprintf_r+0x21c>
 8007278:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800727c:	f04f 0901 	mov.w	r9, #1
 8007280:	4623      	mov	r3, r4
 8007282:	469a      	mov	sl, r3
 8007284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007288:	b10a      	cbz	r2, 800728e <_vfiprintf_r+0x86>
 800728a:	2a25      	cmp	r2, #37	@ 0x25
 800728c:	d1f9      	bne.n	8007282 <_vfiprintf_r+0x7a>
 800728e:	ebba 0b04 	subs.w	fp, sl, r4
 8007292:	d00b      	beq.n	80072ac <_vfiprintf_r+0xa4>
 8007294:	465b      	mov	r3, fp
 8007296:	4622      	mov	r2, r4
 8007298:	4629      	mov	r1, r5
 800729a:	4630      	mov	r0, r6
 800729c:	f7ff ffa2 	bl	80071e4 <__sfputs_r>
 80072a0:	3001      	adds	r0, #1
 80072a2:	f000 80a7 	beq.w	80073f4 <_vfiprintf_r+0x1ec>
 80072a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072a8:	445a      	add	r2, fp
 80072aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80072ac:	f89a 3000 	ldrb.w	r3, [sl]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 809f 	beq.w	80073f4 <_vfiprintf_r+0x1ec>
 80072b6:	2300      	movs	r3, #0
 80072b8:	f04f 32ff 	mov.w	r2, #4294967295
 80072bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072c0:	f10a 0a01 	add.w	sl, sl, #1
 80072c4:	9304      	str	r3, [sp, #16]
 80072c6:	9307      	str	r3, [sp, #28]
 80072c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80072ce:	4654      	mov	r4, sl
 80072d0:	2205      	movs	r2, #5
 80072d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d6:	4853      	ldr	r0, [pc, #332]	@ (8007424 <_vfiprintf_r+0x21c>)
 80072d8:	f7f8 ff82 	bl	80001e0 <memchr>
 80072dc:	9a04      	ldr	r2, [sp, #16]
 80072de:	b9d8      	cbnz	r0, 8007318 <_vfiprintf_r+0x110>
 80072e0:	06d1      	lsls	r1, r2, #27
 80072e2:	bf44      	itt	mi
 80072e4:	2320      	movmi	r3, #32
 80072e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072ea:	0713      	lsls	r3, r2, #28
 80072ec:	bf44      	itt	mi
 80072ee:	232b      	movmi	r3, #43	@ 0x2b
 80072f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072f4:	f89a 3000 	ldrb.w	r3, [sl]
 80072f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80072fa:	d015      	beq.n	8007328 <_vfiprintf_r+0x120>
 80072fc:	9a07      	ldr	r2, [sp, #28]
 80072fe:	4654      	mov	r4, sl
 8007300:	2000      	movs	r0, #0
 8007302:	f04f 0c0a 	mov.w	ip, #10
 8007306:	4621      	mov	r1, r4
 8007308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800730c:	3b30      	subs	r3, #48	@ 0x30
 800730e:	2b09      	cmp	r3, #9
 8007310:	d94b      	bls.n	80073aa <_vfiprintf_r+0x1a2>
 8007312:	b1b0      	cbz	r0, 8007342 <_vfiprintf_r+0x13a>
 8007314:	9207      	str	r2, [sp, #28]
 8007316:	e014      	b.n	8007342 <_vfiprintf_r+0x13a>
 8007318:	eba0 0308 	sub.w	r3, r0, r8
 800731c:	fa09 f303 	lsl.w	r3, r9, r3
 8007320:	4313      	orrs	r3, r2
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	46a2      	mov	sl, r4
 8007326:	e7d2      	b.n	80072ce <_vfiprintf_r+0xc6>
 8007328:	9b03      	ldr	r3, [sp, #12]
 800732a:	1d19      	adds	r1, r3, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	9103      	str	r1, [sp, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	bfbb      	ittet	lt
 8007334:	425b      	neglt	r3, r3
 8007336:	f042 0202 	orrlt.w	r2, r2, #2
 800733a:	9307      	strge	r3, [sp, #28]
 800733c:	9307      	strlt	r3, [sp, #28]
 800733e:	bfb8      	it	lt
 8007340:	9204      	strlt	r2, [sp, #16]
 8007342:	7823      	ldrb	r3, [r4, #0]
 8007344:	2b2e      	cmp	r3, #46	@ 0x2e
 8007346:	d10a      	bne.n	800735e <_vfiprintf_r+0x156>
 8007348:	7863      	ldrb	r3, [r4, #1]
 800734a:	2b2a      	cmp	r3, #42	@ 0x2a
 800734c:	d132      	bne.n	80073b4 <_vfiprintf_r+0x1ac>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	1d1a      	adds	r2, r3, #4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	9203      	str	r2, [sp, #12]
 8007356:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800735a:	3402      	adds	r4, #2
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007434 <_vfiprintf_r+0x22c>
 8007362:	7821      	ldrb	r1, [r4, #0]
 8007364:	2203      	movs	r2, #3
 8007366:	4650      	mov	r0, sl
 8007368:	f7f8 ff3a 	bl	80001e0 <memchr>
 800736c:	b138      	cbz	r0, 800737e <_vfiprintf_r+0x176>
 800736e:	9b04      	ldr	r3, [sp, #16]
 8007370:	eba0 000a 	sub.w	r0, r0, sl
 8007374:	2240      	movs	r2, #64	@ 0x40
 8007376:	4082      	lsls	r2, r0
 8007378:	4313      	orrs	r3, r2
 800737a:	3401      	adds	r4, #1
 800737c:	9304      	str	r3, [sp, #16]
 800737e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007382:	4829      	ldr	r0, [pc, #164]	@ (8007428 <_vfiprintf_r+0x220>)
 8007384:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007388:	2206      	movs	r2, #6
 800738a:	f7f8 ff29 	bl	80001e0 <memchr>
 800738e:	2800      	cmp	r0, #0
 8007390:	d03f      	beq.n	8007412 <_vfiprintf_r+0x20a>
 8007392:	4b26      	ldr	r3, [pc, #152]	@ (800742c <_vfiprintf_r+0x224>)
 8007394:	bb1b      	cbnz	r3, 80073de <_vfiprintf_r+0x1d6>
 8007396:	9b03      	ldr	r3, [sp, #12]
 8007398:	3307      	adds	r3, #7
 800739a:	f023 0307 	bic.w	r3, r3, #7
 800739e:	3308      	adds	r3, #8
 80073a0:	9303      	str	r3, [sp, #12]
 80073a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a4:	443b      	add	r3, r7
 80073a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a8:	e76a      	b.n	8007280 <_vfiprintf_r+0x78>
 80073aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ae:	460c      	mov	r4, r1
 80073b0:	2001      	movs	r0, #1
 80073b2:	e7a8      	b.n	8007306 <_vfiprintf_r+0xfe>
 80073b4:	2300      	movs	r3, #0
 80073b6:	3401      	adds	r4, #1
 80073b8:	9305      	str	r3, [sp, #20]
 80073ba:	4619      	mov	r1, r3
 80073bc:	f04f 0c0a 	mov.w	ip, #10
 80073c0:	4620      	mov	r0, r4
 80073c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073c6:	3a30      	subs	r2, #48	@ 0x30
 80073c8:	2a09      	cmp	r2, #9
 80073ca:	d903      	bls.n	80073d4 <_vfiprintf_r+0x1cc>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0c6      	beq.n	800735e <_vfiprintf_r+0x156>
 80073d0:	9105      	str	r1, [sp, #20]
 80073d2:	e7c4      	b.n	800735e <_vfiprintf_r+0x156>
 80073d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80073d8:	4604      	mov	r4, r0
 80073da:	2301      	movs	r3, #1
 80073dc:	e7f0      	b.n	80073c0 <_vfiprintf_r+0x1b8>
 80073de:	ab03      	add	r3, sp, #12
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	462a      	mov	r2, r5
 80073e4:	4b12      	ldr	r3, [pc, #72]	@ (8007430 <_vfiprintf_r+0x228>)
 80073e6:	a904      	add	r1, sp, #16
 80073e8:	4630      	mov	r0, r6
 80073ea:	f7fd fbdb 	bl	8004ba4 <_printf_float>
 80073ee:	4607      	mov	r7, r0
 80073f0:	1c78      	adds	r0, r7, #1
 80073f2:	d1d6      	bne.n	80073a2 <_vfiprintf_r+0x19a>
 80073f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073f6:	07d9      	lsls	r1, r3, #31
 80073f8:	d405      	bmi.n	8007406 <_vfiprintf_r+0x1fe>
 80073fa:	89ab      	ldrh	r3, [r5, #12]
 80073fc:	059a      	lsls	r2, r3, #22
 80073fe:	d402      	bmi.n	8007406 <_vfiprintf_r+0x1fe>
 8007400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007402:	f7fe f945 	bl	8005690 <__retarget_lock_release_recursive>
 8007406:	89ab      	ldrh	r3, [r5, #12]
 8007408:	065b      	lsls	r3, r3, #25
 800740a:	f53f af1f 	bmi.w	800724c <_vfiprintf_r+0x44>
 800740e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007410:	e71e      	b.n	8007250 <_vfiprintf_r+0x48>
 8007412:	ab03      	add	r3, sp, #12
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	462a      	mov	r2, r5
 8007418:	4b05      	ldr	r3, [pc, #20]	@ (8007430 <_vfiprintf_r+0x228>)
 800741a:	a904      	add	r1, sp, #16
 800741c:	4630      	mov	r0, r6
 800741e:	f7fd fe59 	bl	80050d4 <_printf_i>
 8007422:	e7e4      	b.n	80073ee <_vfiprintf_r+0x1e6>
 8007424:	08007958 	.word	0x08007958
 8007428:	08007962 	.word	0x08007962
 800742c:	08004ba5 	.word	0x08004ba5
 8007430:	080071e5 	.word	0x080071e5
 8007434:	0800795e 	.word	0x0800795e

08007438 <__swbuf_r>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	460e      	mov	r6, r1
 800743c:	4614      	mov	r4, r2
 800743e:	4605      	mov	r5, r0
 8007440:	b118      	cbz	r0, 800744a <__swbuf_r+0x12>
 8007442:	6a03      	ldr	r3, [r0, #32]
 8007444:	b90b      	cbnz	r3, 800744a <__swbuf_r+0x12>
 8007446:	f7fd fff1 	bl	800542c <__sinit>
 800744a:	69a3      	ldr	r3, [r4, #24]
 800744c:	60a3      	str	r3, [r4, #8]
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	071a      	lsls	r2, r3, #28
 8007452:	d501      	bpl.n	8007458 <__swbuf_r+0x20>
 8007454:	6923      	ldr	r3, [r4, #16]
 8007456:	b943      	cbnz	r3, 800746a <__swbuf_r+0x32>
 8007458:	4621      	mov	r1, r4
 800745a:	4628      	mov	r0, r5
 800745c:	f000 f82a 	bl	80074b4 <__swsetup_r>
 8007460:	b118      	cbz	r0, 800746a <__swbuf_r+0x32>
 8007462:	f04f 37ff 	mov.w	r7, #4294967295
 8007466:	4638      	mov	r0, r7
 8007468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	6922      	ldr	r2, [r4, #16]
 800746e:	1a98      	subs	r0, r3, r2
 8007470:	6963      	ldr	r3, [r4, #20]
 8007472:	b2f6      	uxtb	r6, r6
 8007474:	4283      	cmp	r3, r0
 8007476:	4637      	mov	r7, r6
 8007478:	dc05      	bgt.n	8007486 <__swbuf_r+0x4e>
 800747a:	4621      	mov	r1, r4
 800747c:	4628      	mov	r0, r5
 800747e:	f7ff fdc1 	bl	8007004 <_fflush_r>
 8007482:	2800      	cmp	r0, #0
 8007484:	d1ed      	bne.n	8007462 <__swbuf_r+0x2a>
 8007486:	68a3      	ldr	r3, [r4, #8]
 8007488:	3b01      	subs	r3, #1
 800748a:	60a3      	str	r3, [r4, #8]
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	6022      	str	r2, [r4, #0]
 8007492:	701e      	strb	r6, [r3, #0]
 8007494:	6962      	ldr	r2, [r4, #20]
 8007496:	1c43      	adds	r3, r0, #1
 8007498:	429a      	cmp	r2, r3
 800749a:	d004      	beq.n	80074a6 <__swbuf_r+0x6e>
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	07db      	lsls	r3, r3, #31
 80074a0:	d5e1      	bpl.n	8007466 <__swbuf_r+0x2e>
 80074a2:	2e0a      	cmp	r6, #10
 80074a4:	d1df      	bne.n	8007466 <__swbuf_r+0x2e>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	f7ff fdab 	bl	8007004 <_fflush_r>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d0d9      	beq.n	8007466 <__swbuf_r+0x2e>
 80074b2:	e7d6      	b.n	8007462 <__swbuf_r+0x2a>

080074b4 <__swsetup_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4b29      	ldr	r3, [pc, #164]	@ (800755c <__swsetup_r+0xa8>)
 80074b8:	4605      	mov	r5, r0
 80074ba:	6818      	ldr	r0, [r3, #0]
 80074bc:	460c      	mov	r4, r1
 80074be:	b118      	cbz	r0, 80074c8 <__swsetup_r+0x14>
 80074c0:	6a03      	ldr	r3, [r0, #32]
 80074c2:	b90b      	cbnz	r3, 80074c8 <__swsetup_r+0x14>
 80074c4:	f7fd ffb2 	bl	800542c <__sinit>
 80074c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074cc:	0719      	lsls	r1, r3, #28
 80074ce:	d422      	bmi.n	8007516 <__swsetup_r+0x62>
 80074d0:	06da      	lsls	r2, r3, #27
 80074d2:	d407      	bmi.n	80074e4 <__swsetup_r+0x30>
 80074d4:	2209      	movs	r2, #9
 80074d6:	602a      	str	r2, [r5, #0]
 80074d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074dc:	81a3      	strh	r3, [r4, #12]
 80074de:	f04f 30ff 	mov.w	r0, #4294967295
 80074e2:	e033      	b.n	800754c <__swsetup_r+0x98>
 80074e4:	0758      	lsls	r0, r3, #29
 80074e6:	d512      	bpl.n	800750e <__swsetup_r+0x5a>
 80074e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074ea:	b141      	cbz	r1, 80074fe <__swsetup_r+0x4a>
 80074ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074f0:	4299      	cmp	r1, r3
 80074f2:	d002      	beq.n	80074fa <__swsetup_r+0x46>
 80074f4:	4628      	mov	r0, r5
 80074f6:	f7fe ff27 	bl	8006348 <_free_r>
 80074fa:	2300      	movs	r3, #0
 80074fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007504:	81a3      	strh	r3, [r4, #12]
 8007506:	2300      	movs	r3, #0
 8007508:	6063      	str	r3, [r4, #4]
 800750a:	6923      	ldr	r3, [r4, #16]
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	f043 0308 	orr.w	r3, r3, #8
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	6923      	ldr	r3, [r4, #16]
 8007518:	b94b      	cbnz	r3, 800752e <__swsetup_r+0x7a>
 800751a:	89a3      	ldrh	r3, [r4, #12]
 800751c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007524:	d003      	beq.n	800752e <__swsetup_r+0x7a>
 8007526:	4621      	mov	r1, r4
 8007528:	4628      	mov	r0, r5
 800752a:	f000 f883 	bl	8007634 <__smakebuf_r>
 800752e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007532:	f013 0201 	ands.w	r2, r3, #1
 8007536:	d00a      	beq.n	800754e <__swsetup_r+0x9a>
 8007538:	2200      	movs	r2, #0
 800753a:	60a2      	str	r2, [r4, #8]
 800753c:	6962      	ldr	r2, [r4, #20]
 800753e:	4252      	negs	r2, r2
 8007540:	61a2      	str	r2, [r4, #24]
 8007542:	6922      	ldr	r2, [r4, #16]
 8007544:	b942      	cbnz	r2, 8007558 <__swsetup_r+0xa4>
 8007546:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800754a:	d1c5      	bne.n	80074d8 <__swsetup_r+0x24>
 800754c:	bd38      	pop	{r3, r4, r5, pc}
 800754e:	0799      	lsls	r1, r3, #30
 8007550:	bf58      	it	pl
 8007552:	6962      	ldrpl	r2, [r4, #20]
 8007554:	60a2      	str	r2, [r4, #8]
 8007556:	e7f4      	b.n	8007542 <__swsetup_r+0x8e>
 8007558:	2000      	movs	r0, #0
 800755a:	e7f7      	b.n	800754c <__swsetup_r+0x98>
 800755c:	20000018 	.word	0x20000018

08007560 <_raise_r>:
 8007560:	291f      	cmp	r1, #31
 8007562:	b538      	push	{r3, r4, r5, lr}
 8007564:	4605      	mov	r5, r0
 8007566:	460c      	mov	r4, r1
 8007568:	d904      	bls.n	8007574 <_raise_r+0x14>
 800756a:	2316      	movs	r3, #22
 800756c:	6003      	str	r3, [r0, #0]
 800756e:	f04f 30ff 	mov.w	r0, #4294967295
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007576:	b112      	cbz	r2, 800757e <_raise_r+0x1e>
 8007578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800757c:	b94b      	cbnz	r3, 8007592 <_raise_r+0x32>
 800757e:	4628      	mov	r0, r5
 8007580:	f000 f830 	bl	80075e4 <_getpid_r>
 8007584:	4622      	mov	r2, r4
 8007586:	4601      	mov	r1, r0
 8007588:	4628      	mov	r0, r5
 800758a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800758e:	f000 b817 	b.w	80075c0 <_kill_r>
 8007592:	2b01      	cmp	r3, #1
 8007594:	d00a      	beq.n	80075ac <_raise_r+0x4c>
 8007596:	1c59      	adds	r1, r3, #1
 8007598:	d103      	bne.n	80075a2 <_raise_r+0x42>
 800759a:	2316      	movs	r3, #22
 800759c:	6003      	str	r3, [r0, #0]
 800759e:	2001      	movs	r0, #1
 80075a0:	e7e7      	b.n	8007572 <_raise_r+0x12>
 80075a2:	2100      	movs	r1, #0
 80075a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80075a8:	4620      	mov	r0, r4
 80075aa:	4798      	blx	r3
 80075ac:	2000      	movs	r0, #0
 80075ae:	e7e0      	b.n	8007572 <_raise_r+0x12>

080075b0 <raise>:
 80075b0:	4b02      	ldr	r3, [pc, #8]	@ (80075bc <raise+0xc>)
 80075b2:	4601      	mov	r1, r0
 80075b4:	6818      	ldr	r0, [r3, #0]
 80075b6:	f7ff bfd3 	b.w	8007560 <_raise_r>
 80075ba:	bf00      	nop
 80075bc:	20000018 	.word	0x20000018

080075c0 <_kill_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d07      	ldr	r5, [pc, #28]	@ (80075e0 <_kill_r+0x20>)
 80075c4:	2300      	movs	r3, #0
 80075c6:	4604      	mov	r4, r0
 80075c8:	4608      	mov	r0, r1
 80075ca:	4611      	mov	r1, r2
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	f7fa fa0d 	bl	80019ec <_kill>
 80075d2:	1c43      	adds	r3, r0, #1
 80075d4:	d102      	bne.n	80075dc <_kill_r+0x1c>
 80075d6:	682b      	ldr	r3, [r5, #0]
 80075d8:	b103      	cbz	r3, 80075dc <_kill_r+0x1c>
 80075da:	6023      	str	r3, [r4, #0]
 80075dc:	bd38      	pop	{r3, r4, r5, pc}
 80075de:	bf00      	nop
 80075e0:	20000828 	.word	0x20000828

080075e4 <_getpid_r>:
 80075e4:	f7fa b9fa 	b.w	80019dc <_getpid>

080075e8 <__swhatbuf_r>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	460c      	mov	r4, r1
 80075ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f0:	2900      	cmp	r1, #0
 80075f2:	b096      	sub	sp, #88	@ 0x58
 80075f4:	4615      	mov	r5, r2
 80075f6:	461e      	mov	r6, r3
 80075f8:	da0d      	bge.n	8007616 <__swhatbuf_r+0x2e>
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007600:	f04f 0100 	mov.w	r1, #0
 8007604:	bf14      	ite	ne
 8007606:	2340      	movne	r3, #64	@ 0x40
 8007608:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800760c:	2000      	movs	r0, #0
 800760e:	6031      	str	r1, [r6, #0]
 8007610:	602b      	str	r3, [r5, #0]
 8007612:	b016      	add	sp, #88	@ 0x58
 8007614:	bd70      	pop	{r4, r5, r6, pc}
 8007616:	466a      	mov	r2, sp
 8007618:	f000 f848 	bl	80076ac <_fstat_r>
 800761c:	2800      	cmp	r0, #0
 800761e:	dbec      	blt.n	80075fa <__swhatbuf_r+0x12>
 8007620:	9901      	ldr	r1, [sp, #4]
 8007622:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007626:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800762a:	4259      	negs	r1, r3
 800762c:	4159      	adcs	r1, r3
 800762e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007632:	e7eb      	b.n	800760c <__swhatbuf_r+0x24>

08007634 <__smakebuf_r>:
 8007634:	898b      	ldrh	r3, [r1, #12]
 8007636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007638:	079d      	lsls	r5, r3, #30
 800763a:	4606      	mov	r6, r0
 800763c:	460c      	mov	r4, r1
 800763e:	d507      	bpl.n	8007650 <__smakebuf_r+0x1c>
 8007640:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	6123      	str	r3, [r4, #16]
 8007648:	2301      	movs	r3, #1
 800764a:	6163      	str	r3, [r4, #20]
 800764c:	b003      	add	sp, #12
 800764e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007650:	ab01      	add	r3, sp, #4
 8007652:	466a      	mov	r2, sp
 8007654:	f7ff ffc8 	bl	80075e8 <__swhatbuf_r>
 8007658:	9f00      	ldr	r7, [sp, #0]
 800765a:	4605      	mov	r5, r0
 800765c:	4639      	mov	r1, r7
 800765e:	4630      	mov	r0, r6
 8007660:	f7fe fee6 	bl	8006430 <_malloc_r>
 8007664:	b948      	cbnz	r0, 800767a <__smakebuf_r+0x46>
 8007666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800766a:	059a      	lsls	r2, r3, #22
 800766c:	d4ee      	bmi.n	800764c <__smakebuf_r+0x18>
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	f043 0302 	orr.w	r3, r3, #2
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	e7e2      	b.n	8007640 <__smakebuf_r+0xc>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	6020      	str	r0, [r4, #0]
 800767e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007682:	81a3      	strh	r3, [r4, #12]
 8007684:	9b01      	ldr	r3, [sp, #4]
 8007686:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800768a:	b15b      	cbz	r3, 80076a4 <__smakebuf_r+0x70>
 800768c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007690:	4630      	mov	r0, r6
 8007692:	f000 f81d 	bl	80076d0 <_isatty_r>
 8007696:	b128      	cbz	r0, 80076a4 <__smakebuf_r+0x70>
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	f023 0303 	bic.w	r3, r3, #3
 800769e:	f043 0301 	orr.w	r3, r3, #1
 80076a2:	81a3      	strh	r3, [r4, #12]
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	431d      	orrs	r5, r3
 80076a8:	81a5      	strh	r5, [r4, #12]
 80076aa:	e7cf      	b.n	800764c <__smakebuf_r+0x18>

080076ac <_fstat_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4d07      	ldr	r5, [pc, #28]	@ (80076cc <_fstat_r+0x20>)
 80076b0:	2300      	movs	r3, #0
 80076b2:	4604      	mov	r4, r0
 80076b4:	4608      	mov	r0, r1
 80076b6:	4611      	mov	r1, r2
 80076b8:	602b      	str	r3, [r5, #0]
 80076ba:	f7fa f9f7 	bl	8001aac <_fstat>
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	d102      	bne.n	80076c8 <_fstat_r+0x1c>
 80076c2:	682b      	ldr	r3, [r5, #0]
 80076c4:	b103      	cbz	r3, 80076c8 <_fstat_r+0x1c>
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	bd38      	pop	{r3, r4, r5, pc}
 80076ca:	bf00      	nop
 80076cc:	20000828 	.word	0x20000828

080076d0 <_isatty_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4d06      	ldr	r5, [pc, #24]	@ (80076ec <_isatty_r+0x1c>)
 80076d4:	2300      	movs	r3, #0
 80076d6:	4604      	mov	r4, r0
 80076d8:	4608      	mov	r0, r1
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	f7fa f9f6 	bl	8001acc <_isatty>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_isatty_r+0x1a>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_isatty_r+0x1a>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	20000828 	.word	0x20000828

080076f0 <_init>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr

080076fc <_fini>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr
