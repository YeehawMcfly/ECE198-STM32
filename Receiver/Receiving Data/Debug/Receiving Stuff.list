
Receiving Stuff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004974  08004974  00005974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049dc  080049dc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080049dc  080049dc  000059dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049e4  080049e4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e4  080049e4  000059e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049e8  080049e8  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080049ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  2000005c  08004a48  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  08004a48  000066bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1e2  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6f  00000000  00000000  0001226e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00013fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000874  00000000  00000000  00014aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f02  00000000  00000000  0001531c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df8f  00000000  00000000  0001721e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f66  00000000  00000000  000251ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad113  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e8  00000000  00000000  000ad158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000b0340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800495c 	.word	0x0800495c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800495c 	.word	0x0800495c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <decrypt>:

// Buffer for encryption/decryption operations (2 uint32_t for 8 bytes)
uint32_t data_buffer[2];

// Decryption Function
void decrypt(uint32_t v[2], const uint32_t k[4]) {
 8000580:	b480      	push	{r7}
 8000582:	b08d      	sub	sp, #52	@ 0x34
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
    uint32_t v0 = v[0], v1 = v[1], sum = 0xC6EF3720, i;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000596:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <decrypt+0xb0>)
 8000598:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t delta = 0x9E3779B9;
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <decrypt+0xb4>)
 800059c:	61fb      	str	r3, [r7, #28]
    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	61bb      	str	r3, [r7, #24]
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	3304      	adds	r3, #4
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	3308      	adds	r3, #8
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	330c      	adds	r3, #12
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 32; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
 80005c0:	e026      	b.n	8000610 <decrypt+0x90>
        v1 -= ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3);
 80005c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005c4:	011a      	lsls	r2, r3, #4
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	441a      	add	r2, r3
 80005ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80005cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ce:	440b      	add	r3, r1
 80005d0:	405a      	eors	r2, r3
 80005d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005d4:	0959      	lsrs	r1, r3, #5
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	440b      	add	r3, r1
 80005da:	4053      	eors	r3, r2
 80005dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        v0 -= ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1);
 80005e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005e4:	011a      	lsls	r2, r3, #4
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	441a      	add	r2, r3
 80005ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80005ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ee:	440b      	add	r3, r1
 80005f0:	405a      	eors	r2, r3
 80005f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005f4:	0959      	lsrs	r1, r3, #5
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	440b      	add	r3, r1
 80005fa:	4053      	eors	r3, r2
 80005fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sum -= delta;
 8000602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 0; i < 32; i++) {
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	3301      	adds	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
 8000610:	6a3b      	ldr	r3, [r7, #32]
 8000612:	2b1f      	cmp	r3, #31
 8000614:	d9d5      	bls.n	80005c2 <decrypt+0x42>
    }
    v[0] = v0;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800061a:	601a      	str	r2, [r3, #0]
    v[1] = v1;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3304      	adds	r3, #4
 8000620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000622:	601a      	str	r2, [r3, #0]
}
 8000624:	bf00      	nop
 8000626:	3734      	adds	r7, #52	@ 0x34
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	c6ef3720 	.word	0xc6ef3720
 8000634:	9e3779b9 	.word	0x9e3779b9

08000638 <decryptMessage>:

// Decrypt Message Function
void decryptMessage(uint8_t* input, size_t len) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
    // Ensure len is a multiple of 8
    if (len % 8 != 0) {
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f003 0307 	and.w	r3, r3, #7
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <decryptMessage+0x1c>
        // Handle padding if necessary
        // For simplicity, ignore extra bytes
        len -= len % 8;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	f023 0307 	bic.w	r3, r3, #7
 8000652:	603b      	str	r3, [r7, #0]
    }

    // Copy input to buffer as uint32_t
    memcpy(data_buffer, input, len);
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	480f      	ldr	r0, [pc, #60]	@ (8000698 <decryptMessage+0x60>)
 800065a:	f003 fd4d 	bl	80040f8 <memcpy>

    // Decrypt in blocks of 8 bytes (2 uint32_t)
    for (int i = 0; i < (len / 4); i += 2) {
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	e00a      	b.n	800067a <decryptMessage+0x42>
        decrypt(&data_buffer[i], key);
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4a0b      	ldr	r2, [pc, #44]	@ (8000698 <decryptMessage+0x60>)
 800066a:	4413      	add	r3, r2
 800066c:	490b      	ldr	r1, [pc, #44]	@ (800069c <decryptMessage+0x64>)
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff86 	bl	8000580 <decrypt>
    for (int i = 0; i < (len / 4); i += 2) {
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3302      	adds	r3, #2
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	089a      	lsrs	r2, r3, #2
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	429a      	cmp	r2, r3
 8000682:	d8ef      	bhi.n	8000664 <decryptMessage+0x2c>
    }

    // Copy back to input buffer
    memcpy(input, data_buffer, len);
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	4904      	ldr	r1, [pc, #16]	@ (8000698 <decryptMessage+0x60>)
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f003 fd35 	bl	80040f8 <memcpy>
}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000015c 	.word	0x2000015c
 800069c:	08004980 	.word	0x08004980

080006a0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1 && Size > 0) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x80>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d130      	bne.n	8000716 <HAL_UARTEx_RxEventCallback+0x76>
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d02d      	beq.n	8000716 <HAL_UARTEx_RxEventCallback+0x76>
        memcpy(RxData_Encrypted, RxData, sizeof(RxData));
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <HAL_UARTEx_RxEventCallback+0x84>)
 80006bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000728 <HAL_UARTEx_RxEventCallback+0x88>)
 80006be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c2:	e883 0003 	stmia.w	r3, {r0, r1}
        decryptMessage(RxData, sizeof(RxData));
 80006c6:	2108      	movs	r1, #8
 80006c8:	4817      	ldr	r0, [pc, #92]	@ (8000728 <HAL_UARTEx_RxEventCallback+0x88>)
 80006ca:	f7ff ffb5 	bl	8000638 <decryptMessage>
        yPos = RxData[0];
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <HAL_UARTEx_RxEventCallback+0x88>)
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <HAL_UARTEx_RxEventCallback+0x8c>)
 80006d4:	701a      	strb	r2, [r3, #0]
        dataReceived = 1;  // Set flag only
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <HAL_UARTEx_RxEventCallback+0x90>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]

        // Re-enable reception immediately
        HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, sizeof(RxData));
 80006dc:	2208      	movs	r2, #8
 80006de:	4912      	ldr	r1, [pc, #72]	@ (8000728 <HAL_UARTEx_RxEventCallback+0x88>)
 80006e0:	480f      	ldr	r0, [pc, #60]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x80>)
 80006e2:	f002 fc82 	bl	8002fea <HAL_UARTEx_ReceiveToIdle_IT>

        // Debug output
        sprintf(msg, "yPos: %u\r\n", yPos);
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <HAL_UARTEx_RxEventCallback+0x8c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	4911      	ldr	r1, [pc, #68]	@ (8000734 <HAL_UARTEx_RxEventCallback+0x94>)
 80006ee:	4812      	ldr	r0, [pc, #72]	@ (8000738 <HAL_UARTEx_RxEventCallback+0x98>)
 80006f0:	f003 fc94 	bl	800401c <siprintf>
        HAL_HalfDuplex_EnableTransmitter(&huart1);
 80006f4:	480a      	ldr	r0, [pc, #40]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x80>)
 80006f6:	f002 ff85 	bl	8003604 <HAL_HalfDuplex_EnableTransmitter>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006fa:	480f      	ldr	r0, [pc, #60]	@ (8000738 <HAL_UARTEx_RxEventCallback+0x98>)
 80006fc:	f7ff fd70 	bl	80001e0 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	490b      	ldr	r1, [pc, #44]	@ (8000738 <HAL_UARTEx_RxEventCallback+0x98>)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x80>)
 800070c:	f002 fbe2 	bl	8002ed4 <HAL_UART_Transmit>
        HAL_HalfDuplex_EnableReceiver(&huart1);
 8000710:	4803      	ldr	r0, [pc, #12]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x80>)
 8000712:	f002 ffab 	bl	800366c <HAL_HalfDuplex_EnableReceiver>
    }
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000078 	.word	0x20000078
 8000724:	2000011c 	.word	0x2000011c
 8000728:	20000114 	.word	0x20000114
 800072c:	20000124 	.word	0x20000124
 8000730:	2000015a 	.word	0x2000015a
 8000734:	08004974 	.word	0x08004974
 8000738:	20000128 	.word	0x20000128

0800073c <main>:


int main(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    // Initialize the Hardware Abstraction Layer
    HAL_Init();
 8000740:	f000 fd2a 	bl	8001198 <HAL_Init>

    // Configure the system clock
    SystemClock_Config();
 8000744:	f000 f8b8 	bl	80008b8 <SystemClock_Config>

    // Initialize all configured peripherals
    MX_GPIO_Init();
 8000748:	f000 f862 	bl	8000810 <MX_GPIO_Init>
    MX_I2C1_Init();  // Add this line
 800074c:	f000 f91e 	bl	800098c <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8000750:	f000 f834 	bl	80007bc <MX_USART1_UART_Init>

    // Initialize the OLED display
    SSD1306_Init();  // Add this line
 8000754:	f000 f94e 	bl	80009f4 <SSD1306_Init>

    // Clear the display initially
    SSD1306_Clear();
 8000758:	f000 fab6 	bl	8000cc8 <SSD1306_Clear>
    SSD1306_UpdateScreen();
 800075c:	f000 fa0e 	bl	8000b7c <SSD1306_UpdateScreen>

    // Initialize UART Reception in Half-Duplex Mode
    HAL_HalfDuplex_EnableReceiver(&huart1);
 8000760:	4811      	ldr	r0, [pc, #68]	@ (80007a8 <main+0x6c>)
 8000762:	f002 ff83 	bl	800366c <HAL_HalfDuplex_EnableReceiver>
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, sizeof(RxData));
 8000766:	2208      	movs	r2, #8
 8000768:	4910      	ldr	r1, [pc, #64]	@ (80007ac <main+0x70>)
 800076a:	480f      	ldr	r0, [pc, #60]	@ (80007a8 <main+0x6c>)
 800076c:	f002 fc3d 	bl	8002fea <HAL_UARTEx_ReceiveToIdle_IT>

    while(1) {
        if (dataReceived) {
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <main+0x74>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0fa      	beq.n	8000770 <main+0x34>
            // Update display here instead of in interrupt
            SSD1306_ShiftBufferLeft();
 800077a:	f000 fb49 	bl	8000e10 <SSD1306_ShiftBufferLeft>
            SSD1306_DrawVerticalLineInRightmostColumn(prevYPos, yPos, SSD1306_COLOR_WHITE);
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <main+0x78>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	4a0d      	ldr	r2, [pc, #52]	@ (80007b8 <main+0x7c>)
 8000784:	7811      	ldrb	r1, [r2, #0]
 8000786:	2201      	movs	r2, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fb67 	bl	8000e5c <SSD1306_DrawVerticalLineInRightmostColumn>
            SSD1306_UpdateScreen();
 800078e:	f000 f9f5 	bl	8000b7c <SSD1306_UpdateScreen>
            prevYPos = yPos;
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <main+0x7c>)
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <main+0x78>)
 8000798:	701a      	strb	r2, [r3, #0]

            dataReceived = 0;
 800079a:	4b05      	ldr	r3, [pc, #20]	@ (80007b0 <main+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
            HAL_Delay(50);
 80007a0:	2032      	movs	r0, #50	@ 0x32
 80007a2:	f000 fd6b 	bl	800127c <HAL_Delay>
        if (dataReceived) {
 80007a6:	e7e3      	b.n	8000770 <main+0x34>
 80007a8:	20000078 	.word	0x20000078
 80007ac:	20000114 	.word	0x20000114
 80007b0:	2000015a 	.word	0x2000015a
 80007b4:	20000125 	.word	0x20000125
 80007b8:	20000124 	.word	0x20000124

080007bc <MX_USART1_UART_Init>:
        }
    }
}

static void MX_USART1_UART_Init(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	@ (800080c <MX_USART1_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX; // Enable both TX and RX for Half-Duplex
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]

    if (HAL_HalfDuplex_Init(&huart1) != HAL_OK) {
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f002 fb16 	bl	8002e24 <HAL_HalfDuplex_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 80007fe:	f000 f8f3 	bl	80009e8 <Error_Handler>
    }
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000078 	.word	0x20000078
 800080c:	40011000 	.word	0x40011000

08000810 <MX_GPIO_Init>:

static void MX_GPIO_Init(void){
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <MX_GPIO_Init+0xa0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a20      	ldr	r2, [pc, #128]	@ (80008b0 <MX_GPIO_Init+0xa0>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <MX_GPIO_Init+0xa0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_GPIO_Init+0xa0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a19      	ldr	r2, [pc, #100]	@ (80008b0 <MX_GPIO_Init+0xa0>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_GPIO_Init+0xa0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_GPIO_Init+0xa0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_GPIO_Init+0xa0>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_GPIO_Init+0xa0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

    // Configure PC13 as Input with External Interrupt
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800087a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000880:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000886:	2301      	movs	r3, #1
 8000888:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <MX_GPIO_Init+0xa4>)
 8000892:	f000 febb 	bl	800160c <HAL_GPIO_Init>

    // Set EXTI Line 15_10 Interrupt Priority and Enable it
    HAL_NVIC_SetPriority(EXTI15_10_IRQn,0,0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2028      	movs	r0, #40	@ 0x28
 800089c:	f000 fded 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a0:	2028      	movs	r0, #40	@ 0x28
 80008a2:	f000 fe06 	bl	80014b2 <HAL_NVIC_EnableIRQ>
}
 80008a6:	bf00      	nop
 80008a8:	3720      	adds	r7, #32
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020800 	.word	0x40020800

080008b8 <SystemClock_Config>:

void SystemClock_Config(void){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	@ 0x50
 80008bc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2230      	movs	r2, #48	@ 0x30
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 fbe2 	bl	8004090 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	4b28      	ldr	r3, [pc, #160]	@ (8000984 <SystemClock_Config+0xcc>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	4a27      	ldr	r2, [pc, #156]	@ (8000984 <SystemClock_Config+0xcc>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ec:	4b25      	ldr	r3, [pc, #148]	@ (8000984 <SystemClock_Config+0xcc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <SystemClock_Config+0xd0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000904:	4a20      	ldr	r2, [pc, #128]	@ (8000988 <SystemClock_Config+0xd0>)
 8000906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <SystemClock_Config+0xd0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]

    // Initialize RCC Oscillators
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091c:	2301      	movs	r3, #1
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000920:	2310      	movs	r3, #16
 8000922:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000924:	2302      	movs	r3, #2
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000928:	2300      	movs	r3, #0
 800092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 800092c:	2308      	movs	r3, #8
 800092e:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 8000930:	2354      	movs	r3, #84	@ 0x54
 8000932:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fdd7 	bl	80024f4 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x98>
        Error_Handler();
 800094c:	f000 f84c 	bl	80009e8 <Error_Handler>
    }

    // Initialize CPU, AHB and APB Clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	230f      	movs	r3, #15
 8000952:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000954:	2302      	movs	r3, #2
 8000956:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000960:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK){
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2102      	movs	r1, #2
 800096c:	4618      	mov	r0, r3
 800096e:	f002 f839 	bl	80029e4 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xc4>
        Error_Handler();
 8000978:	f000 f836 	bl	80009e8 <Error_Handler>
    }
}
 800097c:	bf00      	nop
 800097e:	3750      	adds	r7, #80	@ 0x50
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_I2C1_Init+0x50>)
 8000992:	4a13      	ldr	r2, [pc, #76]	@ (80009e0 <MX_I2C1_Init+0x54>)
 8000994:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_I2C1_Init+0x50>)
 8000998:	4a12      	ldr	r2, [pc, #72]	@ (80009e4 <MX_I2C1_Init+0x58>)
 800099a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_I2C1_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_I2C1_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_I2C1_Init+0x50>)
 80009aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009ae:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009bc:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <MX_I2C1_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_I2C1_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <MX_I2C1_Init+0x50>)
 80009ca:	f000 ffc7 	bl	800195c <HAL_I2C_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2C1_Init+0x4c>
        Error_Handler();
 80009d4:	f000 f808 	bl	80009e8 <Error_Handler>
    }
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000c0 	.word	0x200000c0
 80009e0:	40005400 	.word	0x40005400
 80009e4:	00061a80 	.word	0x00061a80

080009e8 <Error_Handler>:

void Error_Handler(void){
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
    __disable_irq();
    while (1){}
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <Error_Handler+0x8>

080009f4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80009fa:	f000 f96f 	bl	8000cdc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80009fe:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000a02:	2201      	movs	r2, #1
 8000a04:	217a      	movs	r1, #122	@ 0x7a
 8000a06:	485b      	ldr	r0, [pc, #364]	@ (8000b74 <SSD1306_Init+0x180>)
 8000a08:	f001 f9ea 	bl	8001de0 <HAL_I2C_IsDeviceReady>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e0a9      	b.n	8000b6a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000a16:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000a1a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a1c:	e002      	b.n	8000a24 <SSD1306_Init+0x30>
		p--;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1f9      	bne.n	8000a1e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000a2a:	22ae      	movs	r2, #174	@ 0xae
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	207a      	movs	r0, #122	@ 0x7a
 8000a30:	f000 f9d0 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000a34:	2220      	movs	r2, #32
 8000a36:	2100      	movs	r1, #0
 8000a38:	207a      	movs	r0, #122	@ 0x7a
 8000a3a:	f000 f9cb 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a3e:	2210      	movs	r2, #16
 8000a40:	2100      	movs	r1, #0
 8000a42:	207a      	movs	r0, #122	@ 0x7a
 8000a44:	f000 f9c6 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a48:	22b0      	movs	r2, #176	@ 0xb0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	207a      	movs	r0, #122	@ 0x7a
 8000a4e:	f000 f9c1 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a52:	22c8      	movs	r2, #200	@ 0xc8
 8000a54:	2100      	movs	r1, #0
 8000a56:	207a      	movs	r0, #122	@ 0x7a
 8000a58:	f000 f9bc 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	207a      	movs	r0, #122	@ 0x7a
 8000a62:	f000 f9b7 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a66:	2210      	movs	r2, #16
 8000a68:	2100      	movs	r1, #0
 8000a6a:	207a      	movs	r0, #122	@ 0x7a
 8000a6c:	f000 f9b2 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a70:	2240      	movs	r2, #64	@ 0x40
 8000a72:	2100      	movs	r1, #0
 8000a74:	207a      	movs	r0, #122	@ 0x7a
 8000a76:	f000 f9ad 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a7a:	2281      	movs	r2, #129	@ 0x81
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	207a      	movs	r0, #122	@ 0x7a
 8000a80:	f000 f9a8 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a84:	22ff      	movs	r2, #255	@ 0xff
 8000a86:	2100      	movs	r1, #0
 8000a88:	207a      	movs	r0, #122	@ 0x7a
 8000a8a:	f000 f9a3 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a8e:	22a1      	movs	r2, #161	@ 0xa1
 8000a90:	2100      	movs	r1, #0
 8000a92:	207a      	movs	r0, #122	@ 0x7a
 8000a94:	f000 f99e 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a98:	22a6      	movs	r2, #166	@ 0xa6
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	207a      	movs	r0, #122	@ 0x7a
 8000a9e:	f000 f999 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000aa2:	22a8      	movs	r2, #168	@ 0xa8
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	207a      	movs	r0, #122	@ 0x7a
 8000aa8:	f000 f994 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000aac:	223f      	movs	r2, #63	@ 0x3f
 8000aae:	2100      	movs	r1, #0
 8000ab0:	207a      	movs	r0, #122	@ 0x7a
 8000ab2:	f000 f98f 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ab6:	22a4      	movs	r2, #164	@ 0xa4
 8000ab8:	2100      	movs	r1, #0
 8000aba:	207a      	movs	r0, #122	@ 0x7a
 8000abc:	f000 f98a 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ac0:	22d3      	movs	r2, #211	@ 0xd3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	207a      	movs	r0, #122	@ 0x7a
 8000ac6:	f000 f985 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	207a      	movs	r0, #122	@ 0x7a
 8000ad0:	f000 f980 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ad4:	22d5      	movs	r2, #213	@ 0xd5
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	207a      	movs	r0, #122	@ 0x7a
 8000ada:	f000 f97b 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ade:	22f0      	movs	r2, #240	@ 0xf0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	207a      	movs	r0, #122	@ 0x7a
 8000ae4:	f000 f976 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000ae8:	22d9      	movs	r2, #217	@ 0xd9
 8000aea:	2100      	movs	r1, #0
 8000aec:	207a      	movs	r0, #122	@ 0x7a
 8000aee:	f000 f971 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000af2:	2222      	movs	r2, #34	@ 0x22
 8000af4:	2100      	movs	r1, #0
 8000af6:	207a      	movs	r0, #122	@ 0x7a
 8000af8:	f000 f96c 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000afc:	22da      	movs	r2, #218	@ 0xda
 8000afe:	2100      	movs	r1, #0
 8000b00:	207a      	movs	r0, #122	@ 0x7a
 8000b02:	f000 f967 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000b06:	2212      	movs	r2, #18
 8000b08:	2100      	movs	r1, #0
 8000b0a:	207a      	movs	r0, #122	@ 0x7a
 8000b0c:	f000 f962 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000b10:	22db      	movs	r2, #219	@ 0xdb
 8000b12:	2100      	movs	r1, #0
 8000b14:	207a      	movs	r0, #122	@ 0x7a
 8000b16:	f000 f95d 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	207a      	movs	r0, #122	@ 0x7a
 8000b20:	f000 f958 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000b24:	228d      	movs	r2, #141	@ 0x8d
 8000b26:	2100      	movs	r1, #0
 8000b28:	207a      	movs	r0, #122	@ 0x7a
 8000b2a:	f000 f953 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b2e:	2214      	movs	r2, #20
 8000b30:	2100      	movs	r1, #0
 8000b32:	207a      	movs	r0, #122	@ 0x7a
 8000b34:	f000 f94e 	bl	8000dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b38:	22af      	movs	r2, #175	@ 0xaf
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	207a      	movs	r0, #122	@ 0x7a
 8000b3e:	f000 f949 	bl	8000dd4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b42:	222e      	movs	r2, #46	@ 0x2e
 8000b44:	2100      	movs	r1, #0
 8000b46:	207a      	movs	r0, #122	@ 0x7a
 8000b48:	f000 f944 	bl	8000dd4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f000 f843 	bl	8000bd8 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000b52:	f000 f813 	bl	8000b7c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <SSD1306_Init+0x184>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <SSD1306_Init+0x184>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000b62:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <SSD1306_Init+0x184>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000c0 	.word	0x200000c0
 8000b78:	20000564 	.word	0x20000564

08000b7c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	71fb      	strb	r3, [r7, #7]
 8000b86:	e01d      	b.n	8000bc4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	3b50      	subs	r3, #80	@ 0x50
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2100      	movs	r1, #0
 8000b92:	207a      	movs	r0, #122	@ 0x7a
 8000b94:	f000 f91e 	bl	8000dd4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	207a      	movs	r0, #122	@ 0x7a
 8000b9e:	f000 f919 	bl	8000dd4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000ba2:	2210      	movs	r2, #16
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	207a      	movs	r0, #122	@ 0x7a
 8000ba8:	f000 f914 	bl	8000dd4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	01db      	lsls	r3, r3, #7
 8000bb0:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <SSD1306_UpdateScreen+0x58>)
 8000bb2:	441a      	add	r2, r3
 8000bb4:	2380      	movs	r3, #128	@ 0x80
 8000bb6:	2140      	movs	r1, #64	@ 0x40
 8000bb8:	207a      	movs	r0, #122	@ 0x7a
 8000bba:	f000 f8a5 	bl	8000d08 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b07      	cmp	r3, #7
 8000bc8:	d9de      	bls.n	8000b88 <SSD1306_UpdateScreen+0xc>
	}
}
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000164 	.word	0x20000164

08000bd8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <SSD1306_Fill+0x14>
 8000be8:	2300      	movs	r3, #0
 8000bea:	e000      	b.n	8000bee <SSD1306_Fill+0x16>
 8000bec:	23ff      	movs	r3, #255	@ 0xff
 8000bee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <SSD1306_Fill+0x2c>)
 8000bf6:	f003 fa4b 	bl	8004090 <memset>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000164 	.word	0x20000164

08000c08 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
 8000c12:	460b      	mov	r3, r1
 8000c14:	80bb      	strh	r3, [r7, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	70fb      	strb	r3, [r7, #3]
	if (
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c1e:	d848      	bhi.n	8000cb2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000c20:	88bb      	ldrh	r3, [r7, #4]
 8000c22:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c24:	d845      	bhi.n	8000cb2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000c26:	4b26      	ldr	r3, [pc, #152]	@ (8000cc0 <SSD1306_DrawPixel+0xb8>)
 8000c28:	791b      	ldrb	r3, [r3, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000c2e:	78fb      	ldrb	r3, [r7, #3]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf0c      	ite	eq
 8000c34:	2301      	moveq	r3, #1
 8000c36:	2300      	movne	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d11a      	bne.n	8000c78 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c42:	88fa      	ldrh	r2, [r7, #6]
 8000c44:	88bb      	ldrh	r3, [r7, #4]
 8000c46:	08db      	lsrs	r3, r3, #3
 8000c48:	b298      	uxth	r0, r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	01db      	lsls	r3, r3, #7
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc4 <SSD1306_DrawPixel+0xbc>)
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	b25a      	sxtb	r2, r3
 8000c56:	88bb      	ldrh	r3, [r7, #4]
 8000c58:	f003 0307 	and.w	r3, r3, #7
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b259      	sxtb	r1, r3
 8000c68:	88fa      	ldrh	r2, [r7, #6]
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	01db      	lsls	r3, r3, #7
 8000c6e:	4413      	add	r3, r2
 8000c70:	b2c9      	uxtb	r1, r1
 8000c72:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <SSD1306_DrawPixel+0xbc>)
 8000c74:	54d1      	strb	r1, [r2, r3]
 8000c76:	e01d      	b.n	8000cb4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c78:	88fa      	ldrh	r2, [r7, #6]
 8000c7a:	88bb      	ldrh	r3, [r7, #4]
 8000c7c:	08db      	lsrs	r3, r3, #3
 8000c7e:	b298      	uxth	r0, r3
 8000c80:	4603      	mov	r3, r0
 8000c82:	01db      	lsls	r3, r3, #7
 8000c84:	4413      	add	r3, r2
 8000c86:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc4 <SSD1306_DrawPixel+0xbc>)
 8000c88:	5cd3      	ldrb	r3, [r2, r3]
 8000c8a:	b25a      	sxtb	r2, r3
 8000c8c:	88bb      	ldrh	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	2101      	movs	r1, #1
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	b259      	sxtb	r1, r3
 8000ca2:	88fa      	ldrh	r2, [r7, #6]
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	01db      	lsls	r3, r3, #7
 8000ca8:	4413      	add	r3, r2
 8000caa:	b2c9      	uxtb	r1, r1
 8000cac:	4a05      	ldr	r2, [pc, #20]	@ (8000cc4 <SSD1306_DrawPixel+0xbc>)
 8000cae:	54d1      	strb	r1, [r2, r3]
 8000cb0:	e000      	b.n	8000cb4 <SSD1306_DrawPixel+0xac>
		return;
 8000cb2:	bf00      	nop
	}
}
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000564 	.word	0x20000564
 8000cc4:	20000164 	.word	0x20000164

08000cc8 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff ff83 	bl	8000bd8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000cd2:	f7ff ff53 	bl	8000b7c <SSD1306_UpdateScreen>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <ssd1306_I2C_Init+0x28>)
 8000ce4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ce6:	e002      	b.n	8000cee <ssd1306_I2C_Init+0x12>
		p--;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1f9      	bne.n	8000ce8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	0003d090 	.word	0x0003d090

08000d08 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b0c7      	sub	sp, #284	@ 0x11c
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4608      	mov	r0, r1
 8000d12:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000d16:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000d1a:	600a      	str	r2, [r1, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d22:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000d26:	4622      	mov	r2, r4
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d2e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000d32:	4602      	mov	r2, r0
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d3e:	460a      	mov	r2, r1
 8000d40:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000d42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000d4a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000d4e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000d5c:	e015      	b.n	8000d8a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000d5e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000d62:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000d66:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	441a      	add	r2, r3
 8000d6e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000d72:	3301      	adds	r3, #1
 8000d74:	7811      	ldrb	r1, [r2, #0]
 8000d76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000d7a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000d7e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000d80:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000d84:	3301      	adds	r3, #1
 8000d86:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000d8a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000d94:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000d98:	8812      	ldrh	r2, [r2, #0]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d8df      	bhi.n	8000d5e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000d9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000da2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b299      	uxth	r1, r3
 8000daa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	f107 020c 	add.w	r2, r7, #12
 8000dbc:	200a      	movs	r0, #10
 8000dbe:	9000      	str	r0, [sp, #0]
 8000dc0:	4803      	ldr	r0, [pc, #12]	@ (8000dd0 <ssd1306_I2C_WriteMulti+0xc8>)
 8000dc2:	f000 ff0f 	bl	8001be4 <HAL_I2C_Master_Transmit>
}
 8000dc6:	bf00      	nop
 8000dc8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	200000c0 	.word	0x200000c0

08000dd4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	460b      	mov	r3, r1
 8000de0:	71bb      	strb	r3, [r7, #6]
 8000de2:	4613      	mov	r3, r2
 8000de4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000dea:	797b      	ldrb	r3, [r7, #5]
 8000dec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	b299      	uxth	r1, r3
 8000df2:	f107 020c 	add.w	r2, r7, #12
 8000df6:	230a      	movs	r3, #10
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <ssd1306_I2C_Write+0x38>)
 8000dfe:	f000 fef1 	bl	8001be4 <HAL_I2C_Master_Transmit>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000c0 	.word	0x200000c0

08000e10 <SSD1306_ShiftBufferLeft>:

void SSD1306_ShiftBufferLeft(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < SSD1306_HEIGHT / 8; page++) {
 8000e16:	2300      	movs	r3, #0
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e015      	b.n	8000e48 <SSD1306_ShiftBufferLeft+0x38>
        memmove(&SSD1306_Buffer[page * SSD1306_WIDTH],
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	01db      	lsls	r3, r3, #7
 8000e20:	4a0d      	ldr	r2, [pc, #52]	@ (8000e58 <SSD1306_ShiftBufferLeft+0x48>)
 8000e22:	1898      	adds	r0, r3, r2
                &SSD1306_Buffer[page * SSD1306_WIDTH + 1],
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	01db      	lsls	r3, r3, #7
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <SSD1306_ShiftBufferLeft+0x48>)
 8000e2c:	4413      	add	r3, r2
        memmove(&SSD1306_Buffer[page * SSD1306_WIDTH],
 8000e2e:	227f      	movs	r2, #127	@ 0x7f
 8000e30:	4619      	mov	r1, r3
 8000e32:	f003 f913 	bl	800405c <memmove>
                SSD1306_WIDTH - 1);
        SSD1306_Buffer[page * SSD1306_WIDTH + (SSD1306_WIDTH - 1)] = 0x00; // Clear the last column
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	01db      	lsls	r3, r3, #7
 8000e3a:	337f      	adds	r3, #127	@ 0x7f
 8000e3c:	4a06      	ldr	r2, [pc, #24]	@ (8000e58 <SSD1306_ShiftBufferLeft+0x48>)
 8000e3e:	2100      	movs	r1, #0
 8000e40:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = 0; page < SSD1306_HEIGHT / 8; page++) {
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	3301      	adds	r3, #1
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b07      	cmp	r3, #7
 8000e4c:	d9e6      	bls.n	8000e1c <SSD1306_ShiftBufferLeft+0xc>
    }
}
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000164 	.word	0x20000164

08000e5c <SSD1306_DrawVerticalLineInRightmostColumn>:

void SSD1306_DrawVerticalLineInRightmostColumn(uint8_t y1, uint8_t y2, SSD1306_COLOR_t color) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	460b      	mov	r3, r1
 8000e68:	71bb      	strb	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	717b      	strb	r3, [r7, #5]
    if (y1 > y2) {
 8000e6e:	79fa      	ldrb	r2, [r7, #7]
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d905      	bls.n	8000e82 <SSD1306_DrawVerticalLineInRightmostColumn+0x26>
        uint8_t temp = y1;
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	73bb      	strb	r3, [r7, #14]
        y1 = y2;
 8000e7a:	79bb      	ldrb	r3, [r7, #6]
 8000e7c:	71fb      	strb	r3, [r7, #7]
        y2 = temp;
 8000e7e:	7bbb      	ldrb	r3, [r7, #14]
 8000e80:	71bb      	strb	r3, [r7, #6]
    }
    for (uint8_t y = y1; y <= y2; y++) {
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e009      	b.n	8000e9c <SSD1306_DrawVerticalLineInRightmostColumn+0x40>
        SSD1306_DrawPixel(SSD1306_WIDTH - 1, y, color);
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	797a      	ldrb	r2, [r7, #5]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	207f      	movs	r0, #127	@ 0x7f
 8000e92:	f7ff feb9 	bl	8000c08 <SSD1306_DrawPixel>
    for (uint8_t y = y1; y <= y2; y++) {
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	79bb      	ldrb	r3, [r7, #6]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d9f1      	bls.n	8000e88 <SSD1306_DrawVerticalLineInRightmostColumn+0x2c>
    }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	4a08      	ldr	r2, [pc, #32]	@ (8000efc <HAL_MspInit+0x4c>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800

08000f00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	@ (8000f84 <HAL_I2C_MspInit+0x84>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12c      	bne.n	8000f7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <HAL_I2C_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a17      	ldr	r2, [pc, #92]	@ (8000f88 <HAL_I2C_MspInit+0x88>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <HAL_I2C_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f44:	2312      	movs	r3, #18
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f50:	2304      	movs	r3, #4
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480c      	ldr	r0, [pc, #48]	@ (8000f8c <HAL_I2C_MspInit+0x8c>)
 8000f5c:	f000 fb56 	bl	800160c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <HAL_I2C_MspInit+0x88>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	4a07      	ldr	r2, [pc, #28]	@ (8000f88 <HAL_I2C_MspInit+0x88>)
 8000f6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <HAL_I2C_MspInit+0x88>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	@ 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40005400 	.word	0x40005400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020400 	.word	0x40020400

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1d      	ldr	r2, [pc, #116]	@ (8001024 <HAL_UART_MspInit+0x94>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d134      	bne.n	800101c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <HAL_UART_MspInit+0x98>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	4a1b      	ldr	r2, [pc, #108]	@ (8001028 <HAL_UART_MspInit+0x98>)
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <HAL_UART_MspInit+0x98>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_UART_MspInit+0x98>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <HAL_UART_MspInit+0x98>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_UART_MspInit+0x98>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff0:	2312      	movs	r3, #18
 8000ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	4809      	ldr	r0, [pc, #36]	@ (800102c <HAL_UART_MspInit+0x9c>)
 8001008:	f000 fb00 	bl	800160c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	2025      	movs	r0, #37	@ 0x25
 8001012:	f000 fa32 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001016:	2025      	movs	r0, #37	@ 0x25
 8001018:	f000 fa4b 	bl	80014b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	@ 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40011000 	.word	0x40011000
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <NMI_Handler+0x4>

08001038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <MemManage_Handler+0x4>

08001048 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <UsageFault_Handler+0x4>

08001058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001086:	f000 f8d9 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <USART1_IRQHandler+0x10>)
 8001096:	f002 f805 	bl	80030a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000078 	.word	0x20000078

080010a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010ac:	f000 fc32 	bl	8001914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	@ (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f002 ffdc 	bl	80040a0 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20018000 	.word	0x20018000
 8001114:	00000400 	.word	0x00000400
 8001118:	2000056c 	.word	0x2000056c
 800111c:	200006c0 	.word	0x200006c0

08001120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <SystemInit+0x20>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800112a:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <SystemInit+0x20>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800117c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001148:	f7ff ffea 	bl	8001120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	@ (8001180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	@ (8001184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	@ (8001190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001172:	f002 ff9b 	bl	80040ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff fae1 	bl	800073c <main>
  bx  lr    
 800117a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800117c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001188:	080049ec 	.word	0x080049ec
  ldr r2, =_sbss
 800118c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001190:	200006bc 	.word	0x200006bc

08001194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC_IRQHandler>
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800119c:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <HAL_Init+0x40>)
 80011a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <HAL_Init+0x40>)
 80011ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	@ (80011d8 <HAL_Init+0x40>)
 80011ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f94f 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	200f      	movs	r0, #15
 80011c8:	f000 f808 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff fe70 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023c00 	.word	0x40023c00

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <HAL_InitTick+0x54>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_InitTick+0x58>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f967 	bl	80014ce <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e00e      	b.n	8001228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d80a      	bhi.n	8001226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f000 f92f 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4a06      	ldr	r2, [pc, #24]	@ (8001238 <HAL_InitTick+0x5c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	20000008 	.word	0x20000008
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008
 8001260:	20000570 	.word	0x20000570

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000570 	.word	0x20000570

0800127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff ffee 	bl	8001264 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001294:	d005      	beq.n	80012a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <HAL_Delay+0x44>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012a2:	bf00      	nop
 80012a4:	f7ff ffde 	bl	8001264 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8f7      	bhi.n	80012a4 <HAL_Delay+0x28>
  {
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	@ (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4907      	ldr	r1, [pc, #28]	@ (8001360 <__NVIC_EnableIRQ+0x38>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	@ (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	@ (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	@ 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff29 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff3e 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff8e 	bl	80013b8 <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5d 	bl	8001364 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff31 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa2 	bl	8001420 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff feb6 	bl	8001264 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d008      	beq.n	8001518 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2280      	movs	r2, #128	@ 0x80
 800150a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e052      	b.n	80015be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0216 	bic.w	r2, r2, #22
 8001526:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001536:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153c:	2b00      	cmp	r3, #0
 800153e:	d103      	bne.n	8001548 <HAL_DMA_Abort+0x62>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0208 	bic.w	r2, r2, #8
 8001556:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001568:	e013      	b.n	8001592 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800156a:	f7ff fe7b 	bl	8001264 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b05      	cmp	r3, #5
 8001576:	d90c      	bls.n	8001592 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2220      	movs	r2, #32
 800157c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2203      	movs	r2, #3
 8001582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e015      	b.n	80015be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e4      	bne.n	800156a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a4:	223f      	movs	r2, #63	@ 0x3f
 80015a6:	409a      	lsls	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d004      	beq.n	80015e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2280      	movs	r2, #128	@ 0x80
 80015de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e00c      	b.n	80015fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2205      	movs	r2, #5
 80015e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	@ 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	e159      	b.n	80018dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001628:	2201      	movs	r2, #1
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	429a      	cmp	r2, r3
 8001642:	f040 8148 	bne.w	80018d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	2b01      	cmp	r3, #1
 8001650:	d005      	beq.n	800165e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165a:	2b02      	cmp	r3, #2
 800165c:	d130      	bne.n	80016c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	2203      	movs	r2, #3
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001694:	2201      	movs	r2, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f003 0201 	and.w	r2, r3, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d017      	beq.n	80016fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d123      	bne.n	8001750 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	08da      	lsrs	r2, r3, #3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3208      	adds	r2, #8
 8001710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	220f      	movs	r2, #15
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	08da      	lsrs	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3208      	adds	r2, #8
 800174a:	69b9      	ldr	r1, [r7, #24]
 800174c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0203 	and.w	r2, r3, #3
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80a2 	beq.w	80018d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b57      	ldr	r3, [pc, #348]	@ (80018f4 <HAL_GPIO_Init+0x2e8>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	4a56      	ldr	r2, [pc, #344]	@ (80018f4 <HAL_GPIO_Init+0x2e8>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a2:	4b54      	ldr	r3, [pc, #336]	@ (80018f4 <HAL_GPIO_Init+0x2e8>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ae:	4a52      	ldr	r2, [pc, #328]	@ (80018f8 <HAL_GPIO_Init+0x2ec>)
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a49      	ldr	r2, [pc, #292]	@ (80018fc <HAL_GPIO_Init+0x2f0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d019      	beq.n	800180e <HAL_GPIO_Init+0x202>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a48      	ldr	r2, [pc, #288]	@ (8001900 <HAL_GPIO_Init+0x2f4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d013      	beq.n	800180a <HAL_GPIO_Init+0x1fe>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a47      	ldr	r2, [pc, #284]	@ (8001904 <HAL_GPIO_Init+0x2f8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d00d      	beq.n	8001806 <HAL_GPIO_Init+0x1fa>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a46      	ldr	r2, [pc, #280]	@ (8001908 <HAL_GPIO_Init+0x2fc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d007      	beq.n	8001802 <HAL_GPIO_Init+0x1f6>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a45      	ldr	r2, [pc, #276]	@ (800190c <HAL_GPIO_Init+0x300>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d101      	bne.n	80017fe <HAL_GPIO_Init+0x1f2>
 80017fa:	2304      	movs	r3, #4
 80017fc:	e008      	b.n	8001810 <HAL_GPIO_Init+0x204>
 80017fe:	2307      	movs	r3, #7
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x204>
 8001802:	2303      	movs	r3, #3
 8001804:	e004      	b.n	8001810 <HAL_GPIO_Init+0x204>
 8001806:	2302      	movs	r3, #2
 8001808:	e002      	b.n	8001810 <HAL_GPIO_Init+0x204>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x204>
 800180e:	2300      	movs	r3, #0
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	f002 0203 	and.w	r2, r2, #3
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	4093      	lsls	r3, r2
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001820:	4935      	ldr	r1, [pc, #212]	@ (80018f8 <HAL_GPIO_Init+0x2ec>)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	3302      	adds	r3, #2
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182e:	4b38      	ldr	r3, [pc, #224]	@ (8001910 <HAL_GPIO_Init+0x304>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001852:	4a2f      	ldr	r2, [pc, #188]	@ (8001910 <HAL_GPIO_Init+0x304>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001858:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <HAL_GPIO_Init+0x304>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800187c:	4a24      	ldr	r2, [pc, #144]	@ (8001910 <HAL_GPIO_Init+0x304>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001882:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <HAL_GPIO_Init+0x304>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001910 <HAL_GPIO_Init+0x304>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ac:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <HAL_GPIO_Init+0x304>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001910 <HAL_GPIO_Init+0x304>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3301      	adds	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	f67f aea2 	bls.w	8001628 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3724      	adds	r7, #36	@ 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40013800 	.word	0x40013800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020400 	.word	0x40020400
 8001904:	40020800 	.word	0x40020800
 8001908:	40020c00 	.word	0x40020c00
 800190c:	40021000 	.word	0x40021000
 8001910:	40013c00 	.word	0x40013c00

08001914 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800192a:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f806 	bl	8001944 <HAL_GPIO_EXTI_Callback>
  }
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40013c00 	.word	0x40013c00

08001944 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e12b      	b.n	8001bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fabc 	bl	8000f00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2224      	movs	r2, #36	@ 0x24
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019c0:	f001 fa08 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 80019c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4a81      	ldr	r2, [pc, #516]	@ (8001bd0 <HAL_I2C_Init+0x274>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d807      	bhi.n	80019e0 <HAL_I2C_Init+0x84>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4a80      	ldr	r2, [pc, #512]	@ (8001bd4 <HAL_I2C_Init+0x278>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	bf94      	ite	ls
 80019d8:	2301      	movls	r3, #1
 80019da:	2300      	movhi	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	e006      	b.n	80019ee <HAL_I2C_Init+0x92>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4a7d      	ldr	r2, [pc, #500]	@ (8001bd8 <HAL_I2C_Init+0x27c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	bf94      	ite	ls
 80019e8:	2301      	movls	r3, #1
 80019ea:	2300      	movhi	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0e7      	b.n	8001bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4a78      	ldr	r2, [pc, #480]	@ (8001bdc <HAL_I2C_Init+0x280>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	0c9b      	lsrs	r3, r3, #18
 8001a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4a6a      	ldr	r2, [pc, #424]	@ (8001bd0 <HAL_I2C_Init+0x274>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d802      	bhi.n	8001a30 <HAL_I2C_Init+0xd4>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	e009      	b.n	8001a44 <HAL_I2C_Init+0xe8>
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	4a69      	ldr	r2, [pc, #420]	@ (8001be0 <HAL_I2C_Init+0x284>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	3301      	adds	r3, #1
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	495c      	ldr	r1, [pc, #368]	@ (8001bd0 <HAL_I2C_Init+0x274>)
 8001a60:	428b      	cmp	r3, r1
 8001a62:	d819      	bhi.n	8001a98 <HAL_I2C_Init+0x13c>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1e59      	subs	r1, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a72:	1c59      	adds	r1, r3, #1
 8001a74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a78:	400b      	ands	r3, r1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00a      	beq.n	8001a94 <HAL_I2C_Init+0x138>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1e59      	subs	r1, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a92:	e051      	b.n	8001b38 <HAL_I2C_Init+0x1dc>
 8001a94:	2304      	movs	r3, #4
 8001a96:	e04f      	b.n	8001b38 <HAL_I2C_Init+0x1dc>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d111      	bne.n	8001ac4 <HAL_I2C_Init+0x168>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1e58      	subs	r0, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	440b      	add	r3, r1
 8001aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	e012      	b.n	8001aea <HAL_I2C_Init+0x18e>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1e58      	subs	r0, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	0099      	lsls	r1, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_I2C_Init+0x196>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e022      	b.n	8001b38 <HAL_I2C_Init+0x1dc>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10e      	bne.n	8001b18 <HAL_I2C_Init+0x1bc>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1e58      	subs	r0, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6859      	ldr	r1, [r3, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b16:	e00f      	b.n	8001b38 <HAL_I2C_Init+0x1dc>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1e58      	subs	r0, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	0099      	lsls	r1, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	6809      	ldr	r1, [r1, #0]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6911      	ldr	r1, [r2, #16]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68d2      	ldr	r2, [r2, #12]
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	000186a0 	.word	0x000186a0
 8001bd4:	001e847f 	.word	0x001e847f
 8001bd8:	003d08ff 	.word	0x003d08ff
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	10624dd3 	.word	0x10624dd3

08001be4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	817b      	strh	r3, [r7, #10]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff fb34 	bl	8001264 <HAL_GetTick>
 8001bfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	f040 80e0 	bne.w	8001dcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2319      	movs	r3, #25
 8001c12:	2201      	movs	r2, #1
 8001c14:	4970      	ldr	r1, [pc, #448]	@ (8001dd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 fa92 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
 8001c24:	e0d3      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_I2C_Master_Transmit+0x50>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e0cc      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d007      	beq.n	8001c5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2221      	movs	r2, #33	@ 0x21
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2210      	movs	r2, #16
 8001c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	893a      	ldrh	r2, [r7, #8]
 8001c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4a50      	ldr	r2, [pc, #320]	@ (8001ddc <HAL_I2C_Master_Transmit+0x1f8>)
 8001c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c9c:	8979      	ldrh	r1, [r7, #10]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	6a3a      	ldr	r2, [r7, #32]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f9ca 	bl	800203c <I2C_MasterRequestWrite>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e08d      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cc8:	e066      	b.n	8001d98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	6a39      	ldr	r1, [r7, #32]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 fb50 	bl	8002374 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d107      	bne.n	8001cf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e06b      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d11b      	bne.n	8001d6c <HAL_I2C_Master_Transmit+0x188>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d017      	beq.n	8001d6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	6a39      	ldr	r1, [r7, #32]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 fb47 	bl	8002404 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00d      	beq.n	8001d98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d107      	bne.n	8001d94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e01a      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d194      	bne.n	8001cca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
  }
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	00100002 	.word	0x00100002
 8001ddc:	ffff0000 	.word	0xffff0000

08001de0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	@ 0x28
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	460b      	mov	r3, r1
 8001dee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff fa38 	bl	8001264 <HAL_GetTick>
 8001df4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	f040 8111 	bne.w	800202a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2319      	movs	r3, #25
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4988      	ldr	r1, [pc, #544]	@ (8002034 <HAL_I2C_IsDeviceReady+0x254>)
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 f994 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e104      	b.n	800202c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_I2C_IsDeviceReady+0x50>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e0fd      	b.n	800202c <HAL_I2C_IsDeviceReady+0x24c>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d007      	beq.n	8001e56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2224      	movs	r2, #36	@ 0x24
 8001e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4a70      	ldr	r2, [pc, #448]	@ (8002038 <HAL_I2C_IsDeviceReady+0x258>)
 8001e78:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f952 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00d      	beq.n	8001ebe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eb0:	d103      	bne.n	8001eba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eb8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e0b6      	b.n	800202c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ebe:	897b      	ldrh	r3, [r7, #10]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ecc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff f9c9 	bl	8001264 <HAL_GetTick>
 8001ed2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	bf0c      	ite	eq
 8001ee2:	2301      	moveq	r3, #1
 8001ee4:	2300      	movne	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ef8:	bf0c      	ite	eq
 8001efa:	2301      	moveq	r3, #1
 8001efc:	2300      	movne	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f02:	e025      	b.n	8001f50 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f04:	f7ff f9ae 	bl	8001264 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d302      	bcc.n	8001f1a <HAL_I2C_IsDeviceReady+0x13a>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	22a0      	movs	r2, #160	@ 0xa0
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f5a:	d005      	beq.n	8001f68 <HAL_I2C_IsDeviceReady+0x188>
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <HAL_I2C_IsDeviceReady+0x188>
 8001f62:	7dbb      	ldrb	r3, [r7, #22]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0cd      	beq.n	8001f04 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d129      	bne.n	8001fd2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2319      	movs	r3, #25
 8001faa:	2201      	movs	r2, #1
 8001fac:	4921      	ldr	r1, [pc, #132]	@ (8002034 <HAL_I2C_IsDeviceReady+0x254>)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f8c6 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e036      	b.n	800202c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e02c      	b.n	800202c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2319      	movs	r3, #25
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	490f      	ldr	r1, [pc, #60]	@ (8002034 <HAL_I2C_IsDeviceReady+0x254>)
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f8a2 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e012      	b.n	800202c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3301      	adds	r3, #1
 800200a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	f4ff af32 	bcc.w	8001e7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
  }
}
 800202c:	4618      	mov	r0, r3
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	00100002 	.word	0x00100002
 8002038:	ffff0000 	.word	0xffff0000

0800203c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	460b      	mov	r3, r1
 800204a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b08      	cmp	r3, #8
 8002056:	d006      	beq.n	8002066 <I2C_MasterRequestWrite+0x2a>
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d003      	beq.n	8002066 <I2C_MasterRequestWrite+0x2a>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002064:	d108      	bne.n	8002078 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e00b      	b.n	8002090 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	2b12      	cmp	r3, #18
 800207e:	d107      	bne.n	8002090 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800208e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f84f 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00d      	beq.n	80020c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020b6:	d103      	bne.n	80020c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e035      	b.n	8002130 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020cc:	d108      	bne.n	80020e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020ce:	897b      	ldrh	r3, [r7, #10]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020dc:	611a      	str	r2, [r3, #16]
 80020de:	e01b      	b.n	8002118 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020e0:	897b      	ldrh	r3, [r7, #10]
 80020e2:	11db      	asrs	r3, r3, #7
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 0306 	and.w	r3, r3, #6
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f063 030f 	orn	r3, r3, #15
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	490e      	ldr	r1, [pc, #56]	@ (8002138 <I2C_MasterRequestWrite+0xfc>)
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f898 	bl	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e010      	b.n	8002130 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800210e:	897b      	ldrh	r3, [r7, #10]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4907      	ldr	r1, [pc, #28]	@ (800213c <I2C_MasterRequestWrite+0x100>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f888 	bl	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	00010008 	.word	0x00010008
 800213c:	00010002 	.word	0x00010002

08002140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002150:	e048      	b.n	80021e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d044      	beq.n	80021e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215a:	f7ff f883 	bl	8001264 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d302      	bcc.n	8002170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d139      	bne.n	80021e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	0c1b      	lsrs	r3, r3, #16
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d10d      	bne.n	8002196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	43da      	mvns	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4013      	ands	r3, r2
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf0c      	ite	eq
 800218c:	2301      	moveq	r3, #1
 800218e:	2300      	movne	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	e00c      	b.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	43da      	mvns	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	4013      	ands	r3, r2
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d116      	bne.n	80021e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e023      	b.n	800222c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10d      	bne.n	800220a <I2C_WaitOnFlagUntilTimeout+0xca>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	43da      	mvns	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4013      	ands	r3, r2
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	e00c      	b.n	8002224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	43da      	mvns	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4013      	ands	r3, r2
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	429a      	cmp	r2, r3
 8002228:	d093      	beq.n	8002152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002242:	e071      	b.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002252:	d123      	bne.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800226c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f043 0204 	orr.w	r2, r3, #4
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e067      	b.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a2:	d041      	beq.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a4:	f7fe ffde 	bl	8001264 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d302      	bcc.n	80022ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d136      	bne.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10c      	bne.n	80022de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	43da      	mvns	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4013      	ands	r3, r2
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	e00b      	b.n	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	43da      	mvns	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4013      	ands	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d016      	beq.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	f043 0220 	orr.w	r2, r3, #32
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e021      	b.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10c      	bne.n	800234c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	43da      	mvns	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	4013      	ands	r3, r2
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e00b      	b.n	8002364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4013      	ands	r3, r2
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	bf14      	ite	ne
 800235e:	2301      	movne	r3, #1
 8002360:	2300      	moveq	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	f47f af6d 	bne.w	8002244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002380:	e034      	b.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f886 	bl	8002494 <I2C_IsAcknowledgeFailed>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e034      	b.n	80023fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d028      	beq.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7fe ff63 	bl	8001264 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d11d      	bne.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ba:	2b80      	cmp	r3, #128	@ 0x80
 80023bc:	d016      	beq.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	f043 0220 	orr.w	r2, r3, #32
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e007      	b.n	80023fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f6:	2b80      	cmp	r3, #128	@ 0x80
 80023f8:	d1c3      	bne.n	8002382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002410:	e034      	b.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f83e 	bl	8002494 <I2C_IsAcknowledgeFailed>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e034      	b.n	800248c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d028      	beq.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7fe ff1b 	bl	8001264 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d11d      	bne.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b04      	cmp	r3, #4
 800244c:	d016      	beq.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	f043 0220 	orr.w	r2, r3, #32
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e007      	b.n	800248c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b04      	cmp	r3, #4
 8002488:	d1c3      	bne.n	8002412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024aa:	d11b      	bne.n	80024e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	f043 0204 	orr.w	r2, r3, #4
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e267      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d075      	beq.n	80025fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002512:	4b88      	ldr	r3, [pc, #544]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b04      	cmp	r3, #4
 800251c:	d00c      	beq.n	8002538 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800251e:	4b85      	ldr	r3, [pc, #532]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002526:	2b08      	cmp	r3, #8
 8002528:	d112      	bne.n	8002550 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252a:	4b82      	ldr	r3, [pc, #520]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002532:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002536:	d10b      	bne.n	8002550 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	4b7e      	ldr	r3, [pc, #504]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d05b      	beq.n	80025fc <HAL_RCC_OscConfig+0x108>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d157      	bne.n	80025fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e242      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002558:	d106      	bne.n	8002568 <HAL_RCC_OscConfig+0x74>
 800255a:	4b76      	ldr	r3, [pc, #472]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a75      	ldr	r2, [pc, #468]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e01d      	b.n	80025a4 <HAL_RCC_OscConfig+0xb0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x98>
 8002572:	4b70      	ldr	r3, [pc, #448]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a6f      	ldr	r2, [pc, #444]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b6d      	ldr	r3, [pc, #436]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6c      	ldr	r2, [pc, #432]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0xb0>
 800258c:	4b69      	ldr	r3, [pc, #420]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a68      	ldr	r2, [pc, #416]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b66      	ldr	r3, [pc, #408]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a65      	ldr	r2, [pc, #404]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 800259e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fe5a 	bl	8001264 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7fe fe56 	bl	8001264 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	@ 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e207      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0xc0>
 80025d2:	e014      	b.n	80025fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fe46 	bl	8001264 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe fe42 	bl	8001264 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	@ 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1f3      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	4b51      	ldr	r3, [pc, #324]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0xe8>
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d063      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800260a:	4b4a      	ldr	r3, [pc, #296]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002616:	4b47      	ldr	r3, [pc, #284]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800261e:	2b08      	cmp	r3, #8
 8002620:	d11c      	bne.n	800265c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002622:	4b44      	ldr	r3, [pc, #272]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d116      	bne.n	800265c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	4b41      	ldr	r3, [pc, #260]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_RCC_OscConfig+0x152>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e1c7      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b3b      	ldr	r3, [pc, #236]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4937      	ldr	r1, [pc, #220]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	e03a      	b.n	80026d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002664:	4b34      	ldr	r3, [pc, #208]	@ (8002738 <HAL_RCC_OscConfig+0x244>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fdfb 	bl	8001264 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002672:	f7fe fdf7 	bl	8001264 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e1a8      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	4b2b      	ldr	r3, [pc, #172]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b28      	ldr	r3, [pc, #160]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4925      	ldr	r1, [pc, #148]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
 80026a4:	e015      	b.n	80026d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a6:	4b24      	ldr	r3, [pc, #144]	@ (8002738 <HAL_RCC_OscConfig+0x244>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fdda 	bl	8001264 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b4:	f7fe fdd6 	bl	8001264 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e187      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d036      	beq.n	800274c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e6:	4b15      	ldr	r3, [pc, #84]	@ (800273c <HAL_RCC_OscConfig+0x248>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe fdba 	bl	8001264 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f4:	f7fe fdb6 	bl	8001264 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e167      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	4b0b      	ldr	r3, [pc, #44]	@ (8002734 <HAL_RCC_OscConfig+0x240>)
 8002708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x200>
 8002712:	e01b      	b.n	800274c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002714:	4b09      	ldr	r3, [pc, #36]	@ (800273c <HAL_RCC_OscConfig+0x248>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271a:	f7fe fda3 	bl	8001264 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	e00e      	b.n	8002740 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002722:	f7fe fd9f 	bl	8001264 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d907      	bls.n	8002740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e150      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
 8002734:	40023800 	.word	0x40023800
 8002738:	42470000 	.word	0x42470000
 800273c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002740:	4b88      	ldr	r3, [pc, #544]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 8002742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ea      	bne.n	8002722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8097 	beq.w	8002888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275e:	4b81      	ldr	r3, [pc, #516]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10f      	bne.n	800278a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b7d      	ldr	r3, [pc, #500]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	4a7c      	ldr	r2, [pc, #496]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	@ 0x40
 800277a:	4b7a      	ldr	r3, [pc, #488]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278a:	4b77      	ldr	r3, [pc, #476]	@ (8002968 <HAL_RCC_OscConfig+0x474>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d118      	bne.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002796:	4b74      	ldr	r3, [pc, #464]	@ (8002968 <HAL_RCC_OscConfig+0x474>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a73      	ldr	r2, [pc, #460]	@ (8002968 <HAL_RCC_OscConfig+0x474>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a2:	f7fe fd5f 	bl	8001264 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027aa:	f7fe fd5b 	bl	8001264 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e10c      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002968 <HAL_RCC_OscConfig+0x474>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x2ea>
 80027d0:	4b64      	ldr	r3, [pc, #400]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d4:	4a63      	ldr	r2, [pc, #396]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6713      	str	r3, [r2, #112]	@ 0x70
 80027dc:	e01c      	b.n	8002818 <HAL_RCC_OscConfig+0x324>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x30c>
 80027e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_OscConfig+0x324>
 8002800:	4b58      	ldr	r3, [pc, #352]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	4a57      	ldr	r2, [pc, #348]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	6713      	str	r3, [r2, #112]	@ 0x70
 800280c:	4b55      	ldr	r3, [pc, #340]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002810:	4a54      	ldr	r2, [pc, #336]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 8002812:	f023 0304 	bic.w	r3, r3, #4
 8002816:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d015      	beq.n	800284c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe fd20 	bl	8001264 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe fd1c 	bl	8001264 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0cb      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	4b49      	ldr	r3, [pc, #292]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0ee      	beq.n	8002828 <HAL_RCC_OscConfig+0x334>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284c:	f7fe fd0a 	bl	8001264 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7fe fd06 	bl	8001264 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0b5      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286a:	4b3e      	ldr	r3, [pc, #248]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1ee      	bne.n	8002854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002876:	7dfb      	ldrb	r3, [r7, #23]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d105      	bne.n	8002888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287c:	4b39      	ldr	r3, [pc, #228]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	4a38      	ldr	r2, [pc, #224]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 8002882:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002886:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80a1 	beq.w	80029d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002892:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b08      	cmp	r3, #8
 800289c:	d05c      	beq.n	8002958 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d141      	bne.n	800292a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b31      	ldr	r3, [pc, #196]	@ (800296c <HAL_RCC_OscConfig+0x478>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe fcda 	bl	8001264 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fcd6 	bl	8001264 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e087      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	4b27      	ldr	r3, [pc, #156]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	019b      	lsls	r3, r3, #6
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	3b01      	subs	r3, #1
 80028ec:	041b      	lsls	r3, r3, #16
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	491b      	ldr	r1, [pc, #108]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028fc:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <HAL_RCC_OscConfig+0x478>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fe fcaf 	bl	8001264 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290a:	f7fe fcab 	bl	8001264 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e05c      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x416>
 8002928:	e054      	b.n	80029d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292a:	4b10      	ldr	r3, [pc, #64]	@ (800296c <HAL_RCC_OscConfig+0x478>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fe fc98 	bl	8001264 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe fc94 	bl	8001264 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e045      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <HAL_RCC_OscConfig+0x470>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x444>
 8002956:	e03d      	b.n	80029d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d107      	bne.n	8002970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e038      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
 8002964:	40023800 	.word	0x40023800
 8002968:	40007000 	.word	0x40007000
 800296c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <HAL_RCC_OscConfig+0x4ec>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d028      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d121      	bne.n	80029d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d11a      	bne.n	80029d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029a0:	4013      	ands	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d111      	bne.n	80029d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	3b01      	subs	r3, #1
 80029ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800

080029e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0cc      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f8:	4b68      	ldr	r3, [pc, #416]	@ (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d90c      	bls.n	8002a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b65      	ldr	r3, [pc, #404]	@ (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b63      	ldr	r3, [pc, #396]	@ (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0b8      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a38:	4b59      	ldr	r3, [pc, #356]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a58      	ldr	r2, [pc, #352]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a50:	4b53      	ldr	r3, [pc, #332]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a52      	ldr	r2, [pc, #328]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b50      	ldr	r3, [pc, #320]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	494d      	ldr	r1, [pc, #308]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d044      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4b47      	ldr	r3, [pc, #284]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d119      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e07f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e067      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac2:	4b37      	ldr	r3, [pc, #220]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4934      	ldr	r1, [pc, #208]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fbc6 	bl	8001264 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7fe fbc2 	bl	8001264 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e04f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 020c 	and.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d1eb      	bne.n	8002adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b04:	4b25      	ldr	r3, [pc, #148]	@ (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d20c      	bcs.n	8002b2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b22      	ldr	r3, [pc, #136]	@ (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b20      	ldr	r3, [pc, #128]	@ (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e032      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b38:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4916      	ldr	r1, [pc, #88]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b56:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	490e      	ldr	r1, [pc, #56]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b6a:	f000 f821 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	490a      	ldr	r1, [pc, #40]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	5ccb      	ldrb	r3, [r1, r3]
 8002b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b82:	4a09      	ldr	r2, [pc, #36]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_RCC_ClockConfig+0x1c8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fb26 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023c00 	.word	0x40023c00
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	08004990 	.word	0x08004990
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	20000004 	.word	0x20000004

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb4:	b094      	sub	sp, #80	@ 0x50
 8002bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc8:	4b79      	ldr	r3, [pc, #484]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	f200 80e1 	bhi.w	8002d9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x3a>
 8002be2:	e0db      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b73      	ldr	r3, [pc, #460]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002be6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002be8:	e0db      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bea:	4b73      	ldr	r3, [pc, #460]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bee:	e0d8      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bf8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d063      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c06:	4b6a      	ldr	r3, [pc, #424]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c22:	4622      	mov	r2, r4
 8002c24:	462b      	mov	r3, r5
 8002c26:	f04f 0000 	mov.w	r0, #0
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	0159      	lsls	r1, r3, #5
 8002c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c34:	0150      	lsls	r0, r2, #5
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	1a51      	subs	r1, r2, r1
 8002c3e:	6139      	str	r1, [r7, #16]
 8002c40:	4629      	mov	r1, r5
 8002c42:	eb63 0301 	sbc.w	r3, r3, r1
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c54:	4659      	mov	r1, fp
 8002c56:	018b      	lsls	r3, r1, #6
 8002c58:	4651      	mov	r1, sl
 8002c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c5e:	4651      	mov	r1, sl
 8002c60:	018a      	lsls	r2, r1, #6
 8002c62:	4651      	mov	r1, sl
 8002c64:	ebb2 0801 	subs.w	r8, r2, r1
 8002c68:	4659      	mov	r1, fp
 8002c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c82:	4690      	mov	r8, r2
 8002c84:	4699      	mov	r9, r3
 8002c86:	4623      	mov	r3, r4
 8002c88:	eb18 0303 	adds.w	r3, r8, r3
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	462b      	mov	r3, r5
 8002c90:	eb49 0303 	adc.w	r3, r9, r3
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	024b      	lsls	r3, r1, #9
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cac:	4621      	mov	r1, r4
 8002cae:	024a      	lsls	r2, r1, #9
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cc0:	f7fd fae6 	bl	8000290 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ccc:	e058      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cce:	4b38      	ldr	r3, [pc, #224]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	099b      	lsrs	r3, r3, #6
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	4611      	mov	r1, r2
 8002cda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ce8:	4642      	mov	r2, r8
 8002cea:	464b      	mov	r3, r9
 8002cec:	f04f 0000 	mov.w	r0, #0
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	0159      	lsls	r1, r3, #5
 8002cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cfa:	0150      	lsls	r0, r2, #5
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4641      	mov	r1, r8
 8002d02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d06:	4649      	mov	r1, r9
 8002d08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d20:	ebb2 040a 	subs.w	r4, r2, sl
 8002d24:	eb63 050b 	sbc.w	r5, r3, fp
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	00eb      	lsls	r3, r5, #3
 8002d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d36:	00e2      	lsls	r2, r4, #3
 8002d38:	4614      	mov	r4, r2
 8002d3a:	461d      	mov	r5, r3
 8002d3c:	4643      	mov	r3, r8
 8002d3e:	18e3      	adds	r3, r4, r3
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	464b      	mov	r3, r9
 8002d44:	eb45 0303 	adc.w	r3, r5, r3
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d56:	4629      	mov	r1, r5
 8002d58:	028b      	lsls	r3, r1, #10
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d60:	4621      	mov	r1, r4
 8002d62:	028a      	lsls	r2, r1, #10
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	61fa      	str	r2, [r7, #28]
 8002d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d74:	f7fd fa8c 	bl	8000290 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3750      	adds	r7, #80	@ 0x50
 8002da8:	46bd      	mov	sp, r7
 8002daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	007a1200 	.word	0x007a1200

08002dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	@ (8002dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000000 	.word	0x20000000

08002dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd8:	f7ff fff0 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	0a9b      	lsrs	r3, r3, #10
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4903      	ldr	r1, [pc, #12]	@ (8002df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40023800 	.word	0x40023800
 8002df8:	080049a0 	.word	0x080049a0

08002dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e00:	f7ff ffdc 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	0b5b      	lsrs	r3, r3, #13
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4903      	ldr	r1, [pc, #12]	@ (8002e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	080049a0 	.word	0x080049a0

08002e24 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e04a      	b.n	8002ecc <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe f8a0 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	@ 0x24
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fe63 	bl	8003b34 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8002e8c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0208 	orr.w	r2, r2, #8
 8002e9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002eac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	@ 0x28
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d175      	bne.n	8002fe0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_UART_Transmit+0x2c>
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e06e      	b.n	8002fe2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2221      	movs	r2, #33	@ 0x21
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f12:	f7fe f9a7 	bl	8001264 <HAL_GetTick>
 8002f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	88fa      	ldrh	r2, [r7, #6]
 8002f1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	88fa      	ldrh	r2, [r7, #6]
 8002f22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f2c:	d108      	bne.n	8002f40 <HAL_UART_Transmit+0x6c>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d104      	bne.n	8002f40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	e003      	b.n	8002f48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f48:	e02e      	b.n	8002fa8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2180      	movs	r1, #128	@ 0x80
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fbbd 	bl	80036d4 <UART_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e03a      	b.n	8002fe2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10b      	bne.n	8002f8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	3302      	adds	r3, #2
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	e007      	b.n	8002f9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	3301      	adds	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1cb      	bne.n	8002f4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2140      	movs	r1, #64	@ 0x40
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fb89 	bl	80036d4 <UART_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e006      	b.n	8002fe2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b08c      	sub	sp, #48	@ 0x30
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b20      	cmp	r3, #32
 8003002:	d14a      	bne.n	800309a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e043      	b.n	800309c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	461a      	mov	r2, r3
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fbad 	bl	8003786 <UART_Start_Receive_IT>
 800302c:	4603      	mov	r3, r0
 800302e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003032:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003036:	2b00      	cmp	r3, #0
 8003038:	d12c      	bne.n	8003094 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	2b01      	cmp	r3, #1
 8003040:	d125      	bne.n	800308e <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	e853 3f00 	ldrex	r3, [r3]
 8003066:	617b      	str	r3, [r7, #20]
   return(result);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f043 0310 	orr.w	r3, r3, #16
 800306e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003078:	627a      	str	r2, [r7, #36]	@ 0x24
 800307a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003080:	e841 2300 	strex	r3, r2, [r1]
 8003084:	61fb      	str	r3, [r7, #28]
   return(result);
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e5      	bne.n	8003058 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800308c:	e002      	b.n	8003094 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003094:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003098:	e000      	b.n	800309c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3730      	adds	r7, #48	@ 0x30
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b0ba      	sub	sp, #232	@ 0xe8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10f      	bne.n	800310a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_UART_IRQHandler+0x66>
 80030f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fc58 	bl	80039b8 <UART_Receive_IT>
      return;
 8003108:	e25b      	b.n	80035c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800310a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80de 	beq.w	80032d0 <HAL_UART_IRQHandler+0x22c>
 8003114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d106      	bne.n	800312e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003124:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80d1 	beq.w	80032d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800312e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_UART_IRQHandler+0xae>
 800313a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800313e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <HAL_UART_IRQHandler+0xd2>
 800315e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	f043 0202 	orr.w	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_UART_IRQHandler+0xf6>
 8003182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	f043 0204 	orr.w	r2, r3, #4
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800319a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d011      	beq.n	80031ca <HAL_UART_IRQHandler+0x126>
 80031a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d105      	bne.n	80031be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	f043 0208 	orr.w	r2, r3, #8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 81f2 	beq.w	80035b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_UART_IRQHandler+0x14e>
 80031e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fbe3 	bl	80039b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fc:	2b40      	cmp	r3, #64	@ 0x40
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <HAL_UART_IRQHandler+0x17a>
 8003216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d04f      	beq.n	80032be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 faeb 	bl	80037fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322e:	2b40      	cmp	r3, #64	@ 0x40
 8003230:	d141      	bne.n	80032b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3314      	adds	r3, #20
 8003238:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003240:	e853 3f00 	ldrex	r3, [r3]
 8003244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003248:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800324c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003250:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3314      	adds	r3, #20
 800325a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800325e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003262:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003266:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800326a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1d9      	bne.n	8003232 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d013      	beq.n	80032ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328a:	4a7e      	ldr	r2, [pc, #504]	@ (8003484 <HAL_UART_IRQHandler+0x3e0>)
 800328c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe f997 	bl	80015c6 <HAL_DMA_Abort_IT>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032a8:	4610      	mov	r0, r2
 80032aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	e00e      	b.n	80032cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f99e 	bl	80035f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b4:	e00a      	b.n	80032cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f99a 	bl	80035f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032bc:	e006      	b.n	80032cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f996 	bl	80035f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032ca:	e175      	b.n	80035b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	bf00      	nop
    return;
 80032ce:	e173      	b.n	80035b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	f040 814f 	bne.w	8003578 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8148 	beq.w	8003578 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8141 	beq.w	8003578 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003316:	2b40      	cmp	r3, #64	@ 0x40
 8003318:	f040 80b6 	bne.w	8003488 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003328:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8145 	beq.w	80035bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800333a:	429a      	cmp	r2, r3
 800333c:	f080 813e 	bcs.w	80035bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003346:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003352:	f000 8088 	beq.w	8003466 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	330c      	adds	r3, #12
 800335c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800336c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003374:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003382:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003386:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800338e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800339a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1d9      	bne.n	8003356 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3314      	adds	r3, #20
 80033a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ac:	e853 3f00 	ldrex	r3, [r3]
 80033b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3314      	adds	r3, #20
 80033c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e1      	bne.n	80033a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3314      	adds	r3, #20
 80033e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3314      	adds	r3, #20
 80033fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003402:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003404:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003408:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003410:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e3      	bne.n	80033de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003436:	f023 0310 	bic.w	r3, r3, #16
 800343a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003448:	65ba      	str	r2, [r7, #88]	@ 0x58
 800344a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800344e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e3      	bne.n	8003424 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe f840 	bl	80014e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2202      	movs	r2, #2
 800346a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003474:	b29b      	uxth	r3, r3
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	b29b      	uxth	r3, r3
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7fd f90f 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003482:	e09b      	b.n	80035bc <HAL_UART_IRQHandler+0x518>
 8003484:	080038c1 	.word	0x080038c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003490:	b29b      	uxth	r3, r3
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 808e 	beq.w	80035c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8089 	beq.w	80035c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80034d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e3      	bne.n	80034ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3314      	adds	r3, #20
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	623b      	str	r3, [r7, #32]
   return(result);
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3314      	adds	r3, #20
 8003506:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800350a:	633a      	str	r2, [r7, #48]	@ 0x30
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003512:	e841 2300 	strex	r3, r2, [r1]
 8003516:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1e3      	bne.n	80034e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	330c      	adds	r3, #12
 8003532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	e853 3f00 	ldrex	r3, [r3]
 800353a:	60fb      	str	r3, [r7, #12]
   return(result);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0310 	bic.w	r3, r3, #16
 8003542:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	330c      	adds	r3, #12
 800354c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003550:	61fa      	str	r2, [r7, #28]
 8003552:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	69b9      	ldr	r1, [r7, #24]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	617b      	str	r3, [r7, #20]
   return(result);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e3      	bne.n	800352c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800356a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fd f895 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003576:	e023      	b.n	80035c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800357c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <HAL_UART_IRQHandler+0x4f4>
 8003584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f9a9 	bl	80038e8 <UART_Transmit_IT>
    return;
 8003596:	e014      	b.n	80035c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <HAL_UART_IRQHandler+0x51e>
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f9e9 	bl	8003988 <UART_EndTransmit_IT>
    return;
 80035b6:	e004      	b.n	80035c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80035b8:	bf00      	nop
 80035ba:	e002      	b.n	80035c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80035bc:	bf00      	nop
 80035be:	e000      	b.n	80035c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80035c0:	bf00      	nop
  }
}
 80035c2:	37e8      	adds	r7, #232	@ 0xe8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800361a:	2302      	movs	r3, #2
 800361c:	e020      	b.n	8003660 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2224      	movs	r2, #36	@ 0x24
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f023 030c 	bic.w	r3, r3, #12
 800363c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8003682:	2302      	movs	r3, #2
 8003684:	e020      	b.n	80036c8 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2224      	movs	r2, #36	@ 0x24
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f023 030c 	bic.w	r3, r3, #12
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f043 0304 	orr.w	r3, r3, #4
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e4:	e03b      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d037      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ee:	f7fd fdb9 	bl	8001264 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	6a3a      	ldr	r2, [r7, #32]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <UART_WaitOnFlagUntilTimeout+0x30>
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e03a      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d023      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b80      	cmp	r3, #128	@ 0x80
 800371a:	d020      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b40      	cmp	r3, #64	@ 0x40
 8003720:	d01d      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b08      	cmp	r3, #8
 800372e:	d116      	bne.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f857 	bl	80037fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2208      	movs	r2, #8
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e00f      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	bf0c      	ite	eq
 800376e:	2301      	moveq	r3, #1
 8003770:	2300      	movne	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	429a      	cmp	r2, r3
 800377a:	d0b4      	beq.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	4613      	mov	r3, r2
 8003792:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2222      	movs	r2, #34	@ 0x22
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d007      	beq.n	80037cc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0220 	orr.w	r2, r2, #32
 80037ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b095      	sub	sp, #84	@ 0x54
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	330c      	adds	r3, #12
 8003820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003822:	643a      	str	r2, [r7, #64]	@ 0x40
 8003824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e5      	bne.n	8003802 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3314      	adds	r3, #20
 800383c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	61fb      	str	r3, [r7, #28]
   return(result);
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3314      	adds	r3, #20
 8003854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800385c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	2b01      	cmp	r3, #1
 8003870:	d119      	bne.n	80038a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	330c      	adds	r3, #12
 8003878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	60bb      	str	r3, [r7, #8]
   return(result);
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f023 0310 	bic.w	r3, r3, #16
 8003888:	647b      	str	r3, [r7, #68]	@ 0x44
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	330c      	adds	r3, #12
 8003890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003892:	61ba      	str	r2, [r7, #24]
 8003894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6979      	ldr	r1, [r7, #20]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	613b      	str	r3, [r7, #16]
   return(result);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e5      	bne.n	8003872 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038b4:	bf00      	nop
 80038b6:	3754      	adds	r7, #84	@ 0x54
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff fe88 	bl	80035f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b21      	cmp	r3, #33	@ 0x21
 80038fa:	d13e      	bne.n	800397a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003904:	d114      	bne.n	8003930 <UART_Transmit_IT+0x48>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d110      	bne.n	8003930 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003922:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	1c9a      	adds	r2, r3, #2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]
 800392e:	e008      	b.n	8003942 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	1c59      	adds	r1, r3, #1
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6211      	str	r1, [r2, #32]
 800393a:	781a      	ldrb	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29b      	uxth	r3, r3
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4619      	mov	r1, r3
 8003950:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003964:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003974:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800399e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff fe0d 	bl	80035c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08c      	sub	sp, #48	@ 0x30
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b22      	cmp	r3, #34	@ 0x22
 80039ca:	f040 80ae 	bne.w	8003b2a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d6:	d117      	bne.n	8003a08 <UART_Receive_IT+0x50>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d113      	bne.n	8003a08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a00:	1c9a      	adds	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a06:	e026      	b.n	8003a56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1a:	d007      	beq.n	8003a2c <UART_Receive_IT+0x74>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <UART_Receive_IT+0x82>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e008      	b.n	8003a4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4619      	mov	r1, r3
 8003a64:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d15d      	bne.n	8003b26 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0220 	bic.w	r2, r2, #32
 8003a78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d135      	bne.n	8003b1c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f023 0310 	bic.w	r3, r3, #16
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad6:	623a      	str	r2, [r7, #32]
 8003ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	69f9      	ldr	r1, [r7, #28]
 8003adc:	6a3a      	ldr	r2, [r7, #32]
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d10a      	bne.n	8003b0e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7fc fdc3 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
 8003b1a:	e002      	b.n	8003b22 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff fd5d 	bl	80035dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e002      	b.n	8003b2c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3730      	adds	r7, #48	@ 0x30
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b38:	b0c0      	sub	sp, #256	@ 0x100
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b50:	68d9      	ldr	r1, [r3, #12]
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	ea40 0301 	orr.w	r3, r0, r1
 8003b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b8c:	f021 010c 	bic.w	r1, r1, #12
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bae:	6999      	ldr	r1, [r3, #24]
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	ea40 0301 	orr.w	r3, r0, r1
 8003bba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b8f      	ldr	r3, [pc, #572]	@ (8003e00 <UART_SetConfig+0x2cc>)
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d005      	beq.n	8003bd4 <UART_SetConfig+0xa0>
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b8d      	ldr	r3, [pc, #564]	@ (8003e04 <UART_SetConfig+0x2d0>)
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d104      	bne.n	8003bde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bd4:	f7ff f912 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 8003bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bdc:	e003      	b.n	8003be6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bde:	f7ff f8f9 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8003be2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bf0:	f040 810c 	bne.w	8003e0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c06:	4622      	mov	r2, r4
 8003c08:	462b      	mov	r3, r5
 8003c0a:	1891      	adds	r1, r2, r2
 8003c0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c0e:	415b      	adcs	r3, r3
 8003c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c16:	4621      	mov	r1, r4
 8003c18:	eb12 0801 	adds.w	r8, r2, r1
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	eb43 0901 	adc.w	r9, r3, r1
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c36:	4690      	mov	r8, r2
 8003c38:	4699      	mov	r9, r3
 8003c3a:	4623      	mov	r3, r4
 8003c3c:	eb18 0303 	adds.w	r3, r8, r3
 8003c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c44:	462b      	mov	r3, r5
 8003c46:	eb49 0303 	adc.w	r3, r9, r3
 8003c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c62:	460b      	mov	r3, r1
 8003c64:	18db      	adds	r3, r3, r3
 8003c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c68:	4613      	mov	r3, r2
 8003c6a:	eb42 0303 	adc.w	r3, r2, r3
 8003c6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c78:	f7fc fb0a 	bl	8000290 <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4b61      	ldr	r3, [pc, #388]	@ (8003e08 <UART_SetConfig+0x2d4>)
 8003c82:	fba3 2302 	umull	r2, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	011c      	lsls	r4, r3, #4
 8003c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	1891      	adds	r1, r2, r2
 8003ca2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ca4:	415b      	adcs	r3, r3
 8003ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cac:	4641      	mov	r1, r8
 8003cae:	eb12 0a01 	adds.w	sl, r2, r1
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ccc:	4692      	mov	sl, r2
 8003cce:	469b      	mov	fp, r3
 8003cd0:	4643      	mov	r3, r8
 8003cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8003cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8003ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	18db      	adds	r3, r3, r3
 8003cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cfe:	4613      	mov	r3, r2
 8003d00:	eb42 0303 	adc.w	r3, r2, r3
 8003d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d0e:	f7fc fabf 	bl	8000290 <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	4b3b      	ldr	r3, [pc, #236]	@ (8003e08 <UART_SetConfig+0x2d4>)
 8003d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2264      	movs	r2, #100	@ 0x64
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	1acb      	subs	r3, r1, r3
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d2e:	4b36      	ldr	r3, [pc, #216]	@ (8003e08 <UART_SetConfig+0x2d4>)
 8003d30:	fba3 2302 	umull	r2, r3, r3, r2
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d3c:	441c      	add	r4, r3
 8003d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	1891      	adds	r1, r2, r2
 8003d56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d58:	415b      	adcs	r3, r3
 8003d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d60:	4641      	mov	r1, r8
 8003d62:	1851      	adds	r1, r2, r1
 8003d64:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d66:	4649      	mov	r1, r9
 8003d68:	414b      	adcs	r3, r1
 8003d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d78:	4659      	mov	r1, fp
 8003d7a:	00cb      	lsls	r3, r1, #3
 8003d7c:	4651      	mov	r1, sl
 8003d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d82:	4651      	mov	r1, sl
 8003d84:	00ca      	lsls	r2, r1, #3
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d94:	464b      	mov	r3, r9
 8003d96:	460a      	mov	r2, r1
 8003d98:	eb42 0303 	adc.w	r3, r2, r3
 8003d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003db4:	460b      	mov	r3, r1
 8003db6:	18db      	adds	r3, r3, r3
 8003db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dba:	4613      	mov	r3, r2
 8003dbc:	eb42 0303 	adc.w	r3, r2, r3
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003dca:	f7fc fa61 	bl	8000290 <__aeabi_uldivmod>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <UART_SetConfig+0x2d4>)
 8003dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	2164      	movs	r1, #100	@ 0x64
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	3332      	adds	r3, #50	@ 0x32
 8003de6:	4a08      	ldr	r2, [pc, #32]	@ (8003e08 <UART_SetConfig+0x2d4>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	f003 0207 	and.w	r2, r3, #7
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4422      	add	r2, r4
 8003dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dfc:	e106      	b.n	800400c <UART_SetConfig+0x4d8>
 8003dfe:	bf00      	nop
 8003e00:	40011000 	.word	0x40011000
 8003e04:	40011400 	.word	0x40011400
 8003e08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e1e:	4642      	mov	r2, r8
 8003e20:	464b      	mov	r3, r9
 8003e22:	1891      	adds	r1, r2, r2
 8003e24:	6239      	str	r1, [r7, #32]
 8003e26:	415b      	adcs	r3, r3
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e2e:	4641      	mov	r1, r8
 8003e30:	1854      	adds	r4, r2, r1
 8003e32:	4649      	mov	r1, r9
 8003e34:	eb43 0501 	adc.w	r5, r3, r1
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	00eb      	lsls	r3, r5, #3
 8003e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e46:	00e2      	lsls	r2, r4, #3
 8003e48:	4614      	mov	r4, r2
 8003e4a:	461d      	mov	r5, r3
 8003e4c:	4643      	mov	r3, r8
 8003e4e:	18e3      	adds	r3, r4, r3
 8003e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e54:	464b      	mov	r3, r9
 8003e56:	eb45 0303 	adc.w	r3, r5, r3
 8003e5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	008b      	lsls	r3, r1, #2
 8003e7e:	4621      	mov	r1, r4
 8003e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e84:	4621      	mov	r1, r4
 8003e86:	008a      	lsls	r2, r1, #2
 8003e88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e8c:	f7fc fa00 	bl	8000290 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4b60      	ldr	r3, [pc, #384]	@ (8004018 <UART_SetConfig+0x4e4>)
 8003e96:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	011c      	lsls	r4, r3, #4
 8003e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ea8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	1891      	adds	r1, r2, r2
 8003eb6:	61b9      	str	r1, [r7, #24]
 8003eb8:	415b      	adcs	r3, r3
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	1851      	adds	r1, r2, r1
 8003ec4:	6139      	str	r1, [r7, #16]
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	414b      	adcs	r3, r1
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ed8:	4659      	mov	r1, fp
 8003eda:	00cb      	lsls	r3, r1, #3
 8003edc:	4651      	mov	r1, sl
 8003ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee2:	4651      	mov	r1, sl
 8003ee4:	00ca      	lsls	r2, r1, #3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4603      	mov	r3, r0
 8003eec:	4642      	mov	r2, r8
 8003eee:	189b      	adds	r3, r3, r2
 8003ef0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	460a      	mov	r2, r1
 8003ef8:	eb42 0303 	adc.w	r3, r2, r3
 8003efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f18:	4649      	mov	r1, r9
 8003f1a:	008b      	lsls	r3, r1, #2
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f22:	4641      	mov	r1, r8
 8003f24:	008a      	lsls	r2, r1, #2
 8003f26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f2a:	f7fc f9b1 	bl	8000290 <__aeabi_uldivmod>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4611      	mov	r1, r2
 8003f34:	4b38      	ldr	r3, [pc, #224]	@ (8004018 <UART_SetConfig+0x4e4>)
 8003f36:	fba3 2301 	umull	r2, r3, r3, r1
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	2264      	movs	r2, #100	@ 0x64
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	1acb      	subs	r3, r1, r3
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	3332      	adds	r3, #50	@ 0x32
 8003f48:	4a33      	ldr	r2, [pc, #204]	@ (8004018 <UART_SetConfig+0x4e4>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f54:	441c      	add	r4, r3
 8003f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f64:	4642      	mov	r2, r8
 8003f66:	464b      	mov	r3, r9
 8003f68:	1891      	adds	r1, r2, r2
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	415b      	adcs	r3, r3
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f74:	4641      	mov	r1, r8
 8003f76:	1851      	adds	r1, r2, r1
 8003f78:	6039      	str	r1, [r7, #0]
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	414b      	adcs	r3, r1
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f8c:	4659      	mov	r1, fp
 8003f8e:	00cb      	lsls	r3, r1, #3
 8003f90:	4651      	mov	r1, sl
 8003f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f96:	4651      	mov	r1, sl
 8003f98:	00ca      	lsls	r2, r1, #3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	460a      	mov	r2, r1
 8003faa:	eb42 0303 	adc.w	r3, r2, r3
 8003fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fba:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fc8:	4649      	mov	r1, r9
 8003fca:	008b      	lsls	r3, r1, #2
 8003fcc:	4641      	mov	r1, r8
 8003fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	008a      	lsls	r2, r1, #2
 8003fd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fda:	f7fc f959 	bl	8000290 <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <UART_SetConfig+0x4e4>)
 8003fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	2164      	movs	r1, #100	@ 0x64
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	3332      	adds	r3, #50	@ 0x32
 8003ff6:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <UART_SetConfig+0x4e4>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	f003 020f 	and.w	r2, r3, #15
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4422      	add	r2, r4
 800400a:	609a      	str	r2, [r3, #8]
}
 800400c:	bf00      	nop
 800400e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004012:	46bd      	mov	sp, r7
 8004014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004018:	51eb851f 	.word	0x51eb851f

0800401c <siprintf>:
 800401c:	b40e      	push	{r1, r2, r3}
 800401e:	b500      	push	{lr}
 8004020:	b09c      	sub	sp, #112	@ 0x70
 8004022:	ab1d      	add	r3, sp, #116	@ 0x74
 8004024:	9002      	str	r0, [sp, #8]
 8004026:	9006      	str	r0, [sp, #24]
 8004028:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800402c:	4809      	ldr	r0, [pc, #36]	@ (8004054 <siprintf+0x38>)
 800402e:	9107      	str	r1, [sp, #28]
 8004030:	9104      	str	r1, [sp, #16]
 8004032:	4909      	ldr	r1, [pc, #36]	@ (8004058 <siprintf+0x3c>)
 8004034:	f853 2b04 	ldr.w	r2, [r3], #4
 8004038:	9105      	str	r1, [sp, #20]
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	a902      	add	r1, sp, #8
 8004040:	f000 f9bc 	bl	80043bc <_svfiprintf_r>
 8004044:	9b02      	ldr	r3, [sp, #8]
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	b01c      	add	sp, #112	@ 0x70
 800404c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004050:	b003      	add	sp, #12
 8004052:	4770      	bx	lr
 8004054:	2000000c 	.word	0x2000000c
 8004058:	ffff0208 	.word	0xffff0208

0800405c <memmove>:
 800405c:	4288      	cmp	r0, r1
 800405e:	b510      	push	{r4, lr}
 8004060:	eb01 0402 	add.w	r4, r1, r2
 8004064:	d902      	bls.n	800406c <memmove+0x10>
 8004066:	4284      	cmp	r4, r0
 8004068:	4623      	mov	r3, r4
 800406a:	d807      	bhi.n	800407c <memmove+0x20>
 800406c:	1e43      	subs	r3, r0, #1
 800406e:	42a1      	cmp	r1, r4
 8004070:	d008      	beq.n	8004084 <memmove+0x28>
 8004072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800407a:	e7f8      	b.n	800406e <memmove+0x12>
 800407c:	4402      	add	r2, r0
 800407e:	4601      	mov	r1, r0
 8004080:	428a      	cmp	r2, r1
 8004082:	d100      	bne.n	8004086 <memmove+0x2a>
 8004084:	bd10      	pop	{r4, pc}
 8004086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800408a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800408e:	e7f7      	b.n	8004080 <memmove+0x24>

08004090 <memset>:
 8004090:	4402      	add	r2, r0
 8004092:	4603      	mov	r3, r0
 8004094:	4293      	cmp	r3, r2
 8004096:	d100      	bne.n	800409a <memset+0xa>
 8004098:	4770      	bx	lr
 800409a:	f803 1b01 	strb.w	r1, [r3], #1
 800409e:	e7f9      	b.n	8004094 <memset+0x4>

080040a0 <__errno>:
 80040a0:	4b01      	ldr	r3, [pc, #4]	@ (80040a8 <__errno+0x8>)
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	2000000c 	.word	0x2000000c

080040ac <__libc_init_array>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	4d0d      	ldr	r5, [pc, #52]	@ (80040e4 <__libc_init_array+0x38>)
 80040b0:	4c0d      	ldr	r4, [pc, #52]	@ (80040e8 <__libc_init_array+0x3c>)
 80040b2:	1b64      	subs	r4, r4, r5
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	2600      	movs	r6, #0
 80040b8:	42a6      	cmp	r6, r4
 80040ba:	d109      	bne.n	80040d0 <__libc_init_array+0x24>
 80040bc:	4d0b      	ldr	r5, [pc, #44]	@ (80040ec <__libc_init_array+0x40>)
 80040be:	4c0c      	ldr	r4, [pc, #48]	@ (80040f0 <__libc_init_array+0x44>)
 80040c0:	f000 fc4c 	bl	800495c <_init>
 80040c4:	1b64      	subs	r4, r4, r5
 80040c6:	10a4      	asrs	r4, r4, #2
 80040c8:	2600      	movs	r6, #0
 80040ca:	42a6      	cmp	r6, r4
 80040cc:	d105      	bne.n	80040da <__libc_init_array+0x2e>
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d4:	4798      	blx	r3
 80040d6:	3601      	adds	r6, #1
 80040d8:	e7ee      	b.n	80040b8 <__libc_init_array+0xc>
 80040da:	f855 3b04 	ldr.w	r3, [r5], #4
 80040de:	4798      	blx	r3
 80040e0:	3601      	adds	r6, #1
 80040e2:	e7f2      	b.n	80040ca <__libc_init_array+0x1e>
 80040e4:	080049e4 	.word	0x080049e4
 80040e8:	080049e4 	.word	0x080049e4
 80040ec:	080049e4 	.word	0x080049e4
 80040f0:	080049e8 	.word	0x080049e8

080040f4 <__retarget_lock_acquire_recursive>:
 80040f4:	4770      	bx	lr

080040f6 <__retarget_lock_release_recursive>:
 80040f6:	4770      	bx	lr

080040f8 <memcpy>:
 80040f8:	440a      	add	r2, r1
 80040fa:	4291      	cmp	r1, r2
 80040fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004100:	d100      	bne.n	8004104 <memcpy+0xc>
 8004102:	4770      	bx	lr
 8004104:	b510      	push	{r4, lr}
 8004106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800410a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800410e:	4291      	cmp	r1, r2
 8004110:	d1f9      	bne.n	8004106 <memcpy+0xe>
 8004112:	bd10      	pop	{r4, pc}

08004114 <_free_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	4605      	mov	r5, r0
 8004118:	2900      	cmp	r1, #0
 800411a:	d041      	beq.n	80041a0 <_free_r+0x8c>
 800411c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004120:	1f0c      	subs	r4, r1, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	bfb8      	it	lt
 8004126:	18e4      	addlt	r4, r4, r3
 8004128:	f000 f8e0 	bl	80042ec <__malloc_lock>
 800412c:	4a1d      	ldr	r2, [pc, #116]	@ (80041a4 <_free_r+0x90>)
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	b933      	cbnz	r3, 8004140 <_free_r+0x2c>
 8004132:	6063      	str	r3, [r4, #4]
 8004134:	6014      	str	r4, [r2, #0]
 8004136:	4628      	mov	r0, r5
 8004138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800413c:	f000 b8dc 	b.w	80042f8 <__malloc_unlock>
 8004140:	42a3      	cmp	r3, r4
 8004142:	d908      	bls.n	8004156 <_free_r+0x42>
 8004144:	6820      	ldr	r0, [r4, #0]
 8004146:	1821      	adds	r1, r4, r0
 8004148:	428b      	cmp	r3, r1
 800414a:	bf01      	itttt	eq
 800414c:	6819      	ldreq	r1, [r3, #0]
 800414e:	685b      	ldreq	r3, [r3, #4]
 8004150:	1809      	addeq	r1, r1, r0
 8004152:	6021      	streq	r1, [r4, #0]
 8004154:	e7ed      	b.n	8004132 <_free_r+0x1e>
 8004156:	461a      	mov	r2, r3
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	b10b      	cbz	r3, 8004160 <_free_r+0x4c>
 800415c:	42a3      	cmp	r3, r4
 800415e:	d9fa      	bls.n	8004156 <_free_r+0x42>
 8004160:	6811      	ldr	r1, [r2, #0]
 8004162:	1850      	adds	r0, r2, r1
 8004164:	42a0      	cmp	r0, r4
 8004166:	d10b      	bne.n	8004180 <_free_r+0x6c>
 8004168:	6820      	ldr	r0, [r4, #0]
 800416a:	4401      	add	r1, r0
 800416c:	1850      	adds	r0, r2, r1
 800416e:	4283      	cmp	r3, r0
 8004170:	6011      	str	r1, [r2, #0]
 8004172:	d1e0      	bne.n	8004136 <_free_r+0x22>
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	6053      	str	r3, [r2, #4]
 800417a:	4408      	add	r0, r1
 800417c:	6010      	str	r0, [r2, #0]
 800417e:	e7da      	b.n	8004136 <_free_r+0x22>
 8004180:	d902      	bls.n	8004188 <_free_r+0x74>
 8004182:	230c      	movs	r3, #12
 8004184:	602b      	str	r3, [r5, #0]
 8004186:	e7d6      	b.n	8004136 <_free_r+0x22>
 8004188:	6820      	ldr	r0, [r4, #0]
 800418a:	1821      	adds	r1, r4, r0
 800418c:	428b      	cmp	r3, r1
 800418e:	bf04      	itt	eq
 8004190:	6819      	ldreq	r1, [r3, #0]
 8004192:	685b      	ldreq	r3, [r3, #4]
 8004194:	6063      	str	r3, [r4, #4]
 8004196:	bf04      	itt	eq
 8004198:	1809      	addeq	r1, r1, r0
 800419a:	6021      	streq	r1, [r4, #0]
 800419c:	6054      	str	r4, [r2, #4]
 800419e:	e7ca      	b.n	8004136 <_free_r+0x22>
 80041a0:	bd38      	pop	{r3, r4, r5, pc}
 80041a2:	bf00      	nop
 80041a4:	200006b8 	.word	0x200006b8

080041a8 <sbrk_aligned>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	4e0f      	ldr	r6, [pc, #60]	@ (80041e8 <sbrk_aligned+0x40>)
 80041ac:	460c      	mov	r4, r1
 80041ae:	6831      	ldr	r1, [r6, #0]
 80041b0:	4605      	mov	r5, r0
 80041b2:	b911      	cbnz	r1, 80041ba <sbrk_aligned+0x12>
 80041b4:	f000 fb8c 	bl	80048d0 <_sbrk_r>
 80041b8:	6030      	str	r0, [r6, #0]
 80041ba:	4621      	mov	r1, r4
 80041bc:	4628      	mov	r0, r5
 80041be:	f000 fb87 	bl	80048d0 <_sbrk_r>
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	d103      	bne.n	80041ce <sbrk_aligned+0x26>
 80041c6:	f04f 34ff 	mov.w	r4, #4294967295
 80041ca:	4620      	mov	r0, r4
 80041cc:	bd70      	pop	{r4, r5, r6, pc}
 80041ce:	1cc4      	adds	r4, r0, #3
 80041d0:	f024 0403 	bic.w	r4, r4, #3
 80041d4:	42a0      	cmp	r0, r4
 80041d6:	d0f8      	beq.n	80041ca <sbrk_aligned+0x22>
 80041d8:	1a21      	subs	r1, r4, r0
 80041da:	4628      	mov	r0, r5
 80041dc:	f000 fb78 	bl	80048d0 <_sbrk_r>
 80041e0:	3001      	adds	r0, #1
 80041e2:	d1f2      	bne.n	80041ca <sbrk_aligned+0x22>
 80041e4:	e7ef      	b.n	80041c6 <sbrk_aligned+0x1e>
 80041e6:	bf00      	nop
 80041e8:	200006b4 	.word	0x200006b4

080041ec <_malloc_r>:
 80041ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f0:	1ccd      	adds	r5, r1, #3
 80041f2:	f025 0503 	bic.w	r5, r5, #3
 80041f6:	3508      	adds	r5, #8
 80041f8:	2d0c      	cmp	r5, #12
 80041fa:	bf38      	it	cc
 80041fc:	250c      	movcc	r5, #12
 80041fe:	2d00      	cmp	r5, #0
 8004200:	4606      	mov	r6, r0
 8004202:	db01      	blt.n	8004208 <_malloc_r+0x1c>
 8004204:	42a9      	cmp	r1, r5
 8004206:	d904      	bls.n	8004212 <_malloc_r+0x26>
 8004208:	230c      	movs	r3, #12
 800420a:	6033      	str	r3, [r6, #0]
 800420c:	2000      	movs	r0, #0
 800420e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004212:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042e8 <_malloc_r+0xfc>
 8004216:	f000 f869 	bl	80042ec <__malloc_lock>
 800421a:	f8d8 3000 	ldr.w	r3, [r8]
 800421e:	461c      	mov	r4, r3
 8004220:	bb44      	cbnz	r4, 8004274 <_malloc_r+0x88>
 8004222:	4629      	mov	r1, r5
 8004224:	4630      	mov	r0, r6
 8004226:	f7ff ffbf 	bl	80041a8 <sbrk_aligned>
 800422a:	1c43      	adds	r3, r0, #1
 800422c:	4604      	mov	r4, r0
 800422e:	d158      	bne.n	80042e2 <_malloc_r+0xf6>
 8004230:	f8d8 4000 	ldr.w	r4, [r8]
 8004234:	4627      	mov	r7, r4
 8004236:	2f00      	cmp	r7, #0
 8004238:	d143      	bne.n	80042c2 <_malloc_r+0xd6>
 800423a:	2c00      	cmp	r4, #0
 800423c:	d04b      	beq.n	80042d6 <_malloc_r+0xea>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	4639      	mov	r1, r7
 8004242:	4630      	mov	r0, r6
 8004244:	eb04 0903 	add.w	r9, r4, r3
 8004248:	f000 fb42 	bl	80048d0 <_sbrk_r>
 800424c:	4581      	cmp	r9, r0
 800424e:	d142      	bne.n	80042d6 <_malloc_r+0xea>
 8004250:	6821      	ldr	r1, [r4, #0]
 8004252:	1a6d      	subs	r5, r5, r1
 8004254:	4629      	mov	r1, r5
 8004256:	4630      	mov	r0, r6
 8004258:	f7ff ffa6 	bl	80041a8 <sbrk_aligned>
 800425c:	3001      	adds	r0, #1
 800425e:	d03a      	beq.n	80042d6 <_malloc_r+0xea>
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	442b      	add	r3, r5
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	f8d8 3000 	ldr.w	r3, [r8]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	bb62      	cbnz	r2, 80042c8 <_malloc_r+0xdc>
 800426e:	f8c8 7000 	str.w	r7, [r8]
 8004272:	e00f      	b.n	8004294 <_malloc_r+0xa8>
 8004274:	6822      	ldr	r2, [r4, #0]
 8004276:	1b52      	subs	r2, r2, r5
 8004278:	d420      	bmi.n	80042bc <_malloc_r+0xd0>
 800427a:	2a0b      	cmp	r2, #11
 800427c:	d917      	bls.n	80042ae <_malloc_r+0xc2>
 800427e:	1961      	adds	r1, r4, r5
 8004280:	42a3      	cmp	r3, r4
 8004282:	6025      	str	r5, [r4, #0]
 8004284:	bf18      	it	ne
 8004286:	6059      	strne	r1, [r3, #4]
 8004288:	6863      	ldr	r3, [r4, #4]
 800428a:	bf08      	it	eq
 800428c:	f8c8 1000 	streq.w	r1, [r8]
 8004290:	5162      	str	r2, [r4, r5]
 8004292:	604b      	str	r3, [r1, #4]
 8004294:	4630      	mov	r0, r6
 8004296:	f000 f82f 	bl	80042f8 <__malloc_unlock>
 800429a:	f104 000b 	add.w	r0, r4, #11
 800429e:	1d23      	adds	r3, r4, #4
 80042a0:	f020 0007 	bic.w	r0, r0, #7
 80042a4:	1ac2      	subs	r2, r0, r3
 80042a6:	bf1c      	itt	ne
 80042a8:	1a1b      	subne	r3, r3, r0
 80042aa:	50a3      	strne	r3, [r4, r2]
 80042ac:	e7af      	b.n	800420e <_malloc_r+0x22>
 80042ae:	6862      	ldr	r2, [r4, #4]
 80042b0:	42a3      	cmp	r3, r4
 80042b2:	bf0c      	ite	eq
 80042b4:	f8c8 2000 	streq.w	r2, [r8]
 80042b8:	605a      	strne	r2, [r3, #4]
 80042ba:	e7eb      	b.n	8004294 <_malloc_r+0xa8>
 80042bc:	4623      	mov	r3, r4
 80042be:	6864      	ldr	r4, [r4, #4]
 80042c0:	e7ae      	b.n	8004220 <_malloc_r+0x34>
 80042c2:	463c      	mov	r4, r7
 80042c4:	687f      	ldr	r7, [r7, #4]
 80042c6:	e7b6      	b.n	8004236 <_malloc_r+0x4a>
 80042c8:	461a      	mov	r2, r3
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	42a3      	cmp	r3, r4
 80042ce:	d1fb      	bne.n	80042c8 <_malloc_r+0xdc>
 80042d0:	2300      	movs	r3, #0
 80042d2:	6053      	str	r3, [r2, #4]
 80042d4:	e7de      	b.n	8004294 <_malloc_r+0xa8>
 80042d6:	230c      	movs	r3, #12
 80042d8:	6033      	str	r3, [r6, #0]
 80042da:	4630      	mov	r0, r6
 80042dc:	f000 f80c 	bl	80042f8 <__malloc_unlock>
 80042e0:	e794      	b.n	800420c <_malloc_r+0x20>
 80042e2:	6005      	str	r5, [r0, #0]
 80042e4:	e7d6      	b.n	8004294 <_malloc_r+0xa8>
 80042e6:	bf00      	nop
 80042e8:	200006b8 	.word	0x200006b8

080042ec <__malloc_lock>:
 80042ec:	4801      	ldr	r0, [pc, #4]	@ (80042f4 <__malloc_lock+0x8>)
 80042ee:	f7ff bf01 	b.w	80040f4 <__retarget_lock_acquire_recursive>
 80042f2:	bf00      	nop
 80042f4:	200006b0 	.word	0x200006b0

080042f8 <__malloc_unlock>:
 80042f8:	4801      	ldr	r0, [pc, #4]	@ (8004300 <__malloc_unlock+0x8>)
 80042fa:	f7ff befc 	b.w	80040f6 <__retarget_lock_release_recursive>
 80042fe:	bf00      	nop
 8004300:	200006b0 	.word	0x200006b0

08004304 <__ssputs_r>:
 8004304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004308:	688e      	ldr	r6, [r1, #8]
 800430a:	461f      	mov	r7, r3
 800430c:	42be      	cmp	r6, r7
 800430e:	680b      	ldr	r3, [r1, #0]
 8004310:	4682      	mov	sl, r0
 8004312:	460c      	mov	r4, r1
 8004314:	4690      	mov	r8, r2
 8004316:	d82d      	bhi.n	8004374 <__ssputs_r+0x70>
 8004318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800431c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004320:	d026      	beq.n	8004370 <__ssputs_r+0x6c>
 8004322:	6965      	ldr	r5, [r4, #20]
 8004324:	6909      	ldr	r1, [r1, #16]
 8004326:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800432a:	eba3 0901 	sub.w	r9, r3, r1
 800432e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004332:	1c7b      	adds	r3, r7, #1
 8004334:	444b      	add	r3, r9
 8004336:	106d      	asrs	r5, r5, #1
 8004338:	429d      	cmp	r5, r3
 800433a:	bf38      	it	cc
 800433c:	461d      	movcc	r5, r3
 800433e:	0553      	lsls	r3, r2, #21
 8004340:	d527      	bpl.n	8004392 <__ssputs_r+0x8e>
 8004342:	4629      	mov	r1, r5
 8004344:	f7ff ff52 	bl	80041ec <_malloc_r>
 8004348:	4606      	mov	r6, r0
 800434a:	b360      	cbz	r0, 80043a6 <__ssputs_r+0xa2>
 800434c:	6921      	ldr	r1, [r4, #16]
 800434e:	464a      	mov	r2, r9
 8004350:	f7ff fed2 	bl	80040f8 <memcpy>
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800435a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800435e:	81a3      	strh	r3, [r4, #12]
 8004360:	6126      	str	r6, [r4, #16]
 8004362:	6165      	str	r5, [r4, #20]
 8004364:	444e      	add	r6, r9
 8004366:	eba5 0509 	sub.w	r5, r5, r9
 800436a:	6026      	str	r6, [r4, #0]
 800436c:	60a5      	str	r5, [r4, #8]
 800436e:	463e      	mov	r6, r7
 8004370:	42be      	cmp	r6, r7
 8004372:	d900      	bls.n	8004376 <__ssputs_r+0x72>
 8004374:	463e      	mov	r6, r7
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	4632      	mov	r2, r6
 800437a:	4641      	mov	r1, r8
 800437c:	f7ff fe6e 	bl	800405c <memmove>
 8004380:	68a3      	ldr	r3, [r4, #8]
 8004382:	1b9b      	subs	r3, r3, r6
 8004384:	60a3      	str	r3, [r4, #8]
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	4433      	add	r3, r6
 800438a:	6023      	str	r3, [r4, #0]
 800438c:	2000      	movs	r0, #0
 800438e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004392:	462a      	mov	r2, r5
 8004394:	f000 faac 	bl	80048f0 <_realloc_r>
 8004398:	4606      	mov	r6, r0
 800439a:	2800      	cmp	r0, #0
 800439c:	d1e0      	bne.n	8004360 <__ssputs_r+0x5c>
 800439e:	6921      	ldr	r1, [r4, #16]
 80043a0:	4650      	mov	r0, sl
 80043a2:	f7ff feb7 	bl	8004114 <_free_r>
 80043a6:	230c      	movs	r3, #12
 80043a8:	f8ca 3000 	str.w	r3, [sl]
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043b2:	81a3      	strh	r3, [r4, #12]
 80043b4:	f04f 30ff 	mov.w	r0, #4294967295
 80043b8:	e7e9      	b.n	800438e <__ssputs_r+0x8a>
	...

080043bc <_svfiprintf_r>:
 80043bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c0:	4698      	mov	r8, r3
 80043c2:	898b      	ldrh	r3, [r1, #12]
 80043c4:	061b      	lsls	r3, r3, #24
 80043c6:	b09d      	sub	sp, #116	@ 0x74
 80043c8:	4607      	mov	r7, r0
 80043ca:	460d      	mov	r5, r1
 80043cc:	4614      	mov	r4, r2
 80043ce:	d510      	bpl.n	80043f2 <_svfiprintf_r+0x36>
 80043d0:	690b      	ldr	r3, [r1, #16]
 80043d2:	b973      	cbnz	r3, 80043f2 <_svfiprintf_r+0x36>
 80043d4:	2140      	movs	r1, #64	@ 0x40
 80043d6:	f7ff ff09 	bl	80041ec <_malloc_r>
 80043da:	6028      	str	r0, [r5, #0]
 80043dc:	6128      	str	r0, [r5, #16]
 80043de:	b930      	cbnz	r0, 80043ee <_svfiprintf_r+0x32>
 80043e0:	230c      	movs	r3, #12
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	b01d      	add	sp, #116	@ 0x74
 80043ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ee:	2340      	movs	r3, #64	@ 0x40
 80043f0:	616b      	str	r3, [r5, #20]
 80043f2:	2300      	movs	r3, #0
 80043f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80043f6:	2320      	movs	r3, #32
 80043f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004400:	2330      	movs	r3, #48	@ 0x30
 8004402:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80045a0 <_svfiprintf_r+0x1e4>
 8004406:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800440a:	f04f 0901 	mov.w	r9, #1
 800440e:	4623      	mov	r3, r4
 8004410:	469a      	mov	sl, r3
 8004412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004416:	b10a      	cbz	r2, 800441c <_svfiprintf_r+0x60>
 8004418:	2a25      	cmp	r2, #37	@ 0x25
 800441a:	d1f9      	bne.n	8004410 <_svfiprintf_r+0x54>
 800441c:	ebba 0b04 	subs.w	fp, sl, r4
 8004420:	d00b      	beq.n	800443a <_svfiprintf_r+0x7e>
 8004422:	465b      	mov	r3, fp
 8004424:	4622      	mov	r2, r4
 8004426:	4629      	mov	r1, r5
 8004428:	4638      	mov	r0, r7
 800442a:	f7ff ff6b 	bl	8004304 <__ssputs_r>
 800442e:	3001      	adds	r0, #1
 8004430:	f000 80a7 	beq.w	8004582 <_svfiprintf_r+0x1c6>
 8004434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004436:	445a      	add	r2, fp
 8004438:	9209      	str	r2, [sp, #36]	@ 0x24
 800443a:	f89a 3000 	ldrb.w	r3, [sl]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 809f 	beq.w	8004582 <_svfiprintf_r+0x1c6>
 8004444:	2300      	movs	r3, #0
 8004446:	f04f 32ff 	mov.w	r2, #4294967295
 800444a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800444e:	f10a 0a01 	add.w	sl, sl, #1
 8004452:	9304      	str	r3, [sp, #16]
 8004454:	9307      	str	r3, [sp, #28]
 8004456:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800445a:	931a      	str	r3, [sp, #104]	@ 0x68
 800445c:	4654      	mov	r4, sl
 800445e:	2205      	movs	r2, #5
 8004460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004464:	484e      	ldr	r0, [pc, #312]	@ (80045a0 <_svfiprintf_r+0x1e4>)
 8004466:	f7fb fec3 	bl	80001f0 <memchr>
 800446a:	9a04      	ldr	r2, [sp, #16]
 800446c:	b9d8      	cbnz	r0, 80044a6 <_svfiprintf_r+0xea>
 800446e:	06d0      	lsls	r0, r2, #27
 8004470:	bf44      	itt	mi
 8004472:	2320      	movmi	r3, #32
 8004474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004478:	0711      	lsls	r1, r2, #28
 800447a:	bf44      	itt	mi
 800447c:	232b      	movmi	r3, #43	@ 0x2b
 800447e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004482:	f89a 3000 	ldrb.w	r3, [sl]
 8004486:	2b2a      	cmp	r3, #42	@ 0x2a
 8004488:	d015      	beq.n	80044b6 <_svfiprintf_r+0xfa>
 800448a:	9a07      	ldr	r2, [sp, #28]
 800448c:	4654      	mov	r4, sl
 800448e:	2000      	movs	r0, #0
 8004490:	f04f 0c0a 	mov.w	ip, #10
 8004494:	4621      	mov	r1, r4
 8004496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800449a:	3b30      	subs	r3, #48	@ 0x30
 800449c:	2b09      	cmp	r3, #9
 800449e:	d94b      	bls.n	8004538 <_svfiprintf_r+0x17c>
 80044a0:	b1b0      	cbz	r0, 80044d0 <_svfiprintf_r+0x114>
 80044a2:	9207      	str	r2, [sp, #28]
 80044a4:	e014      	b.n	80044d0 <_svfiprintf_r+0x114>
 80044a6:	eba0 0308 	sub.w	r3, r0, r8
 80044aa:	fa09 f303 	lsl.w	r3, r9, r3
 80044ae:	4313      	orrs	r3, r2
 80044b0:	9304      	str	r3, [sp, #16]
 80044b2:	46a2      	mov	sl, r4
 80044b4:	e7d2      	b.n	800445c <_svfiprintf_r+0xa0>
 80044b6:	9b03      	ldr	r3, [sp, #12]
 80044b8:	1d19      	adds	r1, r3, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	9103      	str	r1, [sp, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bfbb      	ittet	lt
 80044c2:	425b      	neglt	r3, r3
 80044c4:	f042 0202 	orrlt.w	r2, r2, #2
 80044c8:	9307      	strge	r3, [sp, #28]
 80044ca:	9307      	strlt	r3, [sp, #28]
 80044cc:	bfb8      	it	lt
 80044ce:	9204      	strlt	r2, [sp, #16]
 80044d0:	7823      	ldrb	r3, [r4, #0]
 80044d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80044d4:	d10a      	bne.n	80044ec <_svfiprintf_r+0x130>
 80044d6:	7863      	ldrb	r3, [r4, #1]
 80044d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044da:	d132      	bne.n	8004542 <_svfiprintf_r+0x186>
 80044dc:	9b03      	ldr	r3, [sp, #12]
 80044de:	1d1a      	adds	r2, r3, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	9203      	str	r2, [sp, #12]
 80044e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044e8:	3402      	adds	r4, #2
 80044ea:	9305      	str	r3, [sp, #20]
 80044ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80045b0 <_svfiprintf_r+0x1f4>
 80044f0:	7821      	ldrb	r1, [r4, #0]
 80044f2:	2203      	movs	r2, #3
 80044f4:	4650      	mov	r0, sl
 80044f6:	f7fb fe7b 	bl	80001f0 <memchr>
 80044fa:	b138      	cbz	r0, 800450c <_svfiprintf_r+0x150>
 80044fc:	9b04      	ldr	r3, [sp, #16]
 80044fe:	eba0 000a 	sub.w	r0, r0, sl
 8004502:	2240      	movs	r2, #64	@ 0x40
 8004504:	4082      	lsls	r2, r0
 8004506:	4313      	orrs	r3, r2
 8004508:	3401      	adds	r4, #1
 800450a:	9304      	str	r3, [sp, #16]
 800450c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004510:	4824      	ldr	r0, [pc, #144]	@ (80045a4 <_svfiprintf_r+0x1e8>)
 8004512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004516:	2206      	movs	r2, #6
 8004518:	f7fb fe6a 	bl	80001f0 <memchr>
 800451c:	2800      	cmp	r0, #0
 800451e:	d036      	beq.n	800458e <_svfiprintf_r+0x1d2>
 8004520:	4b21      	ldr	r3, [pc, #132]	@ (80045a8 <_svfiprintf_r+0x1ec>)
 8004522:	bb1b      	cbnz	r3, 800456c <_svfiprintf_r+0x1b0>
 8004524:	9b03      	ldr	r3, [sp, #12]
 8004526:	3307      	adds	r3, #7
 8004528:	f023 0307 	bic.w	r3, r3, #7
 800452c:	3308      	adds	r3, #8
 800452e:	9303      	str	r3, [sp, #12]
 8004530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004532:	4433      	add	r3, r6
 8004534:	9309      	str	r3, [sp, #36]	@ 0x24
 8004536:	e76a      	b.n	800440e <_svfiprintf_r+0x52>
 8004538:	fb0c 3202 	mla	r2, ip, r2, r3
 800453c:	460c      	mov	r4, r1
 800453e:	2001      	movs	r0, #1
 8004540:	e7a8      	b.n	8004494 <_svfiprintf_r+0xd8>
 8004542:	2300      	movs	r3, #0
 8004544:	3401      	adds	r4, #1
 8004546:	9305      	str	r3, [sp, #20]
 8004548:	4619      	mov	r1, r3
 800454a:	f04f 0c0a 	mov.w	ip, #10
 800454e:	4620      	mov	r0, r4
 8004550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004554:	3a30      	subs	r2, #48	@ 0x30
 8004556:	2a09      	cmp	r2, #9
 8004558:	d903      	bls.n	8004562 <_svfiprintf_r+0x1a6>
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0c6      	beq.n	80044ec <_svfiprintf_r+0x130>
 800455e:	9105      	str	r1, [sp, #20]
 8004560:	e7c4      	b.n	80044ec <_svfiprintf_r+0x130>
 8004562:	fb0c 2101 	mla	r1, ip, r1, r2
 8004566:	4604      	mov	r4, r0
 8004568:	2301      	movs	r3, #1
 800456a:	e7f0      	b.n	800454e <_svfiprintf_r+0x192>
 800456c:	ab03      	add	r3, sp, #12
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	462a      	mov	r2, r5
 8004572:	4b0e      	ldr	r3, [pc, #56]	@ (80045ac <_svfiprintf_r+0x1f0>)
 8004574:	a904      	add	r1, sp, #16
 8004576:	4638      	mov	r0, r7
 8004578:	f3af 8000 	nop.w
 800457c:	1c42      	adds	r2, r0, #1
 800457e:	4606      	mov	r6, r0
 8004580:	d1d6      	bne.n	8004530 <_svfiprintf_r+0x174>
 8004582:	89ab      	ldrh	r3, [r5, #12]
 8004584:	065b      	lsls	r3, r3, #25
 8004586:	f53f af2d 	bmi.w	80043e4 <_svfiprintf_r+0x28>
 800458a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800458c:	e72c      	b.n	80043e8 <_svfiprintf_r+0x2c>
 800458e:	ab03      	add	r3, sp, #12
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	462a      	mov	r2, r5
 8004594:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <_svfiprintf_r+0x1f0>)
 8004596:	a904      	add	r1, sp, #16
 8004598:	4638      	mov	r0, r7
 800459a:	f000 f879 	bl	8004690 <_printf_i>
 800459e:	e7ed      	b.n	800457c <_svfiprintf_r+0x1c0>
 80045a0:	080049a8 	.word	0x080049a8
 80045a4:	080049b2 	.word	0x080049b2
 80045a8:	00000000 	.word	0x00000000
 80045ac:	08004305 	.word	0x08004305
 80045b0:	080049ae 	.word	0x080049ae

080045b4 <_printf_common>:
 80045b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b8:	4616      	mov	r6, r2
 80045ba:	4698      	mov	r8, r3
 80045bc:	688a      	ldr	r2, [r1, #8]
 80045be:	690b      	ldr	r3, [r1, #16]
 80045c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045c4:	4293      	cmp	r3, r2
 80045c6:	bfb8      	it	lt
 80045c8:	4613      	movlt	r3, r2
 80045ca:	6033      	str	r3, [r6, #0]
 80045cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045d0:	4607      	mov	r7, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	b10a      	cbz	r2, 80045da <_printf_common+0x26>
 80045d6:	3301      	adds	r3, #1
 80045d8:	6033      	str	r3, [r6, #0]
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	0699      	lsls	r1, r3, #26
 80045de:	bf42      	ittt	mi
 80045e0:	6833      	ldrmi	r3, [r6, #0]
 80045e2:	3302      	addmi	r3, #2
 80045e4:	6033      	strmi	r3, [r6, #0]
 80045e6:	6825      	ldr	r5, [r4, #0]
 80045e8:	f015 0506 	ands.w	r5, r5, #6
 80045ec:	d106      	bne.n	80045fc <_printf_common+0x48>
 80045ee:	f104 0a19 	add.w	sl, r4, #25
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	6832      	ldr	r2, [r6, #0]
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	42ab      	cmp	r3, r5
 80045fa:	dc26      	bgt.n	800464a <_printf_common+0x96>
 80045fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004600:	6822      	ldr	r2, [r4, #0]
 8004602:	3b00      	subs	r3, #0
 8004604:	bf18      	it	ne
 8004606:	2301      	movne	r3, #1
 8004608:	0692      	lsls	r2, r2, #26
 800460a:	d42b      	bmi.n	8004664 <_printf_common+0xb0>
 800460c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004610:	4641      	mov	r1, r8
 8004612:	4638      	mov	r0, r7
 8004614:	47c8      	blx	r9
 8004616:	3001      	adds	r0, #1
 8004618:	d01e      	beq.n	8004658 <_printf_common+0xa4>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	6922      	ldr	r2, [r4, #16]
 800461e:	f003 0306 	and.w	r3, r3, #6
 8004622:	2b04      	cmp	r3, #4
 8004624:	bf02      	ittt	eq
 8004626:	68e5      	ldreq	r5, [r4, #12]
 8004628:	6833      	ldreq	r3, [r6, #0]
 800462a:	1aed      	subeq	r5, r5, r3
 800462c:	68a3      	ldr	r3, [r4, #8]
 800462e:	bf0c      	ite	eq
 8004630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004634:	2500      	movne	r5, #0
 8004636:	4293      	cmp	r3, r2
 8004638:	bfc4      	itt	gt
 800463a:	1a9b      	subgt	r3, r3, r2
 800463c:	18ed      	addgt	r5, r5, r3
 800463e:	2600      	movs	r6, #0
 8004640:	341a      	adds	r4, #26
 8004642:	42b5      	cmp	r5, r6
 8004644:	d11a      	bne.n	800467c <_printf_common+0xc8>
 8004646:	2000      	movs	r0, #0
 8004648:	e008      	b.n	800465c <_printf_common+0xa8>
 800464a:	2301      	movs	r3, #1
 800464c:	4652      	mov	r2, sl
 800464e:	4641      	mov	r1, r8
 8004650:	4638      	mov	r0, r7
 8004652:	47c8      	blx	r9
 8004654:	3001      	adds	r0, #1
 8004656:	d103      	bne.n	8004660 <_printf_common+0xac>
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004660:	3501      	adds	r5, #1
 8004662:	e7c6      	b.n	80045f2 <_printf_common+0x3e>
 8004664:	18e1      	adds	r1, r4, r3
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	2030      	movs	r0, #48	@ 0x30
 800466a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800466e:	4422      	add	r2, r4
 8004670:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004674:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004678:	3302      	adds	r3, #2
 800467a:	e7c7      	b.n	800460c <_printf_common+0x58>
 800467c:	2301      	movs	r3, #1
 800467e:	4622      	mov	r2, r4
 8004680:	4641      	mov	r1, r8
 8004682:	4638      	mov	r0, r7
 8004684:	47c8      	blx	r9
 8004686:	3001      	adds	r0, #1
 8004688:	d0e6      	beq.n	8004658 <_printf_common+0xa4>
 800468a:	3601      	adds	r6, #1
 800468c:	e7d9      	b.n	8004642 <_printf_common+0x8e>
	...

08004690 <_printf_i>:
 8004690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004694:	7e0f      	ldrb	r7, [r1, #24]
 8004696:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004698:	2f78      	cmp	r7, #120	@ 0x78
 800469a:	4691      	mov	r9, r2
 800469c:	4680      	mov	r8, r0
 800469e:	460c      	mov	r4, r1
 80046a0:	469a      	mov	sl, r3
 80046a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046a6:	d807      	bhi.n	80046b8 <_printf_i+0x28>
 80046a8:	2f62      	cmp	r7, #98	@ 0x62
 80046aa:	d80a      	bhi.n	80046c2 <_printf_i+0x32>
 80046ac:	2f00      	cmp	r7, #0
 80046ae:	f000 80d2 	beq.w	8004856 <_printf_i+0x1c6>
 80046b2:	2f58      	cmp	r7, #88	@ 0x58
 80046b4:	f000 80b9 	beq.w	800482a <_printf_i+0x19a>
 80046b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046c0:	e03a      	b.n	8004738 <_printf_i+0xa8>
 80046c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046c6:	2b15      	cmp	r3, #21
 80046c8:	d8f6      	bhi.n	80046b8 <_printf_i+0x28>
 80046ca:	a101      	add	r1, pc, #4	@ (adr r1, 80046d0 <_printf_i+0x40>)
 80046cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046d0:	08004729 	.word	0x08004729
 80046d4:	0800473d 	.word	0x0800473d
 80046d8:	080046b9 	.word	0x080046b9
 80046dc:	080046b9 	.word	0x080046b9
 80046e0:	080046b9 	.word	0x080046b9
 80046e4:	080046b9 	.word	0x080046b9
 80046e8:	0800473d 	.word	0x0800473d
 80046ec:	080046b9 	.word	0x080046b9
 80046f0:	080046b9 	.word	0x080046b9
 80046f4:	080046b9 	.word	0x080046b9
 80046f8:	080046b9 	.word	0x080046b9
 80046fc:	0800483d 	.word	0x0800483d
 8004700:	08004767 	.word	0x08004767
 8004704:	080047f7 	.word	0x080047f7
 8004708:	080046b9 	.word	0x080046b9
 800470c:	080046b9 	.word	0x080046b9
 8004710:	0800485f 	.word	0x0800485f
 8004714:	080046b9 	.word	0x080046b9
 8004718:	08004767 	.word	0x08004767
 800471c:	080046b9 	.word	0x080046b9
 8004720:	080046b9 	.word	0x080046b9
 8004724:	080047ff 	.word	0x080047ff
 8004728:	6833      	ldr	r3, [r6, #0]
 800472a:	1d1a      	adds	r2, r3, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6032      	str	r2, [r6, #0]
 8004730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004734:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004738:	2301      	movs	r3, #1
 800473a:	e09d      	b.n	8004878 <_printf_i+0x1e8>
 800473c:	6833      	ldr	r3, [r6, #0]
 800473e:	6820      	ldr	r0, [r4, #0]
 8004740:	1d19      	adds	r1, r3, #4
 8004742:	6031      	str	r1, [r6, #0]
 8004744:	0606      	lsls	r6, r0, #24
 8004746:	d501      	bpl.n	800474c <_printf_i+0xbc>
 8004748:	681d      	ldr	r5, [r3, #0]
 800474a:	e003      	b.n	8004754 <_printf_i+0xc4>
 800474c:	0645      	lsls	r5, r0, #25
 800474e:	d5fb      	bpl.n	8004748 <_printf_i+0xb8>
 8004750:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004754:	2d00      	cmp	r5, #0
 8004756:	da03      	bge.n	8004760 <_printf_i+0xd0>
 8004758:	232d      	movs	r3, #45	@ 0x2d
 800475a:	426d      	negs	r5, r5
 800475c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004760:	4859      	ldr	r0, [pc, #356]	@ (80048c8 <_printf_i+0x238>)
 8004762:	230a      	movs	r3, #10
 8004764:	e011      	b.n	800478a <_printf_i+0xfa>
 8004766:	6821      	ldr	r1, [r4, #0]
 8004768:	6833      	ldr	r3, [r6, #0]
 800476a:	0608      	lsls	r0, r1, #24
 800476c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004770:	d402      	bmi.n	8004778 <_printf_i+0xe8>
 8004772:	0649      	lsls	r1, r1, #25
 8004774:	bf48      	it	mi
 8004776:	b2ad      	uxthmi	r5, r5
 8004778:	2f6f      	cmp	r7, #111	@ 0x6f
 800477a:	4853      	ldr	r0, [pc, #332]	@ (80048c8 <_printf_i+0x238>)
 800477c:	6033      	str	r3, [r6, #0]
 800477e:	bf14      	ite	ne
 8004780:	230a      	movne	r3, #10
 8004782:	2308      	moveq	r3, #8
 8004784:	2100      	movs	r1, #0
 8004786:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800478a:	6866      	ldr	r6, [r4, #4]
 800478c:	60a6      	str	r6, [r4, #8]
 800478e:	2e00      	cmp	r6, #0
 8004790:	bfa2      	ittt	ge
 8004792:	6821      	ldrge	r1, [r4, #0]
 8004794:	f021 0104 	bicge.w	r1, r1, #4
 8004798:	6021      	strge	r1, [r4, #0]
 800479a:	b90d      	cbnz	r5, 80047a0 <_printf_i+0x110>
 800479c:	2e00      	cmp	r6, #0
 800479e:	d04b      	beq.n	8004838 <_printf_i+0x1a8>
 80047a0:	4616      	mov	r6, r2
 80047a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80047a6:	fb03 5711 	mls	r7, r3, r1, r5
 80047aa:	5dc7      	ldrb	r7, [r0, r7]
 80047ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047b0:	462f      	mov	r7, r5
 80047b2:	42bb      	cmp	r3, r7
 80047b4:	460d      	mov	r5, r1
 80047b6:	d9f4      	bls.n	80047a2 <_printf_i+0x112>
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d10b      	bne.n	80047d4 <_printf_i+0x144>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	07df      	lsls	r7, r3, #31
 80047c0:	d508      	bpl.n	80047d4 <_printf_i+0x144>
 80047c2:	6923      	ldr	r3, [r4, #16]
 80047c4:	6861      	ldr	r1, [r4, #4]
 80047c6:	4299      	cmp	r1, r3
 80047c8:	bfde      	ittt	le
 80047ca:	2330      	movle	r3, #48	@ 0x30
 80047cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047d4:	1b92      	subs	r2, r2, r6
 80047d6:	6122      	str	r2, [r4, #16]
 80047d8:	f8cd a000 	str.w	sl, [sp]
 80047dc:	464b      	mov	r3, r9
 80047de:	aa03      	add	r2, sp, #12
 80047e0:	4621      	mov	r1, r4
 80047e2:	4640      	mov	r0, r8
 80047e4:	f7ff fee6 	bl	80045b4 <_printf_common>
 80047e8:	3001      	adds	r0, #1
 80047ea:	d14a      	bne.n	8004882 <_printf_i+0x1f2>
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	b004      	add	sp, #16
 80047f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	f043 0320 	orr.w	r3, r3, #32
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	4833      	ldr	r0, [pc, #204]	@ (80048cc <_printf_i+0x23c>)
 8004800:	2778      	movs	r7, #120	@ 0x78
 8004802:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	6831      	ldr	r1, [r6, #0]
 800480a:	061f      	lsls	r7, r3, #24
 800480c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004810:	d402      	bmi.n	8004818 <_printf_i+0x188>
 8004812:	065f      	lsls	r7, r3, #25
 8004814:	bf48      	it	mi
 8004816:	b2ad      	uxthmi	r5, r5
 8004818:	6031      	str	r1, [r6, #0]
 800481a:	07d9      	lsls	r1, r3, #31
 800481c:	bf44      	itt	mi
 800481e:	f043 0320 	orrmi.w	r3, r3, #32
 8004822:	6023      	strmi	r3, [r4, #0]
 8004824:	b11d      	cbz	r5, 800482e <_printf_i+0x19e>
 8004826:	2310      	movs	r3, #16
 8004828:	e7ac      	b.n	8004784 <_printf_i+0xf4>
 800482a:	4827      	ldr	r0, [pc, #156]	@ (80048c8 <_printf_i+0x238>)
 800482c:	e7e9      	b.n	8004802 <_printf_i+0x172>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	f023 0320 	bic.w	r3, r3, #32
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	e7f6      	b.n	8004826 <_printf_i+0x196>
 8004838:	4616      	mov	r6, r2
 800483a:	e7bd      	b.n	80047b8 <_printf_i+0x128>
 800483c:	6833      	ldr	r3, [r6, #0]
 800483e:	6825      	ldr	r5, [r4, #0]
 8004840:	6961      	ldr	r1, [r4, #20]
 8004842:	1d18      	adds	r0, r3, #4
 8004844:	6030      	str	r0, [r6, #0]
 8004846:	062e      	lsls	r6, r5, #24
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	d501      	bpl.n	8004850 <_printf_i+0x1c0>
 800484c:	6019      	str	r1, [r3, #0]
 800484e:	e002      	b.n	8004856 <_printf_i+0x1c6>
 8004850:	0668      	lsls	r0, r5, #25
 8004852:	d5fb      	bpl.n	800484c <_printf_i+0x1bc>
 8004854:	8019      	strh	r1, [r3, #0]
 8004856:	2300      	movs	r3, #0
 8004858:	6123      	str	r3, [r4, #16]
 800485a:	4616      	mov	r6, r2
 800485c:	e7bc      	b.n	80047d8 <_printf_i+0x148>
 800485e:	6833      	ldr	r3, [r6, #0]
 8004860:	1d1a      	adds	r2, r3, #4
 8004862:	6032      	str	r2, [r6, #0]
 8004864:	681e      	ldr	r6, [r3, #0]
 8004866:	6862      	ldr	r2, [r4, #4]
 8004868:	2100      	movs	r1, #0
 800486a:	4630      	mov	r0, r6
 800486c:	f7fb fcc0 	bl	80001f0 <memchr>
 8004870:	b108      	cbz	r0, 8004876 <_printf_i+0x1e6>
 8004872:	1b80      	subs	r0, r0, r6
 8004874:	6060      	str	r0, [r4, #4]
 8004876:	6863      	ldr	r3, [r4, #4]
 8004878:	6123      	str	r3, [r4, #16]
 800487a:	2300      	movs	r3, #0
 800487c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004880:	e7aa      	b.n	80047d8 <_printf_i+0x148>
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	4632      	mov	r2, r6
 8004886:	4649      	mov	r1, r9
 8004888:	4640      	mov	r0, r8
 800488a:	47d0      	blx	sl
 800488c:	3001      	adds	r0, #1
 800488e:	d0ad      	beq.n	80047ec <_printf_i+0x15c>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	079b      	lsls	r3, r3, #30
 8004894:	d413      	bmi.n	80048be <_printf_i+0x22e>
 8004896:	68e0      	ldr	r0, [r4, #12]
 8004898:	9b03      	ldr	r3, [sp, #12]
 800489a:	4298      	cmp	r0, r3
 800489c:	bfb8      	it	lt
 800489e:	4618      	movlt	r0, r3
 80048a0:	e7a6      	b.n	80047f0 <_printf_i+0x160>
 80048a2:	2301      	movs	r3, #1
 80048a4:	4632      	mov	r2, r6
 80048a6:	4649      	mov	r1, r9
 80048a8:	4640      	mov	r0, r8
 80048aa:	47d0      	blx	sl
 80048ac:	3001      	adds	r0, #1
 80048ae:	d09d      	beq.n	80047ec <_printf_i+0x15c>
 80048b0:	3501      	adds	r5, #1
 80048b2:	68e3      	ldr	r3, [r4, #12]
 80048b4:	9903      	ldr	r1, [sp, #12]
 80048b6:	1a5b      	subs	r3, r3, r1
 80048b8:	42ab      	cmp	r3, r5
 80048ba:	dcf2      	bgt.n	80048a2 <_printf_i+0x212>
 80048bc:	e7eb      	b.n	8004896 <_printf_i+0x206>
 80048be:	2500      	movs	r5, #0
 80048c0:	f104 0619 	add.w	r6, r4, #25
 80048c4:	e7f5      	b.n	80048b2 <_printf_i+0x222>
 80048c6:	bf00      	nop
 80048c8:	080049b9 	.word	0x080049b9
 80048cc:	080049ca 	.word	0x080049ca

080048d0 <_sbrk_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4d06      	ldr	r5, [pc, #24]	@ (80048ec <_sbrk_r+0x1c>)
 80048d4:	2300      	movs	r3, #0
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	f7fc fbea 	bl	80010b4 <_sbrk>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_sbrk_r+0x1a>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_sbrk_r+0x1a>
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	200006ac 	.word	0x200006ac

080048f0 <_realloc_r>:
 80048f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f4:	4680      	mov	r8, r0
 80048f6:	4615      	mov	r5, r2
 80048f8:	460c      	mov	r4, r1
 80048fa:	b921      	cbnz	r1, 8004906 <_realloc_r+0x16>
 80048fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004900:	4611      	mov	r1, r2
 8004902:	f7ff bc73 	b.w	80041ec <_malloc_r>
 8004906:	b92a      	cbnz	r2, 8004914 <_realloc_r+0x24>
 8004908:	f7ff fc04 	bl	8004114 <_free_r>
 800490c:	2400      	movs	r4, #0
 800490e:	4620      	mov	r0, r4
 8004910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004914:	f000 f81a 	bl	800494c <_malloc_usable_size_r>
 8004918:	4285      	cmp	r5, r0
 800491a:	4606      	mov	r6, r0
 800491c:	d802      	bhi.n	8004924 <_realloc_r+0x34>
 800491e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004922:	d8f4      	bhi.n	800490e <_realloc_r+0x1e>
 8004924:	4629      	mov	r1, r5
 8004926:	4640      	mov	r0, r8
 8004928:	f7ff fc60 	bl	80041ec <_malloc_r>
 800492c:	4607      	mov	r7, r0
 800492e:	2800      	cmp	r0, #0
 8004930:	d0ec      	beq.n	800490c <_realloc_r+0x1c>
 8004932:	42b5      	cmp	r5, r6
 8004934:	462a      	mov	r2, r5
 8004936:	4621      	mov	r1, r4
 8004938:	bf28      	it	cs
 800493a:	4632      	movcs	r2, r6
 800493c:	f7ff fbdc 	bl	80040f8 <memcpy>
 8004940:	4621      	mov	r1, r4
 8004942:	4640      	mov	r0, r8
 8004944:	f7ff fbe6 	bl	8004114 <_free_r>
 8004948:	463c      	mov	r4, r7
 800494a:	e7e0      	b.n	800490e <_realloc_r+0x1e>

0800494c <_malloc_usable_size_r>:
 800494c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004950:	1f18      	subs	r0, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	bfbc      	itt	lt
 8004956:	580b      	ldrlt	r3, [r1, r0]
 8004958:	18c0      	addlt	r0, r0, r3
 800495a:	4770      	bx	lr

0800495c <_init>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr

08004968 <_fini>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	bf00      	nop
 800496c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496e:	bc08      	pop	{r3}
 8004970:	469e      	mov	lr, r3
 8004972:	4770      	bx	lr
