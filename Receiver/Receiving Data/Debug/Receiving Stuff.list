
Receiving Stuff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004858  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd0  080049f8  080049f8  000059f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c8  080057c8  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  080057c8  080057c8  000067c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057d0  080057d0  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057d0  080057d0  000067d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057d4  080057d4  000067d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080057d8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000064  0800583c  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800583c  000076c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1f4  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4e  00000000  00000000  00013288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  000150d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000885  00000000  00000000  00015bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162e8  00000000  00000000  00016445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e82b  00000000  00000000  0002c72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087fdd  00000000  00000000  0003af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2f35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003228  00000000  00000000  000c2f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000c61a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080049e0 	.word	0x080049e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080049e0 	.word	0x080049e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <decrypt>:

// Buffer for encryption/decryption operations (2 uint32_t for 8 bytes)
uint32_t data_buffer[2];

// Decryption Function
void decrypt(uint32_t v[2], const uint32_t k[4]) {
 8000580:	b480      	push	{r7}
 8000582:	b08d      	sub	sp, #52	@ 0x34
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
    uint32_t v0 = v[0], v1 = v[1], sum = 0xC6EF3720, i;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000596:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <decrypt+0xb0>)
 8000598:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t delta = 0x9E3779B9;
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <decrypt+0xb4>)
 800059c:	61fb      	str	r3, [r7, #28]
    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	61bb      	str	r3, [r7, #24]
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	3304      	adds	r3, #4
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	3308      	adds	r3, #8
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	330c      	adds	r3, #12
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 32; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
 80005c0:	e026      	b.n	8000610 <decrypt+0x90>
        v1 -= ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3);
 80005c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005c4:	011a      	lsls	r2, r3, #4
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	441a      	add	r2, r3
 80005ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80005cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ce:	440b      	add	r3, r1
 80005d0:	405a      	eors	r2, r3
 80005d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005d4:	0959      	lsrs	r1, r3, #5
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	440b      	add	r3, r1
 80005da:	4053      	eors	r3, r2
 80005dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        v0 -= ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1);
 80005e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005e4:	011a      	lsls	r2, r3, #4
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	441a      	add	r2, r3
 80005ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80005ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ee:	440b      	add	r3, r1
 80005f0:	405a      	eors	r2, r3
 80005f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005f4:	0959      	lsrs	r1, r3, #5
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	440b      	add	r3, r1
 80005fa:	4053      	eors	r3, r2
 80005fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sum -= delta;
 8000602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 0; i < 32; i++) {
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	3301      	adds	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
 8000610:	6a3b      	ldr	r3, [r7, #32]
 8000612:	2b1f      	cmp	r3, #31
 8000614:	d9d5      	bls.n	80005c2 <decrypt+0x42>
    }
    v[0] = v0;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800061a:	601a      	str	r2, [r3, #0]
    v[1] = v1;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3304      	adds	r3, #4
 8000620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000622:	601a      	str	r2, [r3, #0]
}
 8000624:	bf00      	nop
 8000626:	3734      	adds	r7, #52	@ 0x34
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	c6ef3720 	.word	0xc6ef3720
 8000634:	9e3779b9 	.word	0x9e3779b9

08000638 <decryptMessage>:

// Decrypt Message Function
void decryptMessage(uint8_t* input, size_t len) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
    // Ensure len is a multiple of 8
    if (len % 8 != 0) {
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f003 0307 	and.w	r3, r3, #7
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <decryptMessage+0x1c>
        // Handle padding if necessary
        // For simplicity, ignore extra bytes
        len -= len % 8;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	f023 0307 	bic.w	r3, r3, #7
 8000652:	603b      	str	r3, [r7, #0]
    }

    // Copy input to buffer as uint32_t
    memcpy(data_buffer, input, len);
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	480f      	ldr	r0, [pc, #60]	@ (8000698 <decryptMessage+0x60>)
 800065a:	f003 fd8f 	bl	800417c <memcpy>

    // Decrypt in blocks of 8 bytes (2 uint32_t)
    for (int i = 0; i < (len / 4); i += 2) {
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	e00a      	b.n	800067a <decryptMessage+0x42>
        decrypt(&data_buffer[i], key);
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4a0b      	ldr	r2, [pc, #44]	@ (8000698 <decryptMessage+0x60>)
 800066a:	4413      	add	r3, r2
 800066c:	490b      	ldr	r1, [pc, #44]	@ (800069c <decryptMessage+0x64>)
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff86 	bl	8000580 <decrypt>
    for (int i = 0; i < (len / 4); i += 2) {
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3302      	adds	r3, #2
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	089a      	lsrs	r2, r3, #2
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	429a      	cmp	r2, r3
 8000682:	d8ef      	bhi.n	8000664 <decryptMessage+0x2c>
    }

    // Copy back to input buffer
    memcpy(input, data_buffer, len);
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	4904      	ldr	r1, [pc, #16]	@ (8000698 <decryptMessage+0x60>)
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f003 fd77 	bl	800417c <memcpy>
}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000164 	.word	0x20000164
 800069c:	0800576c 	.word	0x0800576c

080006a0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1 && Size > 0) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x80>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d130      	bne.n	8000716 <HAL_UARTEx_RxEventCallback+0x76>
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d02d      	beq.n	8000716 <HAL_UARTEx_RxEventCallback+0x76>
        // Store encrypted data first
        memcpy(RxData_Encrypted, RxData, sizeof(RxData));
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <HAL_UARTEx_RxEventCallback+0x84>)
 80006bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000728 <HAL_UARTEx_RxEventCallback+0x88>)
 80006be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c2:	e883 0003 	stmia.w	r3, {r0, r1}

        // Decrypt the received data
        decryptMessage(RxData, sizeof(RxData));
 80006c6:	2108      	movs	r1, #8
 80006c8:	4817      	ldr	r0, [pc, #92]	@ (8000728 <HAL_UARTEx_RxEventCallback+0x88>)
 80006ca:	f7ff ffb5 	bl	8000638 <decryptMessage>

        // Extract yPos from decrypted data
        yPos = RxData[0];
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <HAL_UARTEx_RxEventCallback+0x88>)
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <HAL_UARTEx_RxEventCallback+0x8c>)
 80006d4:	701a      	strb	r2, [r3, #0]
        dataReceived = 1;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <HAL_UARTEx_RxEventCallback+0x90>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]

        // Re-enable reception before processing
        HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, sizeof(RxData));
 80006dc:	2208      	movs	r2, #8
 80006de:	4912      	ldr	r1, [pc, #72]	@ (8000728 <HAL_UARTEx_RxEventCallback+0x88>)
 80006e0:	480f      	ldr	r0, [pc, #60]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x80>)
 80006e2:	f002 fcc4 	bl	800306e <HAL_UARTEx_ReceiveToIdle_IT>

        // Format and transmit debug message
        sprintf(msg, "yPos: %u\r\n", yPos);
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <HAL_UARTEx_RxEventCallback+0x8c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	4911      	ldr	r1, [pc, #68]	@ (8000734 <HAL_UARTEx_RxEventCallback+0x94>)
 80006ee:	4812      	ldr	r0, [pc, #72]	@ (8000738 <HAL_UARTEx_RxEventCallback+0x98>)
 80006f0:	f003 fcd6 	bl	80040a0 <siprintf>

        // Switch to transmit mode for debug output
        HAL_HalfDuplex_EnableTransmitter(&huart1);
 80006f4:	480a      	ldr	r0, [pc, #40]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x80>)
 80006f6:	f002 ffc7 	bl	8003688 <HAL_HalfDuplex_EnableTransmitter>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006fa:	480f      	ldr	r0, [pc, #60]	@ (8000738 <HAL_UARTEx_RxEventCallback+0x98>)
 80006fc:	f7ff fd70 	bl	80001e0 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	490b      	ldr	r1, [pc, #44]	@ (8000738 <HAL_UARTEx_RxEventCallback+0x98>)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x80>)
 800070c:	f002 fc24 	bl	8002f58 <HAL_UART_Transmit>
        HAL_HalfDuplex_EnableReceiver(&huart1);
 8000710:	4803      	ldr	r0, [pc, #12]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x80>)
 8000712:	f002 ffed 	bl	80036f0 <HAL_HalfDuplex_EnableReceiver>
    }
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000080 	.word	0x20000080
 8000724:	20000124 	.word	0x20000124
 8000728:	2000011c 	.word	0x2000011c
 800072c:	2000012c 	.word	0x2000012c
 8000730:	20000162 	.word	0x20000162
 8000734:	080049f8 	.word	0x080049f8
 8000738:	20000130 	.word	0x20000130

0800073c <main>:


int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

    // Initialize the Hardware Abstraction Layer
    HAL_Init();
 8000740:	f000 fd52 	bl	80011e8 <HAL_Init>

    // Configure the system clock
    SystemClock_Config();
 8000744:	f000 f8a6 	bl	8000894 <SystemClock_Config>

    // Initialize all configured peripherals
    MX_GPIO_Init();
 8000748:	f000 f85c 	bl	8000804 <MX_GPIO_Init>
    MX_I2C1_Init();
 800074c:	f000 f874 	bl	8000838 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8000750:	f000 f82e 	bl	80007b0 <MX_USART1_UART_Init>

    // Initialize UART Reception in Half-Duplex Mode
    HAL_HalfDuplex_EnableReceiver(&huart1);
 8000754:	4811      	ldr	r0, [pc, #68]	@ (800079c <main+0x60>)
 8000756:	f002 ffcb 	bl	80036f0 <HAL_HalfDuplex_EnableReceiver>
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, sizeof(RxData));
 800075a:	2208      	movs	r2, #8
 800075c:	4910      	ldr	r1, [pc, #64]	@ (80007a0 <main+0x64>)
 800075e:	480f      	ldr	r0, [pc, #60]	@ (800079c <main+0x60>)
 8000760:	f002 fc85 	bl	800306e <HAL_UARTEx_ReceiveToIdle_IT>



  SSD1306_Init();
 8000764:	f000 f90e 	bl	8000984 <SSD1306_Init>
  SSD1306_GotoXY (0,0);
 8000768:	2100      	movs	r1, #0
 800076a:	2000      	movs	r0, #0
 800076c:	f000 fa74 	bl	8000c58 <SSD1306_GotoXY>
  SSD1306_Puts ("MICROPETA", &Font_11x18, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	490c      	ldr	r1, [pc, #48]	@ (80007a4 <main+0x68>)
 8000774:	480c      	ldr	r0, [pc, #48]	@ (80007a8 <main+0x6c>)
 8000776:	f000 fb03 	bl	8000d80 <SSD1306_Puts>
  HAL_Delay(5000);
 800077a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800077e:	f000 fda5 	bl	80012cc <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
          if (dataReceived) {
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <main+0x70>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0fa      	beq.n	8000782 <main+0x46>
              // Process received data if needed
              dataReceived = 0;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <main+0x70>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]

              // Optional: Add a small delay to prevent overwhelming the UART
              HAL_Delay(10);
 8000792:	200a      	movs	r0, #10
 8000794:	f000 fd9a 	bl	80012cc <HAL_Delay>
          if (dataReceived) {
 8000798:	e7f3      	b.n	8000782 <main+0x46>
 800079a:	bf00      	nop
 800079c:	20000080 	.word	0x20000080
 80007a0:	2000011c 	.word	0x2000011c
 80007a4:	20000000 	.word	0x20000000
 80007a8:	08004a04 	.word	0x08004a04
 80007ac:	20000162 	.word	0x20000162

080007b0 <MX_USART1_UART_Init>:
          }
      }
  /* USER CODE END 3 */
}

static void MX_USART1_UART_Init(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_USART1_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX; // Enable both TX and RX for Half-Duplex
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]

    if (HAL_HalfDuplex_Init(&huart1) != HAL_OK) {
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e8:	f002 fb5e 	bl	8002ea8 <HAL_HalfDuplex_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 80007f2:	f000 f8b9 	bl	8000968 <Error_Handler>
    }
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000080 	.word	0x20000080
 8000800:	40011000 	.word	0x40011000

08000804 <MX_GPIO_Init>:




static void MX_GPIO_Init(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_GPIO_Init+0x30>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <MX_GPIO_Init+0x30>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_GPIO_Init+0x30>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_I2C1_Init+0x50>)
 800083e:	4a13      	ldr	r2, [pc, #76]	@ (800088c <MX_I2C1_Init+0x54>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000844:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <MX_I2C1_Init+0x58>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000856:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800085a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000876:	f001 f8b3 	bl	80019e0 <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 f872 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000c8 	.word	0x200000c8
 800088c:	40005400 	.word	0x40005400
 8000890:	00061a80 	.word	0x00061a80

08000894 <SystemClock_Config>:

void SystemClock_Config(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	@ 0x50
 8000898:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	@ 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 fc36 	bl	8004114 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <SystemClock_Config+0xcc>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	4a27      	ldr	r2, [pc, #156]	@ (8000960 <SystemClock_Config+0xcc>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c8:	4b25      	ldr	r3, [pc, #148]	@ (8000960 <SystemClock_Config+0xcc>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <SystemClock_Config+0xd0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008e0:	4a20      	ldr	r2, [pc, #128]	@ (8000964 <SystemClock_Config+0xd0>)
 80008e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]

    // Initialize RCC Oscillators
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f8:	2301      	movs	r3, #1
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fc:	2310      	movs	r3, #16
 80008fe:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000900:	2302      	movs	r3, #2
 8000902:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000904:	2300      	movs	r3, #0
 8000906:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000908:	2308      	movs	r3, #8
 800090a:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 800090c:	2354      	movs	r3, #84	@ 0x54
 800090e:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000914:	2304      	movs	r3, #4
 8000916:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fe2b 	bl	8002578 <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x98>
        Error_Handler();
 8000928:	f000 f81e 	bl	8000968 <Error_Handler>
    }

    // Initialize CPU, AHB and APB Clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092c:	230f      	movs	r3, #15
 800092e:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2302      	movs	r3, #2
 8000932:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK){
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2102      	movs	r1, #2
 8000948:	4618      	mov	r0, r3
 800094a:	f002 f88d 	bl	8002a68 <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xc4>
        Error_Handler();
 8000954:	f000 f808 	bl	8000968 <Error_Handler>
    }
}
 8000958:	bf00      	nop
 800095a:	3750      	adds	r7, #80	@ 0x50
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	40007000 	.word	0x40007000

08000968 <Error_Handler>:

void Error_Handler(void){
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    // Toggle an LED or indicate error in another way
    while (1){
        // Example: Toggle LED on PA5
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800096c:	2120      	movs	r1, #32
 800096e:	4804      	ldr	r0, [pc, #16]	@ (8000980 <Error_Handler+0x18>)
 8000970:	f000 fff8 	bl	8001964 <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 8000974:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000978:	f000 fca8 	bl	80012cc <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800097c:	bf00      	nop
 800097e:	e7f5      	b.n	800096c <Error_Handler+0x4>
 8000980:	40020000 	.word	0x40020000

08000984 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800098a:	f000 fa1f 	bl	8000dcc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800098e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000992:	2201      	movs	r2, #1
 8000994:	217a      	movs	r1, #122	@ 0x7a
 8000996:	485b      	ldr	r0, [pc, #364]	@ (8000b04 <SSD1306_Init+0x180>)
 8000998:	f001 fa64 	bl	8001e64 <HAL_I2C_IsDeviceReady>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e0a9      	b.n	8000afa <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80009a6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80009aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009ac:	e002      	b.n	80009b4 <SSD1306_Init+0x30>
		p--;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1f9      	bne.n	80009ae <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80009ba:	22ae      	movs	r2, #174	@ 0xae
 80009bc:	2100      	movs	r1, #0
 80009be:	207a      	movs	r0, #122	@ 0x7a
 80009c0:	f000 fa80 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80009c4:	2220      	movs	r2, #32
 80009c6:	2100      	movs	r1, #0
 80009c8:	207a      	movs	r0, #122	@ 0x7a
 80009ca:	f000 fa7b 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009ce:	2210      	movs	r2, #16
 80009d0:	2100      	movs	r1, #0
 80009d2:	207a      	movs	r0, #122	@ 0x7a
 80009d4:	f000 fa76 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80009d8:	22b0      	movs	r2, #176	@ 0xb0
 80009da:	2100      	movs	r1, #0
 80009dc:	207a      	movs	r0, #122	@ 0x7a
 80009de:	f000 fa71 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80009e2:	22c8      	movs	r2, #200	@ 0xc8
 80009e4:	2100      	movs	r1, #0
 80009e6:	207a      	movs	r0, #122	@ 0x7a
 80009e8:	f000 fa6c 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	207a      	movs	r0, #122	@ 0x7a
 80009f2:	f000 fa67 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80009f6:	2210      	movs	r2, #16
 80009f8:	2100      	movs	r1, #0
 80009fa:	207a      	movs	r0, #122	@ 0x7a
 80009fc:	f000 fa62 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a00:	2240      	movs	r2, #64	@ 0x40
 8000a02:	2100      	movs	r1, #0
 8000a04:	207a      	movs	r0, #122	@ 0x7a
 8000a06:	f000 fa5d 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a0a:	2281      	movs	r2, #129	@ 0x81
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	207a      	movs	r0, #122	@ 0x7a
 8000a10:	f000 fa58 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a14:	22ff      	movs	r2, #255	@ 0xff
 8000a16:	2100      	movs	r1, #0
 8000a18:	207a      	movs	r0, #122	@ 0x7a
 8000a1a:	f000 fa53 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a1e:	22a1      	movs	r2, #161	@ 0xa1
 8000a20:	2100      	movs	r1, #0
 8000a22:	207a      	movs	r0, #122	@ 0x7a
 8000a24:	f000 fa4e 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a28:	22a6      	movs	r2, #166	@ 0xa6
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	207a      	movs	r0, #122	@ 0x7a
 8000a2e:	f000 fa49 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000a32:	22a8      	movs	r2, #168	@ 0xa8
 8000a34:	2100      	movs	r1, #0
 8000a36:	207a      	movs	r0, #122	@ 0x7a
 8000a38:	f000 fa44 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000a3c:	223f      	movs	r2, #63	@ 0x3f
 8000a3e:	2100      	movs	r1, #0
 8000a40:	207a      	movs	r0, #122	@ 0x7a
 8000a42:	f000 fa3f 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a46:	22a4      	movs	r2, #164	@ 0xa4
 8000a48:	2100      	movs	r1, #0
 8000a4a:	207a      	movs	r0, #122	@ 0x7a
 8000a4c:	f000 fa3a 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000a50:	22d3      	movs	r2, #211	@ 0xd3
 8000a52:	2100      	movs	r1, #0
 8000a54:	207a      	movs	r0, #122	@ 0x7a
 8000a56:	f000 fa35 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	207a      	movs	r0, #122	@ 0x7a
 8000a60:	f000 fa30 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a64:	22d5      	movs	r2, #213	@ 0xd5
 8000a66:	2100      	movs	r1, #0
 8000a68:	207a      	movs	r0, #122	@ 0x7a
 8000a6a:	f000 fa2b 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000a6e:	22f0      	movs	r2, #240	@ 0xf0
 8000a70:	2100      	movs	r1, #0
 8000a72:	207a      	movs	r0, #122	@ 0x7a
 8000a74:	f000 fa26 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000a78:	22d9      	movs	r2, #217	@ 0xd9
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	207a      	movs	r0, #122	@ 0x7a
 8000a7e:	f000 fa21 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000a82:	2222      	movs	r2, #34	@ 0x22
 8000a84:	2100      	movs	r1, #0
 8000a86:	207a      	movs	r0, #122	@ 0x7a
 8000a88:	f000 fa1c 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000a8c:	22da      	movs	r2, #218	@ 0xda
 8000a8e:	2100      	movs	r1, #0
 8000a90:	207a      	movs	r0, #122	@ 0x7a
 8000a92:	f000 fa17 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000a96:	2212      	movs	r2, #18
 8000a98:	2100      	movs	r1, #0
 8000a9a:	207a      	movs	r0, #122	@ 0x7a
 8000a9c:	f000 fa12 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000aa0:	22db      	movs	r2, #219	@ 0xdb
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	207a      	movs	r0, #122	@ 0x7a
 8000aa6:	f000 fa0d 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000aaa:	2220      	movs	r2, #32
 8000aac:	2100      	movs	r1, #0
 8000aae:	207a      	movs	r0, #122	@ 0x7a
 8000ab0:	f000 fa08 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000ab4:	228d      	movs	r2, #141	@ 0x8d
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	207a      	movs	r0, #122	@ 0x7a
 8000aba:	f000 fa03 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000abe:	2214      	movs	r2, #20
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	207a      	movs	r0, #122	@ 0x7a
 8000ac4:	f000 f9fe 	bl	8000ec4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000ac8:	22af      	movs	r2, #175	@ 0xaf
 8000aca:	2100      	movs	r1, #0
 8000acc:	207a      	movs	r0, #122	@ 0x7a
 8000ace:	f000 f9f9 	bl	8000ec4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000ad2:	222e      	movs	r2, #46	@ 0x2e
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	207a      	movs	r0, #122	@ 0x7a
 8000ad8:	f000 f9f4 	bl	8000ec4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 f843 	bl	8000b68 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000ae2:	f000 f813 	bl	8000b0c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <SSD1306_Init+0x184>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <SSD1306_Init+0x184>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000af2:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <SSD1306_Init+0x184>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000af8:	2301      	movs	r3, #1
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000c8 	.word	0x200000c8
 8000b08:	2000056c 	.word	0x2000056c

08000b0c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	e01d      	b.n	8000b54 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	3b50      	subs	r3, #80	@ 0x50
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	2100      	movs	r1, #0
 8000b22:	207a      	movs	r0, #122	@ 0x7a
 8000b24:	f000 f9ce 	bl	8000ec4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	207a      	movs	r0, #122	@ 0x7a
 8000b2e:	f000 f9c9 	bl	8000ec4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000b32:	2210      	movs	r2, #16
 8000b34:	2100      	movs	r1, #0
 8000b36:	207a      	movs	r0, #122	@ 0x7a
 8000b38:	f000 f9c4 	bl	8000ec4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	01db      	lsls	r3, r3, #7
 8000b40:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <SSD1306_UpdateScreen+0x58>)
 8000b42:	441a      	add	r2, r3
 8000b44:	2380      	movs	r3, #128	@ 0x80
 8000b46:	2140      	movs	r1, #64	@ 0x40
 8000b48:	207a      	movs	r0, #122	@ 0x7a
 8000b4a:	f000 f955 	bl	8000df8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	3301      	adds	r3, #1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b07      	cmp	r3, #7
 8000b58:	d9de      	bls.n	8000b18 <SSD1306_UpdateScreen+0xc>
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000016c 	.word	0x2000016c

08000b68 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <SSD1306_Fill+0x14>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e000      	b.n	8000b7e <SSD1306_Fill+0x16>
 8000b7c:	23ff      	movs	r3, #255	@ 0xff
 8000b7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b82:	4619      	mov	r1, r3
 8000b84:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <SSD1306_Fill+0x2c>)
 8000b86:	f003 fac5 	bl	8004114 <memset>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000016c 	.word	0x2000016c

08000b98 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	80bb      	strh	r3, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	70fb      	strb	r3, [r7, #3]
	if (
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bae:	d848      	bhi.n	8000c42 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000bb0:	88bb      	ldrh	r3, [r7, #4]
 8000bb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bb4:	d845      	bhi.n	8000c42 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000bb6:	4b26      	ldr	r3, [pc, #152]	@ (8000c50 <SSD1306_DrawPixel+0xb8>)
 8000bb8:	791b      	ldrb	r3, [r3, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d006      	beq.n	8000bcc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bf0c      	ite	eq
 8000bc4:	2301      	moveq	r3, #1
 8000bc6:	2300      	movne	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000bcc:	78fb      	ldrb	r3, [r7, #3]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d11a      	bne.n	8000c08 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000bd2:	88fa      	ldrh	r2, [r7, #6]
 8000bd4:	88bb      	ldrh	r3, [r7, #4]
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	b298      	uxth	r0, r3
 8000bda:	4603      	mov	r3, r0
 8000bdc:	01db      	lsls	r3, r3, #7
 8000bde:	4413      	add	r3, r2
 8000be0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c54 <SSD1306_DrawPixel+0xbc>)
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	b25a      	sxtb	r2, r3
 8000be6:	88bb      	ldrh	r3, [r7, #4]
 8000be8:	f003 0307 	and.w	r3, r3, #7
 8000bec:	2101      	movs	r1, #1
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b259      	sxtb	r1, r3
 8000bf8:	88fa      	ldrh	r2, [r7, #6]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	01db      	lsls	r3, r3, #7
 8000bfe:	4413      	add	r3, r2
 8000c00:	b2c9      	uxtb	r1, r1
 8000c02:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <SSD1306_DrawPixel+0xbc>)
 8000c04:	54d1      	strb	r1, [r2, r3]
 8000c06:	e01d      	b.n	8000c44 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c08:	88fa      	ldrh	r2, [r7, #6]
 8000c0a:	88bb      	ldrh	r3, [r7, #4]
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	b298      	uxth	r0, r3
 8000c10:	4603      	mov	r3, r0
 8000c12:	01db      	lsls	r3, r3, #7
 8000c14:	4413      	add	r3, r2
 8000c16:	4a0f      	ldr	r2, [pc, #60]	@ (8000c54 <SSD1306_DrawPixel+0xbc>)
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	b25a      	sxtb	r2, r3
 8000c1c:	88bb      	ldrh	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	2101      	movs	r1, #1
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	4013      	ands	r3, r2
 8000c30:	b259      	sxtb	r1, r3
 8000c32:	88fa      	ldrh	r2, [r7, #6]
 8000c34:	4603      	mov	r3, r0
 8000c36:	01db      	lsls	r3, r3, #7
 8000c38:	4413      	add	r3, r2
 8000c3a:	b2c9      	uxtb	r1, r1
 8000c3c:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <SSD1306_DrawPixel+0xbc>)
 8000c3e:	54d1      	strb	r1, [r2, r3]
 8000c40:	e000      	b.n	8000c44 <SSD1306_DrawPixel+0xac>
		return;
 8000c42:	bf00      	nop
	}
}
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000056c 	.word	0x2000056c
 8000c54:	2000016c 	.word	0x2000016c

08000c58 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460a      	mov	r2, r1
 8000c62:	80fb      	strh	r3, [r7, #6]
 8000c64:	4613      	mov	r3, r2
 8000c66:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000c68:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <SSD1306_GotoXY+0x28>)
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <SSD1306_GotoXY+0x28>)
 8000c70:	88bb      	ldrh	r3, [r7, #4]
 8000c72:	8053      	strh	r3, [r2, #2]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	2000056c 	.word	0x2000056c

08000c84 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	4613      	mov	r3, r2
 8000c92:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c94:	4b39      	ldr	r3, [pc, #228]	@ (8000d7c <SSD1306_Putc+0xf8>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
	if (
 8000ca0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ca2:	dc07      	bgt.n	8000cb4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ca4:	4b35      	ldr	r3, [pc, #212]	@ (8000d7c <SSD1306_Putc+0xf8>)
 8000ca6:	885b      	ldrh	r3, [r3, #2]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	785b      	ldrb	r3, [r3, #1]
 8000cae:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000cb0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cb2:	dd01      	ble.n	8000cb8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e05d      	b.n	8000d74 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e04b      	b.n	8000d56 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	3b20      	subs	r3, #32
 8000cc6:	6839      	ldr	r1, [r7, #0]
 8000cc8:	7849      	ldrb	r1, [r1, #1]
 8000cca:	fb01 f303 	mul.w	r3, r1, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	440b      	add	r3, r1
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	e030      	b.n	8000d44 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d010      	beq.n	8000d14 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000cf2:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <SSD1306_Putc+0xf8>)
 8000cf4:	881a      	ldrh	r2, [r3, #0]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b298      	uxth	r0, r3
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <SSD1306_Putc+0xf8>)
 8000d00:	885a      	ldrh	r2, [r3, #2]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	4413      	add	r3, r2
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	79ba      	ldrb	r2, [r7, #6]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f7ff ff43 	bl	8000b98 <SSD1306_DrawPixel>
 8000d12:	e014      	b.n	8000d3e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000d14:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <SSD1306_Putc+0xf8>)
 8000d16:	881a      	ldrh	r2, [r3, #0]
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b298      	uxth	r0, r3
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <SSD1306_Putc+0xf8>)
 8000d22:	885a      	ldrh	r2, [r3, #2]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	4413      	add	r3, r2
 8000d2a:	b299      	uxth	r1, r3
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	bf0c      	ite	eq
 8000d32:	2301      	moveq	r3, #1
 8000d34:	2300      	movne	r3, #0
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f7ff ff2d 	bl	8000b98 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	3301      	adds	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d3c8      	bcc.n	8000ce2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	785b      	ldrb	r3, [r3, #1]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d3ad      	bcc.n	8000cbe <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <SSD1306_Putc+0xf8>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	7812      	ldrb	r2, [r2, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b03      	ldr	r3, [pc, #12]	@ (8000d7c <SSD1306_Putc+0xf8>)
 8000d70:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000d72:	79fb      	ldrb	r3, [r7, #7]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000056c 	.word	0x2000056c

08000d80 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000d8e:	e012      	b.n	8000db6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	79fa      	ldrb	r2, [r7, #7]
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff73 	bl	8000c84 <SSD1306_Putc>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d002      	beq.n	8000db0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	e008      	b.n	8000dc2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3301      	adds	r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1e8      	bne.n	8000d90 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <ssd1306_I2C_Init+0x28>)
 8000dd4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dd6:	e002      	b.n	8000dde <ssd1306_I2C_Init+0x12>
		p--;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f9      	bne.n	8000dd8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	0003d090 	.word	0x0003d090

08000df8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b0c7      	sub	sp, #284	@ 0x11c
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	4604      	mov	r4, r0
 8000e00:	4608      	mov	r0, r1
 8000e02:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000e06:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000e0a:	600a      	str	r2, [r1, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e12:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000e16:	4622      	mov	r2, r4
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e1e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000e22:	4602      	mov	r2, r0
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e2e:	460a      	mov	r2, r1
 8000e30:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000e32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000e3a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e3e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000e4c:	e015      	b.n	8000e7a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000e4e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e52:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e56:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000e5a:	6812      	ldr	r2, [r2, #0]
 8000e5c:	441a      	add	r2, r3
 8000e5e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e62:	3301      	adds	r3, #1
 8000e64:	7811      	ldrb	r1, [r2, #0]
 8000e66:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e6a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000e6e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000e70:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e74:	3301      	adds	r3, #1
 8000e76:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000e7a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e84:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000e88:	8812      	ldrh	r2, [r2, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d8df      	bhi.n	8000e4e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000e8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e92:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b299      	uxth	r1, r3
 8000e9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	f107 020c 	add.w	r2, r7, #12
 8000eac:	200a      	movs	r0, #10
 8000eae:	9000      	str	r0, [sp, #0]
 8000eb0:	4803      	ldr	r0, [pc, #12]	@ (8000ec0 <ssd1306_I2C_WriteMulti+0xc8>)
 8000eb2:	f000 fed9 	bl	8001c68 <HAL_I2C_Master_Transmit>
}
 8000eb6:	bf00      	nop
 8000eb8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	200000c8 	.word	0x200000c8

08000ec4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	71bb      	strb	r3, [r7, #6]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000eda:	797b      	ldrb	r3, [r7, #5]
 8000edc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	b299      	uxth	r1, r3
 8000ee2:	f107 020c 	add.w	r2, r7, #12
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2302      	movs	r3, #2
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <ssd1306_I2C_Write+0x38>)
 8000eee:	f000 febb 	bl	8001c68 <HAL_I2C_Master_Transmit>
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000c8 	.word	0x200000c8

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	4a08      	ldr	r2, [pc, #32]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800

08000f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a19      	ldr	r2, [pc, #100]	@ (8000fd4 <HAL_I2C_MspInit+0x84>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12c      	bne.n	8000fcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f94:	2312      	movs	r3, #18
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480c      	ldr	r0, [pc, #48]	@ (8000fdc <HAL_I2C_MspInit+0x8c>)
 8000fac:	f000 fb56 	bl	800165c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000fba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	@ 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8001074 <HAL_UART_MspInit+0x94>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d134      	bne.n	800106c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <HAL_UART_MspInit+0x98>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <HAL_UART_MspInit+0x98>)
 800100c:	f043 0310 	orr.w	r3, r3, #16
 8001010:	6453      	str	r3, [r2, #68]	@ 0x44
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_UART_MspInit+0x98>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_UART_MspInit+0x98>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <HAL_UART_MspInit+0x98>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_UART_MspInit+0x98>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800103a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001040:	2312      	movs	r3, #18
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001044:	2301      	movs	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800104c:	2307      	movs	r3, #7
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4809      	ldr	r0, [pc, #36]	@ (800107c <HAL_UART_MspInit+0x9c>)
 8001058:	f000 fb00 	bl	800165c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	2025      	movs	r0, #37	@ 0x25
 8001062:	f000 fa32 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001066:	2025      	movs	r0, #37	@ 0x25
 8001068:	f000 fa4b 	bl	8001502 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	@ 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40011000 	.word	0x40011000
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <NMI_Handler+0x4>

08001088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <MemManage_Handler+0x4>

08001098 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d6:	f000 f8d9 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <USART1_IRQHandler+0x10>)
 80010e6:	f002 f81f 	bl	8003128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000080 	.word	0x20000080

080010f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010fc:	f000 fc4c 	bl	8001998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	@ (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	@ (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f002 fff6 	bl	8004124 <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20018000 	.word	0x20018000
 8001164:	00000400 	.word	0x00000400
 8001168:	20000574 	.word	0x20000574
 800116c:	200006c8 	.word	0x200006c8

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001198:	f7ff ffea 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	@ (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	@ (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f002 ffb5 	bl	8004130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff fab9 	bl	800073c <main>
  bx  lr    
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80011d8:	080057d8 	.word	0x080057d8
  ldr r2, =_sbss
 80011dc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80011e0:	200006c4 	.word	0x200006c4

080011e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <HAL_Init+0x40>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <HAL_Init+0x40>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	@ (8001228 <HAL_Init+0x40>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f94f 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	200f      	movs	r0, #15
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fe70 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f967 	bl	800151e <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 f92f 	bl	80014ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000008 	.word	0x20000008
 8001284:	20000010 	.word	0x20000010
 8001288:	2000000c 	.word	0x2000000c

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000010 	.word	0x20000010
 80012b0:	20000578 	.word	0x20000578

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000578 	.word	0x20000578

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000010 	.word	0x20000010

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	@ (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	@ (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	@ (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	@ 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f7ff ff8e 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff29 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014dc:	f7ff ff3e 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f7ff ff8e 	bl	8001408 <NVIC_EncodePriority>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff5d 	bl	80013b4 <__NVIC_SetPriority>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff31 	bl	8001378 <__NVIC_EnableIRQ>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffa2 	bl	8001470 <SysTick_Config>
 800152c:	4603      	mov	r3, r0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff feb6 	bl	80012b4 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d008      	beq.n	8001568 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2280      	movs	r2, #128	@ 0x80
 800155a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e052      	b.n	800160e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0216 	bic.w	r2, r2, #22
 8001576:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001586:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	2b00      	cmp	r3, #0
 800158e:	d103      	bne.n	8001598 <HAL_DMA_Abort+0x62>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0208 	bic.w	r2, r2, #8
 80015a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b8:	e013      	b.n	80015e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ba:	f7ff fe7b 	bl	80012b4 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d90c      	bls.n	80015e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2220      	movs	r2, #32
 80015cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e015      	b.n	800160e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e4      	bne.n	80015ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f4:	223f      	movs	r2, #63	@ 0x3f
 80015f6:	409a      	lsls	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d004      	beq.n	8001634 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2280      	movs	r2, #128	@ 0x80
 800162e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e00c      	b.n	800164e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2205      	movs	r2, #5
 8001638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	@ 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	e159      	b.n	800192c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001678:	2201      	movs	r2, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	429a      	cmp	r2, r3
 8001692:	f040 8148 	bne.w	8001926 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d005      	beq.n	80016ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d130      	bne.n	8001710 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e4:	2201      	movs	r2, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 0201 	and.w	r2, r3, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b03      	cmp	r3, #3
 800171a:	d017      	beq.n	800174c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d123      	bne.n	80017a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	08da      	lsrs	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	69b9      	ldr	r1, [r7, #24]
 800179c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0203 	and.w	r2, r3, #3
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80a2 	beq.w	8001926 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b57      	ldr	r3, [pc, #348]	@ (8001944 <HAL_GPIO_Init+0x2e8>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	4a56      	ldr	r2, [pc, #344]	@ (8001944 <HAL_GPIO_Init+0x2e8>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f2:	4b54      	ldr	r3, [pc, #336]	@ (8001944 <HAL_GPIO_Init+0x2e8>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017fe:	4a52      	ldr	r2, [pc, #328]	@ (8001948 <HAL_GPIO_Init+0x2ec>)
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	220f      	movs	r2, #15
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a49      	ldr	r2, [pc, #292]	@ (800194c <HAL_GPIO_Init+0x2f0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d019      	beq.n	800185e <HAL_GPIO_Init+0x202>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a48      	ldr	r2, [pc, #288]	@ (8001950 <HAL_GPIO_Init+0x2f4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0x1fe>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a47      	ldr	r2, [pc, #284]	@ (8001954 <HAL_GPIO_Init+0x2f8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00d      	beq.n	8001856 <HAL_GPIO_Init+0x1fa>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a46      	ldr	r2, [pc, #280]	@ (8001958 <HAL_GPIO_Init+0x2fc>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d007      	beq.n	8001852 <HAL_GPIO_Init+0x1f6>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a45      	ldr	r2, [pc, #276]	@ (800195c <HAL_GPIO_Init+0x300>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d101      	bne.n	800184e <HAL_GPIO_Init+0x1f2>
 800184a:	2304      	movs	r3, #4
 800184c:	e008      	b.n	8001860 <HAL_GPIO_Init+0x204>
 800184e:	2307      	movs	r3, #7
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x204>
 8001852:	2303      	movs	r3, #3
 8001854:	e004      	b.n	8001860 <HAL_GPIO_Init+0x204>
 8001856:	2302      	movs	r3, #2
 8001858:	e002      	b.n	8001860 <HAL_GPIO_Init+0x204>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <HAL_GPIO_Init+0x204>
 800185e:	2300      	movs	r3, #0
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	f002 0203 	and.w	r2, r2, #3
 8001866:	0092      	lsls	r2, r2, #2
 8001868:	4093      	lsls	r3, r2
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001870:	4935      	ldr	r1, [pc, #212]	@ (8001948 <HAL_GPIO_Init+0x2ec>)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187e:	4b38      	ldr	r3, [pc, #224]	@ (8001960 <HAL_GPIO_Init+0x304>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001960 <HAL_GPIO_Init+0x304>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001960 <HAL_GPIO_Init+0x304>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018cc:	4a24      	ldr	r2, [pc, #144]	@ (8001960 <HAL_GPIO_Init+0x304>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018d2:	4b23      	ldr	r3, [pc, #140]	@ (8001960 <HAL_GPIO_Init+0x304>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001960 <HAL_GPIO_Init+0x304>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <HAL_GPIO_Init+0x304>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001920:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <HAL_GPIO_Init+0x304>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3301      	adds	r3, #1
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	2b0f      	cmp	r3, #15
 8001930:	f67f aea2 	bls.w	8001678 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3724      	adds	r7, #36	@ 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40013800 	.word	0x40013800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020400 	.word	0x40020400
 8001954:	40020800 	.word	0x40020800
 8001958:	40020c00 	.word	0x40020c00
 800195c:	40021000 	.word	0x40021000
 8001960:	40013c00 	.word	0x40013c00

08001964 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4013      	ands	r3, r2
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43d9      	mvns	r1, r3
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	400b      	ands	r3, r1
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019a2:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ae:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f806 	bl	80019c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40013c00 	.word	0x40013c00

080019c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e12b      	b.n	8001c4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff faa2 	bl	8000f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2224      	movs	r2, #36	@ 0x24
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a44:	f001 fa08 	bl	8002e58 <HAL_RCC_GetPCLK1Freq>
 8001a48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4a81      	ldr	r2, [pc, #516]	@ (8001c54 <HAL_I2C_Init+0x274>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d807      	bhi.n	8001a64 <HAL_I2C_Init+0x84>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4a80      	ldr	r2, [pc, #512]	@ (8001c58 <HAL_I2C_Init+0x278>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	bf94      	ite	ls
 8001a5c:	2301      	movls	r3, #1
 8001a5e:	2300      	movhi	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	e006      	b.n	8001a72 <HAL_I2C_Init+0x92>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4a7d      	ldr	r2, [pc, #500]	@ (8001c5c <HAL_I2C_Init+0x27c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	bf94      	ite	ls
 8001a6c:	2301      	movls	r3, #1
 8001a6e:	2300      	movhi	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0e7      	b.n	8001c4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4a78      	ldr	r2, [pc, #480]	@ (8001c60 <HAL_I2C_Init+0x280>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0c9b      	lsrs	r3, r3, #18
 8001a84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c54 <HAL_I2C_Init+0x274>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d802      	bhi.n	8001ab4 <HAL_I2C_Init+0xd4>
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	e009      	b.n	8001ac8 <HAL_I2C_Init+0xe8>
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	4a69      	ldr	r2, [pc, #420]	@ (8001c64 <HAL_I2C_Init+0x284>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	430b      	orrs	r3, r1
 8001ace:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ada:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	495c      	ldr	r1, [pc, #368]	@ (8001c54 <HAL_I2C_Init+0x274>)
 8001ae4:	428b      	cmp	r3, r1
 8001ae6:	d819      	bhi.n	8001b1c <HAL_I2C_Init+0x13c>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1e59      	subs	r1, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af6:	1c59      	adds	r1, r3, #1
 8001af8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001afc:	400b      	ands	r3, r1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00a      	beq.n	8001b18 <HAL_I2C_Init+0x138>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1e59      	subs	r1, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b16:	e051      	b.n	8001bbc <HAL_I2C_Init+0x1dc>
 8001b18:	2304      	movs	r3, #4
 8001b1a:	e04f      	b.n	8001bbc <HAL_I2C_Init+0x1dc>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d111      	bne.n	8001b48 <HAL_I2C_Init+0x168>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e58      	subs	r0, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	440b      	add	r3, r1
 8001b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e012      	b.n	8001b6e <HAL_I2C_Init+0x18e>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	0099      	lsls	r1, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_I2C_Init+0x196>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e022      	b.n	8001bbc <HAL_I2C_Init+0x1dc>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10e      	bne.n	8001b9c <HAL_I2C_Init+0x1bc>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1e58      	subs	r0, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6859      	ldr	r1, [r3, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	440b      	add	r3, r1
 8001b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b9a:	e00f      	b.n	8001bbc <HAL_I2C_Init+0x1dc>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e58      	subs	r0, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	0099      	lsls	r1, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	6809      	ldr	r1, [r1, #0]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6911      	ldr	r1, [r2, #16]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68d2      	ldr	r2, [r2, #12]
 8001bf6:	4311      	orrs	r1, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2220      	movs	r2, #32
 8001c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	000186a0 	.word	0x000186a0
 8001c58:	001e847f 	.word	0x001e847f
 8001c5c:	003d08ff 	.word	0x003d08ff
 8001c60:	431bde83 	.word	0x431bde83
 8001c64:	10624dd3 	.word	0x10624dd3

08001c68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	461a      	mov	r2, r3
 8001c74:	460b      	mov	r3, r1
 8001c76:	817b      	strh	r3, [r7, #10]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff fb1a 	bl	80012b4 <HAL_GetTick>
 8001c80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	f040 80e0 	bne.w	8001e50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2319      	movs	r3, #25
 8001c96:	2201      	movs	r2, #1
 8001c98:	4970      	ldr	r1, [pc, #448]	@ (8001e5c <HAL_I2C_Master_Transmit+0x1f4>)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 fa92 	bl	80021c4 <I2C_WaitOnFlagUntilTimeout>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e0d3      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_I2C_Master_Transmit+0x50>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e0cc      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ea>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d007      	beq.n	8001cde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2221      	movs	r2, #33	@ 0x21
 8001cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	893a      	ldrh	r2, [r7, #8]
 8001d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4a50      	ldr	r2, [pc, #320]	@ (8001e60 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d20:	8979      	ldrh	r1, [r7, #10]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	6a3a      	ldr	r2, [r7, #32]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f9ca 	bl	80020c0 <I2C_MasterRequestWrite>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e08d      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d4c:	e066      	b.n	8001e1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	6a39      	ldr	r1, [r7, #32]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 fb50 	bl	80023f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00d      	beq.n	8001d7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d107      	bne.n	8001d76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e06b      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d11b      	bne.n	8001df0 <HAL_I2C_Master_Transmit+0x188>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d017      	beq.n	8001df0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	6a39      	ldr	r1, [r7, #32]
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fb47 	bl	8002488 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00d      	beq.n	8001e1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d107      	bne.n	8001e18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e01a      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d194      	bne.n	8001d4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e000      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e50:	2302      	movs	r3, #2
  }
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	00100002 	.word	0x00100002
 8001e60:	ffff0000 	.word	0xffff0000

08001e64 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	460b      	mov	r3, r1
 8001e72:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff fa1e 	bl	80012b4 <HAL_GetTick>
 8001e78:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	f040 8111 	bne.w	80020ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2319      	movs	r3, #25
 8001e92:	2201      	movs	r2, #1
 8001e94:	4988      	ldr	r1, [pc, #544]	@ (80020b8 <HAL_I2C_IsDeviceReady+0x254>)
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f994 	bl	80021c4 <I2C_WaitOnFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e104      	b.n	80020b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_I2C_IsDeviceReady+0x50>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e0fd      	b.n	80020b0 <HAL_I2C_IsDeviceReady+0x24c>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d007      	beq.n	8001eda <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2224      	movs	r2, #36	@ 0x24
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4a70      	ldr	r2, [pc, #448]	@ (80020bc <HAL_I2C_IsDeviceReady+0x258>)
 8001efc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f0c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f952 	bl	80021c4 <I2C_WaitOnFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00d      	beq.n	8001f42 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f34:	d103      	bne.n	8001f3e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f3c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0b6      	b.n	80020b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f42:	897b      	ldrh	r3, [r7, #10]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f50:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001f52:	f7ff f9af 	bl	80012b4 <HAL_GetTick>
 8001f56:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	bf0c      	ite	eq
 8001f66:	2301      	moveq	r3, #1
 8001f68:	2300      	movne	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f86:	e025      	b.n	8001fd4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f88:	f7ff f994 	bl	80012b4 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d302      	bcc.n	8001f9e <HAL_I2C_IsDeviceReady+0x13a>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	22a0      	movs	r2, #160	@ 0xa0
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fde:	d005      	beq.n	8001fec <HAL_I2C_IsDeviceReady+0x188>
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_I2C_IsDeviceReady+0x188>
 8001fe6:	7dbb      	ldrb	r3, [r7, #22]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0cd      	beq.n	8001f88 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d129      	bne.n	8002056 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002010:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2319      	movs	r3, #25
 800202e:	2201      	movs	r2, #1
 8002030:	4921      	ldr	r1, [pc, #132]	@ (80020b8 <HAL_I2C_IsDeviceReady+0x254>)
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f8c6 	bl	80021c4 <I2C_WaitOnFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e036      	b.n	80020b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e02c      	b.n	80020b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002064:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800206e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2319      	movs	r3, #25
 8002076:	2201      	movs	r2, #1
 8002078:	490f      	ldr	r1, [pc, #60]	@ (80020b8 <HAL_I2C_IsDeviceReady+0x254>)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f8a2 	bl	80021c4 <I2C_WaitOnFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e012      	b.n	80020b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	3301      	adds	r3, #1
 800208e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	f4ff af32 	bcc.w	8001efe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80020ae:	2302      	movs	r3, #2
  }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	00100002 	.word	0x00100002
 80020bc:	ffff0000 	.word	0xffff0000

080020c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	460b      	mov	r3, r1
 80020ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d006      	beq.n	80020ea <I2C_MasterRequestWrite+0x2a>
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d003      	beq.n	80020ea <I2C_MasterRequestWrite+0x2a>
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020e8:	d108      	bne.n	80020fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e00b      	b.n	8002114 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	2b12      	cmp	r3, #18
 8002102:	d107      	bne.n	8002114 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002112:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f84f 	bl	80021c4 <I2C_WaitOnFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00d      	beq.n	8002148 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800213a:	d103      	bne.n	8002144 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002142:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e035      	b.n	80021b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002150:	d108      	bne.n	8002164 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002152:	897b      	ldrh	r3, [r7, #10]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	e01b      	b.n	800219c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002164:	897b      	ldrh	r3, [r7, #10]
 8002166:	11db      	asrs	r3, r3, #7
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f003 0306 	and.w	r3, r3, #6
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f063 030f 	orn	r3, r3, #15
 8002174:	b2da      	uxtb	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	490e      	ldr	r1, [pc, #56]	@ (80021bc <I2C_MasterRequestWrite+0xfc>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f898 	bl	80022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e010      	b.n	80021b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002192:	897b      	ldrh	r3, [r7, #10]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4907      	ldr	r1, [pc, #28]	@ (80021c0 <I2C_MasterRequestWrite+0x100>)
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f888 	bl	80022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	00010008 	.word	0x00010008
 80021c0:	00010002 	.word	0x00010002

080021c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021d4:	e048      	b.n	8002268 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d044      	beq.n	8002268 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021de:	f7ff f869 	bl	80012b4 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d302      	bcc.n	80021f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d139      	bne.n	8002268 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	0c1b      	lsrs	r3, r3, #16
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d10d      	bne.n	800221a <I2C_WaitOnFlagUntilTimeout+0x56>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	43da      	mvns	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	4013      	ands	r3, r2
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	e00c      	b.n	8002234 <I2C_WaitOnFlagUntilTimeout+0x70>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	43da      	mvns	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4013      	ands	r3, r2
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	429a      	cmp	r2, r3
 8002238:	d116      	bne.n	8002268 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002254:	f043 0220 	orr.w	r2, r3, #32
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e023      	b.n	80022b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	0c1b      	lsrs	r3, r3, #16
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d10d      	bne.n	800228e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	43da      	mvns	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4013      	ands	r3, r2
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	e00c      	b.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	43da      	mvns	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4013      	ands	r3, r2
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d093      	beq.n	80021d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022c6:	e071      	b.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022d6:	d123      	bne.n	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	f043 0204 	orr.w	r2, r3, #4
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e067      	b.n	80023f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002326:	d041      	beq.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002328:	f7fe ffc4 	bl	80012b4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	d302      	bcc.n	800233e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d136      	bne.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d10c      	bne.n	8002362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4013      	ands	r3, r2
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	bf14      	ite	ne
 800235a:	2301      	movne	r3, #1
 800235c:	2300      	moveq	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	e00b      	b.n	800237a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	43da      	mvns	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	4013      	ands	r3, r2
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf14      	ite	ne
 8002374:	2301      	movne	r3, #1
 8002376:	2300      	moveq	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d016      	beq.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e021      	b.n	80023f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d10c      	bne.n	80023d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	43da      	mvns	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	4013      	ands	r3, r2
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf14      	ite	ne
 80023c8:	2301      	movne	r3, #1
 80023ca:	2300      	moveq	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	e00b      	b.n	80023e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4013      	ands	r3, r2
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f47f af6d 	bne.w	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002404:	e034      	b.n	8002470 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f886 	bl	8002518 <I2C_IsAcknowledgeFailed>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e034      	b.n	8002480 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d028      	beq.n	8002470 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241e:	f7fe ff49 	bl	80012b4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	429a      	cmp	r2, r3
 800242c:	d302      	bcc.n	8002434 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d11d      	bne.n	8002470 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243e:	2b80      	cmp	r3, #128	@ 0x80
 8002440:	d016      	beq.n	8002470 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e007      	b.n	8002480 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247a:	2b80      	cmp	r3, #128	@ 0x80
 800247c:	d1c3      	bne.n	8002406 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002494:	e034      	b.n	8002500 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f83e 	bl	8002518 <I2C_IsAcknowledgeFailed>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e034      	b.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d028      	beq.n	8002500 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ae:	f7fe ff01 	bl	80012b4 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d11d      	bne.n	8002500 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d016      	beq.n	8002500 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ec:	f043 0220 	orr.w	r2, r3, #32
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e007      	b.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b04      	cmp	r3, #4
 800250c:	d1c3      	bne.n	8002496 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800252e:	d11b      	bne.n	8002568 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002538:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	f043 0204 	orr.w	r2, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e267      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d075      	beq.n	8002682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002596:	4b88      	ldr	r3, [pc, #544]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d00c      	beq.n	80025bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a2:	4b85      	ldr	r3, [pc, #532]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d112      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ae:	4b82      	ldr	r3, [pc, #520]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ba:	d10b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	4b7e      	ldr	r3, [pc, #504]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d05b      	beq.n	8002680 <HAL_RCC_OscConfig+0x108>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d157      	bne.n	8002680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e242      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_OscConfig+0x74>
 80025de:	4b76      	ldr	r3, [pc, #472]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a75      	ldr	r2, [pc, #468]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e01d      	b.n	8002628 <HAL_RCC_OscConfig+0xb0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0x98>
 80025f6:	4b70      	ldr	r3, [pc, #448]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a6f      	ldr	r2, [pc, #444]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b6d      	ldr	r3, [pc, #436]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a6c      	ldr	r2, [pc, #432]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0xb0>
 8002610:	4b69      	ldr	r3, [pc, #420]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a68      	ldr	r2, [pc, #416]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b66      	ldr	r3, [pc, #408]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a65      	ldr	r2, [pc, #404]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fe40 	bl	80012b4 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7fe fe3c 	bl	80012b4 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	@ 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e207      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b5b      	ldr	r3, [pc, #364]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0xc0>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fe2c 	bl	80012b4 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7fe fe28 	bl	80012b4 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	@ 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e1f3      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	4b51      	ldr	r3, [pc, #324]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0xe8>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d063      	beq.n	8002756 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800268e:	4b4a      	ldr	r3, [pc, #296]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800269a:	4b47      	ldr	r3, [pc, #284]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d11c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a6:	4b44      	ldr	r3, [pc, #272]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d116      	bne.n	80026e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	4b41      	ldr	r3, [pc, #260]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x152>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e1c7      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	4b3b      	ldr	r3, [pc, #236]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4937      	ldr	r1, [pc, #220]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	e03a      	b.n	8002756 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e8:	4b34      	ldr	r3, [pc, #208]	@ (80027bc <HAL_RCC_OscConfig+0x244>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7fe fde1 	bl	80012b4 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f6:	f7fe fddd 	bl	80012b4 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e1a8      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	4b2b      	ldr	r3, [pc, #172]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002714:	4b28      	ldr	r3, [pc, #160]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4925      	ldr	r1, [pc, #148]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
 8002728:	e015      	b.n	8002756 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272a:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <HAL_RCC_OscConfig+0x244>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fdc0 	bl	80012b4 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe fdbc 	bl	80012b4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e187      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	4b1b      	ldr	r3, [pc, #108]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d036      	beq.n	80027d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d016      	beq.n	8002798 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276a:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <HAL_RCC_OscConfig+0x248>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7fe fda0 	bl	80012b4 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002778:	f7fe fd9c 	bl	80012b4 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e167      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 800278c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x200>
 8002796:	e01b      	b.n	80027d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002798:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_RCC_OscConfig+0x248>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7fe fd89 	bl	80012b4 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	e00e      	b.n	80027c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a6:	f7fe fd85 	bl	80012b4 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d907      	bls.n	80027c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e150      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
 80027b8:	40023800 	.word	0x40023800
 80027bc:	42470000 	.word	0x42470000
 80027c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c4:	4b88      	ldr	r3, [pc, #544]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80027c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ea      	bne.n	80027a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8097 	beq.w	800290c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e2:	4b81      	ldr	r3, [pc, #516]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10f      	bne.n	800280e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	4b7d      	ldr	r3, [pc, #500]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	4a7c      	ldr	r2, [pc, #496]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80027f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027fe:	4b7a      	ldr	r3, [pc, #488]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280a:	2301      	movs	r3, #1
 800280c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280e:	4b77      	ldr	r3, [pc, #476]	@ (80029ec <HAL_RCC_OscConfig+0x474>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d118      	bne.n	800284c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800281a:	4b74      	ldr	r3, [pc, #464]	@ (80029ec <HAL_RCC_OscConfig+0x474>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a73      	ldr	r2, [pc, #460]	@ (80029ec <HAL_RCC_OscConfig+0x474>)
 8002820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002826:	f7fe fd45 	bl	80012b4 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282e:	f7fe fd41 	bl	80012b4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e10c      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002840:	4b6a      	ldr	r3, [pc, #424]	@ (80029ec <HAL_RCC_OscConfig+0x474>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x2ea>
 8002854:	4b64      	ldr	r3, [pc, #400]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002858:	4a63      	ldr	r2, [pc, #396]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002860:	e01c      	b.n	800289c <HAL_RCC_OscConfig+0x324>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b05      	cmp	r3, #5
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x30c>
 800286a:	4b5f      	ldr	r3, [pc, #380]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286e:	4a5e      	ldr	r2, [pc, #376]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	6713      	str	r3, [r2, #112]	@ 0x70
 8002876:	4b5c      	ldr	r3, [pc, #368]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287a:	4a5b      	ldr	r2, [pc, #364]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6713      	str	r3, [r2, #112]	@ 0x70
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0x324>
 8002884:	4b58      	ldr	r3, [pc, #352]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002888:	4a57      	ldr	r2, [pc, #348]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002890:	4b55      	ldr	r3, [pc, #340]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002894:	4a54      	ldr	r2, [pc, #336]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002896:	f023 0304 	bic.w	r3, r3, #4
 800289a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d015      	beq.n	80028d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7fe fd06 	bl	80012b4 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe fd02 	bl	80012b4 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0cb      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	4b49      	ldr	r3, [pc, #292]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0ee      	beq.n	80028ac <HAL_RCC_OscConfig+0x334>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d0:	f7fe fcf0 	bl	80012b4 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d8:	f7fe fcec 	bl	80012b4 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0b5      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ee:	4b3e      	ldr	r3, [pc, #248]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ee      	bne.n	80028d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002900:	4b39      	ldr	r3, [pc, #228]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	4a38      	ldr	r2, [pc, #224]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800290a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80a1 	beq.w	8002a58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002916:	4b34      	ldr	r3, [pc, #208]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b08      	cmp	r3, #8
 8002920:	d05c      	beq.n	80029dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d141      	bne.n	80029ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292a:	4b31      	ldr	r3, [pc, #196]	@ (80029f0 <HAL_RCC_OscConfig+0x478>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fe fcc0 	bl	80012b4 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe fcbc 	bl	80012b4 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e087      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	4b27      	ldr	r3, [pc, #156]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	019b      	lsls	r3, r3, #6
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	085b      	lsrs	r3, r3, #1
 800296e:	3b01      	subs	r3, #1
 8002970:	041b      	lsls	r3, r3, #16
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	061b      	lsls	r3, r3, #24
 800297a:	491b      	ldr	r1, [pc, #108]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002980:	4b1b      	ldr	r3, [pc, #108]	@ (80029f0 <HAL_RCC_OscConfig+0x478>)
 8002982:	2201      	movs	r2, #1
 8002984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002986:	f7fe fc95 	bl	80012b4 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298e:	f7fe fc91 	bl	80012b4 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e05c      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a0:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x416>
 80029ac:	e054      	b.n	8002a58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ae:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_RCC_OscConfig+0x478>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fc7e 	bl	80012b4 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fc7a 	bl	80012b4 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e045      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x444>
 80029da:	e03d      	b.n	8002a58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d107      	bne.n	80029f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e038      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40007000 	.word	0x40007000
 80029f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <HAL_RCC_OscConfig+0x4ec>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d028      	beq.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d121      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d11a      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d111      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3a:	085b      	lsrs	r3, r3, #1
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800

08002a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0cc      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b68      	ldr	r3, [pc, #416]	@ (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d90c      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b65      	ldr	r3, [pc, #404]	@ (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b63      	ldr	r3, [pc, #396]	@ (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b8      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002abc:	4b59      	ldr	r3, [pc, #356]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad4:	4b53      	ldr	r3, [pc, #332]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a52      	ldr	r2, [pc, #328]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b50      	ldr	r3, [pc, #320]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	494d      	ldr	r1, [pc, #308]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d044      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b47      	ldr	r3, [pc, #284]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d119      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b26:	4b3f      	ldr	r3, [pc, #252]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e06f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	4b3b      	ldr	r3, [pc, #236]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e067      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b46:	4b37      	ldr	r3, [pc, #220]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f023 0203 	bic.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4934      	ldr	r1, [pc, #208]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b58:	f7fe fbac 	bl	80012b4 <HAL_GetTick>
 8002b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b60:	f7fe fba8 	bl	80012b4 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e04f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	4b2b      	ldr	r3, [pc, #172]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 020c 	and.w	r2, r3, #12
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d1eb      	bne.n	8002b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b88:	4b25      	ldr	r3, [pc, #148]	@ (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d20c      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b22      	ldr	r3, [pc, #136]	@ (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b20      	ldr	r3, [pc, #128]	@ (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e032      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4916      	ldr	r1, [pc, #88]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bda:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	490e      	ldr	r1, [pc, #56]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bee:	f000 f821 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	490a      	ldr	r1, [pc, #40]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	4a09      	ldr	r2, [pc, #36]	@ (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c0a:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_RCC_ClockConfig+0x1c8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fb0c 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023c00 	.word	0x40023c00
 8002c24:	40023800 	.word	0x40023800
 8002c28:	0800577c 	.word	0x0800577c
 8002c2c:	20000008 	.word	0x20000008
 8002c30:	2000000c 	.word	0x2000000c

08002c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c38:	b094      	sub	sp, #80	@ 0x50
 8002c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c4c:	4b79      	ldr	r3, [pc, #484]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d00d      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x40>
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	f200 80e1 	bhi.w	8002e20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x34>
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c66:	e0db      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c68:	4b73      	ldr	r3, [pc, #460]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c6c:	e0db      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c6e:	4b73      	ldr	r3, [pc, #460]	@ (8002e3c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c72:	e0d8      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c74:	4b6f      	ldr	r3, [pc, #444]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d063      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	099b      	lsrs	r3, r3, #6
 8002c90:	2200      	movs	r2, #0
 8002c92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	462b      	mov	r3, r5
 8002caa:	f04f 0000 	mov.w	r0, #0
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	0159      	lsls	r1, r3, #5
 8002cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb8:	0150      	lsls	r0, r2, #5
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	1a51      	subs	r1, r2, r1
 8002cc2:	6139      	str	r1, [r7, #16]
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cd8:	4659      	mov	r1, fp
 8002cda:	018b      	lsls	r3, r1, #6
 8002cdc:	4651      	mov	r1, sl
 8002cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ce2:	4651      	mov	r1, sl
 8002ce4:	018a      	lsls	r2, r1, #6
 8002ce6:	4651      	mov	r1, sl
 8002ce8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cec:	4659      	mov	r1, fp
 8002cee:	eb63 0901 	sbc.w	r9, r3, r1
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d06:	4690      	mov	r8, r2
 8002d08:	4699      	mov	r9, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	eb18 0303 	adds.w	r3, r8, r3
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	462b      	mov	r3, r5
 8002d14:	eb49 0303 	adc.w	r3, r9, r3
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d26:	4629      	mov	r1, r5
 8002d28:	024b      	lsls	r3, r1, #9
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d30:	4621      	mov	r1, r4
 8002d32:	024a      	lsls	r2, r1, #9
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d44:	f7fd faa4 	bl	8000290 <__aeabi_uldivmod>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d50:	e058      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d52:	4b38      	ldr	r3, [pc, #224]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	2200      	movs	r2, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	2300      	movs	r3, #0
 8002d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	464b      	mov	r3, r9
 8002d70:	f04f 0000 	mov.w	r0, #0
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	0159      	lsls	r1, r3, #5
 8002d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7e:	0150      	lsls	r0, r2, #5
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4641      	mov	r1, r8
 8002d86:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002da0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002da4:	ebb2 040a 	subs.w	r4, r2, sl
 8002da8:	eb63 050b 	sbc.w	r5, r3, fp
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	00eb      	lsls	r3, r5, #3
 8002db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dba:	00e2      	lsls	r2, r4, #3
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	461d      	mov	r5, r3
 8002dc0:	4643      	mov	r3, r8
 8002dc2:	18e3      	adds	r3, r4, r3
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	464b      	mov	r3, r9
 8002dc8:	eb45 0303 	adc.w	r3, r5, r3
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dda:	4629      	mov	r1, r5
 8002ddc:	028b      	lsls	r3, r1, #10
 8002dde:	4621      	mov	r1, r4
 8002de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002de4:	4621      	mov	r1, r4
 8002de6:	028a      	lsls	r2, r1, #10
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dee:	2200      	movs	r2, #0
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	61fa      	str	r2, [r7, #28]
 8002df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002df8:	f7fd fa4a 	bl	8000290 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4613      	mov	r3, r2
 8002e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e1e:	e002      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3750      	adds	r7, #80	@ 0x50
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800
 8002e38:	00f42400 	.word	0x00f42400
 8002e3c:	007a1200 	.word	0x007a1200

08002e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e44:	4b03      	ldr	r3, [pc, #12]	@ (8002e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000008 	.word	0x20000008

08002e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e5c:	f7ff fff0 	bl	8002e40 <HAL_RCC_GetHCLKFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	0a9b      	lsrs	r3, r3, #10
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	4903      	ldr	r1, [pc, #12]	@ (8002e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	0800578c 	.word	0x0800578c

08002e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e84:	f7ff ffdc 	bl	8002e40 <HAL_RCC_GetHCLKFreq>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	0b5b      	lsrs	r3, r3, #13
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	4903      	ldr	r1, [pc, #12]	@ (8002ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e96:	5ccb      	ldrb	r3, [r1, r3]
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	0800578c 	.word	0x0800578c

08002ea8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e04a      	b.n	8002f50 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe f886 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2224      	movs	r2, #36	@ 0x24
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fe63 	bl	8003bb8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8002f10:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0208 	orr.w	r2, r2, #8
 8002f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	@ 0x28
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d175      	bne.n	8003064 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_UART_Transmit+0x2c>
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e06e      	b.n	8003066 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2221      	movs	r2, #33	@ 0x21
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f96:	f7fe f98d 	bl	80012b4 <HAL_GetTick>
 8002f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	88fa      	ldrh	r2, [r7, #6]
 8002fa0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb0:	d108      	bne.n	8002fc4 <HAL_UART_Transmit+0x6c>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d104      	bne.n	8002fc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e003      	b.n	8002fcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fcc:	e02e      	b.n	800302c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 fbbd 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e03a      	b.n	8003066 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	3302      	adds	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	e007      	b.n	800301e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	3301      	adds	r3, #1
 800301c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1cb      	bne.n	8002fce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2200      	movs	r2, #0
 800303e:	2140      	movs	r1, #64	@ 0x40
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fb89 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e006      	b.n	8003066 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b08c      	sub	sp, #48	@ 0x30
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	4613      	mov	r3, r2
 800307a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b20      	cmp	r3, #32
 8003086:	d14a      	bne.n	800311e <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e043      	b.n	8003120 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fbad 	bl	800380a <UART_Start_Receive_IT>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80030b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d12c      	bne.n	8003118 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d125      	bne.n	8003112 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	617b      	str	r3, [r7, #20]
   return(result);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f043 0310 	orr.w	r3, r3, #16
 80030f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80030fe:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	6a39      	ldr	r1, [r7, #32]
 8003102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003104:	e841 2300 	strex	r3, r2, [r1]
 8003108:	61fb      	str	r3, [r7, #28]
   return(result);
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e5      	bne.n	80030dc <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8003110:	e002      	b.n	8003118 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003118:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800311c:	e000      	b.n	8003120 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
  }
}
 8003120:	4618      	mov	r0, r3
 8003122:	3730      	adds	r7, #48	@ 0x30
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b0ba      	sub	sp, #232	@ 0xe8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800314e:	2300      	movs	r3, #0
 8003150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800315a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_UART_IRQHandler+0x66>
 800317a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fc58 	bl	8003a3c <UART_Receive_IT>
      return;
 800318c:	e25b      	b.n	8003646 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800318e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 80de 	beq.w	8003354 <HAL_UART_IRQHandler+0x22c>
 8003198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d106      	bne.n	80031b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80d1 	beq.w	8003354 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_UART_IRQHandler+0xae>
 80031be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	f043 0201 	orr.w	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <HAL_UART_IRQHandler+0xd2>
 80031e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f043 0202 	orr.w	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_UART_IRQHandler+0xf6>
 8003206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f043 0204 	orr.w	r2, r3, #4
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800321e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d011      	beq.n	800324e <HAL_UART_IRQHandler+0x126>
 800322a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d105      	bne.n	8003242 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	f043 0208 	orr.w	r2, r3, #8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 81f2 	beq.w	800363c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_UART_IRQHandler+0x14e>
 8003264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fbe3 	bl	8003a3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003280:	2b40      	cmp	r3, #64	@ 0x40
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <HAL_UART_IRQHandler+0x17a>
 800329a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d04f      	beq.n	8003342 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 faeb 	bl	800387e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b2:	2b40      	cmp	r3, #64	@ 0x40
 80032b4:	d141      	bne.n	800333a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3314      	adds	r3, #20
 80032bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3314      	adds	r3, #20
 80032de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1d9      	bne.n	80032b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d013      	beq.n	8003332 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330e:	4a7e      	ldr	r2, [pc, #504]	@ (8003508 <HAL_UART_IRQHandler+0x3e0>)
 8003310:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe f97d 	bl	8001616 <HAL_DMA_Abort_IT>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d016      	beq.n	8003350 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800332c:	4610      	mov	r0, r2
 800332e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	e00e      	b.n	8003350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f99e 	bl	8003674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003338:	e00a      	b.n	8003350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f99a 	bl	8003674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	e006      	b.n	8003350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f996 	bl	8003674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800334e:	e175      	b.n	800363c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003350:	bf00      	nop
    return;
 8003352:	e173      	b.n	800363c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003358:	2b01      	cmp	r3, #1
 800335a:	f040 814f 	bne.w	80035fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800335e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8148 	beq.w	80035fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800336c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8141 	beq.w	80035fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339a:	2b40      	cmp	r3, #64	@ 0x40
 800339c:	f040 80b6 	bne.w	800350c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8145 	beq.w	8003640 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033be:	429a      	cmp	r2, r3
 80033c0:	f080 813e 	bcs.w	8003640 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d6:	f000 8088 	beq.w	80034ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003406:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800340a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003412:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800341e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1d9      	bne.n	80033da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3314      	adds	r3, #20
 800342c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003436:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3314      	adds	r3, #20
 8003446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800344a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800344e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003450:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003452:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003456:	e841 2300 	strex	r3, r2, [r1]
 800345a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800345c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e1      	bne.n	8003426 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3314      	adds	r3, #20
 8003468:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3314      	adds	r3, #20
 8003482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003486:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003488:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800348c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003494:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e3      	bne.n	8003462 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	330c      	adds	r3, #12
 80034ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034ba:	f023 0310 	bic.w	r3, r3, #16
 80034be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e3      	bne.n	80034a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe f826 	bl	8001536 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7fd f8cd 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003506:	e09b      	b.n	8003640 <HAL_UART_IRQHandler+0x518>
 8003508:	08003945 	.word	0x08003945
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003514:	b29b      	uxth	r3, r3
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 808e 	beq.w	8003644 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8089 	beq.w	8003644 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003548:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	330c      	adds	r3, #12
 8003552:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003556:	647a      	str	r2, [r7, #68]	@ 0x44
 8003558:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800355c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e3      	bne.n	8003532 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3314      	adds	r3, #20
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	623b      	str	r3, [r7, #32]
   return(result);
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3314      	adds	r3, #20
 800358a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800358e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003590:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800359c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e3      	bne.n	800356a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	330c      	adds	r3, #12
 80035b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	e853 3f00 	ldrex	r3, [r3]
 80035be:	60fb      	str	r3, [r7, #12]
   return(result);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0310 	bic.w	r3, r3, #16
 80035c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035d4:	61fa      	str	r2, [r7, #28]
 80035d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	69b9      	ldr	r1, [r7, #24]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	617b      	str	r3, [r7, #20]
   return(result);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e3      	bne.n	80035b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035f2:	4619      	mov	r1, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7fd f853 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035fa:	e023      	b.n	8003644 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003604:	2b00      	cmp	r3, #0
 8003606:	d009      	beq.n	800361c <HAL_UART_IRQHandler+0x4f4>
 8003608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800360c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f9a9 	bl	800396c <UART_Transmit_IT>
    return;
 800361a:	e014      	b.n	8003646 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800361c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00e      	beq.n	8003646 <HAL_UART_IRQHandler+0x51e>
 8003628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800362c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f9e9 	bl	8003a0c <UART_EndTransmit_IT>
    return;
 800363a:	e004      	b.n	8003646 <HAL_UART_IRQHandler+0x51e>
    return;
 800363c:	bf00      	nop
 800363e:	e002      	b.n	8003646 <HAL_UART_IRQHandler+0x51e>
      return;
 8003640:	bf00      	nop
 8003642:	e000      	b.n	8003646 <HAL_UART_IRQHandler+0x51e>
      return;
 8003644:	bf00      	nop
  }
}
 8003646:	37e8      	adds	r7, #232	@ 0xe8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800369e:	2302      	movs	r3, #2
 80036a0:	e020      	b.n	80036e4 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2224      	movs	r2, #36	@ 0x24
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f023 030c 	bic.w	r3, r3, #12
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f043 0308 	orr.w	r3, r3, #8
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_HalfDuplex_EnableReceiver+0x1a>
 8003706:	2302      	movs	r3, #2
 8003708:	e020      	b.n	800374c <HAL_HalfDuplex_EnableReceiver+0x5c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2224      	movs	r2, #36	@ 0x24
 8003716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f023 030c 	bic.w	r3, r3, #12
 8003728:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003768:	e03b      	b.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d037      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003772:	f7fd fd9f 	bl	80012b4 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <UART_WaitOnFlagUntilTimeout+0x30>
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e03a      	b.n	8003802 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d023      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b80      	cmp	r3, #128	@ 0x80
 800379e:	d020      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b40      	cmp	r3, #64	@ 0x40
 80037a4:	d01d      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d116      	bne.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f857 	bl	800387e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2208      	movs	r2, #8
 80037d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e00f      	b.n	8003802 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4013      	ands	r3, r2
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d0b4      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	4613      	mov	r3, r2
 8003816:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	88fa      	ldrh	r2, [r7, #6]
 8003822:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2222      	movs	r2, #34	@ 0x22
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800384e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0220 	orr.w	r2, r2, #32
 800386e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800387e:	b480      	push	{r7}
 8003880:	b095      	sub	sp, #84	@ 0x54
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800389c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80038a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e5      	bne.n	8003886 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3314      	adds	r3, #20
 80038c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3314      	adds	r3, #20
 80038d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e5      	bne.n	80038ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d119      	bne.n	800392a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	60bb      	str	r3, [r7, #8]
   return(result);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f023 0310 	bic.w	r3, r3, #16
 800390c:	647b      	str	r3, [r7, #68]	@ 0x44
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	330c      	adds	r3, #12
 8003914:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003916:	61ba      	str	r2, [r7, #24]
 8003918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6979      	ldr	r1, [r7, #20]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	613b      	str	r3, [r7, #16]
   return(result);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e5      	bne.n	80038f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003938:	bf00      	nop
 800393a:	3754      	adds	r7, #84	@ 0x54
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003950:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f7ff fe88 	bl	8003674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b21      	cmp	r3, #33	@ 0x21
 800397e:	d13e      	bne.n	80039fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003988:	d114      	bne.n	80039b4 <UART_Transmit_IT+0x48>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d110      	bne.n	80039b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	1c9a      	adds	r2, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	621a      	str	r2, [r3, #32]
 80039b2:	e008      	b.n	80039c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	1c59      	adds	r1, r3, #1
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6211      	str	r1, [r2, #32]
 80039be:	781a      	ldrb	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	4619      	mov	r1, r3
 80039d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e000      	b.n	8003a00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039fe:	2302      	movs	r3, #2
  }
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fe0d 	bl	800364c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08c      	sub	sp, #48	@ 0x30
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b22      	cmp	r3, #34	@ 0x22
 8003a4e:	f040 80ae 	bne.w	8003bae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a5a:	d117      	bne.n	8003a8c <UART_Receive_IT+0x50>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d113      	bne.n	8003a8c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a84:	1c9a      	adds	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a8a:	e026      	b.n	8003ada <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a9e:	d007      	beq.n	8003ab0 <UART_Receive_IT+0x74>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <UART_Receive_IT+0x82>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d106      	bne.n	8003abe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aba:	701a      	strb	r2, [r3, #0]
 8003abc:	e008      	b.n	8003ad0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ace:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d15d      	bne.n	8003baa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0220 	bic.w	r2, r2, #32
 8003afc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d135      	bne.n	8003ba0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f023 0310 	bic.w	r3, r3, #16
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5a:	623a      	str	r2, [r7, #32]
 8003b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	69f9      	ldr	r1, [r7, #28]
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e5      	bne.n	8003b3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d10a      	bne.n	8003b92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7fc fd81 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
 8003b9e:	e002      	b.n	8003ba6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fd5d 	bl	8003660 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e002      	b.n	8003bb0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e000      	b.n	8003bb0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003bae:	2302      	movs	r3, #2
  }
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3730      	adds	r7, #48	@ 0x30
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bbc:	b0c0      	sub	sp, #256	@ 0x100
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd4:	68d9      	ldr	r1, [r3, #12]
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	ea40 0301 	orr.w	r3, r0, r1
 8003be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c10:	f021 010c 	bic.w	r1, r1, #12
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c32:	6999      	ldr	r1, [r3, #24]
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	ea40 0301 	orr.w	r3, r0, r1
 8003c3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b8f      	ldr	r3, [pc, #572]	@ (8003e84 <UART_SetConfig+0x2cc>)
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d005      	beq.n	8003c58 <UART_SetConfig+0xa0>
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b8d      	ldr	r3, [pc, #564]	@ (8003e88 <UART_SetConfig+0x2d0>)
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d104      	bne.n	8003c62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c58:	f7ff f912 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 8003c5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c60:	e003      	b.n	8003c6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c62:	f7ff f8f9 	bl	8002e58 <HAL_RCC_GetPCLK1Freq>
 8003c66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c74:	f040 810c 	bne.w	8003e90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	462b      	mov	r3, r5
 8003c8e:	1891      	adds	r1, r2, r2
 8003c90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c92:	415b      	adcs	r3, r3
 8003c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	eb12 0801 	adds.w	r8, r2, r1
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	eb43 0901 	adc.w	r9, r3, r1
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cba:	4690      	mov	r8, r2
 8003cbc:	4699      	mov	r9, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	eb18 0303 	adds.w	r3, r8, r3
 8003cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003cc8:	462b      	mov	r3, r5
 8003cca:	eb49 0303 	adc.w	r3, r9, r3
 8003cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003cde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	18db      	adds	r3, r3, r3
 8003cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cec:	4613      	mov	r3, r2
 8003cee:	eb42 0303 	adc.w	r3, r2, r3
 8003cf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003cf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003cfc:	f7fc fac8 	bl	8000290 <__aeabi_uldivmod>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4b61      	ldr	r3, [pc, #388]	@ (8003e8c <UART_SetConfig+0x2d4>)
 8003d06:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	011c      	lsls	r4, r3, #4
 8003d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	1891      	adds	r1, r2, r2
 8003d26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d28:	415b      	adcs	r3, r3
 8003d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d30:	4641      	mov	r1, r8
 8003d32:	eb12 0a01 	adds.w	sl, r2, r1
 8003d36:	4649      	mov	r1, r9
 8003d38:	eb43 0b01 	adc.w	fp, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d50:	4692      	mov	sl, r2
 8003d52:	469b      	mov	fp, r3
 8003d54:	4643      	mov	r3, r8
 8003d56:	eb1a 0303 	adds.w	r3, sl, r3
 8003d5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	eb4b 0303 	adc.w	r3, fp, r3
 8003d64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	18db      	adds	r3, r3, r3
 8003d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d82:	4613      	mov	r3, r2
 8003d84:	eb42 0303 	adc.w	r3, r2, r3
 8003d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d92:	f7fc fa7d 	bl	8000290 <__aeabi_uldivmod>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e8c <UART_SetConfig+0x2d4>)
 8003d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	2264      	movs	r2, #100	@ 0x64
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	1acb      	subs	r3, r1, r3
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003db2:	4b36      	ldr	r3, [pc, #216]	@ (8003e8c <UART_SetConfig+0x2d4>)
 8003db4:	fba3 2302 	umull	r2, r3, r3, r2
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003dc0:	441c      	add	r4, r3
 8003dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003dd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	1891      	adds	r1, r2, r2
 8003dda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ddc:	415b      	adcs	r3, r3
 8003dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003de4:	4641      	mov	r1, r8
 8003de6:	1851      	adds	r1, r2, r1
 8003de8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003dea:	4649      	mov	r1, r9
 8003dec:	414b      	adcs	r3, r1
 8003dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	00cb      	lsls	r3, r1, #3
 8003e00:	4651      	mov	r1, sl
 8003e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e06:	4651      	mov	r1, sl
 8003e08:	00ca      	lsls	r2, r1, #3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4642      	mov	r2, r8
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e18:	464b      	mov	r3, r9
 8003e1a:	460a      	mov	r2, r1
 8003e1c:	eb42 0303 	adc.w	r3, r2, r3
 8003e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e38:	460b      	mov	r3, r1
 8003e3a:	18db      	adds	r3, r3, r3
 8003e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e3e:	4613      	mov	r3, r2
 8003e40:	eb42 0303 	adc.w	r3, r2, r3
 8003e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e4e:	f7fc fa1f 	bl	8000290 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4b0d      	ldr	r3, [pc, #52]	@ (8003e8c <UART_SetConfig+0x2d4>)
 8003e58:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	2164      	movs	r1, #100	@ 0x64
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	3332      	adds	r3, #50	@ 0x32
 8003e6a:	4a08      	ldr	r2, [pc, #32]	@ (8003e8c <UART_SetConfig+0x2d4>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	f003 0207 	and.w	r2, r3, #7
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4422      	add	r2, r4
 8003e7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e80:	e106      	b.n	8004090 <UART_SetConfig+0x4d8>
 8003e82:	bf00      	nop
 8003e84:	40011000 	.word	0x40011000
 8003e88:	40011400 	.word	0x40011400
 8003e8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ea2:	4642      	mov	r2, r8
 8003ea4:	464b      	mov	r3, r9
 8003ea6:	1891      	adds	r1, r2, r2
 8003ea8:	6239      	str	r1, [r7, #32]
 8003eaa:	415b      	adcs	r3, r3
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	1854      	adds	r4, r2, r1
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	eb43 0501 	adc.w	r5, r3, r1
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	00eb      	lsls	r3, r5, #3
 8003ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eca:	00e2      	lsls	r2, r4, #3
 8003ecc:	4614      	mov	r4, r2
 8003ece:	461d      	mov	r5, r3
 8003ed0:	4643      	mov	r3, r8
 8003ed2:	18e3      	adds	r3, r4, r3
 8003ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ed8:	464b      	mov	r3, r9
 8003eda:	eb45 0303 	adc.w	r3, r5, r3
 8003ede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003eee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003efe:	4629      	mov	r1, r5
 8003f00:	008b      	lsls	r3, r1, #2
 8003f02:	4621      	mov	r1, r4
 8003f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f08:	4621      	mov	r1, r4
 8003f0a:	008a      	lsls	r2, r1, #2
 8003f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f10:	f7fc f9be 	bl	8000290 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4b60      	ldr	r3, [pc, #384]	@ (800409c <UART_SetConfig+0x4e4>)
 8003f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	011c      	lsls	r4, r3, #4
 8003f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	61b9      	str	r1, [r7, #24]
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	61fb      	str	r3, [r7, #28]
 8003f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f44:	4641      	mov	r1, r8
 8003f46:	1851      	adds	r1, r2, r1
 8003f48:	6139      	str	r1, [r7, #16]
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	414b      	adcs	r3, r1
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	00cb      	lsls	r3, r1, #3
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f66:	4651      	mov	r1, sl
 8003f68:	00ca      	lsls	r2, r1, #3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4642      	mov	r2, r8
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f78:	464b      	mov	r3, r9
 8003f7a:	460a      	mov	r2, r1
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	008b      	lsls	r3, r1, #2
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	008a      	lsls	r2, r1, #2
 8003faa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003fae:	f7fc f96f 	bl	8000290 <__aeabi_uldivmod>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4b38      	ldr	r3, [pc, #224]	@ (800409c <UART_SetConfig+0x4e4>)
 8003fba:	fba3 2301 	umull	r2, r3, r3, r1
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2264      	movs	r2, #100	@ 0x64
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	1acb      	subs	r3, r1, r3
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	3332      	adds	r3, #50	@ 0x32
 8003fcc:	4a33      	ldr	r2, [pc, #204]	@ (800409c <UART_SetConfig+0x4e4>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fd8:	441c      	add	r4, r3
 8003fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fde:	2200      	movs	r2, #0
 8003fe0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fe2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003fe4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003fe8:	4642      	mov	r2, r8
 8003fea:	464b      	mov	r3, r9
 8003fec:	1891      	adds	r1, r2, r2
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	415b      	adcs	r3, r3
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	1851      	adds	r1, r2, r1
 8003ffc:	6039      	str	r1, [r7, #0]
 8003ffe:	4649      	mov	r1, r9
 8004000:	414b      	adcs	r3, r1
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004010:	4659      	mov	r1, fp
 8004012:	00cb      	lsls	r3, r1, #3
 8004014:	4651      	mov	r1, sl
 8004016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401a:	4651      	mov	r1, sl
 800401c:	00ca      	lsls	r2, r1, #3
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	4603      	mov	r3, r0
 8004024:	4642      	mov	r2, r8
 8004026:	189b      	adds	r3, r3, r2
 8004028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800402a:	464b      	mov	r3, r9
 800402c:	460a      	mov	r2, r1
 800402e:	eb42 0303 	adc.w	r3, r2, r3
 8004032:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	663b      	str	r3, [r7, #96]	@ 0x60
 800403e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800404c:	4649      	mov	r1, r9
 800404e:	008b      	lsls	r3, r1, #2
 8004050:	4641      	mov	r1, r8
 8004052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004056:	4641      	mov	r1, r8
 8004058:	008a      	lsls	r2, r1, #2
 800405a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800405e:	f7fc f917 	bl	8000290 <__aeabi_uldivmod>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4b0d      	ldr	r3, [pc, #52]	@ (800409c <UART_SetConfig+0x4e4>)
 8004068:	fba3 1302 	umull	r1, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	2164      	movs	r1, #100	@ 0x64
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	3332      	adds	r3, #50	@ 0x32
 800407a:	4a08      	ldr	r2, [pc, #32]	@ (800409c <UART_SetConfig+0x4e4>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	f003 020f 	and.w	r2, r3, #15
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4422      	add	r2, r4
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	bf00      	nop
 8004092:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004096:	46bd      	mov	sp, r7
 8004098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800409c:	51eb851f 	.word	0x51eb851f

080040a0 <siprintf>:
 80040a0:	b40e      	push	{r1, r2, r3}
 80040a2:	b500      	push	{lr}
 80040a4:	b09c      	sub	sp, #112	@ 0x70
 80040a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80040a8:	9002      	str	r0, [sp, #8]
 80040aa:	9006      	str	r0, [sp, #24]
 80040ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80040b0:	4809      	ldr	r0, [pc, #36]	@ (80040d8 <siprintf+0x38>)
 80040b2:	9107      	str	r1, [sp, #28]
 80040b4:	9104      	str	r1, [sp, #16]
 80040b6:	4909      	ldr	r1, [pc, #36]	@ (80040dc <siprintf+0x3c>)
 80040b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80040bc:	9105      	str	r1, [sp, #20]
 80040be:	6800      	ldr	r0, [r0, #0]
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	a902      	add	r1, sp, #8
 80040c4:	f000 f9bc 	bl	8004440 <_svfiprintf_r>
 80040c8:	9b02      	ldr	r3, [sp, #8]
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	b01c      	add	sp, #112	@ 0x70
 80040d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80040d4:	b003      	add	sp, #12
 80040d6:	4770      	bx	lr
 80040d8:	20000014 	.word	0x20000014
 80040dc:	ffff0208 	.word	0xffff0208

080040e0 <memmove>:
 80040e0:	4288      	cmp	r0, r1
 80040e2:	b510      	push	{r4, lr}
 80040e4:	eb01 0402 	add.w	r4, r1, r2
 80040e8:	d902      	bls.n	80040f0 <memmove+0x10>
 80040ea:	4284      	cmp	r4, r0
 80040ec:	4623      	mov	r3, r4
 80040ee:	d807      	bhi.n	8004100 <memmove+0x20>
 80040f0:	1e43      	subs	r3, r0, #1
 80040f2:	42a1      	cmp	r1, r4
 80040f4:	d008      	beq.n	8004108 <memmove+0x28>
 80040f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040fe:	e7f8      	b.n	80040f2 <memmove+0x12>
 8004100:	4402      	add	r2, r0
 8004102:	4601      	mov	r1, r0
 8004104:	428a      	cmp	r2, r1
 8004106:	d100      	bne.n	800410a <memmove+0x2a>
 8004108:	bd10      	pop	{r4, pc}
 800410a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800410e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004112:	e7f7      	b.n	8004104 <memmove+0x24>

08004114 <memset>:
 8004114:	4402      	add	r2, r0
 8004116:	4603      	mov	r3, r0
 8004118:	4293      	cmp	r3, r2
 800411a:	d100      	bne.n	800411e <memset+0xa>
 800411c:	4770      	bx	lr
 800411e:	f803 1b01 	strb.w	r1, [r3], #1
 8004122:	e7f9      	b.n	8004118 <memset+0x4>

08004124 <__errno>:
 8004124:	4b01      	ldr	r3, [pc, #4]	@ (800412c <__errno+0x8>)
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000014 	.word	0x20000014

08004130 <__libc_init_array>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	4d0d      	ldr	r5, [pc, #52]	@ (8004168 <__libc_init_array+0x38>)
 8004134:	4c0d      	ldr	r4, [pc, #52]	@ (800416c <__libc_init_array+0x3c>)
 8004136:	1b64      	subs	r4, r4, r5
 8004138:	10a4      	asrs	r4, r4, #2
 800413a:	2600      	movs	r6, #0
 800413c:	42a6      	cmp	r6, r4
 800413e:	d109      	bne.n	8004154 <__libc_init_array+0x24>
 8004140:	4d0b      	ldr	r5, [pc, #44]	@ (8004170 <__libc_init_array+0x40>)
 8004142:	4c0c      	ldr	r4, [pc, #48]	@ (8004174 <__libc_init_array+0x44>)
 8004144:	f000 fc4c 	bl	80049e0 <_init>
 8004148:	1b64      	subs	r4, r4, r5
 800414a:	10a4      	asrs	r4, r4, #2
 800414c:	2600      	movs	r6, #0
 800414e:	42a6      	cmp	r6, r4
 8004150:	d105      	bne.n	800415e <__libc_init_array+0x2e>
 8004152:	bd70      	pop	{r4, r5, r6, pc}
 8004154:	f855 3b04 	ldr.w	r3, [r5], #4
 8004158:	4798      	blx	r3
 800415a:	3601      	adds	r6, #1
 800415c:	e7ee      	b.n	800413c <__libc_init_array+0xc>
 800415e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004162:	4798      	blx	r3
 8004164:	3601      	adds	r6, #1
 8004166:	e7f2      	b.n	800414e <__libc_init_array+0x1e>
 8004168:	080057d0 	.word	0x080057d0
 800416c:	080057d0 	.word	0x080057d0
 8004170:	080057d0 	.word	0x080057d0
 8004174:	080057d4 	.word	0x080057d4

08004178 <__retarget_lock_acquire_recursive>:
 8004178:	4770      	bx	lr

0800417a <__retarget_lock_release_recursive>:
 800417a:	4770      	bx	lr

0800417c <memcpy>:
 800417c:	440a      	add	r2, r1
 800417e:	4291      	cmp	r1, r2
 8004180:	f100 33ff 	add.w	r3, r0, #4294967295
 8004184:	d100      	bne.n	8004188 <memcpy+0xc>
 8004186:	4770      	bx	lr
 8004188:	b510      	push	{r4, lr}
 800418a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800418e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004192:	4291      	cmp	r1, r2
 8004194:	d1f9      	bne.n	800418a <memcpy+0xe>
 8004196:	bd10      	pop	{r4, pc}

08004198 <_free_r>:
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4605      	mov	r5, r0
 800419c:	2900      	cmp	r1, #0
 800419e:	d041      	beq.n	8004224 <_free_r+0x8c>
 80041a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a4:	1f0c      	subs	r4, r1, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bfb8      	it	lt
 80041aa:	18e4      	addlt	r4, r4, r3
 80041ac:	f000 f8e0 	bl	8004370 <__malloc_lock>
 80041b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004228 <_free_r+0x90>)
 80041b2:	6813      	ldr	r3, [r2, #0]
 80041b4:	b933      	cbnz	r3, 80041c4 <_free_r+0x2c>
 80041b6:	6063      	str	r3, [r4, #4]
 80041b8:	6014      	str	r4, [r2, #0]
 80041ba:	4628      	mov	r0, r5
 80041bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041c0:	f000 b8dc 	b.w	800437c <__malloc_unlock>
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	d908      	bls.n	80041da <_free_r+0x42>
 80041c8:	6820      	ldr	r0, [r4, #0]
 80041ca:	1821      	adds	r1, r4, r0
 80041cc:	428b      	cmp	r3, r1
 80041ce:	bf01      	itttt	eq
 80041d0:	6819      	ldreq	r1, [r3, #0]
 80041d2:	685b      	ldreq	r3, [r3, #4]
 80041d4:	1809      	addeq	r1, r1, r0
 80041d6:	6021      	streq	r1, [r4, #0]
 80041d8:	e7ed      	b.n	80041b6 <_free_r+0x1e>
 80041da:	461a      	mov	r2, r3
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	b10b      	cbz	r3, 80041e4 <_free_r+0x4c>
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	d9fa      	bls.n	80041da <_free_r+0x42>
 80041e4:	6811      	ldr	r1, [r2, #0]
 80041e6:	1850      	adds	r0, r2, r1
 80041e8:	42a0      	cmp	r0, r4
 80041ea:	d10b      	bne.n	8004204 <_free_r+0x6c>
 80041ec:	6820      	ldr	r0, [r4, #0]
 80041ee:	4401      	add	r1, r0
 80041f0:	1850      	adds	r0, r2, r1
 80041f2:	4283      	cmp	r3, r0
 80041f4:	6011      	str	r1, [r2, #0]
 80041f6:	d1e0      	bne.n	80041ba <_free_r+0x22>
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	6053      	str	r3, [r2, #4]
 80041fe:	4408      	add	r0, r1
 8004200:	6010      	str	r0, [r2, #0]
 8004202:	e7da      	b.n	80041ba <_free_r+0x22>
 8004204:	d902      	bls.n	800420c <_free_r+0x74>
 8004206:	230c      	movs	r3, #12
 8004208:	602b      	str	r3, [r5, #0]
 800420a:	e7d6      	b.n	80041ba <_free_r+0x22>
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	1821      	adds	r1, r4, r0
 8004210:	428b      	cmp	r3, r1
 8004212:	bf04      	itt	eq
 8004214:	6819      	ldreq	r1, [r3, #0]
 8004216:	685b      	ldreq	r3, [r3, #4]
 8004218:	6063      	str	r3, [r4, #4]
 800421a:	bf04      	itt	eq
 800421c:	1809      	addeq	r1, r1, r0
 800421e:	6021      	streq	r1, [r4, #0]
 8004220:	6054      	str	r4, [r2, #4]
 8004222:	e7ca      	b.n	80041ba <_free_r+0x22>
 8004224:	bd38      	pop	{r3, r4, r5, pc}
 8004226:	bf00      	nop
 8004228:	200006c0 	.word	0x200006c0

0800422c <sbrk_aligned>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	4e0f      	ldr	r6, [pc, #60]	@ (800426c <sbrk_aligned+0x40>)
 8004230:	460c      	mov	r4, r1
 8004232:	6831      	ldr	r1, [r6, #0]
 8004234:	4605      	mov	r5, r0
 8004236:	b911      	cbnz	r1, 800423e <sbrk_aligned+0x12>
 8004238:	f000 fb8c 	bl	8004954 <_sbrk_r>
 800423c:	6030      	str	r0, [r6, #0]
 800423e:	4621      	mov	r1, r4
 8004240:	4628      	mov	r0, r5
 8004242:	f000 fb87 	bl	8004954 <_sbrk_r>
 8004246:	1c43      	adds	r3, r0, #1
 8004248:	d103      	bne.n	8004252 <sbrk_aligned+0x26>
 800424a:	f04f 34ff 	mov.w	r4, #4294967295
 800424e:	4620      	mov	r0, r4
 8004250:	bd70      	pop	{r4, r5, r6, pc}
 8004252:	1cc4      	adds	r4, r0, #3
 8004254:	f024 0403 	bic.w	r4, r4, #3
 8004258:	42a0      	cmp	r0, r4
 800425a:	d0f8      	beq.n	800424e <sbrk_aligned+0x22>
 800425c:	1a21      	subs	r1, r4, r0
 800425e:	4628      	mov	r0, r5
 8004260:	f000 fb78 	bl	8004954 <_sbrk_r>
 8004264:	3001      	adds	r0, #1
 8004266:	d1f2      	bne.n	800424e <sbrk_aligned+0x22>
 8004268:	e7ef      	b.n	800424a <sbrk_aligned+0x1e>
 800426a:	bf00      	nop
 800426c:	200006bc 	.word	0x200006bc

08004270 <_malloc_r>:
 8004270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004274:	1ccd      	adds	r5, r1, #3
 8004276:	f025 0503 	bic.w	r5, r5, #3
 800427a:	3508      	adds	r5, #8
 800427c:	2d0c      	cmp	r5, #12
 800427e:	bf38      	it	cc
 8004280:	250c      	movcc	r5, #12
 8004282:	2d00      	cmp	r5, #0
 8004284:	4606      	mov	r6, r0
 8004286:	db01      	blt.n	800428c <_malloc_r+0x1c>
 8004288:	42a9      	cmp	r1, r5
 800428a:	d904      	bls.n	8004296 <_malloc_r+0x26>
 800428c:	230c      	movs	r3, #12
 800428e:	6033      	str	r3, [r6, #0]
 8004290:	2000      	movs	r0, #0
 8004292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004296:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800436c <_malloc_r+0xfc>
 800429a:	f000 f869 	bl	8004370 <__malloc_lock>
 800429e:	f8d8 3000 	ldr.w	r3, [r8]
 80042a2:	461c      	mov	r4, r3
 80042a4:	bb44      	cbnz	r4, 80042f8 <_malloc_r+0x88>
 80042a6:	4629      	mov	r1, r5
 80042a8:	4630      	mov	r0, r6
 80042aa:	f7ff ffbf 	bl	800422c <sbrk_aligned>
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	4604      	mov	r4, r0
 80042b2:	d158      	bne.n	8004366 <_malloc_r+0xf6>
 80042b4:	f8d8 4000 	ldr.w	r4, [r8]
 80042b8:	4627      	mov	r7, r4
 80042ba:	2f00      	cmp	r7, #0
 80042bc:	d143      	bne.n	8004346 <_malloc_r+0xd6>
 80042be:	2c00      	cmp	r4, #0
 80042c0:	d04b      	beq.n	800435a <_malloc_r+0xea>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	4639      	mov	r1, r7
 80042c6:	4630      	mov	r0, r6
 80042c8:	eb04 0903 	add.w	r9, r4, r3
 80042cc:	f000 fb42 	bl	8004954 <_sbrk_r>
 80042d0:	4581      	cmp	r9, r0
 80042d2:	d142      	bne.n	800435a <_malloc_r+0xea>
 80042d4:	6821      	ldr	r1, [r4, #0]
 80042d6:	1a6d      	subs	r5, r5, r1
 80042d8:	4629      	mov	r1, r5
 80042da:	4630      	mov	r0, r6
 80042dc:	f7ff ffa6 	bl	800422c <sbrk_aligned>
 80042e0:	3001      	adds	r0, #1
 80042e2:	d03a      	beq.n	800435a <_malloc_r+0xea>
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	442b      	add	r3, r5
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	f8d8 3000 	ldr.w	r3, [r8]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	bb62      	cbnz	r2, 800434c <_malloc_r+0xdc>
 80042f2:	f8c8 7000 	str.w	r7, [r8]
 80042f6:	e00f      	b.n	8004318 <_malloc_r+0xa8>
 80042f8:	6822      	ldr	r2, [r4, #0]
 80042fa:	1b52      	subs	r2, r2, r5
 80042fc:	d420      	bmi.n	8004340 <_malloc_r+0xd0>
 80042fe:	2a0b      	cmp	r2, #11
 8004300:	d917      	bls.n	8004332 <_malloc_r+0xc2>
 8004302:	1961      	adds	r1, r4, r5
 8004304:	42a3      	cmp	r3, r4
 8004306:	6025      	str	r5, [r4, #0]
 8004308:	bf18      	it	ne
 800430a:	6059      	strne	r1, [r3, #4]
 800430c:	6863      	ldr	r3, [r4, #4]
 800430e:	bf08      	it	eq
 8004310:	f8c8 1000 	streq.w	r1, [r8]
 8004314:	5162      	str	r2, [r4, r5]
 8004316:	604b      	str	r3, [r1, #4]
 8004318:	4630      	mov	r0, r6
 800431a:	f000 f82f 	bl	800437c <__malloc_unlock>
 800431e:	f104 000b 	add.w	r0, r4, #11
 8004322:	1d23      	adds	r3, r4, #4
 8004324:	f020 0007 	bic.w	r0, r0, #7
 8004328:	1ac2      	subs	r2, r0, r3
 800432a:	bf1c      	itt	ne
 800432c:	1a1b      	subne	r3, r3, r0
 800432e:	50a3      	strne	r3, [r4, r2]
 8004330:	e7af      	b.n	8004292 <_malloc_r+0x22>
 8004332:	6862      	ldr	r2, [r4, #4]
 8004334:	42a3      	cmp	r3, r4
 8004336:	bf0c      	ite	eq
 8004338:	f8c8 2000 	streq.w	r2, [r8]
 800433c:	605a      	strne	r2, [r3, #4]
 800433e:	e7eb      	b.n	8004318 <_malloc_r+0xa8>
 8004340:	4623      	mov	r3, r4
 8004342:	6864      	ldr	r4, [r4, #4]
 8004344:	e7ae      	b.n	80042a4 <_malloc_r+0x34>
 8004346:	463c      	mov	r4, r7
 8004348:	687f      	ldr	r7, [r7, #4]
 800434a:	e7b6      	b.n	80042ba <_malloc_r+0x4a>
 800434c:	461a      	mov	r2, r3
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	42a3      	cmp	r3, r4
 8004352:	d1fb      	bne.n	800434c <_malloc_r+0xdc>
 8004354:	2300      	movs	r3, #0
 8004356:	6053      	str	r3, [r2, #4]
 8004358:	e7de      	b.n	8004318 <_malloc_r+0xa8>
 800435a:	230c      	movs	r3, #12
 800435c:	6033      	str	r3, [r6, #0]
 800435e:	4630      	mov	r0, r6
 8004360:	f000 f80c 	bl	800437c <__malloc_unlock>
 8004364:	e794      	b.n	8004290 <_malloc_r+0x20>
 8004366:	6005      	str	r5, [r0, #0]
 8004368:	e7d6      	b.n	8004318 <_malloc_r+0xa8>
 800436a:	bf00      	nop
 800436c:	200006c0 	.word	0x200006c0

08004370 <__malloc_lock>:
 8004370:	4801      	ldr	r0, [pc, #4]	@ (8004378 <__malloc_lock+0x8>)
 8004372:	f7ff bf01 	b.w	8004178 <__retarget_lock_acquire_recursive>
 8004376:	bf00      	nop
 8004378:	200006b8 	.word	0x200006b8

0800437c <__malloc_unlock>:
 800437c:	4801      	ldr	r0, [pc, #4]	@ (8004384 <__malloc_unlock+0x8>)
 800437e:	f7ff befc 	b.w	800417a <__retarget_lock_release_recursive>
 8004382:	bf00      	nop
 8004384:	200006b8 	.word	0x200006b8

08004388 <__ssputs_r>:
 8004388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800438c:	688e      	ldr	r6, [r1, #8]
 800438e:	461f      	mov	r7, r3
 8004390:	42be      	cmp	r6, r7
 8004392:	680b      	ldr	r3, [r1, #0]
 8004394:	4682      	mov	sl, r0
 8004396:	460c      	mov	r4, r1
 8004398:	4690      	mov	r8, r2
 800439a:	d82d      	bhi.n	80043f8 <__ssputs_r+0x70>
 800439c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043a4:	d026      	beq.n	80043f4 <__ssputs_r+0x6c>
 80043a6:	6965      	ldr	r5, [r4, #20]
 80043a8:	6909      	ldr	r1, [r1, #16]
 80043aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043ae:	eba3 0901 	sub.w	r9, r3, r1
 80043b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043b6:	1c7b      	adds	r3, r7, #1
 80043b8:	444b      	add	r3, r9
 80043ba:	106d      	asrs	r5, r5, #1
 80043bc:	429d      	cmp	r5, r3
 80043be:	bf38      	it	cc
 80043c0:	461d      	movcc	r5, r3
 80043c2:	0553      	lsls	r3, r2, #21
 80043c4:	d527      	bpl.n	8004416 <__ssputs_r+0x8e>
 80043c6:	4629      	mov	r1, r5
 80043c8:	f7ff ff52 	bl	8004270 <_malloc_r>
 80043cc:	4606      	mov	r6, r0
 80043ce:	b360      	cbz	r0, 800442a <__ssputs_r+0xa2>
 80043d0:	6921      	ldr	r1, [r4, #16]
 80043d2:	464a      	mov	r2, r9
 80043d4:	f7ff fed2 	bl	800417c <memcpy>
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e2:	81a3      	strh	r3, [r4, #12]
 80043e4:	6126      	str	r6, [r4, #16]
 80043e6:	6165      	str	r5, [r4, #20]
 80043e8:	444e      	add	r6, r9
 80043ea:	eba5 0509 	sub.w	r5, r5, r9
 80043ee:	6026      	str	r6, [r4, #0]
 80043f0:	60a5      	str	r5, [r4, #8]
 80043f2:	463e      	mov	r6, r7
 80043f4:	42be      	cmp	r6, r7
 80043f6:	d900      	bls.n	80043fa <__ssputs_r+0x72>
 80043f8:	463e      	mov	r6, r7
 80043fa:	6820      	ldr	r0, [r4, #0]
 80043fc:	4632      	mov	r2, r6
 80043fe:	4641      	mov	r1, r8
 8004400:	f7ff fe6e 	bl	80040e0 <memmove>
 8004404:	68a3      	ldr	r3, [r4, #8]
 8004406:	1b9b      	subs	r3, r3, r6
 8004408:	60a3      	str	r3, [r4, #8]
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	4433      	add	r3, r6
 800440e:	6023      	str	r3, [r4, #0]
 8004410:	2000      	movs	r0, #0
 8004412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004416:	462a      	mov	r2, r5
 8004418:	f000 faac 	bl	8004974 <_realloc_r>
 800441c:	4606      	mov	r6, r0
 800441e:	2800      	cmp	r0, #0
 8004420:	d1e0      	bne.n	80043e4 <__ssputs_r+0x5c>
 8004422:	6921      	ldr	r1, [r4, #16]
 8004424:	4650      	mov	r0, sl
 8004426:	f7ff feb7 	bl	8004198 <_free_r>
 800442a:	230c      	movs	r3, #12
 800442c:	f8ca 3000 	str.w	r3, [sl]
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004436:	81a3      	strh	r3, [r4, #12]
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
 800443c:	e7e9      	b.n	8004412 <__ssputs_r+0x8a>
	...

08004440 <_svfiprintf_r>:
 8004440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004444:	4698      	mov	r8, r3
 8004446:	898b      	ldrh	r3, [r1, #12]
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	b09d      	sub	sp, #116	@ 0x74
 800444c:	4607      	mov	r7, r0
 800444e:	460d      	mov	r5, r1
 8004450:	4614      	mov	r4, r2
 8004452:	d510      	bpl.n	8004476 <_svfiprintf_r+0x36>
 8004454:	690b      	ldr	r3, [r1, #16]
 8004456:	b973      	cbnz	r3, 8004476 <_svfiprintf_r+0x36>
 8004458:	2140      	movs	r1, #64	@ 0x40
 800445a:	f7ff ff09 	bl	8004270 <_malloc_r>
 800445e:	6028      	str	r0, [r5, #0]
 8004460:	6128      	str	r0, [r5, #16]
 8004462:	b930      	cbnz	r0, 8004472 <_svfiprintf_r+0x32>
 8004464:	230c      	movs	r3, #12
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	b01d      	add	sp, #116	@ 0x74
 800446e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004472:	2340      	movs	r3, #64	@ 0x40
 8004474:	616b      	str	r3, [r5, #20]
 8004476:	2300      	movs	r3, #0
 8004478:	9309      	str	r3, [sp, #36]	@ 0x24
 800447a:	2320      	movs	r3, #32
 800447c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004480:	f8cd 800c 	str.w	r8, [sp, #12]
 8004484:	2330      	movs	r3, #48	@ 0x30
 8004486:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004624 <_svfiprintf_r+0x1e4>
 800448a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800448e:	f04f 0901 	mov.w	r9, #1
 8004492:	4623      	mov	r3, r4
 8004494:	469a      	mov	sl, r3
 8004496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800449a:	b10a      	cbz	r2, 80044a0 <_svfiprintf_r+0x60>
 800449c:	2a25      	cmp	r2, #37	@ 0x25
 800449e:	d1f9      	bne.n	8004494 <_svfiprintf_r+0x54>
 80044a0:	ebba 0b04 	subs.w	fp, sl, r4
 80044a4:	d00b      	beq.n	80044be <_svfiprintf_r+0x7e>
 80044a6:	465b      	mov	r3, fp
 80044a8:	4622      	mov	r2, r4
 80044aa:	4629      	mov	r1, r5
 80044ac:	4638      	mov	r0, r7
 80044ae:	f7ff ff6b 	bl	8004388 <__ssputs_r>
 80044b2:	3001      	adds	r0, #1
 80044b4:	f000 80a7 	beq.w	8004606 <_svfiprintf_r+0x1c6>
 80044b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044ba:	445a      	add	r2, fp
 80044bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80044be:	f89a 3000 	ldrb.w	r3, [sl]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 809f 	beq.w	8004606 <_svfiprintf_r+0x1c6>
 80044c8:	2300      	movs	r3, #0
 80044ca:	f04f 32ff 	mov.w	r2, #4294967295
 80044ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044d2:	f10a 0a01 	add.w	sl, sl, #1
 80044d6:	9304      	str	r3, [sp, #16]
 80044d8:	9307      	str	r3, [sp, #28]
 80044da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044de:	931a      	str	r3, [sp, #104]	@ 0x68
 80044e0:	4654      	mov	r4, sl
 80044e2:	2205      	movs	r2, #5
 80044e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e8:	484e      	ldr	r0, [pc, #312]	@ (8004624 <_svfiprintf_r+0x1e4>)
 80044ea:	f7fb fe81 	bl	80001f0 <memchr>
 80044ee:	9a04      	ldr	r2, [sp, #16]
 80044f0:	b9d8      	cbnz	r0, 800452a <_svfiprintf_r+0xea>
 80044f2:	06d0      	lsls	r0, r2, #27
 80044f4:	bf44      	itt	mi
 80044f6:	2320      	movmi	r3, #32
 80044f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044fc:	0711      	lsls	r1, r2, #28
 80044fe:	bf44      	itt	mi
 8004500:	232b      	movmi	r3, #43	@ 0x2b
 8004502:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004506:	f89a 3000 	ldrb.w	r3, [sl]
 800450a:	2b2a      	cmp	r3, #42	@ 0x2a
 800450c:	d015      	beq.n	800453a <_svfiprintf_r+0xfa>
 800450e:	9a07      	ldr	r2, [sp, #28]
 8004510:	4654      	mov	r4, sl
 8004512:	2000      	movs	r0, #0
 8004514:	f04f 0c0a 	mov.w	ip, #10
 8004518:	4621      	mov	r1, r4
 800451a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800451e:	3b30      	subs	r3, #48	@ 0x30
 8004520:	2b09      	cmp	r3, #9
 8004522:	d94b      	bls.n	80045bc <_svfiprintf_r+0x17c>
 8004524:	b1b0      	cbz	r0, 8004554 <_svfiprintf_r+0x114>
 8004526:	9207      	str	r2, [sp, #28]
 8004528:	e014      	b.n	8004554 <_svfiprintf_r+0x114>
 800452a:	eba0 0308 	sub.w	r3, r0, r8
 800452e:	fa09 f303 	lsl.w	r3, r9, r3
 8004532:	4313      	orrs	r3, r2
 8004534:	9304      	str	r3, [sp, #16]
 8004536:	46a2      	mov	sl, r4
 8004538:	e7d2      	b.n	80044e0 <_svfiprintf_r+0xa0>
 800453a:	9b03      	ldr	r3, [sp, #12]
 800453c:	1d19      	adds	r1, r3, #4
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	9103      	str	r1, [sp, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	bfbb      	ittet	lt
 8004546:	425b      	neglt	r3, r3
 8004548:	f042 0202 	orrlt.w	r2, r2, #2
 800454c:	9307      	strge	r3, [sp, #28]
 800454e:	9307      	strlt	r3, [sp, #28]
 8004550:	bfb8      	it	lt
 8004552:	9204      	strlt	r2, [sp, #16]
 8004554:	7823      	ldrb	r3, [r4, #0]
 8004556:	2b2e      	cmp	r3, #46	@ 0x2e
 8004558:	d10a      	bne.n	8004570 <_svfiprintf_r+0x130>
 800455a:	7863      	ldrb	r3, [r4, #1]
 800455c:	2b2a      	cmp	r3, #42	@ 0x2a
 800455e:	d132      	bne.n	80045c6 <_svfiprintf_r+0x186>
 8004560:	9b03      	ldr	r3, [sp, #12]
 8004562:	1d1a      	adds	r2, r3, #4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	9203      	str	r2, [sp, #12]
 8004568:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800456c:	3402      	adds	r4, #2
 800456e:	9305      	str	r3, [sp, #20]
 8004570:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004634 <_svfiprintf_r+0x1f4>
 8004574:	7821      	ldrb	r1, [r4, #0]
 8004576:	2203      	movs	r2, #3
 8004578:	4650      	mov	r0, sl
 800457a:	f7fb fe39 	bl	80001f0 <memchr>
 800457e:	b138      	cbz	r0, 8004590 <_svfiprintf_r+0x150>
 8004580:	9b04      	ldr	r3, [sp, #16]
 8004582:	eba0 000a 	sub.w	r0, r0, sl
 8004586:	2240      	movs	r2, #64	@ 0x40
 8004588:	4082      	lsls	r2, r0
 800458a:	4313      	orrs	r3, r2
 800458c:	3401      	adds	r4, #1
 800458e:	9304      	str	r3, [sp, #16]
 8004590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004594:	4824      	ldr	r0, [pc, #144]	@ (8004628 <_svfiprintf_r+0x1e8>)
 8004596:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800459a:	2206      	movs	r2, #6
 800459c:	f7fb fe28 	bl	80001f0 <memchr>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d036      	beq.n	8004612 <_svfiprintf_r+0x1d2>
 80045a4:	4b21      	ldr	r3, [pc, #132]	@ (800462c <_svfiprintf_r+0x1ec>)
 80045a6:	bb1b      	cbnz	r3, 80045f0 <_svfiprintf_r+0x1b0>
 80045a8:	9b03      	ldr	r3, [sp, #12]
 80045aa:	3307      	adds	r3, #7
 80045ac:	f023 0307 	bic.w	r3, r3, #7
 80045b0:	3308      	adds	r3, #8
 80045b2:	9303      	str	r3, [sp, #12]
 80045b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045b6:	4433      	add	r3, r6
 80045b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80045ba:	e76a      	b.n	8004492 <_svfiprintf_r+0x52>
 80045bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80045c0:	460c      	mov	r4, r1
 80045c2:	2001      	movs	r0, #1
 80045c4:	e7a8      	b.n	8004518 <_svfiprintf_r+0xd8>
 80045c6:	2300      	movs	r3, #0
 80045c8:	3401      	adds	r4, #1
 80045ca:	9305      	str	r3, [sp, #20]
 80045cc:	4619      	mov	r1, r3
 80045ce:	f04f 0c0a 	mov.w	ip, #10
 80045d2:	4620      	mov	r0, r4
 80045d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045d8:	3a30      	subs	r2, #48	@ 0x30
 80045da:	2a09      	cmp	r2, #9
 80045dc:	d903      	bls.n	80045e6 <_svfiprintf_r+0x1a6>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0c6      	beq.n	8004570 <_svfiprintf_r+0x130>
 80045e2:	9105      	str	r1, [sp, #20]
 80045e4:	e7c4      	b.n	8004570 <_svfiprintf_r+0x130>
 80045e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ea:	4604      	mov	r4, r0
 80045ec:	2301      	movs	r3, #1
 80045ee:	e7f0      	b.n	80045d2 <_svfiprintf_r+0x192>
 80045f0:	ab03      	add	r3, sp, #12
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	462a      	mov	r2, r5
 80045f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004630 <_svfiprintf_r+0x1f0>)
 80045f8:	a904      	add	r1, sp, #16
 80045fa:	4638      	mov	r0, r7
 80045fc:	f3af 8000 	nop.w
 8004600:	1c42      	adds	r2, r0, #1
 8004602:	4606      	mov	r6, r0
 8004604:	d1d6      	bne.n	80045b4 <_svfiprintf_r+0x174>
 8004606:	89ab      	ldrh	r3, [r5, #12]
 8004608:	065b      	lsls	r3, r3, #25
 800460a:	f53f af2d 	bmi.w	8004468 <_svfiprintf_r+0x28>
 800460e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004610:	e72c      	b.n	800446c <_svfiprintf_r+0x2c>
 8004612:	ab03      	add	r3, sp, #12
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	462a      	mov	r2, r5
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <_svfiprintf_r+0x1f0>)
 800461a:	a904      	add	r1, sp, #16
 800461c:	4638      	mov	r0, r7
 800461e:	f000 f879 	bl	8004714 <_printf_i>
 8004622:	e7ed      	b.n	8004600 <_svfiprintf_r+0x1c0>
 8004624:	08005794 	.word	0x08005794
 8004628:	0800579e 	.word	0x0800579e
 800462c:	00000000 	.word	0x00000000
 8004630:	08004389 	.word	0x08004389
 8004634:	0800579a 	.word	0x0800579a

08004638 <_printf_common>:
 8004638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	4616      	mov	r6, r2
 800463e:	4698      	mov	r8, r3
 8004640:	688a      	ldr	r2, [r1, #8]
 8004642:	690b      	ldr	r3, [r1, #16]
 8004644:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004648:	4293      	cmp	r3, r2
 800464a:	bfb8      	it	lt
 800464c:	4613      	movlt	r3, r2
 800464e:	6033      	str	r3, [r6, #0]
 8004650:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004654:	4607      	mov	r7, r0
 8004656:	460c      	mov	r4, r1
 8004658:	b10a      	cbz	r2, 800465e <_printf_common+0x26>
 800465a:	3301      	adds	r3, #1
 800465c:	6033      	str	r3, [r6, #0]
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	0699      	lsls	r1, r3, #26
 8004662:	bf42      	ittt	mi
 8004664:	6833      	ldrmi	r3, [r6, #0]
 8004666:	3302      	addmi	r3, #2
 8004668:	6033      	strmi	r3, [r6, #0]
 800466a:	6825      	ldr	r5, [r4, #0]
 800466c:	f015 0506 	ands.w	r5, r5, #6
 8004670:	d106      	bne.n	8004680 <_printf_common+0x48>
 8004672:	f104 0a19 	add.w	sl, r4, #25
 8004676:	68e3      	ldr	r3, [r4, #12]
 8004678:	6832      	ldr	r2, [r6, #0]
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	42ab      	cmp	r3, r5
 800467e:	dc26      	bgt.n	80046ce <_printf_common+0x96>
 8004680:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004684:	6822      	ldr	r2, [r4, #0]
 8004686:	3b00      	subs	r3, #0
 8004688:	bf18      	it	ne
 800468a:	2301      	movne	r3, #1
 800468c:	0692      	lsls	r2, r2, #26
 800468e:	d42b      	bmi.n	80046e8 <_printf_common+0xb0>
 8004690:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004694:	4641      	mov	r1, r8
 8004696:	4638      	mov	r0, r7
 8004698:	47c8      	blx	r9
 800469a:	3001      	adds	r0, #1
 800469c:	d01e      	beq.n	80046dc <_printf_common+0xa4>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	6922      	ldr	r2, [r4, #16]
 80046a2:	f003 0306 	and.w	r3, r3, #6
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	bf02      	ittt	eq
 80046aa:	68e5      	ldreq	r5, [r4, #12]
 80046ac:	6833      	ldreq	r3, [r6, #0]
 80046ae:	1aed      	subeq	r5, r5, r3
 80046b0:	68a3      	ldr	r3, [r4, #8]
 80046b2:	bf0c      	ite	eq
 80046b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b8:	2500      	movne	r5, #0
 80046ba:	4293      	cmp	r3, r2
 80046bc:	bfc4      	itt	gt
 80046be:	1a9b      	subgt	r3, r3, r2
 80046c0:	18ed      	addgt	r5, r5, r3
 80046c2:	2600      	movs	r6, #0
 80046c4:	341a      	adds	r4, #26
 80046c6:	42b5      	cmp	r5, r6
 80046c8:	d11a      	bne.n	8004700 <_printf_common+0xc8>
 80046ca:	2000      	movs	r0, #0
 80046cc:	e008      	b.n	80046e0 <_printf_common+0xa8>
 80046ce:	2301      	movs	r3, #1
 80046d0:	4652      	mov	r2, sl
 80046d2:	4641      	mov	r1, r8
 80046d4:	4638      	mov	r0, r7
 80046d6:	47c8      	blx	r9
 80046d8:	3001      	adds	r0, #1
 80046da:	d103      	bne.n	80046e4 <_printf_common+0xac>
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e4:	3501      	adds	r5, #1
 80046e6:	e7c6      	b.n	8004676 <_printf_common+0x3e>
 80046e8:	18e1      	adds	r1, r4, r3
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	2030      	movs	r0, #48	@ 0x30
 80046ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046f2:	4422      	add	r2, r4
 80046f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046fc:	3302      	adds	r3, #2
 80046fe:	e7c7      	b.n	8004690 <_printf_common+0x58>
 8004700:	2301      	movs	r3, #1
 8004702:	4622      	mov	r2, r4
 8004704:	4641      	mov	r1, r8
 8004706:	4638      	mov	r0, r7
 8004708:	47c8      	blx	r9
 800470a:	3001      	adds	r0, #1
 800470c:	d0e6      	beq.n	80046dc <_printf_common+0xa4>
 800470e:	3601      	adds	r6, #1
 8004710:	e7d9      	b.n	80046c6 <_printf_common+0x8e>
	...

08004714 <_printf_i>:
 8004714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004718:	7e0f      	ldrb	r7, [r1, #24]
 800471a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800471c:	2f78      	cmp	r7, #120	@ 0x78
 800471e:	4691      	mov	r9, r2
 8004720:	4680      	mov	r8, r0
 8004722:	460c      	mov	r4, r1
 8004724:	469a      	mov	sl, r3
 8004726:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800472a:	d807      	bhi.n	800473c <_printf_i+0x28>
 800472c:	2f62      	cmp	r7, #98	@ 0x62
 800472e:	d80a      	bhi.n	8004746 <_printf_i+0x32>
 8004730:	2f00      	cmp	r7, #0
 8004732:	f000 80d2 	beq.w	80048da <_printf_i+0x1c6>
 8004736:	2f58      	cmp	r7, #88	@ 0x58
 8004738:	f000 80b9 	beq.w	80048ae <_printf_i+0x19a>
 800473c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004740:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004744:	e03a      	b.n	80047bc <_printf_i+0xa8>
 8004746:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800474a:	2b15      	cmp	r3, #21
 800474c:	d8f6      	bhi.n	800473c <_printf_i+0x28>
 800474e:	a101      	add	r1, pc, #4	@ (adr r1, 8004754 <_printf_i+0x40>)
 8004750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004754:	080047ad 	.word	0x080047ad
 8004758:	080047c1 	.word	0x080047c1
 800475c:	0800473d 	.word	0x0800473d
 8004760:	0800473d 	.word	0x0800473d
 8004764:	0800473d 	.word	0x0800473d
 8004768:	0800473d 	.word	0x0800473d
 800476c:	080047c1 	.word	0x080047c1
 8004770:	0800473d 	.word	0x0800473d
 8004774:	0800473d 	.word	0x0800473d
 8004778:	0800473d 	.word	0x0800473d
 800477c:	0800473d 	.word	0x0800473d
 8004780:	080048c1 	.word	0x080048c1
 8004784:	080047eb 	.word	0x080047eb
 8004788:	0800487b 	.word	0x0800487b
 800478c:	0800473d 	.word	0x0800473d
 8004790:	0800473d 	.word	0x0800473d
 8004794:	080048e3 	.word	0x080048e3
 8004798:	0800473d 	.word	0x0800473d
 800479c:	080047eb 	.word	0x080047eb
 80047a0:	0800473d 	.word	0x0800473d
 80047a4:	0800473d 	.word	0x0800473d
 80047a8:	08004883 	.word	0x08004883
 80047ac:	6833      	ldr	r3, [r6, #0]
 80047ae:	1d1a      	adds	r2, r3, #4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6032      	str	r2, [r6, #0]
 80047b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047bc:	2301      	movs	r3, #1
 80047be:	e09d      	b.n	80048fc <_printf_i+0x1e8>
 80047c0:	6833      	ldr	r3, [r6, #0]
 80047c2:	6820      	ldr	r0, [r4, #0]
 80047c4:	1d19      	adds	r1, r3, #4
 80047c6:	6031      	str	r1, [r6, #0]
 80047c8:	0606      	lsls	r6, r0, #24
 80047ca:	d501      	bpl.n	80047d0 <_printf_i+0xbc>
 80047cc:	681d      	ldr	r5, [r3, #0]
 80047ce:	e003      	b.n	80047d8 <_printf_i+0xc4>
 80047d0:	0645      	lsls	r5, r0, #25
 80047d2:	d5fb      	bpl.n	80047cc <_printf_i+0xb8>
 80047d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047d8:	2d00      	cmp	r5, #0
 80047da:	da03      	bge.n	80047e4 <_printf_i+0xd0>
 80047dc:	232d      	movs	r3, #45	@ 0x2d
 80047de:	426d      	negs	r5, r5
 80047e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047e4:	4859      	ldr	r0, [pc, #356]	@ (800494c <_printf_i+0x238>)
 80047e6:	230a      	movs	r3, #10
 80047e8:	e011      	b.n	800480e <_printf_i+0xfa>
 80047ea:	6821      	ldr	r1, [r4, #0]
 80047ec:	6833      	ldr	r3, [r6, #0]
 80047ee:	0608      	lsls	r0, r1, #24
 80047f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047f4:	d402      	bmi.n	80047fc <_printf_i+0xe8>
 80047f6:	0649      	lsls	r1, r1, #25
 80047f8:	bf48      	it	mi
 80047fa:	b2ad      	uxthmi	r5, r5
 80047fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80047fe:	4853      	ldr	r0, [pc, #332]	@ (800494c <_printf_i+0x238>)
 8004800:	6033      	str	r3, [r6, #0]
 8004802:	bf14      	ite	ne
 8004804:	230a      	movne	r3, #10
 8004806:	2308      	moveq	r3, #8
 8004808:	2100      	movs	r1, #0
 800480a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800480e:	6866      	ldr	r6, [r4, #4]
 8004810:	60a6      	str	r6, [r4, #8]
 8004812:	2e00      	cmp	r6, #0
 8004814:	bfa2      	ittt	ge
 8004816:	6821      	ldrge	r1, [r4, #0]
 8004818:	f021 0104 	bicge.w	r1, r1, #4
 800481c:	6021      	strge	r1, [r4, #0]
 800481e:	b90d      	cbnz	r5, 8004824 <_printf_i+0x110>
 8004820:	2e00      	cmp	r6, #0
 8004822:	d04b      	beq.n	80048bc <_printf_i+0x1a8>
 8004824:	4616      	mov	r6, r2
 8004826:	fbb5 f1f3 	udiv	r1, r5, r3
 800482a:	fb03 5711 	mls	r7, r3, r1, r5
 800482e:	5dc7      	ldrb	r7, [r0, r7]
 8004830:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004834:	462f      	mov	r7, r5
 8004836:	42bb      	cmp	r3, r7
 8004838:	460d      	mov	r5, r1
 800483a:	d9f4      	bls.n	8004826 <_printf_i+0x112>
 800483c:	2b08      	cmp	r3, #8
 800483e:	d10b      	bne.n	8004858 <_printf_i+0x144>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	07df      	lsls	r7, r3, #31
 8004844:	d508      	bpl.n	8004858 <_printf_i+0x144>
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	6861      	ldr	r1, [r4, #4]
 800484a:	4299      	cmp	r1, r3
 800484c:	bfde      	ittt	le
 800484e:	2330      	movle	r3, #48	@ 0x30
 8004850:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004854:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004858:	1b92      	subs	r2, r2, r6
 800485a:	6122      	str	r2, [r4, #16]
 800485c:	f8cd a000 	str.w	sl, [sp]
 8004860:	464b      	mov	r3, r9
 8004862:	aa03      	add	r2, sp, #12
 8004864:	4621      	mov	r1, r4
 8004866:	4640      	mov	r0, r8
 8004868:	f7ff fee6 	bl	8004638 <_printf_common>
 800486c:	3001      	adds	r0, #1
 800486e:	d14a      	bne.n	8004906 <_printf_i+0x1f2>
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	b004      	add	sp, #16
 8004876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	f043 0320 	orr.w	r3, r3, #32
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	4833      	ldr	r0, [pc, #204]	@ (8004950 <_printf_i+0x23c>)
 8004884:	2778      	movs	r7, #120	@ 0x78
 8004886:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	6831      	ldr	r1, [r6, #0]
 800488e:	061f      	lsls	r7, r3, #24
 8004890:	f851 5b04 	ldr.w	r5, [r1], #4
 8004894:	d402      	bmi.n	800489c <_printf_i+0x188>
 8004896:	065f      	lsls	r7, r3, #25
 8004898:	bf48      	it	mi
 800489a:	b2ad      	uxthmi	r5, r5
 800489c:	6031      	str	r1, [r6, #0]
 800489e:	07d9      	lsls	r1, r3, #31
 80048a0:	bf44      	itt	mi
 80048a2:	f043 0320 	orrmi.w	r3, r3, #32
 80048a6:	6023      	strmi	r3, [r4, #0]
 80048a8:	b11d      	cbz	r5, 80048b2 <_printf_i+0x19e>
 80048aa:	2310      	movs	r3, #16
 80048ac:	e7ac      	b.n	8004808 <_printf_i+0xf4>
 80048ae:	4827      	ldr	r0, [pc, #156]	@ (800494c <_printf_i+0x238>)
 80048b0:	e7e9      	b.n	8004886 <_printf_i+0x172>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	f023 0320 	bic.w	r3, r3, #32
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	e7f6      	b.n	80048aa <_printf_i+0x196>
 80048bc:	4616      	mov	r6, r2
 80048be:	e7bd      	b.n	800483c <_printf_i+0x128>
 80048c0:	6833      	ldr	r3, [r6, #0]
 80048c2:	6825      	ldr	r5, [r4, #0]
 80048c4:	6961      	ldr	r1, [r4, #20]
 80048c6:	1d18      	adds	r0, r3, #4
 80048c8:	6030      	str	r0, [r6, #0]
 80048ca:	062e      	lsls	r6, r5, #24
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	d501      	bpl.n	80048d4 <_printf_i+0x1c0>
 80048d0:	6019      	str	r1, [r3, #0]
 80048d2:	e002      	b.n	80048da <_printf_i+0x1c6>
 80048d4:	0668      	lsls	r0, r5, #25
 80048d6:	d5fb      	bpl.n	80048d0 <_printf_i+0x1bc>
 80048d8:	8019      	strh	r1, [r3, #0]
 80048da:	2300      	movs	r3, #0
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	4616      	mov	r6, r2
 80048e0:	e7bc      	b.n	800485c <_printf_i+0x148>
 80048e2:	6833      	ldr	r3, [r6, #0]
 80048e4:	1d1a      	adds	r2, r3, #4
 80048e6:	6032      	str	r2, [r6, #0]
 80048e8:	681e      	ldr	r6, [r3, #0]
 80048ea:	6862      	ldr	r2, [r4, #4]
 80048ec:	2100      	movs	r1, #0
 80048ee:	4630      	mov	r0, r6
 80048f0:	f7fb fc7e 	bl	80001f0 <memchr>
 80048f4:	b108      	cbz	r0, 80048fa <_printf_i+0x1e6>
 80048f6:	1b80      	subs	r0, r0, r6
 80048f8:	6060      	str	r0, [r4, #4]
 80048fa:	6863      	ldr	r3, [r4, #4]
 80048fc:	6123      	str	r3, [r4, #16]
 80048fe:	2300      	movs	r3, #0
 8004900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004904:	e7aa      	b.n	800485c <_printf_i+0x148>
 8004906:	6923      	ldr	r3, [r4, #16]
 8004908:	4632      	mov	r2, r6
 800490a:	4649      	mov	r1, r9
 800490c:	4640      	mov	r0, r8
 800490e:	47d0      	blx	sl
 8004910:	3001      	adds	r0, #1
 8004912:	d0ad      	beq.n	8004870 <_printf_i+0x15c>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	079b      	lsls	r3, r3, #30
 8004918:	d413      	bmi.n	8004942 <_printf_i+0x22e>
 800491a:	68e0      	ldr	r0, [r4, #12]
 800491c:	9b03      	ldr	r3, [sp, #12]
 800491e:	4298      	cmp	r0, r3
 8004920:	bfb8      	it	lt
 8004922:	4618      	movlt	r0, r3
 8004924:	e7a6      	b.n	8004874 <_printf_i+0x160>
 8004926:	2301      	movs	r3, #1
 8004928:	4632      	mov	r2, r6
 800492a:	4649      	mov	r1, r9
 800492c:	4640      	mov	r0, r8
 800492e:	47d0      	blx	sl
 8004930:	3001      	adds	r0, #1
 8004932:	d09d      	beq.n	8004870 <_printf_i+0x15c>
 8004934:	3501      	adds	r5, #1
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	9903      	ldr	r1, [sp, #12]
 800493a:	1a5b      	subs	r3, r3, r1
 800493c:	42ab      	cmp	r3, r5
 800493e:	dcf2      	bgt.n	8004926 <_printf_i+0x212>
 8004940:	e7eb      	b.n	800491a <_printf_i+0x206>
 8004942:	2500      	movs	r5, #0
 8004944:	f104 0619 	add.w	r6, r4, #25
 8004948:	e7f5      	b.n	8004936 <_printf_i+0x222>
 800494a:	bf00      	nop
 800494c:	080057a5 	.word	0x080057a5
 8004950:	080057b6 	.word	0x080057b6

08004954 <_sbrk_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4d06      	ldr	r5, [pc, #24]	@ (8004970 <_sbrk_r+0x1c>)
 8004958:	2300      	movs	r3, #0
 800495a:	4604      	mov	r4, r0
 800495c:	4608      	mov	r0, r1
 800495e:	602b      	str	r3, [r5, #0]
 8004960:	f7fc fbd0 	bl	8001104 <_sbrk>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_sbrk_r+0x1a>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b103      	cbz	r3, 800496e <_sbrk_r+0x1a>
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	200006b4 	.word	0x200006b4

08004974 <_realloc_r>:
 8004974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004978:	4680      	mov	r8, r0
 800497a:	4615      	mov	r5, r2
 800497c:	460c      	mov	r4, r1
 800497e:	b921      	cbnz	r1, 800498a <_realloc_r+0x16>
 8004980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004984:	4611      	mov	r1, r2
 8004986:	f7ff bc73 	b.w	8004270 <_malloc_r>
 800498a:	b92a      	cbnz	r2, 8004998 <_realloc_r+0x24>
 800498c:	f7ff fc04 	bl	8004198 <_free_r>
 8004990:	2400      	movs	r4, #0
 8004992:	4620      	mov	r0, r4
 8004994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004998:	f000 f81a 	bl	80049d0 <_malloc_usable_size_r>
 800499c:	4285      	cmp	r5, r0
 800499e:	4606      	mov	r6, r0
 80049a0:	d802      	bhi.n	80049a8 <_realloc_r+0x34>
 80049a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80049a6:	d8f4      	bhi.n	8004992 <_realloc_r+0x1e>
 80049a8:	4629      	mov	r1, r5
 80049aa:	4640      	mov	r0, r8
 80049ac:	f7ff fc60 	bl	8004270 <_malloc_r>
 80049b0:	4607      	mov	r7, r0
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d0ec      	beq.n	8004990 <_realloc_r+0x1c>
 80049b6:	42b5      	cmp	r5, r6
 80049b8:	462a      	mov	r2, r5
 80049ba:	4621      	mov	r1, r4
 80049bc:	bf28      	it	cs
 80049be:	4632      	movcs	r2, r6
 80049c0:	f7ff fbdc 	bl	800417c <memcpy>
 80049c4:	4621      	mov	r1, r4
 80049c6:	4640      	mov	r0, r8
 80049c8:	f7ff fbe6 	bl	8004198 <_free_r>
 80049cc:	463c      	mov	r4, r7
 80049ce:	e7e0      	b.n	8004992 <_realloc_r+0x1e>

080049d0 <_malloc_usable_size_r>:
 80049d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049d4:	1f18      	subs	r0, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfbc      	itt	lt
 80049da:	580b      	ldrlt	r3, [r1, r0]
 80049dc:	18c0      	addlt	r0, r0, r3
 80049de:	4770      	bx	lr

080049e0 <_init>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	bf00      	nop
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr

080049ec <_fini>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	bf00      	nop
 80049f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f2:	bc08      	pop	{r3}
 80049f4:	469e      	mov	lr, r3
 80049f6:	4770      	bx	lr
