
Sending Data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004358  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080044ec  080044ec  000054ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004504  08004504  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004504  08004504  00005504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800450c  0800450c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800450c  0800450c  0000550c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004510  08004510  00005510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004514  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  2000000c  08004520  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08004520  0000651c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d128  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e63  00000000  00000000  00013164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  00014fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000916  00000000  00000000  00015b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b42b  00000000  00000000  0001646e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003670  00000000  00000000  00021899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00024f09  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000309c  00000000  00000000  00024f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006a  00000000  00000000  00027fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080044d4 	.word	0x080044d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080044d4 	.word	0x080044d4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:

uint8_t TxData[1];
uint8_t yPos = 0;
uint8_t prevYPos = 0;

int main(void){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    HAL_Init();
 80004c8:	f000 fdc8 	bl	800105c <HAL_Init>
    SystemClock_Config();
 80004cc:	f000 f900 	bl	80006d0 <SystemClock_Config>
    MX_GPIO_Init();
 80004d0:	f000 f89c 	bl	800060c <MX_GPIO_Init>
    MX_I2C1_Init();
 80004d4:	f000 f9b8 	bl	8000848 <MX_I2C1_Init>
    MX_ADC1_Init();
 80004d8:	f000 f964 	bl	80007a4 <MX_ADC1_Init>
    MX_USART1_UART_Init();
 80004dc:	f000 f86c 	bl	80005b8 <MX_USART1_UART_Init>
    SSD1306_Init();
 80004e0:	f000 f9e6 	bl	80008b0 <SSD1306_Init>

    HAL_ADC_Start(&hadc1);
 80004e4:	482e      	ldr	r0, [pc, #184]	@ (80005a0 <main+0xdc>)
 80004e6:	f000 fe93 	bl	8001210 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004ea:	f04f 31ff 	mov.w	r1, #4294967295
 80004ee:	482c      	ldr	r0, [pc, #176]	@ (80005a0 <main+0xdc>)
 80004f0:	f000 ff42 	bl	8001378 <HAL_ADC_PollForConversion>
    yPos = SSD1306_HEIGHT -1 - ((HAL_ADC_GetValue(&hadc1) * (SSD1306_HEIGHT -1)) / 4095);
 80004f4:	482a      	ldr	r0, [pc, #168]	@ (80005a0 <main+0xdc>)
 80004f6:	f000 ffca 	bl	800148e <HAL_ADC_GetValue>
 80004fa:	4602      	mov	r2, r0
 80004fc:	4613      	mov	r3, r2
 80004fe:	019b      	lsls	r3, r3, #6
 8000500:	1a9a      	subs	r2, r3, r2
 8000502:	4b28      	ldr	r3, [pc, #160]	@ (80005a4 <main+0xe0>)
 8000504:	fba3 1302 	umull	r1, r3, r3, r2
 8000508:	1ad2      	subs	r2, r2, r3
 800050a:	0852      	lsrs	r2, r2, #1
 800050c:	4413      	add	r3, r2
 800050e:	0adb      	lsrs	r3, r3, #11
 8000510:	b2db      	uxtb	r3, r3
 8000512:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b23      	ldr	r3, [pc, #140]	@ (80005a8 <main+0xe4>)
 800051a:	701a      	strb	r2, [r3, #0]
    prevYPos = yPos;
 800051c:	4b22      	ldr	r3, [pc, #136]	@ (80005a8 <main+0xe4>)
 800051e:	781a      	ldrb	r2, [r3, #0]
 8000520:	4b22      	ldr	r3, [pc, #136]	@ (80005ac <main+0xe8>)
 8000522:	701a      	strb	r2, [r3, #0]

    while(1){
        HAL_ADC_Start(&hadc1);
 8000524:	481e      	ldr	r0, [pc, #120]	@ (80005a0 <main+0xdc>)
 8000526:	f000 fe73 	bl	8001210 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800052a:	f04f 31ff 	mov.w	r1, #4294967295
 800052e:	481c      	ldr	r0, [pc, #112]	@ (80005a0 <main+0xdc>)
 8000530:	f000 ff22 	bl	8001378 <HAL_ADC_PollForConversion>
        yPos = SSD1306_HEIGHT -1 - ((HAL_ADC_GetValue(&hadc1) * (SSD1306_HEIGHT -1)) / 4095);
 8000534:	481a      	ldr	r0, [pc, #104]	@ (80005a0 <main+0xdc>)
 8000536:	f000 ffaa 	bl	800148e <HAL_ADC_GetValue>
 800053a:	4602      	mov	r2, r0
 800053c:	4613      	mov	r3, r2
 800053e:	019b      	lsls	r3, r3, #6
 8000540:	1a9a      	subs	r2, r3, r2
 8000542:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <main+0xe0>)
 8000544:	fba3 1302 	umull	r1, r3, r3, r2
 8000548:	1ad2      	subs	r2, r2, r3
 800054a:	0852      	lsrs	r2, r2, #1
 800054c:	4413      	add	r3, r2
 800054e:	0adb      	lsrs	r3, r3, #11
 8000550:	b2db      	uxtb	r3, r3
 8000552:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <main+0xe4>)
 800055a:	701a      	strb	r2, [r3, #0]
        SSD1306_ShiftBufferLeft();
 800055c:	f000 fbac 	bl	8000cb8 <SSD1306_ShiftBufferLeft>
        SSD1306_DrawVerticalLineInRightmostColumn(prevYPos, yPos, SSD1306_COLOR_WHITE);
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <main+0xe8>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <main+0xe4>)
 8000566:	7811      	ldrb	r1, [r2, #0]
 8000568:	2201      	movs	r2, #1
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fbca 	bl	8000d04 <SSD1306_DrawVerticalLineInRightmostColumn>
        SSD1306_UpdateScreen();
 8000570:	f000 fa62 	bl	8000a38 <SSD1306_UpdateScreen>
        prevYPos = yPos;
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <main+0xe4>)
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <main+0xe8>)
 800057a:	701a      	strb	r2, [r3, #0]

        TxData[0] = yPos;
 800057c:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <main+0xe4>)
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <main+0xec>)
 8000582:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, TxData, sizeof(TxData), 1000);
 8000584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000588:	2201      	movs	r2, #1
 800058a:	4909      	ldr	r1, [pc, #36]	@ (80005b0 <main+0xec>)
 800058c:	4809      	ldr	r0, [pc, #36]	@ (80005b4 <main+0xf0>)
 800058e:	f002 ffa9 	bl	80034e4 <HAL_UART_Transmit>
        HAL_Delay(500);
 8000592:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000596:	f000 fdd3 	bl	8001140 <HAL_Delay>
        HAL_ADC_Start(&hadc1);
 800059a:	bf00      	nop
 800059c:	e7c2      	b.n	8000524 <main+0x60>
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	00100101 	.word	0x00100101
 80005a8:	2000010d 	.word	0x2000010d
 80005ac:	2000010e 	.word	0x2000010e
 80005b0:	2000010c 	.word	0x2000010c
 80005b4:	200000c4 	.word	0x200000c4

080005b8 <MX_USART1_UART_Init>:
    }
}

static void MX_USART1_UART_Init(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005be:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <MX_USART1_UART_Init+0x50>)
 80005c0:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80005c2:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005c8:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX;
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005de:	2208      	movs	r2, #8
 80005e0:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart1)!= HAL_OK){
 80005ee:	4805      	ldr	r0, [pc, #20]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005f0:	f002 ff28 	bl	8003444 <HAL_UART_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART1_UART_Init+0x46>
        Error_Handler();
 80005fa:	f000 f953 	bl	80008a4 <Error_Handler>
    }
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000c4 	.word	0x200000c4
 8000608:	40011000 	.word	0x40011000

0800060c <MX_GPIO_Init>:

static void MX_GPIO_Init(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_GPIO_Init+0xbc>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a27      	ldr	r2, [pc, #156]	@ (80006c8 <MX_GPIO_Init+0xbc>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_GPIO_Init+0xbc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <MX_GPIO_Init+0xbc>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a20      	ldr	r2, [pc, #128]	@ (80006c8 <MX_GPIO_Init+0xbc>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_GPIO_Init+0xbc>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <MX_GPIO_Init+0xbc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a19      	ldr	r2, [pc, #100]	@ (80006c8 <MX_GPIO_Init+0xbc>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <MX_GPIO_Init+0xbc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_GPIO_Init+0xbc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <MX_GPIO_Init+0xbc>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <MX_GPIO_Init+0xbc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000692:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000698:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800069c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800069e:	2301      	movs	r3, #1
 80006a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	4808      	ldr	r0, [pc, #32]	@ (80006cc <MX_GPIO_Init+0xc0>)
 80006aa:	f001 fabf 	bl	8001c2c <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn,0,0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2028      	movs	r0, #40	@ 0x28
 80006b4:	f001 f9f1 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b8:	2028      	movs	r0, #40	@ 0x28
 80006ba:	f001 fa0a 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	@ 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020800 	.word	0x40020800

080006d0 <SystemClock_Config>:

void SystemClock_Config(void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	@ 0x50
 80006d4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	@ 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fecc 	bl	800447c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b28      	ldr	r3, [pc, #160]	@ (800079c <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	4a27      	ldr	r2, [pc, #156]	@ (800079c <SystemClock_Config+0xcc>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	@ 0x40
 8000704:	4b25      	ldr	r3, [pc, #148]	@ (800079c <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800071c:	4a20      	ldr	r2, [pc, #128]	@ (80007a0 <SystemClock_Config+0xd0>)
 800071e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000734:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 8000748:	2354      	movs	r3, #84	@ 0x54
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK){
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f002 f9db 	bl	8002b14 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x98>
        Error_Handler();
 8000764:	f000 f89e 	bl	80008a4 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000778:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK){
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2102      	movs	r1, #2
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fc3d 	bl	8003004 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xc4>
        Error_Handler();
 8000790:	f000 f888 	bl	80008a4 <Error_Handler>
    }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	@ 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_ADC1_Init>:

static void MX_ADC1_Init(void){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
    hadc1.Instance = ADC1;
 80007b6:	4b21      	ldr	r3, [pc, #132]	@ (800083c <MX_ADC1_Init+0x98>)
 80007b8:	4a21      	ldr	r2, [pc, #132]	@ (8000840 <MX_ADC1_Init+0x9c>)
 80007ba:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <MX_ADC1_Init+0x98>)
 80007be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007c2:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <MX_ADC1_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_ADC1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	@ (800083c <MX_ADC1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007de:	4b17      	ldr	r3, [pc, #92]	@ (800083c <MX_ADC1_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e4:	4b15      	ldr	r3, [pc, #84]	@ (800083c <MX_ADC1_Init+0x98>)
 80007e6:	4a17      	ldr	r2, [pc, #92]	@ (8000844 <MX_ADC1_Init+0xa0>)
 80007e8:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_ADC1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_ADC1_Init+0x98>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_ADC1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_ADC1_Init+0x98>)
 8000800:	2201      	movs	r2, #1
 8000802:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1)!= HAL_OK){
 8000804:	480d      	ldr	r0, [pc, #52]	@ (800083c <MX_ADC1_Init+0x98>)
 8000806:	f000 fcbf 	bl	8001188 <HAL_ADC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0x70>
        Error_Handler();
 8000810:	f000 f848 	bl	80008a4 <Error_Handler>
    }
    sConfig.Channel = ADC_CHANNEL_0;
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800081c:	2301      	movs	r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
    if(HAL_ADC_ConfigChannel(&hadc1, &sConfig)!= HAL_OK){
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_ADC1_Init+0x98>)
 8000826:	f000 fe3f 	bl	80014a8 <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0x90>
        Error_Handler();
 8000830:	f000 f838 	bl	80008a4 <Error_Handler>
    }
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000028 	.word	0x20000028
 8000840:	40012000 	.word	0x40012000
 8000844:	0f000001 	.word	0x0f000001

08000848 <MX_I2C1_Init>:

static void MX_I2C1_Init(void){
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_I2C1_Init+0x50>)
 800084e:	4a13      	ldr	r2, [pc, #76]	@ (800089c <MX_I2C1_Init+0x54>)
 8000850:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_I2C1_Init+0x50>)
 8000854:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <MX_I2C1_Init+0x58>)
 8000856:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_I2C1_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_I2C1_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_I2C1_Init+0x50>)
 8000866:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800086a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_I2C1_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_I2C1_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
    if(HAL_I2C_Init(&hi2c1)!= HAL_OK){
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_I2C1_Init+0x50>)
 8000886:	f001 fb79 	bl	8001f7c <HAL_I2C_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000890:	f000 f808 	bl	80008a4 <Error_Handler>
    }
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000070 	.word	0x20000070
 800089c:	40005400 	.word	0x40005400
 80008a0:	00061a80 	.word	0x00061a80

080008a4 <Error_Handler>:

void Error_Handler(void){
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
    __disable_irq();
    while(1){}
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80008b6:	f000 f965 	bl	8000b84 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80008ba:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80008be:	2201      	movs	r2, #1
 80008c0:	217a      	movs	r1, #122	@ 0x7a
 80008c2:	485b      	ldr	r0, [pc, #364]	@ (8000a30 <SSD1306_Init+0x180>)
 80008c4:	f001 fd9c 	bl	8002400 <HAL_I2C_IsDeviceReady>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e0a9      	b.n	8000a26 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80008d2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80008d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008d8:	e002      	b.n	80008e0 <SSD1306_Init+0x30>
		p--;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3b01      	subs	r3, #1
 80008de:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1f9      	bne.n	80008da <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80008e6:	22ae      	movs	r2, #174	@ 0xae
 80008e8:	2100      	movs	r1, #0
 80008ea:	207a      	movs	r0, #122	@ 0x7a
 80008ec:	f000 f9c6 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80008f0:	2220      	movs	r2, #32
 80008f2:	2100      	movs	r1, #0
 80008f4:	207a      	movs	r0, #122	@ 0x7a
 80008f6:	f000 f9c1 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008fa:	2210      	movs	r2, #16
 80008fc:	2100      	movs	r1, #0
 80008fe:	207a      	movs	r0, #122	@ 0x7a
 8000900:	f000 f9bc 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000904:	22b0      	movs	r2, #176	@ 0xb0
 8000906:	2100      	movs	r1, #0
 8000908:	207a      	movs	r0, #122	@ 0x7a
 800090a:	f000 f9b7 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800090e:	22c8      	movs	r2, #200	@ 0xc8
 8000910:	2100      	movs	r1, #0
 8000912:	207a      	movs	r0, #122	@ 0x7a
 8000914:	f000 f9b2 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	207a      	movs	r0, #122	@ 0x7a
 800091e:	f000 f9ad 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000922:	2210      	movs	r2, #16
 8000924:	2100      	movs	r1, #0
 8000926:	207a      	movs	r0, #122	@ 0x7a
 8000928:	f000 f9a8 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800092c:	2240      	movs	r2, #64	@ 0x40
 800092e:	2100      	movs	r1, #0
 8000930:	207a      	movs	r0, #122	@ 0x7a
 8000932:	f000 f9a3 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000936:	2281      	movs	r2, #129	@ 0x81
 8000938:	2100      	movs	r1, #0
 800093a:	207a      	movs	r0, #122	@ 0x7a
 800093c:	f000 f99e 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000940:	22ff      	movs	r2, #255	@ 0xff
 8000942:	2100      	movs	r1, #0
 8000944:	207a      	movs	r0, #122	@ 0x7a
 8000946:	f000 f999 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800094a:	22a1      	movs	r2, #161	@ 0xa1
 800094c:	2100      	movs	r1, #0
 800094e:	207a      	movs	r0, #122	@ 0x7a
 8000950:	f000 f994 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000954:	22a6      	movs	r2, #166	@ 0xa6
 8000956:	2100      	movs	r1, #0
 8000958:	207a      	movs	r0, #122	@ 0x7a
 800095a:	f000 f98f 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800095e:	22a8      	movs	r2, #168	@ 0xa8
 8000960:	2100      	movs	r1, #0
 8000962:	207a      	movs	r0, #122	@ 0x7a
 8000964:	f000 f98a 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000968:	223f      	movs	r2, #63	@ 0x3f
 800096a:	2100      	movs	r1, #0
 800096c:	207a      	movs	r0, #122	@ 0x7a
 800096e:	f000 f985 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000972:	22a4      	movs	r2, #164	@ 0xa4
 8000974:	2100      	movs	r1, #0
 8000976:	207a      	movs	r0, #122	@ 0x7a
 8000978:	f000 f980 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800097c:	22d3      	movs	r2, #211	@ 0xd3
 800097e:	2100      	movs	r1, #0
 8000980:	207a      	movs	r0, #122	@ 0x7a
 8000982:	f000 f97b 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	207a      	movs	r0, #122	@ 0x7a
 800098c:	f000 f976 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000990:	22d5      	movs	r2, #213	@ 0xd5
 8000992:	2100      	movs	r1, #0
 8000994:	207a      	movs	r0, #122	@ 0x7a
 8000996:	f000 f971 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800099a:	22f0      	movs	r2, #240	@ 0xf0
 800099c:	2100      	movs	r1, #0
 800099e:	207a      	movs	r0, #122	@ 0x7a
 80009a0:	f000 f96c 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80009a4:	22d9      	movs	r2, #217	@ 0xd9
 80009a6:	2100      	movs	r1, #0
 80009a8:	207a      	movs	r0, #122	@ 0x7a
 80009aa:	f000 f967 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80009ae:	2222      	movs	r2, #34	@ 0x22
 80009b0:	2100      	movs	r1, #0
 80009b2:	207a      	movs	r0, #122	@ 0x7a
 80009b4:	f000 f962 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80009b8:	22da      	movs	r2, #218	@ 0xda
 80009ba:	2100      	movs	r1, #0
 80009bc:	207a      	movs	r0, #122	@ 0x7a
 80009be:	f000 f95d 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80009c2:	2212      	movs	r2, #18
 80009c4:	2100      	movs	r1, #0
 80009c6:	207a      	movs	r0, #122	@ 0x7a
 80009c8:	f000 f958 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80009cc:	22db      	movs	r2, #219	@ 0xdb
 80009ce:	2100      	movs	r1, #0
 80009d0:	207a      	movs	r0, #122	@ 0x7a
 80009d2:	f000 f953 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80009d6:	2220      	movs	r2, #32
 80009d8:	2100      	movs	r1, #0
 80009da:	207a      	movs	r0, #122	@ 0x7a
 80009dc:	f000 f94e 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80009e0:	228d      	movs	r2, #141	@ 0x8d
 80009e2:	2100      	movs	r1, #0
 80009e4:	207a      	movs	r0, #122	@ 0x7a
 80009e6:	f000 f949 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80009ea:	2214      	movs	r2, #20
 80009ec:	2100      	movs	r1, #0
 80009ee:	207a      	movs	r0, #122	@ 0x7a
 80009f0:	f000 f944 	bl	8000c7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80009f4:	22af      	movs	r2, #175	@ 0xaf
 80009f6:	2100      	movs	r1, #0
 80009f8:	207a      	movs	r0, #122	@ 0x7a
 80009fa:	f000 f93f 	bl	8000c7c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80009fe:	222e      	movs	r2, #46	@ 0x2e
 8000a00:	2100      	movs	r1, #0
 8000a02:	207a      	movs	r0, #122	@ 0x7a
 8000a04:	f000 f93a 	bl	8000c7c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 f843 	bl	8000a94 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000a0e:	f000 f813 	bl	8000a38 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <SSD1306_Init+0x184>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <SSD1306_Init+0x184>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a1e:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <SSD1306_Init+0x184>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000a24:	2301      	movs	r3, #1
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000070 	.word	0x20000070
 8000a34:	20000510 	.word	0x20000510

08000a38 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	e01d      	b.n	8000a80 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	3b50      	subs	r3, #80	@ 0x50
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	207a      	movs	r0, #122	@ 0x7a
 8000a50:	f000 f914 	bl	8000c7c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	207a      	movs	r0, #122	@ 0x7a
 8000a5a:	f000 f90f 	bl	8000c7c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a5e:	2210      	movs	r2, #16
 8000a60:	2100      	movs	r1, #0
 8000a62:	207a      	movs	r0, #122	@ 0x7a
 8000a64:	f000 f90a 	bl	8000c7c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	01db      	lsls	r3, r3, #7
 8000a6c:	4a08      	ldr	r2, [pc, #32]	@ (8000a90 <SSD1306_UpdateScreen+0x58>)
 8000a6e:	441a      	add	r2, r3
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	2140      	movs	r1, #64	@ 0x40
 8000a74:	207a      	movs	r0, #122	@ 0x7a
 8000a76:	f000 f89b 	bl	8000bb0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	71fb      	strb	r3, [r7, #7]
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b07      	cmp	r3, #7
 8000a84:	d9de      	bls.n	8000a44 <SSD1306_UpdateScreen+0xc>
	}
}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000110 	.word	0x20000110

08000a94 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d101      	bne.n	8000aa8 <SSD1306_Fill+0x14>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e000      	b.n	8000aaa <SSD1306_Fill+0x16>
 8000aa8:	23ff      	movs	r3, #255	@ 0xff
 8000aaa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4803      	ldr	r0, [pc, #12]	@ (8000ac0 <SSD1306_Fill+0x2c>)
 8000ab2:	f003 fce3 	bl	800447c <memset>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000110 	.word	0x20000110

08000ac4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	80bb      	strh	r3, [r7, #4]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	70fb      	strb	r3, [r7, #3]
	if (
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ada:	d848      	bhi.n	8000b6e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000adc:	88bb      	ldrh	r3, [r7, #4]
 8000ade:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ae0:	d845      	bhi.n	8000b6e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000ae2:	4b26      	ldr	r3, [pc, #152]	@ (8000b7c <SSD1306_DrawPixel+0xb8>)
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d006      	beq.n	8000af8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000aea:	78fb      	ldrb	r3, [r7, #3]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf0c      	ite	eq
 8000af0:	2301      	moveq	r3, #1
 8000af2:	2300      	movne	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d11a      	bne.n	8000b34 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000afe:	88fa      	ldrh	r2, [r7, #6]
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	08db      	lsrs	r3, r3, #3
 8000b04:	b298      	uxth	r0, r3
 8000b06:	4603      	mov	r3, r0
 8000b08:	01db      	lsls	r3, r3, #7
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b80 <SSD1306_DrawPixel+0xbc>)
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	b25a      	sxtb	r2, r3
 8000b12:	88bb      	ldrh	r3, [r7, #4]
 8000b14:	f003 0307 	and.w	r3, r3, #7
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b259      	sxtb	r1, r3
 8000b24:	88fa      	ldrh	r2, [r7, #6]
 8000b26:	4603      	mov	r3, r0
 8000b28:	01db      	lsls	r3, r3, #7
 8000b2a:	4413      	add	r3, r2
 8000b2c:	b2c9      	uxtb	r1, r1
 8000b2e:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <SSD1306_DrawPixel+0xbc>)
 8000b30:	54d1      	strb	r1, [r2, r3]
 8000b32:	e01d      	b.n	8000b70 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b34:	88fa      	ldrh	r2, [r7, #6]
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	08db      	lsrs	r3, r3, #3
 8000b3a:	b298      	uxth	r0, r3
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	01db      	lsls	r3, r3, #7
 8000b40:	4413      	add	r3, r2
 8000b42:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <SSD1306_DrawPixel+0xbc>)
 8000b44:	5cd3      	ldrb	r3, [r2, r3]
 8000b46:	b25a      	sxtb	r2, r3
 8000b48:	88bb      	ldrh	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	2101      	movs	r1, #1
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	b259      	sxtb	r1, r3
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	4603      	mov	r3, r0
 8000b62:	01db      	lsls	r3, r3, #7
 8000b64:	4413      	add	r3, r2
 8000b66:	b2c9      	uxtb	r1, r1
 8000b68:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <SSD1306_DrawPixel+0xbc>)
 8000b6a:	54d1      	strb	r1, [r2, r3]
 8000b6c:	e000      	b.n	8000b70 <SSD1306_DrawPixel+0xac>
		return;
 8000b6e:	bf00      	nop
	}
}
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000510 	.word	0x20000510
 8000b80:	20000110 	.word	0x20000110

08000b84 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <ssd1306_I2C_Init+0x28>)
 8000b8c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b8e:	e002      	b.n	8000b96 <ssd1306_I2C_Init+0x12>
		p--;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1f9      	bne.n	8000b90 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	0003d090 	.word	0x0003d090

08000bb0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b0c7      	sub	sp, #284	@ 0x11c
 8000bb4:	af02      	add	r7, sp, #8
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000bbe:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000bc2:	600a      	str	r2, [r1, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bca:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000bce:	4622      	mov	r2, r4
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bd6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000bda:	4602      	mov	r2, r0
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000be2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000be6:	460a      	mov	r2, r1
 8000be8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000bea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000bf2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bf6:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000bfa:	7812      	ldrb	r2, [r2, #0]
 8000bfc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c04:	e015      	b.n	8000c32 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000c06:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c0a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c0e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000c12:	6812      	ldr	r2, [r2, #0]
 8000c14:	441a      	add	r2, r3
 8000c16:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	7811      	ldrb	r1, [r2, #0]
 8000c1e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c22:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c26:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000c28:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c32:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c3c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000c40:	8812      	ldrh	r2, [r2, #0]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d8df      	bhi.n	8000c06 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000c46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c4a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b299      	uxth	r1, r3
 8000c52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	f107 020c 	add.w	r2, r7, #12
 8000c64:	200a      	movs	r0, #10
 8000c66:	9000      	str	r0, [sp, #0]
 8000c68:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <ssd1306_I2C_WriteMulti+0xc8>)
 8000c6a:	f001 facb 	bl	8002204 <HAL_I2C_Master_Transmit>
}
 8000c6e:	bf00      	nop
 8000c70:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	20000070 	.word	0x20000070

08000c7c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
 8000c86:	460b      	mov	r3, r1
 8000c88:	71bb      	strb	r3, [r7, #6]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000c8e:	79bb      	ldrb	r3, [r7, #6]
 8000c90:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000c92:	797b      	ldrb	r3, [r7, #5]
 8000c94:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	b299      	uxth	r1, r3
 8000c9a:	f107 020c 	add.w	r2, r7, #12
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <ssd1306_I2C_Write+0x38>)
 8000ca6:	f001 faad 	bl	8002204 <HAL_I2C_Master_Transmit>
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000070 	.word	0x20000070

08000cb8 <SSD1306_ShiftBufferLeft>:

void SSD1306_ShiftBufferLeft(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < SSD1306_HEIGHT / 8; page++) {
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	e015      	b.n	8000cf0 <SSD1306_ShiftBufferLeft+0x38>
        memmove(&SSD1306_Buffer[page * SSD1306_WIDTH],
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	01db      	lsls	r3, r3, #7
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <SSD1306_ShiftBufferLeft+0x48>)
 8000cca:	1898      	adds	r0, r3, r2
                &SSD1306_Buffer[page * SSD1306_WIDTH + 1],
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	01db      	lsls	r3, r3, #7
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d00 <SSD1306_ShiftBufferLeft+0x48>)
 8000cd4:	4413      	add	r3, r2
        memmove(&SSD1306_Buffer[page * SSD1306_WIDTH],
 8000cd6:	227f      	movs	r2, #127	@ 0x7f
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f003 fbb5 	bl	8004448 <memmove>
                SSD1306_WIDTH - 1);
        SSD1306_Buffer[page * SSD1306_WIDTH + (SSD1306_WIDTH - 1)] = 0x00; // Clear the last column
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	01db      	lsls	r3, r3, #7
 8000ce2:	337f      	adds	r3, #127	@ 0x7f
 8000ce4:	4a06      	ldr	r2, [pc, #24]	@ (8000d00 <SSD1306_ShiftBufferLeft+0x48>)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = 0; page < SSD1306_HEIGHT / 8; page++) {
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	3301      	adds	r3, #1
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d9e6      	bls.n	8000cc4 <SSD1306_ShiftBufferLeft+0xc>
    }
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000110 	.word	0x20000110

08000d04 <SSD1306_DrawVerticalLineInRightmostColumn>:

void SSD1306_DrawVerticalLineInRightmostColumn(uint8_t y1, uint8_t y2, SSD1306_COLOR_t color) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	71bb      	strb	r3, [r7, #6]
 8000d12:	4613      	mov	r3, r2
 8000d14:	717b      	strb	r3, [r7, #5]
    if (y1 > y2) {
 8000d16:	79fa      	ldrb	r2, [r7, #7]
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d905      	bls.n	8000d2a <SSD1306_DrawVerticalLineInRightmostColumn+0x26>
        uint8_t temp = y1;
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	73bb      	strb	r3, [r7, #14]
        y1 = y2;
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	71fb      	strb	r3, [r7, #7]
        y2 = temp;
 8000d26:	7bbb      	ldrb	r3, [r7, #14]
 8000d28:	71bb      	strb	r3, [r7, #6]
    }
    for (uint8_t y = y1; y <= y2; y++) {
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e009      	b.n	8000d44 <SSD1306_DrawVerticalLineInRightmostColumn+0x40>
        SSD1306_DrawPixel(SSD1306_WIDTH - 1, y, color);
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	797a      	ldrb	r2, [r7, #5]
 8000d36:	4619      	mov	r1, r3
 8000d38:	207f      	movs	r0, #127	@ 0x7f
 8000d3a:	f7ff fec3 	bl	8000ac4 <SSD1306_DrawPixel>
    for (uint8_t y = y1; y <= y2; y++) {
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	3301      	adds	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d9f1      	bls.n	8000d30 <SSD1306_DrawVerticalLineInRightmostColumn+0x2c>
    }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	4a0f      	ldr	r2, [pc, #60]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	4a08      	ldr	r2, [pc, #32]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	@ 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a17      	ldr	r2, [pc, #92]	@ (8000e24 <HAL_ADC_MspInit+0x7c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d127      	bne.n	8000e1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <HAL_ADC_MspInit+0x80>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <HAL_ADC_MspInit+0x80>)
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dda:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <HAL_ADC_MspInit+0x80>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <HAL_ADC_MspInit+0x80>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a0e      	ldr	r2, [pc, #56]	@ (8000e28 <HAL_ADC_MspInit+0x80>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <HAL_ADC_MspInit+0x80>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e02:	2301      	movs	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e06:	2303      	movs	r3, #3
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <HAL_ADC_MspInit+0x84>)
 8000e16:	f000 ff09 	bl	8001c2c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	@ 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40012000 	.word	0x40012000
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000

08000e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a19      	ldr	r2, [pc, #100]	@ (8000eb4 <HAL_I2C_MspInit+0x84>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12c      	bne.n	8000eac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <HAL_I2C_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a17      	ldr	r2, [pc, #92]	@ (8000eb8 <HAL_I2C_MspInit+0x88>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <HAL_I2C_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e74:	2312      	movs	r3, #18
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e80:	2304      	movs	r3, #4
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <HAL_I2C_MspInit+0x8c>)
 8000e8c:	f000 fece 	bl	8001c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <HAL_I2C_MspInit+0x88>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e98:	4a07      	ldr	r2, [pc, #28]	@ (8000eb8 <HAL_I2C_MspInit+0x88>)
 8000e9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea0:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <HAL_I2C_MspInit+0x88>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	@ 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020400 	.word	0x40020400

08000ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <HAL_UART_MspInit+0x94>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d134      	bne.n	8000f4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <HAL_UART_MspInit+0x98>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a1b      	ldr	r2, [pc, #108]	@ (8000f58 <HAL_UART_MspInit+0x98>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <HAL_UART_MspInit+0x98>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_UART_MspInit+0x98>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a14      	ldr	r2, [pc, #80]	@ (8000f58 <HAL_UART_MspInit+0x98>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_UART_MspInit+0x98>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4809      	ldr	r0, [pc, #36]	@ (8000f5c <HAL_UART_MspInit+0x9c>)
 8000f38:	f000 fe78 	bl	8001c2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2025      	movs	r0, #37	@ 0x25
 8000f42:	f000 fdaa 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f46:	2025      	movs	r0, #37	@ 0x25
 8000f48:	f000 fdc3 	bl	8001ad2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	@ 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40011000 	.word	0x40011000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <NMI_Handler+0x4>

08000f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <MemManage_Handler+0x4>

08000f78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb6:	f000 f8a3 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <USART1_IRQHandler+0x10>)
 8000fc6:	f002 fb19 	bl	80035fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200000c4 	.word	0x200000c4

08000fd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fd8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fdc:	f000 ffaa 	bl	8001f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001040 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800100c:	f7ff ffea 	bl	8000fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	@ (8001048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	@ (8001054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001036:	f003 fa29 	bl	800448c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff fa43 	bl	80004c4 <main>
  bx  lr    
 800103e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001040:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800104c:	08004514 	.word	0x08004514
  ldr r2, =_sbss
 8001050:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001054:	2000051c 	.word	0x2000051c

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>
	...

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001060:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <HAL_Init+0x40>)
 8001066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800106a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800106c:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <HAL_Init+0x40>)
 8001072:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	@ (800109c <HAL_Init+0x40>)
 800107e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f000 fcfd 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108a:	200f      	movs	r0, #15
 800108c:	f000 f808 	bl	80010a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001090:	f7ff fe62 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023c00 	.word	0x40023c00

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <HAL_InitTick+0x54>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <HAL_InitTick+0x58>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fd15 	bl	8001aee <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f000 fcdd 	bl	8001a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <HAL_InitTick+0x5c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	20000518 	.word	0x20000518

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000518 	.word	0x20000518

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff ffee 	bl	8001128 <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_Delay+0x44>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffde 	bl	8001128 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008

08001188 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e033      	b.n	8001206 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d109      	bne.n	80011ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff fdfe 	bl	8000da8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d118      	bne.n	80011f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011ce:	f023 0302 	bic.w	r3, r3, #2
 80011d2:	f043 0202 	orr.w	r2, r3, #2
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fa86 	bl	80016ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	f023 0303 	bic.w	r3, r3, #3
 80011ee:	f043 0201 	orr.w	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80011f6:	e001      	b.n	80011fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001222:	2b01      	cmp	r3, #1
 8001224:	d101      	bne.n	800122a <HAL_ADC_Start+0x1a>
 8001226:	2302      	movs	r3, #2
 8001228:	e097      	b.n	800135a <HAL_ADC_Start+0x14a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b01      	cmp	r3, #1
 800123e:	d018      	beq.n	8001272 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0201 	orr.w	r2, r2, #1
 800124e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001250:	4b45      	ldr	r3, [pc, #276]	@ (8001368 <HAL_ADC_Start+0x158>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a45      	ldr	r2, [pc, #276]	@ (800136c <HAL_ADC_Start+0x15c>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0c9a      	lsrs	r2, r3, #18
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001264:	e002      	b.n	800126c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3b01      	subs	r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f9      	bne.n	8001266 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b01      	cmp	r3, #1
 800127e:	d15f      	bne.n	8001340 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012be:	d106      	bne.n	80012ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c4:	f023 0206 	bic.w	r2, r3, #6
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80012cc:	e002      	b.n	80012d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012dc:	4b24      	ldr	r3, [pc, #144]	@ (8001370 <HAL_ADC_Start+0x160>)
 80012de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80012e8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10f      	bne.n	8001316 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d129      	bne.n	8001358 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	e020      	b.n	8001358 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a16      	ldr	r2, [pc, #88]	@ (8001374 <HAL_ADC_Start+0x164>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d11b      	bne.n	8001358 <HAL_ADC_Start+0x148>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d114      	bne.n	8001358 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	e00b      	b.n	8001358 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	f043 0210 	orr.w	r2, r3, #16
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001350:	f043 0201 	orr.w	r2, r3, #1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000000 	.word	0x20000000
 800136c:	431bde83 	.word	0x431bde83
 8001370:	40012300 	.word	0x40012300
 8001374:	40012000 	.word	0x40012000

08001378 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001394:	d113      	bne.n	80013be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013a4:	d10b      	bne.n	80013be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f043 0220 	orr.w	r2, r3, #32
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e063      	b.n	8001486 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80013be:	f7ff feb3 	bl	8001128 <HAL_GetTick>
 80013c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013c4:	e021      	b.n	800140a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d01d      	beq.n	800140a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d007      	beq.n	80013e4 <HAL_ADC_PollForConversion+0x6c>
 80013d4:	f7ff fea8 	bl	8001128 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d212      	bcs.n	800140a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d00b      	beq.n	800140a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f043 0204 	orr.w	r2, r3, #4
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e03d      	b.n	8001486 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b02      	cmp	r3, #2
 8001416:	d1d6      	bne.n	80013c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f06f 0212 	mvn.w	r2, #18
 8001420:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d123      	bne.n	8001484 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001440:	2b00      	cmp	r3, #0
 8001442:	d11f      	bne.n	8001484 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800145c:	2b00      	cmp	r3, #0
 800145e:	d111      	bne.n	8001484 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1c>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e105      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x228>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b09      	cmp	r3, #9
 80014d2:	d925      	bls.n	8001520 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68d9      	ldr	r1, [r3, #12]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	3b1e      	subs	r3, #30
 80014ea:	2207      	movs	r2, #7
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43da      	mvns	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	400a      	ands	r2, r1
 80014f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68d9      	ldr	r1, [r3, #12]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	4603      	mov	r3, r0
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4403      	add	r3, r0
 8001512:	3b1e      	subs	r3, #30
 8001514:	409a      	lsls	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	e022      	b.n	8001566 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6919      	ldr	r1, [r3, #16]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	2207      	movs	r2, #7
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	400a      	ands	r2, r1
 8001542:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6919      	ldr	r1, [r3, #16]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	4603      	mov	r3, r0
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4403      	add	r3, r0
 800155c:	409a      	lsls	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b06      	cmp	r3, #6
 800156c:	d824      	bhi.n	80015b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b05      	subs	r3, #5
 8001580:	221f      	movs	r2, #31
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	400a      	ands	r2, r1
 800158e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b05      	subs	r3, #5
 80015aa:	fa00 f203 	lsl.w	r2, r0, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80015b6:	e04c      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d824      	bhi.n	800160a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	3b23      	subs	r3, #35	@ 0x23
 80015d2:	221f      	movs	r2, #31
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43da      	mvns	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	400a      	ands	r2, r1
 80015e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	3b23      	subs	r3, #35	@ 0x23
 80015fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	631a      	str	r2, [r3, #48]	@ 0x30
 8001608:	e023      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	3b41      	subs	r3, #65	@ 0x41
 800161c:	221f      	movs	r2, #31
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	400a      	ands	r2, r1
 800162a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3b41      	subs	r3, #65	@ 0x41
 8001646:	fa00 f203 	lsl.w	r2, r0, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <HAL_ADC_ConfigChannel+0x234>)
 8001654:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <HAL_ADC_ConfigChannel+0x238>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d109      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x1cc>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b12      	cmp	r3, #18
 8001666:	d105      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	@ (80016e0 <HAL_ADC_ConfigChannel+0x238>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d123      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x21e>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b10      	cmp	r3, #16
 8001684:	d003      	beq.n	800168e <HAL_ADC_ConfigChannel+0x1e6>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b11      	cmp	r3, #17
 800168c:	d11b      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b10      	cmp	r3, #16
 80016a0:	d111      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <HAL_ADC_ConfigChannel+0x23c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a10      	ldr	r2, [pc, #64]	@ (80016e8 <HAL_ADC_ConfigChannel+0x240>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	0c9a      	lsrs	r2, r3, #18
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016b8:	e002      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	3b01      	subs	r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f9      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40012300 	.word	0x40012300
 80016e0:	40012000 	.word	0x40012000
 80016e4:	20000000 	.word	0x20000000
 80016e8:	431bde83 	.word	0x431bde83

080016ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f4:	4b79      	ldr	r3, [pc, #484]	@ (80018dc <ADC_Init+0x1f0>)
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	431a      	orrs	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6859      	ldr	r1, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	021a      	lsls	r2, r3, #8
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6899      	ldr	r1, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177e:	4a58      	ldr	r2, [pc, #352]	@ (80018e0 <ADC_Init+0x1f4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d022      	beq.n	80017ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001792:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6899      	ldr	r1, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6899      	ldr	r1, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e00f      	b.n	80017ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0202 	bic.w	r2, r2, #2
 80017f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7e1b      	ldrb	r3, [r3, #24]
 8001804:	005a      	lsls	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01b      	beq.n	8001850 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001826:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001836:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6859      	ldr	r1, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	3b01      	subs	r3, #1
 8001844:	035a      	lsls	r2, r3, #13
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	e007      	b.n	8001860 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800185e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800186e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	3b01      	subs	r3, #1
 800187c:	051a      	lsls	r2, r3, #20
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001894:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6899      	ldr	r1, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018a2:	025a      	lsls	r2, r3, #9
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6899      	ldr	r1, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	029a      	lsls	r2, r3, #10
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	609a      	str	r2, [r3, #8]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40012300 	.word	0x40012300
 80018e0:	0f000001 	.word	0x0f000001

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4907      	ldr	r1, [pc, #28]	@ (8001980 <__NVIC_EnableIRQ+0x38>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e100 	.word	0xe000e100

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	@ (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	@ (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	@ 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	@ 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00f      	b.n	8001a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <SysTick_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5e:	210f      	movs	r1, #15
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f7ff ff8e 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <SysTick_Config+0x40>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <SysTick_Config+0x40>)
 8001a70:	2207      	movs	r2, #7
 8001a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff29 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aac:	f7ff ff3e 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7ff ff8e 	bl	80019d8 <NVIC_EncodePriority>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff5d 	bl	8001984 <__NVIC_SetPriority>
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff31 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffa2 	bl	8001a40 <SysTick_Config>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff fb08 	bl	8001128 <HAL_GetTick>
 8001b18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d008      	beq.n	8001b38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2280      	movs	r2, #128	@ 0x80
 8001b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e052      	b.n	8001bde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0216 	bic.w	r2, r2, #22
 8001b46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <HAL_DMA_Abort+0x62>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d007      	beq.n	8001b78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0208 	bic.w	r2, r2, #8
 8001b76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0201 	bic.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b88:	e013      	b.n	8001bb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b8a:	f7ff facd 	bl	8001128 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d90c      	bls.n	8001bb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e015      	b.n	8001bde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1e4      	bne.n	8001b8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc4:	223f      	movs	r2, #63	@ 0x3f
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d004      	beq.n	8001c04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e00c      	b.n	8001c1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2205      	movs	r2, #5
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	@ 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e159      	b.n	8001efc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 8148 	bne.w	8001ef6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d005      	beq.n	8001c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d017      	beq.n	8001d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d123      	bne.n	8001d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80a2 	beq.w	8001ef6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b57      	ldr	r3, [pc, #348]	@ (8001f14 <HAL_GPIO_Init+0x2e8>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	4a56      	ldr	r2, [pc, #344]	@ (8001f14 <HAL_GPIO_Init+0x2e8>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc2:	4b54      	ldr	r3, [pc, #336]	@ (8001f14 <HAL_GPIO_Init+0x2e8>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a52      	ldr	r2, [pc, #328]	@ (8001f18 <HAL_GPIO_Init+0x2ec>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a49      	ldr	r2, [pc, #292]	@ (8001f1c <HAL_GPIO_Init+0x2f0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d019      	beq.n	8001e2e <HAL_GPIO_Init+0x202>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	@ (8001f20 <HAL_GPIO_Init+0x2f4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0x1fe>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a47      	ldr	r2, [pc, #284]	@ (8001f24 <HAL_GPIO_Init+0x2f8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00d      	beq.n	8001e26 <HAL_GPIO_Init+0x1fa>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a46      	ldr	r2, [pc, #280]	@ (8001f28 <HAL_GPIO_Init+0x2fc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x1f6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a45      	ldr	r2, [pc, #276]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_GPIO_Init+0x1f2>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e008      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e004      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e002      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	f002 0203 	and.w	r2, r2, #3
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e40:	4935      	ldr	r1, [pc, #212]	@ (8001f18 <HAL_GPIO_Init+0x2ec>)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4e:	4b38      	ldr	r3, [pc, #224]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e72:	4a2f      	ldr	r2, [pc, #188]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e78:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e9c:	4a24      	ldr	r2, [pc, #144]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea2:	4b23      	ldr	r3, [pc, #140]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b0f      	cmp	r3, #15
 8001f00:	f67f aea2 	bls.w	8001c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3724      	adds	r7, #36	@ 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f3e:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f4a:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f806 	bl	8001f64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e12b      	b.n	80021e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe ff44 	bl	8000e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2224      	movs	r2, #36	@ 0x24
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fe0:	f001 fa08 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 8001fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4a81      	ldr	r2, [pc, #516]	@ (80021f0 <HAL_I2C_Init+0x274>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d807      	bhi.n	8002000 <HAL_I2C_Init+0x84>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a80      	ldr	r2, [pc, #512]	@ (80021f4 <HAL_I2C_Init+0x278>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	bf94      	ite	ls
 8001ff8:	2301      	movls	r3, #1
 8001ffa:	2300      	movhi	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e006      	b.n	800200e <HAL_I2C_Init+0x92>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a7d      	ldr	r2, [pc, #500]	@ (80021f8 <HAL_I2C_Init+0x27c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	bf94      	ite	ls
 8002008:	2301      	movls	r3, #1
 800200a:	2300      	movhi	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0e7      	b.n	80021e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a78      	ldr	r2, [pc, #480]	@ (80021fc <HAL_I2C_Init+0x280>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0c9b      	lsrs	r3, r3, #18
 8002020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a6a      	ldr	r2, [pc, #424]	@ (80021f0 <HAL_I2C_Init+0x274>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d802      	bhi.n	8002050 <HAL_I2C_Init+0xd4>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3301      	adds	r3, #1
 800204e:	e009      	b.n	8002064 <HAL_I2C_Init+0xe8>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	4a69      	ldr	r2, [pc, #420]	@ (8002200 <HAL_I2C_Init+0x284>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	3301      	adds	r3, #1
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	430b      	orrs	r3, r1
 800206a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002076:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	495c      	ldr	r1, [pc, #368]	@ (80021f0 <HAL_I2C_Init+0x274>)
 8002080:	428b      	cmp	r3, r1
 8002082:	d819      	bhi.n	80020b8 <HAL_I2C_Init+0x13c>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e59      	subs	r1, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002092:	1c59      	adds	r1, r3, #1
 8002094:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002098:	400b      	ands	r3, r1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_I2C_Init+0x138>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1e59      	subs	r1, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ac:	3301      	adds	r3, #1
 80020ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b2:	e051      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 80020b4:	2304      	movs	r3, #4
 80020b6:	e04f      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d111      	bne.n	80020e4 <HAL_I2C_Init+0x168>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e58      	subs	r0, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	e012      	b.n	800210a <HAL_I2C_Init+0x18e>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1e58      	subs	r0, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	0099      	lsls	r1, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Init+0x196>
 800210e:	2301      	movs	r3, #1
 8002110:	e022      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10e      	bne.n	8002138 <HAL_I2C_Init+0x1bc>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1e58      	subs	r0, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	440b      	add	r3, r1
 8002128:	fbb0 f3f3 	udiv	r3, r0, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002136:	e00f      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	0099      	lsls	r1, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	6809      	ldr	r1, [r1, #0]
 800215c:	4313      	orrs	r3, r2
 800215e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002186:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6911      	ldr	r1, [r2, #16]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68d2      	ldr	r2, [r2, #12]
 8002192:	4311      	orrs	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	430b      	orrs	r3, r1
 800219a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	000186a0 	.word	0x000186a0
 80021f4:	001e847f 	.word	0x001e847f
 80021f8:	003d08ff 	.word	0x003d08ff
 80021fc:	431bde83 	.word	0x431bde83
 8002200:	10624dd3 	.word	0x10624dd3

08002204 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	461a      	mov	r2, r3
 8002210:	460b      	mov	r3, r1
 8002212:	817b      	strh	r3, [r7, #10]
 8002214:	4613      	mov	r3, r2
 8002216:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7fe ff86 	bl	8001128 <HAL_GetTick>
 800221c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b20      	cmp	r3, #32
 8002228:	f040 80e0 	bne.w	80023ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2319      	movs	r3, #25
 8002232:	2201      	movs	r2, #1
 8002234:	4970      	ldr	r1, [pc, #448]	@ (80023f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fa92 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002242:	2302      	movs	r3, #2
 8002244:	e0d3      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_I2C_Master_Transmit+0x50>
 8002250:	2302      	movs	r3, #2
 8002252:	e0cc      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1ea>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d007      	beq.n	800227a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002288:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2221      	movs	r2, #33	@ 0x21
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2210      	movs	r2, #16
 8002296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	893a      	ldrh	r2, [r7, #8]
 80022aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4a50      	ldr	r2, [pc, #320]	@ (80023fc <HAL_I2C_Master_Transmit+0x1f8>)
 80022ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022bc:	8979      	ldrh	r1, [r7, #10]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	6a3a      	ldr	r2, [r7, #32]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f9ca 	bl	800265c <I2C_MasterRequestWrite>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e08d      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022e8:	e066      	b.n	80023b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	6a39      	ldr	r1, [r7, #32]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fb50 	bl	8002994 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00d      	beq.n	8002316 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d107      	bne.n	8002312 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002310:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06b      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b04      	cmp	r3, #4
 8002352:	d11b      	bne.n	800238c <HAL_I2C_Master_Transmit+0x188>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	d017      	beq.n	800238c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	6a39      	ldr	r1, [r7, #32]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fb47 	bl	8002a24 <I2C_WaitOnBTFFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00d      	beq.n	80023b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d107      	bne.n	80023b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e01a      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d194      	bne.n	80022ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	00100002 	.word	0x00100002
 80023fc:	ffff0000 	.word	0xffff0000

08002400 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	@ 0x28
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	460b      	mov	r3, r1
 800240e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7fe fe8a 	bl	8001128 <HAL_GetTick>
 8002414:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b20      	cmp	r3, #32
 8002424:	f040 8111 	bne.w	800264a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2319      	movs	r3, #25
 800242e:	2201      	movs	r2, #1
 8002430:	4988      	ldr	r1, [pc, #544]	@ (8002654 <HAL_I2C_IsDeviceReady+0x254>)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f994 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800243e:	2302      	movs	r3, #2
 8002440:	e104      	b.n	800264c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_I2C_IsDeviceReady+0x50>
 800244c:	2302      	movs	r3, #2
 800244e:	e0fd      	b.n	800264c <HAL_I2C_IsDeviceReady+0x24c>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d007      	beq.n	8002476 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0201 	orr.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002484:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2224      	movs	r2, #36	@ 0x24
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4a70      	ldr	r2, [pc, #448]	@ (8002658 <HAL_I2C_IsDeviceReady+0x258>)
 8002498:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f952 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00d      	beq.n	80024de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024d0:	d103      	bne.n	80024da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0b6      	b.n	800264c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024de:	897b      	ldrh	r3, [r7, #10]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80024ee:	f7fe fe1b 	bl	8001128 <HAL_GetTick>
 80024f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b02      	cmp	r3, #2
 8002500:	bf0c      	ite	eq
 8002502:	2301      	moveq	r3, #1
 8002504:	2300      	movne	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002522:	e025      	b.n	8002570 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002524:	f7fe fe00 	bl	8001128 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d302      	bcc.n	800253a <HAL_I2C_IsDeviceReady+0x13a>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d103      	bne.n	8002542 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	22a0      	movs	r2, #160	@ 0xa0
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b02      	cmp	r3, #2
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2ba0      	cmp	r3, #160	@ 0xa0
 800257a:	d005      	beq.n	8002588 <HAL_I2C_IsDeviceReady+0x188>
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d102      	bne.n	8002588 <HAL_I2C_IsDeviceReady+0x188>
 8002582:	7dbb      	ldrb	r3, [r7, #22]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0cd      	beq.n	8002524 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d129      	bne.n	80025f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2319      	movs	r3, #25
 80025ca:	2201      	movs	r2, #1
 80025cc:	4921      	ldr	r1, [pc, #132]	@ (8002654 <HAL_I2C_IsDeviceReady+0x254>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f8c6 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e036      	b.n	800264c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e02c      	b.n	800264c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002600:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800260a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2319      	movs	r3, #25
 8002612:	2201      	movs	r2, #1
 8002614:	490f      	ldr	r1, [pc, #60]	@ (8002654 <HAL_I2C_IsDeviceReady+0x254>)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f8a2 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e012      	b.n	800264c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	3301      	adds	r3, #1
 800262a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	f4ff af32 	bcc.w	800249a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800264a:	2302      	movs	r3, #2
  }
}
 800264c:	4618      	mov	r0, r3
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	00100002 	.word	0x00100002
 8002658:	ffff0000 	.word	0xffff0000

0800265c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	460b      	mov	r3, r1
 800266a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002670:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d006      	beq.n	8002686 <I2C_MasterRequestWrite+0x2a>
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d003      	beq.n	8002686 <I2C_MasterRequestWrite+0x2a>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002684:	d108      	bne.n	8002698 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e00b      	b.n	80026b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269c:	2b12      	cmp	r3, #18
 800269e:	d107      	bne.n	80026b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f84f 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00d      	beq.n	80026e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026d6:	d103      	bne.n	80026e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e035      	b.n	8002750 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026ec:	d108      	bne.n	8002700 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026ee:	897b      	ldrh	r3, [r7, #10]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026fc:	611a      	str	r2, [r3, #16]
 80026fe:	e01b      	b.n	8002738 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002700:	897b      	ldrh	r3, [r7, #10]
 8002702:	11db      	asrs	r3, r3, #7
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f003 0306 	and.w	r3, r3, #6
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f063 030f 	orn	r3, r3, #15
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	490e      	ldr	r1, [pc, #56]	@ (8002758 <I2C_MasterRequestWrite+0xfc>)
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f898 	bl	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e010      	b.n	8002750 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800272e:	897b      	ldrh	r3, [r7, #10]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4907      	ldr	r1, [pc, #28]	@ (800275c <I2C_MasterRequestWrite+0x100>)
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f888 	bl	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	00010008 	.word	0x00010008
 800275c:	00010002 	.word	0x00010002

08002760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	4613      	mov	r3, r2
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002770:	e048      	b.n	8002804 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d044      	beq.n	8002804 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7fe fcd5 	bl	8001128 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <I2C_WaitOnFlagUntilTimeout+0x30>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d139      	bne.n	8002804 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10d      	bne.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	43da      	mvns	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	e00c      	b.n	80027d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	43da      	mvns	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d116      	bne.n	8002804 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	f043 0220 	orr.w	r2, r3, #32
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e023      	b.n	800284c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	0c1b      	lsrs	r3, r3, #16
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d10d      	bne.n	800282a <I2C_WaitOnFlagUntilTimeout+0xca>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	43da      	mvns	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4013      	ands	r3, r2
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	e00c      	b.n	8002844 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	43da      	mvns	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4013      	ands	r3, r2
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	429a      	cmp	r2, r3
 8002848:	d093      	beq.n	8002772 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002862:	e071      	b.n	8002948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002872:	d123      	bne.n	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002882:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800288c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f043 0204 	orr.w	r2, r3, #4
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e067      	b.n	800298c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c2:	d041      	beq.n	8002948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c4:	f7fe fc30 	bl	8001128 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d302      	bcc.n	80028da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d136      	bne.n	8002948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d10c      	bne.n	80028fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	43da      	mvns	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4013      	ands	r3, r2
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	e00b      	b.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	43da      	mvns	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4013      	ands	r3, r2
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf14      	ite	ne
 8002910:	2301      	movne	r3, #1
 8002912:	2300      	moveq	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e021      	b.n	800298c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	0c1b      	lsrs	r3, r3, #16
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d10c      	bne.n	800296c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	43da      	mvns	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4013      	ands	r3, r2
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e00b      	b.n	8002984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	43da      	mvns	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4013      	ands	r3, r2
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf14      	ite	ne
 800297e:	2301      	movne	r3, #1
 8002980:	2300      	moveq	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f af6d 	bne.w	8002864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a0:	e034      	b.n	8002a0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f886 	bl	8002ab4 <I2C_IsAcknowledgeFailed>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e034      	b.n	8002a1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d028      	beq.n	8002a0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ba:	f7fe fbb5 	bl	8001128 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d302      	bcc.n	80029d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d11d      	bne.n	8002a0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029da:	2b80      	cmp	r3, #128	@ 0x80
 80029dc:	d016      	beq.n	8002a0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e007      	b.n	8002a1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a16:	2b80      	cmp	r3, #128	@ 0x80
 8002a18:	d1c3      	bne.n	80029a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a30:	e034      	b.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f83e 	bl	8002ab4 <I2C_IsAcknowledgeFailed>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e034      	b.n	8002aac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d028      	beq.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4a:	f7fe fb6d 	bl	8001128 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d302      	bcc.n	8002a60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d11d      	bne.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d016      	beq.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e007      	b.n	8002aac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d1c3      	bne.n	8002a32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aca:	d11b      	bne.n	8002b04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ad4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	f043 0204 	orr.w	r2, r3, #4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e267      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d075      	beq.n	8002c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b32:	4b88      	ldr	r3, [pc, #544]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d00c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3e:	4b85      	ldr	r3, [pc, #532]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d112      	bne.n	8002b70 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4a:	4b82      	ldr	r3, [pc, #520]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b56:	d10b      	bne.n	8002b70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	4b7e      	ldr	r3, [pc, #504]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d05b      	beq.n	8002c1c <HAL_RCC_OscConfig+0x108>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d157      	bne.n	8002c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e242      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b78:	d106      	bne.n	8002b88 <HAL_RCC_OscConfig+0x74>
 8002b7a:	4b76      	ldr	r3, [pc, #472]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a75      	ldr	r2, [pc, #468]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e01d      	b.n	8002bc4 <HAL_RCC_OscConfig+0xb0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x98>
 8002b92:	4b70      	ldr	r3, [pc, #448]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a6f      	ldr	r2, [pc, #444]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a6c      	ldr	r2, [pc, #432]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e00b      	b.n	8002bc4 <HAL_RCC_OscConfig+0xb0>
 8002bac:	4b69      	ldr	r3, [pc, #420]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a68      	ldr	r2, [pc, #416]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b66      	ldr	r3, [pc, #408]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a65      	ldr	r2, [pc, #404]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe faac 	bl	8001128 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7fe faa8 	bl	8001128 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	@ 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e207      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0xc0>
 8002bf2:	e014      	b.n	8002c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fa98 	bl	8001128 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fa94 	bl	8001128 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	@ 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e1f3      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	4b51      	ldr	r3, [pc, #324]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0xe8>
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d063      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c36:	4b47      	ldr	r3, [pc, #284]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d11c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c42:	4b44      	ldr	r3, [pc, #272]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d116      	bne.n	8002c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	4b41      	ldr	r3, [pc, #260]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_RCC_OscConfig+0x152>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d001      	beq.n	8002c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e1c7      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c66:	4b3b      	ldr	r3, [pc, #236]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4937      	ldr	r1, [pc, #220]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7a:	e03a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c84:	4b34      	ldr	r3, [pc, #208]	@ (8002d58 <HAL_RCC_OscConfig+0x244>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fa4d 	bl	8001128 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c92:	f7fe fa49 	bl	8001128 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e1a8      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb0:	4b28      	ldr	r3, [pc, #160]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4925      	ldr	r1, [pc, #148]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]
 8002cc4:	e015      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc6:	4b24      	ldr	r3, [pc, #144]	@ (8002d58 <HAL_RCC_OscConfig+0x244>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fa2c 	bl	8001128 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd4:	f7fe fa28 	bl	8001128 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e187      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d036      	beq.n	8002d6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d06:	4b15      	ldr	r3, [pc, #84]	@ (8002d5c <HAL_RCC_OscConfig+0x248>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fe fa0c 	bl	8001128 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d14:	f7fe fa08 	bl	8001128 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e167      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d26:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x200>
 8002d32:	e01b      	b.n	8002d6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d34:	4b09      	ldr	r3, [pc, #36]	@ (8002d5c <HAL_RCC_OscConfig+0x248>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3a:	f7fe f9f5 	bl	8001128 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	e00e      	b.n	8002d60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d42:	f7fe f9f1 	bl	8001128 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d907      	bls.n	8002d60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e150      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
 8002d54:	40023800 	.word	0x40023800
 8002d58:	42470000 	.word	0x42470000
 8002d5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	4b88      	ldr	r3, [pc, #544]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1ea      	bne.n	8002d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8097 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7e:	4b81      	ldr	r3, [pc, #516]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	4a7c      	ldr	r2, [pc, #496]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da6:	2301      	movs	r3, #1
 8002da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002daa:	4b77      	ldr	r3, [pc, #476]	@ (8002f88 <HAL_RCC_OscConfig+0x474>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d118      	bne.n	8002de8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db6:	4b74      	ldr	r3, [pc, #464]	@ (8002f88 <HAL_RCC_OscConfig+0x474>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a73      	ldr	r2, [pc, #460]	@ (8002f88 <HAL_RCC_OscConfig+0x474>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc2:	f7fe f9b1 	bl	8001128 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dca:	f7fe f9ad 	bl	8001128 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e10c      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8002f88 <HAL_RCC_OscConfig+0x474>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x2ea>
 8002df0:	4b64      	ldr	r3, [pc, #400]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df4:	4a63      	ldr	r2, [pc, #396]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dfc:	e01c      	b.n	8002e38 <HAL_RCC_OscConfig+0x324>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x30c>
 8002e06:	4b5f      	ldr	r3, [pc, #380]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0a:	4a5e      	ldr	r2, [pc, #376]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e12:	4b5c      	ldr	r3, [pc, #368]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e16:	4a5b      	ldr	r2, [pc, #364]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e1e:	e00b      	b.n	8002e38 <HAL_RCC_OscConfig+0x324>
 8002e20:	4b58      	ldr	r3, [pc, #352]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e24:	4a57      	ldr	r2, [pc, #348]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e2c:	4b55      	ldr	r3, [pc, #340]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e30:	4a54      	ldr	r2, [pc, #336]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e32:	f023 0304 	bic.w	r3, r3, #4
 8002e36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d015      	beq.n	8002e6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fe f972 	bl	8001128 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e48:	f7fe f96e 	bl	8001128 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e0cb      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5e:	4b49      	ldr	r3, [pc, #292]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0ee      	beq.n	8002e48 <HAL_RCC_OscConfig+0x334>
 8002e6a:	e014      	b.n	8002e96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6c:	f7fe f95c 	bl	8001128 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e74:	f7fe f958 	bl	8001128 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e0b5      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1ee      	bne.n	8002e74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9c:	4b39      	ldr	r3, [pc, #228]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	4a38      	ldr	r2, [pc, #224]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80a1 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eb2:	4b34      	ldr	r3, [pc, #208]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d05c      	beq.n	8002f78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d141      	bne.n	8002f4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec6:	4b31      	ldr	r3, [pc, #196]	@ (8002f8c <HAL_RCC_OscConfig+0x478>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe f92c 	bl	8001128 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7fe f928 	bl	8001128 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e087      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee6:	4b27      	ldr	r3, [pc, #156]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	019b      	lsls	r3, r3, #6
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	041b      	lsls	r3, r3, #16
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	491b      	ldr	r1, [pc, #108]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <HAL_RCC_OscConfig+0x478>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fe f901 	bl	8001128 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fe f8fd 	bl	8001128 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e05c      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3c:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x416>
 8002f48:	e054      	b.n	8002ff4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <HAL_RCC_OscConfig+0x478>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe f8ea 	bl	8001128 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe f8e6 	bl	8001128 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e045      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6a:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x444>
 8002f76:	e03d      	b.n	8002ff4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e038      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40007000 	.word	0x40007000
 8002f8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f90:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <HAL_RCC_OscConfig+0x4ec>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d028      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d121      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d11a      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d111      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800

08003004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0cc      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003018:	4b68      	ldr	r3, [pc, #416]	@ (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d90c      	bls.n	8003040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b65      	ldr	r3, [pc, #404]	@ (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b63      	ldr	r3, [pc, #396]	@ (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0b8      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d020      	beq.n	800308e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003058:	4b59      	ldr	r3, [pc, #356]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a58      	ldr	r2, [pc, #352]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003062:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003070:	4b53      	ldr	r3, [pc, #332]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a52      	ldr	r2, [pc, #328]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800307a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307c:	4b50      	ldr	r3, [pc, #320]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	494d      	ldr	r1, [pc, #308]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d044      	beq.n	8003124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4b47      	ldr	r3, [pc, #284]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d119      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e07f      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c2:	4b3f      	ldr	r3, [pc, #252]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e06f      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d2:	4b3b      	ldr	r3, [pc, #236]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e067      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e2:	4b37      	ldr	r3, [pc, #220]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f023 0203 	bic.w	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4934      	ldr	r1, [pc, #208]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f4:	f7fe f818 	bl	8001128 <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030fc:	f7fe f814 	bl	8001128 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e04f      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003112:	4b2b      	ldr	r3, [pc, #172]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 020c 	and.w	r2, r3, #12
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	429a      	cmp	r2, r3
 8003122:	d1eb      	bne.n	80030fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003124:	4b25      	ldr	r3, [pc, #148]	@ (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d20c      	bcs.n	800314c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b22      	ldr	r3, [pc, #136]	@ (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b20      	ldr	r3, [pc, #128]	@ (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e032      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003158:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4916      	ldr	r1, [pc, #88]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003176:	4b12      	ldr	r3, [pc, #72]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	490e      	ldr	r1, [pc, #56]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800318a:	f000 f821 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 800318e:	4602      	mov	r2, r0
 8003190:	4b0b      	ldr	r3, [pc, #44]	@ (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	490a      	ldr	r1, [pc, #40]	@ (80031c4 <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	5ccb      	ldrb	r3, [r1, r3]
 800319e:	fa22 f303 	lsr.w	r3, r2, r3
 80031a2:	4a09      	ldr	r2, [pc, #36]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031a6:	4b09      	ldr	r3, [pc, #36]	@ (80031cc <HAL_RCC_ClockConfig+0x1c8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd ff78 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023c00 	.word	0x40023c00
 80031c0:	40023800 	.word	0x40023800
 80031c4:	080044ec 	.word	0x080044ec
 80031c8:	20000000 	.word	0x20000000
 80031cc:	20000004 	.word	0x20000004

080031d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d4:	b094      	sub	sp, #80	@ 0x50
 80031d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e8:	4b79      	ldr	r3, [pc, #484]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d00d      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0x40>
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	f200 80e1 	bhi.w	80033bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x34>
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d003      	beq.n	800320a <HAL_RCC_GetSysClockFreq+0x3a>
 8003202:	e0db      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003204:	4b73      	ldr	r3, [pc, #460]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003206:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003208:	e0db      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800320a:	4b73      	ldr	r3, [pc, #460]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800320c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800320e:	e0d8      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003210:	4b6f      	ldr	r3, [pc, #444]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003218:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800321a:	4b6d      	ldr	r3, [pc, #436]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d063      	beq.n	80032ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003226:	4b6a      	ldr	r3, [pc, #424]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	099b      	lsrs	r3, r3, #6
 800322c:	2200      	movs	r2, #0
 800322e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003230:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003238:	633b      	str	r3, [r7, #48]	@ 0x30
 800323a:	2300      	movs	r3, #0
 800323c:	637b      	str	r3, [r7, #52]	@ 0x34
 800323e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003242:	4622      	mov	r2, r4
 8003244:	462b      	mov	r3, r5
 8003246:	f04f 0000 	mov.w	r0, #0
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	0159      	lsls	r1, r3, #5
 8003250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003254:	0150      	lsls	r0, r2, #5
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4621      	mov	r1, r4
 800325c:	1a51      	subs	r1, r2, r1
 800325e:	6139      	str	r1, [r7, #16]
 8003260:	4629      	mov	r1, r5
 8003262:	eb63 0301 	sbc.w	r3, r3, r1
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003274:	4659      	mov	r1, fp
 8003276:	018b      	lsls	r3, r1, #6
 8003278:	4651      	mov	r1, sl
 800327a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800327e:	4651      	mov	r1, sl
 8003280:	018a      	lsls	r2, r1, #6
 8003282:	4651      	mov	r1, sl
 8003284:	ebb2 0801 	subs.w	r8, r2, r1
 8003288:	4659      	mov	r1, fp
 800328a:	eb63 0901 	sbc.w	r9, r3, r1
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800329a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800329e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032a2:	4690      	mov	r8, r2
 80032a4:	4699      	mov	r9, r3
 80032a6:	4623      	mov	r3, r4
 80032a8:	eb18 0303 	adds.w	r3, r8, r3
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	462b      	mov	r3, r5
 80032b0:	eb49 0303 	adc.w	r3, r9, r3
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032c2:	4629      	mov	r1, r5
 80032c4:	024b      	lsls	r3, r1, #9
 80032c6:	4621      	mov	r1, r4
 80032c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032cc:	4621      	mov	r1, r4
 80032ce:	024a      	lsls	r2, r1, #9
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d6:	2200      	movs	r2, #0
 80032d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032e0:	f7fc ff78 	bl	80001d4 <__aeabi_uldivmod>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4613      	mov	r3, r2
 80032ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ec:	e058      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ee:	4b38      	ldr	r3, [pc, #224]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	099b      	lsrs	r3, r3, #6
 80032f4:	2200      	movs	r2, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	4611      	mov	r1, r2
 80032fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032fe:	623b      	str	r3, [r7, #32]
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
 8003304:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003308:	4642      	mov	r2, r8
 800330a:	464b      	mov	r3, r9
 800330c:	f04f 0000 	mov.w	r0, #0
 8003310:	f04f 0100 	mov.w	r1, #0
 8003314:	0159      	lsls	r1, r3, #5
 8003316:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800331a:	0150      	lsls	r0, r2, #5
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4641      	mov	r1, r8
 8003322:	ebb2 0a01 	subs.w	sl, r2, r1
 8003326:	4649      	mov	r1, r9
 8003328:	eb63 0b01 	sbc.w	fp, r3, r1
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003338:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800333c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003340:	ebb2 040a 	subs.w	r4, r2, sl
 8003344:	eb63 050b 	sbc.w	r5, r3, fp
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	00eb      	lsls	r3, r5, #3
 8003352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003356:	00e2      	lsls	r2, r4, #3
 8003358:	4614      	mov	r4, r2
 800335a:	461d      	mov	r5, r3
 800335c:	4643      	mov	r3, r8
 800335e:	18e3      	adds	r3, r4, r3
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	464b      	mov	r3, r9
 8003364:	eb45 0303 	adc.w	r3, r5, r3
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003376:	4629      	mov	r1, r5
 8003378:	028b      	lsls	r3, r1, #10
 800337a:	4621      	mov	r1, r4
 800337c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003380:	4621      	mov	r1, r4
 8003382:	028a      	lsls	r2, r1, #10
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800338a:	2200      	movs	r2, #0
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	61fa      	str	r2, [r7, #28]
 8003390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003394:	f7fc ff1e 	bl	80001d4 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033a0:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	3301      	adds	r3, #1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033ba:	e002      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033bc:	4b05      	ldr	r3, [pc, #20]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3750      	adds	r7, #80	@ 0x50
 80033c8:	46bd      	mov	sp, r7
 80033ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	00f42400 	.word	0x00f42400
 80033d8:	007a1200 	.word	0x007a1200

080033dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e0:	4b03      	ldr	r3, [pc, #12]	@ (80033f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000000 	.word	0x20000000

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f8:	f7ff fff0 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0a9b      	lsrs	r3, r3, #10
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4903      	ldr	r1, [pc, #12]	@ (8003418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	080044fc 	.word	0x080044fc

0800341c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003420:	f7ff ffdc 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b05      	ldr	r3, [pc, #20]	@ (800343c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0b5b      	lsrs	r3, r3, #13
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4903      	ldr	r1, [pc, #12]	@ (8003440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	080044fc 	.word	0x080044fc

08003444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e042      	b.n	80034dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd fd28 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	@ 0x24
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fd69 	bl	8003f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800349c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	@ 0x28
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	4613      	mov	r3, r2
 80034f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b20      	cmp	r3, #32
 8003502:	d175      	bne.n	80035f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_UART_Transmit+0x2c>
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e06e      	b.n	80035f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2221      	movs	r2, #33	@ 0x21
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003522:	f7fd fe01 	bl	8001128 <HAL_GetTick>
 8003526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	88fa      	ldrh	r2, [r7, #6]
 800352c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	88fa      	ldrh	r2, [r7, #6]
 8003532:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800353c:	d108      	bne.n	8003550 <HAL_UART_Transmit+0x6c>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	e003      	b.n	8003558 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003558:	e02e      	b.n	80035b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2200      	movs	r2, #0
 8003562:	2180      	movs	r1, #128	@ 0x80
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fb05 	bl	8003b74 <UART_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e03a      	b.n	80035f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003590:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	3302      	adds	r3, #2
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	e007      	b.n	80035aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	3301      	adds	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1cb      	bne.n	800355a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2200      	movs	r2, #0
 80035ca:	2140      	movs	r1, #64	@ 0x40
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fad1 	bl	8003b74 <UART_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e006      	b.n	80035f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e000      	b.n	80035f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
  }
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3720      	adds	r7, #32
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b0ba      	sub	sp, #232	@ 0xe8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003622:	2300      	movs	r3, #0
 8003624:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003628:	2300      	movs	r3, #0
 800362a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800362e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800363a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <HAL_UART_IRQHandler+0x66>
 800364e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fbc2 	bl	8003de4 <UART_Receive_IT>
      return;
 8003660:	e25b      	b.n	8003b1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80de 	beq.w	8003828 <HAL_UART_IRQHandler+0x22c>
 800366c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d106      	bne.n	8003686 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80d1 	beq.w	8003828 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_UART_IRQHandler+0xae>
 8003692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <HAL_UART_IRQHandler+0xd2>
 80036b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	f043 0202 	orr.w	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <HAL_UART_IRQHandler+0xf6>
 80036da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	f043 0204 	orr.w	r2, r3, #4
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d011      	beq.n	8003722 <HAL_UART_IRQHandler+0x126>
 80036fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800370a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	f043 0208 	orr.w	r2, r3, #8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 81f2 	beq.w	8003b10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800372c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_UART_IRQHandler+0x14e>
 8003738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fb4d 	bl	8003de4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003754:	2b40      	cmp	r3, #64	@ 0x40
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <HAL_UART_IRQHandler+0x17a>
 800376e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d04f      	beq.n	8003816 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fa55 	bl	8003c26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003786:	2b40      	cmp	r3, #64	@ 0x40
 8003788:	d141      	bne.n	800380e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3314      	adds	r3, #20
 8003790:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3314      	adds	r3, #20
 80037b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1d9      	bne.n	800378a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d013      	beq.n	8003806 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	4a7e      	ldr	r2, [pc, #504]	@ (80039dc <HAL_UART_IRQHandler+0x3e0>)
 80037e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe f9fb 	bl	8001be6 <HAL_DMA_Abort_IT>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003800:	4610      	mov	r0, r2
 8003802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	e00e      	b.n	8003824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f99e 	bl	8003b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	e00a      	b.n	8003824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f99a 	bl	8003b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	e006      	b.n	8003824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f996 	bl	8003b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003822:	e175      	b.n	8003b10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003824:	bf00      	nop
    return;
 8003826:	e173      	b.n	8003b10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382c:	2b01      	cmp	r3, #1
 800382e:	f040 814f 	bne.w	8003ad0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8148 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8141 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386e:	2b40      	cmp	r3, #64	@ 0x40
 8003870:	f040 80b6 	bne.w	80039e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003880:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8145 	beq.w	8003b14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800388e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003892:	429a      	cmp	r2, r3
 8003894:	f080 813e 	bcs.w	8003b14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800389e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038aa:	f000 8088 	beq.w	80039be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1d9      	bne.n	80038ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3314      	adds	r3, #20
 8003900:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800390a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3314      	adds	r3, #20
 800391a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800391e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003922:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003926:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003930:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e1      	bne.n	80038fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3314      	adds	r3, #20
 800393c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800394c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3314      	adds	r3, #20
 8003956:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800395a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800395c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003960:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003968:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e3      	bne.n	8003936 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800398c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800398e:	f023 0310 	bic.w	r3, r3, #16
 8003992:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e3      	bne.n	800397c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe f8a4 	bl	8001b06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f8c1 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039da:	e09b      	b.n	8003b14 <HAL_UART_IRQHandler+0x518>
 80039dc:	08003ced 	.word	0x08003ced
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 808e 	beq.w	8003b18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 8089 	beq.w	8003b18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	330c      	adds	r3, #12
 8003a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	330c      	adds	r3, #12
 8003a26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e3      	bne.n	8003a06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3314      	adds	r3, #20
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3314      	adds	r3, #20
 8003a5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a62:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e3      	bne.n	8003a3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0310 	bic.w	r3, r3, #16
 8003a9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003aa8:	61fa      	str	r2, [r7, #28]
 8003aaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	69b9      	ldr	r1, [r7, #24]
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e3      	bne.n	8003a84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ac2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f847 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ace:	e023      	b.n	8003b18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <HAL_UART_IRQHandler+0x4f4>
 8003adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f913 	bl	8003d14 <UART_Transmit_IT>
    return;
 8003aee:	e014      	b.n	8003b1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00e      	beq.n	8003b1a <HAL_UART_IRQHandler+0x51e>
 8003afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f953 	bl	8003db4 <UART_EndTransmit_IT>
    return;
 8003b0e:	e004      	b.n	8003b1a <HAL_UART_IRQHandler+0x51e>
    return;
 8003b10:	bf00      	nop
 8003b12:	e002      	b.n	8003b1a <HAL_UART_IRQHandler+0x51e>
      return;
 8003b14:	bf00      	nop
 8003b16:	e000      	b.n	8003b1a <HAL_UART_IRQHandler+0x51e>
      return;
 8003b18:	bf00      	nop
  }
}
 8003b1a:	37e8      	adds	r7, #232	@ 0xe8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b84:	e03b      	b.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d037      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fd facb 	bl	8001128 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	6a3a      	ldr	r2, [r7, #32]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e03a      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d023      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b80      	cmp	r3, #128	@ 0x80
 8003bba:	d020      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b40      	cmp	r3, #64	@ 0x40
 8003bc0:	d01d      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d116      	bne.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f81d 	bl	8003c26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2208      	movs	r2, #8
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00f      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4013      	ands	r3, r2
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d0b4      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b095      	sub	sp, #84	@ 0x54
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	330c      	adds	r3, #12
 8003c34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e5      	bne.n	8003c2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3314      	adds	r3, #20
 8003c68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e5      	bne.n	8003c62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d119      	bne.n	8003cd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f023 0310 	bic.w	r3, r3, #16
 8003cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cbe:	61ba      	str	r2, [r7, #24]
 8003cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6979      	ldr	r1, [r7, #20]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	613b      	str	r3, [r7, #16]
   return(result);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e5      	bne.n	8003c9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ce0:	bf00      	nop
 8003ce2:	3754      	adds	r7, #84	@ 0x54
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f7ff ff1e 	bl	8003b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b21      	cmp	r3, #33	@ 0x21
 8003d26:	d13e      	bne.n	8003da6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d30:	d114      	bne.n	8003d5c <UART_Transmit_IT+0x48>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d110      	bne.n	8003d5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	1c9a      	adds	r2, r3, #2
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	621a      	str	r2, [r3, #32]
 8003d5a:	e008      	b.n	8003d6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	1c59      	adds	r1, r3, #1
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6211      	str	r1, [r2, #32]
 8003d66:	781a      	ldrb	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003da0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e000      	b.n	8003da8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff fea3 	bl	8003b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	@ 0x30
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b22      	cmp	r3, #34	@ 0x22
 8003df6:	f040 80ae 	bne.w	8003f56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e02:	d117      	bne.n	8003e34 <UART_Receive_IT+0x50>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d113      	bne.n	8003e34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e32:	e026      	b.n	8003e82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e46:	d007      	beq.n	8003e58 <UART_Receive_IT+0x74>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10a      	bne.n	8003e66 <UART_Receive_IT+0x82>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d106      	bne.n	8003e66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e62:	701a      	strb	r2, [r3, #0]
 8003e64:	e008      	b.n	8003e78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d15d      	bne.n	8003f52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0220 	bic.w	r2, r2, #32
 8003ea4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d135      	bne.n	8003f48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f023 0310 	bic.w	r3, r3, #16
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	330c      	adds	r3, #12
 8003f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f02:	623a      	str	r2, [r7, #32]
 8003f04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	69f9      	ldr	r1, [r7, #28]
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e5      	bne.n	8003ee2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b10      	cmp	r3, #16
 8003f22:	d10a      	bne.n	8003f3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff fe0b 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
 8003f46:	e002      	b.n	8003f4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff fdf3 	bl	8003b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e002      	b.n	8003f58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f56:	2302      	movs	r3, #2
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3730      	adds	r7, #48	@ 0x30
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f64:	b0c0      	sub	sp, #256	@ 0x100
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7c:	68d9      	ldr	r1, [r3, #12]
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	ea40 0301 	orr.w	r3, r0, r1
 8003f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fb8:	f021 010c 	bic.w	r1, r1, #12
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fda:	6999      	ldr	r1, [r3, #24]
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	ea40 0301 	orr.w	r3, r0, r1
 8003fe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b8f      	ldr	r3, [pc, #572]	@ (800422c <UART_SetConfig+0x2cc>)
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d005      	beq.n	8004000 <UART_SetConfig+0xa0>
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b8d      	ldr	r3, [pc, #564]	@ (8004230 <UART_SetConfig+0x2d0>)
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d104      	bne.n	800400a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004000:	f7ff fa0c 	bl	800341c <HAL_RCC_GetPCLK2Freq>
 8004004:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004008:	e003      	b.n	8004012 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800400a:	f7ff f9f3 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 800400e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800401c:	f040 810c 	bne.w	8004238 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004024:	2200      	movs	r2, #0
 8004026:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800402a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800402e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004032:	4622      	mov	r2, r4
 8004034:	462b      	mov	r3, r5
 8004036:	1891      	adds	r1, r2, r2
 8004038:	65b9      	str	r1, [r7, #88]	@ 0x58
 800403a:	415b      	adcs	r3, r3
 800403c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800403e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004042:	4621      	mov	r1, r4
 8004044:	eb12 0801 	adds.w	r8, r2, r1
 8004048:	4629      	mov	r1, r5
 800404a:	eb43 0901 	adc.w	r9, r3, r1
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800405a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800405e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004062:	4690      	mov	r8, r2
 8004064:	4699      	mov	r9, r3
 8004066:	4623      	mov	r3, r4
 8004068:	eb18 0303 	adds.w	r3, r8, r3
 800406c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004070:	462b      	mov	r3, r5
 8004072:	eb49 0303 	adc.w	r3, r9, r3
 8004076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800407a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004086:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800408a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800408e:	460b      	mov	r3, r1
 8004090:	18db      	adds	r3, r3, r3
 8004092:	653b      	str	r3, [r7, #80]	@ 0x50
 8004094:	4613      	mov	r3, r2
 8004096:	eb42 0303 	adc.w	r3, r2, r3
 800409a:	657b      	str	r3, [r7, #84]	@ 0x54
 800409c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040a4:	f7fc f896 	bl	80001d4 <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4b61      	ldr	r3, [pc, #388]	@ (8004234 <UART_SetConfig+0x2d4>)
 80040ae:	fba3 2302 	umull	r2, r3, r3, r2
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	011c      	lsls	r4, r3, #4
 80040b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040c8:	4642      	mov	r2, r8
 80040ca:	464b      	mov	r3, r9
 80040cc:	1891      	adds	r1, r2, r2
 80040ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040d0:	415b      	adcs	r3, r3
 80040d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040d8:	4641      	mov	r1, r8
 80040da:	eb12 0a01 	adds.w	sl, r2, r1
 80040de:	4649      	mov	r1, r9
 80040e0:	eb43 0b01 	adc.w	fp, r3, r1
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040f8:	4692      	mov	sl, r2
 80040fa:	469b      	mov	fp, r3
 80040fc:	4643      	mov	r3, r8
 80040fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004102:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004106:	464b      	mov	r3, r9
 8004108:	eb4b 0303 	adc.w	r3, fp, r3
 800410c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800411c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004124:	460b      	mov	r3, r1
 8004126:	18db      	adds	r3, r3, r3
 8004128:	643b      	str	r3, [r7, #64]	@ 0x40
 800412a:	4613      	mov	r3, r2
 800412c:	eb42 0303 	adc.w	r3, r2, r3
 8004130:	647b      	str	r3, [r7, #68]	@ 0x44
 8004132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800413a:	f7fc f84b 	bl	80001d4 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4611      	mov	r1, r2
 8004144:	4b3b      	ldr	r3, [pc, #236]	@ (8004234 <UART_SetConfig+0x2d4>)
 8004146:	fba3 2301 	umull	r2, r3, r3, r1
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2264      	movs	r2, #100	@ 0x64
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	1acb      	subs	r3, r1, r3
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800415a:	4b36      	ldr	r3, [pc, #216]	@ (8004234 <UART_SetConfig+0x2d4>)
 800415c:	fba3 2302 	umull	r2, r3, r3, r2
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004168:	441c      	add	r4, r3
 800416a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416e:	2200      	movs	r2, #0
 8004170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004174:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800417c:	4642      	mov	r2, r8
 800417e:	464b      	mov	r3, r9
 8004180:	1891      	adds	r1, r2, r2
 8004182:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004184:	415b      	adcs	r3, r3
 8004186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800418c:	4641      	mov	r1, r8
 800418e:	1851      	adds	r1, r2, r1
 8004190:	6339      	str	r1, [r7, #48]	@ 0x30
 8004192:	4649      	mov	r1, r9
 8004194:	414b      	adcs	r3, r1
 8004196:	637b      	str	r3, [r7, #52]	@ 0x34
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041a4:	4659      	mov	r1, fp
 80041a6:	00cb      	lsls	r3, r1, #3
 80041a8:	4651      	mov	r1, sl
 80041aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ae:	4651      	mov	r1, sl
 80041b0:	00ca      	lsls	r2, r1, #3
 80041b2:	4610      	mov	r0, r2
 80041b4:	4619      	mov	r1, r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	4642      	mov	r2, r8
 80041ba:	189b      	adds	r3, r3, r2
 80041bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041c0:	464b      	mov	r3, r9
 80041c2:	460a      	mov	r2, r1
 80041c4:	eb42 0303 	adc.w	r3, r2, r3
 80041c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041e0:	460b      	mov	r3, r1
 80041e2:	18db      	adds	r3, r3, r3
 80041e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041e6:	4613      	mov	r3, r2
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041f6:	f7fb ffed 	bl	80001d4 <__aeabi_uldivmod>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004234 <UART_SetConfig+0x2d4>)
 8004200:	fba3 1302 	umull	r1, r3, r3, r2
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	2164      	movs	r1, #100	@ 0x64
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	3332      	adds	r3, #50	@ 0x32
 8004212:	4a08      	ldr	r2, [pc, #32]	@ (8004234 <UART_SetConfig+0x2d4>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	f003 0207 	and.w	r2, r3, #7
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4422      	add	r2, r4
 8004226:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004228:	e106      	b.n	8004438 <UART_SetConfig+0x4d8>
 800422a:	bf00      	nop
 800422c:	40011000 	.word	0x40011000
 8004230:	40011400 	.word	0x40011400
 8004234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800423c:	2200      	movs	r2, #0
 800423e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004242:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800424a:	4642      	mov	r2, r8
 800424c:	464b      	mov	r3, r9
 800424e:	1891      	adds	r1, r2, r2
 8004250:	6239      	str	r1, [r7, #32]
 8004252:	415b      	adcs	r3, r3
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
 8004256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800425a:	4641      	mov	r1, r8
 800425c:	1854      	adds	r4, r2, r1
 800425e:	4649      	mov	r1, r9
 8004260:	eb43 0501 	adc.w	r5, r3, r1
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	00eb      	lsls	r3, r5, #3
 800426e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004272:	00e2      	lsls	r2, r4, #3
 8004274:	4614      	mov	r4, r2
 8004276:	461d      	mov	r5, r3
 8004278:	4643      	mov	r3, r8
 800427a:	18e3      	adds	r3, r4, r3
 800427c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004280:	464b      	mov	r3, r9
 8004282:	eb45 0303 	adc.w	r3, r5, r3
 8004286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004296:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042a6:	4629      	mov	r1, r5
 80042a8:	008b      	lsls	r3, r1, #2
 80042aa:	4621      	mov	r1, r4
 80042ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b0:	4621      	mov	r1, r4
 80042b2:	008a      	lsls	r2, r1, #2
 80042b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042b8:	f7fb ff8c 	bl	80001d4 <__aeabi_uldivmod>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4b60      	ldr	r3, [pc, #384]	@ (8004444 <UART_SetConfig+0x4e4>)
 80042c2:	fba3 2302 	umull	r2, r3, r3, r2
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	011c      	lsls	r4, r3, #4
 80042ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042dc:	4642      	mov	r2, r8
 80042de:	464b      	mov	r3, r9
 80042e0:	1891      	adds	r1, r2, r2
 80042e2:	61b9      	str	r1, [r7, #24]
 80042e4:	415b      	adcs	r3, r3
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ec:	4641      	mov	r1, r8
 80042ee:	1851      	adds	r1, r2, r1
 80042f0:	6139      	str	r1, [r7, #16]
 80042f2:	4649      	mov	r1, r9
 80042f4:	414b      	adcs	r3, r1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004304:	4659      	mov	r1, fp
 8004306:	00cb      	lsls	r3, r1, #3
 8004308:	4651      	mov	r1, sl
 800430a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800430e:	4651      	mov	r1, sl
 8004310:	00ca      	lsls	r2, r1, #3
 8004312:	4610      	mov	r0, r2
 8004314:	4619      	mov	r1, r3
 8004316:	4603      	mov	r3, r0
 8004318:	4642      	mov	r2, r8
 800431a:	189b      	adds	r3, r3, r2
 800431c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004320:	464b      	mov	r3, r9
 8004322:	460a      	mov	r2, r1
 8004324:	eb42 0303 	adc.w	r3, r2, r3
 8004328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004336:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004344:	4649      	mov	r1, r9
 8004346:	008b      	lsls	r3, r1, #2
 8004348:	4641      	mov	r1, r8
 800434a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800434e:	4641      	mov	r1, r8
 8004350:	008a      	lsls	r2, r1, #2
 8004352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004356:	f7fb ff3d 	bl	80001d4 <__aeabi_uldivmod>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4611      	mov	r1, r2
 8004360:	4b38      	ldr	r3, [pc, #224]	@ (8004444 <UART_SetConfig+0x4e4>)
 8004362:	fba3 2301 	umull	r2, r3, r3, r1
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	2264      	movs	r2, #100	@ 0x64
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	1acb      	subs	r3, r1, r3
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	3332      	adds	r3, #50	@ 0x32
 8004374:	4a33      	ldr	r2, [pc, #204]	@ (8004444 <UART_SetConfig+0x4e4>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004380:	441c      	add	r4, r3
 8004382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004386:	2200      	movs	r2, #0
 8004388:	673b      	str	r3, [r7, #112]	@ 0x70
 800438a:	677a      	str	r2, [r7, #116]	@ 0x74
 800438c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004390:	4642      	mov	r2, r8
 8004392:	464b      	mov	r3, r9
 8004394:	1891      	adds	r1, r2, r2
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	415b      	adcs	r3, r3
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043a0:	4641      	mov	r1, r8
 80043a2:	1851      	adds	r1, r2, r1
 80043a4:	6039      	str	r1, [r7, #0]
 80043a6:	4649      	mov	r1, r9
 80043a8:	414b      	adcs	r3, r1
 80043aa:	607b      	str	r3, [r7, #4]
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043b8:	4659      	mov	r1, fp
 80043ba:	00cb      	lsls	r3, r1, #3
 80043bc:	4651      	mov	r1, sl
 80043be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c2:	4651      	mov	r1, sl
 80043c4:	00ca      	lsls	r2, r1, #3
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	4642      	mov	r2, r8
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043d2:	464b      	mov	r3, r9
 80043d4:	460a      	mov	r2, r1
 80043d6:	eb42 0303 	adc.w	r3, r2, r3
 80043da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80043e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043f4:	4649      	mov	r1, r9
 80043f6:	008b      	lsls	r3, r1, #2
 80043f8:	4641      	mov	r1, r8
 80043fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043fe:	4641      	mov	r1, r8
 8004400:	008a      	lsls	r2, r1, #2
 8004402:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004406:	f7fb fee5 	bl	80001d4 <__aeabi_uldivmod>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4b0d      	ldr	r3, [pc, #52]	@ (8004444 <UART_SetConfig+0x4e4>)
 8004410:	fba3 1302 	umull	r1, r3, r3, r2
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	2164      	movs	r1, #100	@ 0x64
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	3332      	adds	r3, #50	@ 0x32
 8004422:	4a08      	ldr	r2, [pc, #32]	@ (8004444 <UART_SetConfig+0x4e4>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	f003 020f 	and.w	r2, r3, #15
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4422      	add	r2, r4
 8004436:	609a      	str	r2, [r3, #8]
}
 8004438:	bf00      	nop
 800443a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800443e:	46bd      	mov	sp, r7
 8004440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004444:	51eb851f 	.word	0x51eb851f

08004448 <memmove>:
 8004448:	4288      	cmp	r0, r1
 800444a:	b510      	push	{r4, lr}
 800444c:	eb01 0402 	add.w	r4, r1, r2
 8004450:	d902      	bls.n	8004458 <memmove+0x10>
 8004452:	4284      	cmp	r4, r0
 8004454:	4623      	mov	r3, r4
 8004456:	d807      	bhi.n	8004468 <memmove+0x20>
 8004458:	1e43      	subs	r3, r0, #1
 800445a:	42a1      	cmp	r1, r4
 800445c:	d008      	beq.n	8004470 <memmove+0x28>
 800445e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004462:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004466:	e7f8      	b.n	800445a <memmove+0x12>
 8004468:	4402      	add	r2, r0
 800446a:	4601      	mov	r1, r0
 800446c:	428a      	cmp	r2, r1
 800446e:	d100      	bne.n	8004472 <memmove+0x2a>
 8004470:	bd10      	pop	{r4, pc}
 8004472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800447a:	e7f7      	b.n	800446c <memmove+0x24>

0800447c <memset>:
 800447c:	4402      	add	r2, r0
 800447e:	4603      	mov	r3, r0
 8004480:	4293      	cmp	r3, r2
 8004482:	d100      	bne.n	8004486 <memset+0xa>
 8004484:	4770      	bx	lr
 8004486:	f803 1b01 	strb.w	r1, [r3], #1
 800448a:	e7f9      	b.n	8004480 <memset+0x4>

0800448c <__libc_init_array>:
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	4d0d      	ldr	r5, [pc, #52]	@ (80044c4 <__libc_init_array+0x38>)
 8004490:	4c0d      	ldr	r4, [pc, #52]	@ (80044c8 <__libc_init_array+0x3c>)
 8004492:	1b64      	subs	r4, r4, r5
 8004494:	10a4      	asrs	r4, r4, #2
 8004496:	2600      	movs	r6, #0
 8004498:	42a6      	cmp	r6, r4
 800449a:	d109      	bne.n	80044b0 <__libc_init_array+0x24>
 800449c:	4d0b      	ldr	r5, [pc, #44]	@ (80044cc <__libc_init_array+0x40>)
 800449e:	4c0c      	ldr	r4, [pc, #48]	@ (80044d0 <__libc_init_array+0x44>)
 80044a0:	f000 f818 	bl	80044d4 <_init>
 80044a4:	1b64      	subs	r4, r4, r5
 80044a6:	10a4      	asrs	r4, r4, #2
 80044a8:	2600      	movs	r6, #0
 80044aa:	42a6      	cmp	r6, r4
 80044ac:	d105      	bne.n	80044ba <__libc_init_array+0x2e>
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
 80044b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b4:	4798      	blx	r3
 80044b6:	3601      	adds	r6, #1
 80044b8:	e7ee      	b.n	8004498 <__libc_init_array+0xc>
 80044ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80044be:	4798      	blx	r3
 80044c0:	3601      	adds	r6, #1
 80044c2:	e7f2      	b.n	80044aa <__libc_init_array+0x1e>
 80044c4:	0800450c 	.word	0x0800450c
 80044c8:	0800450c 	.word	0x0800450c
 80044cc:	0800450c 	.word	0x0800450c
 80044d0:	08004510 	.word	0x08004510

080044d4 <_init>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr

080044e0 <_fini>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr
