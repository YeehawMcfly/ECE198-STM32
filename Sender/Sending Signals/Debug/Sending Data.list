
Sending Data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000443c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080045d0  080045d0  000055d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f8  080045f8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080045f8  080045f8  000055f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004600  08004600  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004600  08004600  00005600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004604  08004604  00005604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004608  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  2000000c  08004614  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08004614  00006530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d20a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee0  00000000  00000000  00013246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00015128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091d  00000000  00000000  00015cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b521  00000000  00000000  000165dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003693  00000000  00000000  00021afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00025191  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000030c4  00000000  00000000  000251d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006a  00000000  00000000  00028298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080045b8 	.word	0x080045b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080045b8 	.word	0x080045b8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
uint16_t adcValue = 0;
uint8_t yPos = 0;
uint8_t prevYPos = 0;

int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    /* Initialization code */
    HAL_Init();
 80004c8:	f000 fe32 	bl	8001130 <HAL_Init>
    SystemClock_Config();
 80004cc:	f000 f8de 	bl	800068c <SystemClock_Config>
    MX_GPIO_Init();
 80004d0:	f000 f9f0 	bl	80008b4 <MX_GPIO_Init>
    MX_I2C1_Init();
 80004d4:	f000 f996 	bl	8000804 <MX_I2C1_Init>
    MX_ADC1_Init();
 80004d8:	f000 f942 	bl	8000760 <MX_ADC1_Init>
    MX_USART1_UART_Init();
 80004dc:	f000 f9c0 	bl	8000860 <MX_USART1_UART_Init>

    SSD1306_Init();
 80004e0:	f000 fa50 	bl	8000984 <SSD1306_Init>

    /* Initial ADC read to initialize prevYPos */
    HAL_ADC_Start(&hadc1);
 80004e4:	4836      	ldr	r0, [pc, #216]	@ (80005c0 <main+0xfc>)
 80004e6:	f000 fefd 	bl	80012e4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004ea:	f04f 31ff 	mov.w	r1, #4294967295
 80004ee:	4834      	ldr	r0, [pc, #208]	@ (80005c0 <main+0xfc>)
 80004f0:	f000 ffac 	bl	800144c <HAL_ADC_PollForConversion>
    adcValue = HAL_ADC_GetValue(&hadc1);
 80004f4:	4832      	ldr	r0, [pc, #200]	@ (80005c0 <main+0xfc>)
 80004f6:	f001 f834 	bl	8001562 <HAL_ADC_GetValue>
 80004fa:	4603      	mov	r3, r0
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	4b31      	ldr	r3, [pc, #196]	@ (80005c4 <main+0x100>)
 8000500:	801a      	strh	r2, [r3, #0]
    yPos = SSD1306_HEIGHT - 1 - ((adcValue * (SSD1306_HEIGHT - 1)) / 4095);
 8000502:	4b30      	ldr	r3, [pc, #192]	@ (80005c4 <main+0x100>)
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	4a30      	ldr	r2, [pc, #192]	@ (80005c8 <main+0x104>)
 8000508:	fb82 1203 	smull	r1, r2, r2, r3
 800050c:	1152      	asrs	r2, r2, #5
 800050e:	17db      	asrs	r3, r3, #31
 8000510:	1a9b      	subs	r3, r3, r2
 8000512:	b2db      	uxtb	r3, r3
 8000514:	333f      	adds	r3, #63	@ 0x3f
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b2c      	ldr	r3, [pc, #176]	@ (80005cc <main+0x108>)
 800051a:	701a      	strb	r2, [r3, #0]
    prevYPos = yPos;
 800051c:	4b2b      	ldr	r3, [pc, #172]	@ (80005cc <main+0x108>)
 800051e:	781a      	ldrb	r2, [r3, #0]
 8000520:	4b2b      	ldr	r3, [pc, #172]	@ (80005d0 <main+0x10c>)
 8000522:	701a      	strb	r2, [r3, #0]

    while (1)
    {
        /* Read ADC value */
        HAL_ADC_Start(&hadc1);
 8000524:	4826      	ldr	r0, [pc, #152]	@ (80005c0 <main+0xfc>)
 8000526:	f000 fedd 	bl	80012e4 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800052a:	f04f 31ff 	mov.w	r1, #4294967295
 800052e:	4824      	ldr	r0, [pc, #144]	@ (80005c0 <main+0xfc>)
 8000530:	f000 ff8c 	bl	800144c <HAL_ADC_PollForConversion>
        adcValue = HAL_ADC_GetValue(&hadc1);
 8000534:	4822      	ldr	r0, [pc, #136]	@ (80005c0 <main+0xfc>)
 8000536:	f001 f814 	bl	8001562 <HAL_ADC_GetValue>
 800053a:	4603      	mov	r3, r0
 800053c:	b29a      	uxth	r2, r3
 800053e:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <main+0x100>)
 8000540:	801a      	strh	r2, [r3, #0]

        /* Map ADC value to yPos (0 to SSD1306_HEIGHT - 1) */
        yPos = SSD1306_HEIGHT - 1 - ((adcValue * (SSD1306_HEIGHT - 1)) / 4095);
 8000542:	4b20      	ldr	r3, [pc, #128]	@ (80005c4 <main+0x100>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	4a20      	ldr	r2, [pc, #128]	@ (80005c8 <main+0x104>)
 8000548:	fb82 1203 	smull	r1, r2, r2, r3
 800054c:	1152      	asrs	r2, r2, #5
 800054e:	17db      	asrs	r3, r3, #31
 8000550:	1a9b      	subs	r3, r3, r2
 8000552:	b2db      	uxtb	r3, r3
 8000554:	333f      	adds	r3, #63	@ 0x3f
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b1c      	ldr	r3, [pc, #112]	@ (80005cc <main+0x108>)
 800055a:	701a      	strb	r2, [r3, #0]

        /* Shift display buffer to the left */
        SSD1306_ShiftBufferLeft();
 800055c:	f000 fc16 	bl	8000d8c <SSD1306_ShiftBufferLeft>

        /* Draw vertical line between prevYPos and yPos in rightmost column */
        SSD1306_DrawVerticalLineInRightmostColumn(prevYPos, yPos, SSD1306_COLOR_WHITE);
 8000560:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <main+0x10c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4a19      	ldr	r2, [pc, #100]	@ (80005cc <main+0x108>)
 8000566:	7811      	ldrb	r1, [r2, #0]
 8000568:	2201      	movs	r2, #1
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fc34 	bl	8000dd8 <SSD1306_DrawVerticalLineInRightmostColumn>

        /* Update the display */
        SSD1306_UpdateScreen();
 8000570:	f000 facc 	bl	8000b0c <SSD1306_UpdateScreen>

        /* Update prevYPos */
        prevYPos = yPos;
 8000574:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <main+0x108>)
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <main+0x10c>)
 800057a:	701a      	strb	r2, [r3, #0]

        /* Prepare data for encryption */
        data_buffer[0] = (uint32_t)adcValue;  // ADC value
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <main+0x100>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4b14      	ldr	r3, [pc, #80]	@ (80005d4 <main+0x110>)
 8000584:	601a      	str	r2, [r3, #0]
        data_buffer[1] = counter++;           // Increment counter
 8000586:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <main+0x114>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	1c5a      	adds	r2, r3, #1
 800058c:	4912      	ldr	r1, [pc, #72]	@ (80005d8 <main+0x114>)
 800058e:	600a      	str	r2, [r1, #0]
 8000590:	4a10      	ldr	r2, [pc, #64]	@ (80005d4 <main+0x110>)
 8000592:	6053      	str	r3, [r2, #4]

        /* Encrypt the data */
        encrypt(data_buffer, key);
 8000594:	4911      	ldr	r1, [pc, #68]	@ (80005dc <main+0x118>)
 8000596:	480f      	ldr	r0, [pc, #60]	@ (80005d4 <main+0x110>)
 8000598:	f000 f826 	bl	80005e8 <encrypt>

        /* Copy encrypted data to TxData buffer */
        memcpy(TxData, data_buffer, sizeof(data_buffer));
 800059c:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <main+0x11c>)
 800059e:	4a0d      	ldr	r2, [pc, #52]	@ (80005d4 <main+0x110>)
 80005a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a4:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Send encrypted data over UART */
        HAL_UART_Transmit(&huart1, TxData, sizeof(TxData), 1000);
 80005a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ac:	2208      	movs	r2, #8
 80005ae:	490c      	ldr	r1, [pc, #48]	@ (80005e0 <main+0x11c>)
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <main+0x120>)
 80005b2:	f003 f809 	bl	80035c8 <HAL_UART_Transmit>

        /* Delay */
        HAL_Delay(50);
 80005b6:	2032      	movs	r0, #50	@ 0x32
 80005b8:	f000 fe2c 	bl	8001214 <HAL_Delay>
        HAL_ADC_Start(&hadc1);
 80005bc:	bf00      	nop
 80005be:	e7b1      	b.n	8000524 <main+0x60>
 80005c0:	20000028 	.word	0x20000028
 80005c4:	20000120 	.word	0x20000120
 80005c8:	7e07e07f 	.word	0x7e07e07f
 80005cc:	20000122 	.word	0x20000122
 80005d0:	20000123 	.word	0x20000123
 80005d4:	20000114 	.word	0x20000114
 80005d8:	2000011c 	.word	0x2000011c
 80005dc:	080045d0 	.word	0x080045d0
 80005e0:	2000010c 	.word	0x2000010c
 80005e4:	200000c4 	.word	0x200000c4

080005e8 <encrypt>:
    }
}

/* Encryption function */
void encrypt(uint32_t v[2], const uint32_t k[4]) {
 80005e8:	b480      	push	{r7}
 80005ea:	b089      	sub	sp, #36	@ 0x24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
    uint32_t v0=v[0], v1=v[1], sum=0, i;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	61fb      	str	r3, [r7, #28]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	61bb      	str	r3, [r7, #24]
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
    uint32_t delta=0x9E3779B9;
 8000602:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <encrypt+0xa0>)
 8000604:	60fb      	str	r3, [r7, #12]
    for (i=0; i<32; i++) {
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	e02d      	b.n	8000668 <encrypt+0x80>
        sum += delta;
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4413      	add	r3, r2
 8000612:	617b      	str	r3, [r7, #20]
        v0 += ((v1<<4) + k[0]) ^ (v1 + sum) ^ ((v1>>5) + k[1]);
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	011a      	lsls	r2, r3, #4
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	441a      	add	r2, r3
 800061e:	69b9      	ldr	r1, [r7, #24]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	440b      	add	r3, r1
 8000624:	405a      	eors	r2, r3
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	0959      	lsrs	r1, r3, #5
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	3304      	adds	r3, #4
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	440b      	add	r3, r1
 8000632:	4053      	eors	r3, r2
 8000634:	69fa      	ldr	r2, [r7, #28]
 8000636:	4413      	add	r3, r2
 8000638:	61fb      	str	r3, [r7, #28]
        v1 += ((v0<<4) + k[2]) ^ (v0 + sum) ^ ((v0>>5) + k[3]);
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	011a      	lsls	r2, r3, #4
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	3308      	adds	r3, #8
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	441a      	add	r2, r3
 8000646:	69f9      	ldr	r1, [r7, #28]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	440b      	add	r3, r1
 800064c:	405a      	eors	r2, r3
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	0959      	lsrs	r1, r3, #5
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	330c      	adds	r3, #12
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	4053      	eors	r3, r2
 800065c:	69ba      	ldr	r2, [r7, #24]
 800065e:	4413      	add	r3, r2
 8000660:	61bb      	str	r3, [r7, #24]
    for (i=0; i<32; i++) {
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	3301      	adds	r3, #1
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	2b1f      	cmp	r3, #31
 800066c:	d9ce      	bls.n	800060c <encrypt+0x24>
    }
    v[0]=v0; v[1]=v1;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	69fa      	ldr	r2, [r7, #28]
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3304      	adds	r3, #4
 8000678:	69ba      	ldr	r2, [r7, #24]
 800067a:	601a      	str	r2, [r3, #0]
}
 800067c:	bf00      	nop
 800067e:	3724      	adds	r7, #36	@ 0x24
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	9e3779b9 	.word	0x9e3779b9

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	@ 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	@ 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 ff60 	bl	8004560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	@ (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	@ (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d8:	4a20      	ldr	r2, [pc, #128]	@ (800075c <SystemClock_Config+0xd0>)
 80006da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000704:	2354      	movs	r3, #84	@ 0x54
 8000706:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fa67 	bl	8002be8 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000720:	f000 f92a 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2102      	movs	r1, #2
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fcc9 	bl	80030d8 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800074c:	f000 f914 	bl	8000978 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3750      	adds	r7, #80	@ 0x50
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <MX_ADC1_Init+0x98>)
 8000774:	4a21      	ldr	r2, [pc, #132]	@ (80007fc <MX_ADC1_Init+0x9c>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_ADC1_Init+0x98>)
 800077a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800077e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800078c:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_ADC1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000792:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_ADC1_Init+0x98>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <MX_ADC1_Init+0xa0>)
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_ADC1_Init+0x98>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_ADC1_Init+0x98>)
 80007bc:	2201      	movs	r2, #1
 80007be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <MX_ADC1_Init+0x98>)
 80007c2:	f000 fd4b 	bl	800125c <HAL_ADC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007cc:	f000 f8d4 	bl	8000978 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80007d8:	2301      	movs	r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_ADC1_Init+0x98>)
 80007e2:	f000 fecb 	bl	800157c <HAL_ADC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007ec:	f000 f8c4 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000028 	.word	0x20000028
 80007fc:	40012000 	.word	0x40012000
 8000800:	0f000001 	.word	0x0f000001

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <MX_I2C1_Init+0x50>)
 800080a:	4a13      	ldr	r2, [pc, #76]	@ (8000858 <MX_I2C1_Init+0x54>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_I2C1_Init+0x50>)
 8000810:	4a12      	ldr	r2, [pc, #72]	@ (800085c <MX_I2C1_Init+0x58>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_I2C1_Init+0x50>)
 8000822:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_I2C1_Init+0x50>)
 8000842:	f001 fc05 	bl	8002050 <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800084c:	f000 f894 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000070 	.word	0x20000070
 8000858:	40005400 	.word	0x40005400
 800085c:	00061a80 	.word	0x00061a80

08000860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_USART1_UART_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000898:	f002 fe3e 	bl	8003518 <HAL_HalfDuplex_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008a2:	f000 f869 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000c4 	.word	0x200000c4
 80008b0:	40011000 	.word	0x40011000

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <MX_GPIO_Init+0xbc>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a27      	ldr	r2, [pc, #156]	@ (8000970 <MX_GPIO_Init+0xbc>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <MX_GPIO_Init+0xbc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <MX_GPIO_Init+0xbc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a20      	ldr	r2, [pc, #128]	@ (8000970 <MX_GPIO_Init+0xbc>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <MX_GPIO_Init+0xbc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_GPIO_Init+0xbc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a19      	ldr	r2, [pc, #100]	@ (8000970 <MX_GPIO_Init+0xbc>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_GPIO_Init+0xbc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MX_GPIO_Init+0xbc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <MX_GPIO_Init+0xbc>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <MX_GPIO_Init+0xbc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800093a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000940:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4808      	ldr	r0, [pc, #32]	@ (8000974 <MX_GPIO_Init+0xc0>)
 8000952:	f001 f9d5 	bl	8001d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	2028      	movs	r0, #40	@ 0x28
 800095c:	f001 f907 	bl	8001b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000960:	2028      	movs	r0, #40	@ 0x28
 8000962:	f001 f920 	bl	8001ba6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	@ 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40020800 	.word	0x40020800

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800098a:	f000 f965 	bl	8000c58 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800098e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000992:	2201      	movs	r2, #1
 8000994:	217a      	movs	r1, #122	@ 0x7a
 8000996:	485b      	ldr	r0, [pc, #364]	@ (8000b04 <SSD1306_Init+0x180>)
 8000998:	f001 fd9c 	bl	80024d4 <HAL_I2C_IsDeviceReady>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e0a9      	b.n	8000afa <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80009a6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80009aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009ac:	e002      	b.n	80009b4 <SSD1306_Init+0x30>
		p--;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1f9      	bne.n	80009ae <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80009ba:	22ae      	movs	r2, #174	@ 0xae
 80009bc:	2100      	movs	r1, #0
 80009be:	207a      	movs	r0, #122	@ 0x7a
 80009c0:	f000 f9c6 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80009c4:	2220      	movs	r2, #32
 80009c6:	2100      	movs	r1, #0
 80009c8:	207a      	movs	r0, #122	@ 0x7a
 80009ca:	f000 f9c1 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009ce:	2210      	movs	r2, #16
 80009d0:	2100      	movs	r1, #0
 80009d2:	207a      	movs	r0, #122	@ 0x7a
 80009d4:	f000 f9bc 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80009d8:	22b0      	movs	r2, #176	@ 0xb0
 80009da:	2100      	movs	r1, #0
 80009dc:	207a      	movs	r0, #122	@ 0x7a
 80009de:	f000 f9b7 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80009e2:	22c8      	movs	r2, #200	@ 0xc8
 80009e4:	2100      	movs	r1, #0
 80009e6:	207a      	movs	r0, #122	@ 0x7a
 80009e8:	f000 f9b2 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	207a      	movs	r0, #122	@ 0x7a
 80009f2:	f000 f9ad 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80009f6:	2210      	movs	r2, #16
 80009f8:	2100      	movs	r1, #0
 80009fa:	207a      	movs	r0, #122	@ 0x7a
 80009fc:	f000 f9a8 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a00:	2240      	movs	r2, #64	@ 0x40
 8000a02:	2100      	movs	r1, #0
 8000a04:	207a      	movs	r0, #122	@ 0x7a
 8000a06:	f000 f9a3 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a0a:	2281      	movs	r2, #129	@ 0x81
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	207a      	movs	r0, #122	@ 0x7a
 8000a10:	f000 f99e 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a14:	22ff      	movs	r2, #255	@ 0xff
 8000a16:	2100      	movs	r1, #0
 8000a18:	207a      	movs	r0, #122	@ 0x7a
 8000a1a:	f000 f999 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a1e:	22a1      	movs	r2, #161	@ 0xa1
 8000a20:	2100      	movs	r1, #0
 8000a22:	207a      	movs	r0, #122	@ 0x7a
 8000a24:	f000 f994 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a28:	22a6      	movs	r2, #166	@ 0xa6
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	207a      	movs	r0, #122	@ 0x7a
 8000a2e:	f000 f98f 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000a32:	22a8      	movs	r2, #168	@ 0xa8
 8000a34:	2100      	movs	r1, #0
 8000a36:	207a      	movs	r0, #122	@ 0x7a
 8000a38:	f000 f98a 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000a3c:	223f      	movs	r2, #63	@ 0x3f
 8000a3e:	2100      	movs	r1, #0
 8000a40:	207a      	movs	r0, #122	@ 0x7a
 8000a42:	f000 f985 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a46:	22a4      	movs	r2, #164	@ 0xa4
 8000a48:	2100      	movs	r1, #0
 8000a4a:	207a      	movs	r0, #122	@ 0x7a
 8000a4c:	f000 f980 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000a50:	22d3      	movs	r2, #211	@ 0xd3
 8000a52:	2100      	movs	r1, #0
 8000a54:	207a      	movs	r0, #122	@ 0x7a
 8000a56:	f000 f97b 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	207a      	movs	r0, #122	@ 0x7a
 8000a60:	f000 f976 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a64:	22d5      	movs	r2, #213	@ 0xd5
 8000a66:	2100      	movs	r1, #0
 8000a68:	207a      	movs	r0, #122	@ 0x7a
 8000a6a:	f000 f971 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000a6e:	22f0      	movs	r2, #240	@ 0xf0
 8000a70:	2100      	movs	r1, #0
 8000a72:	207a      	movs	r0, #122	@ 0x7a
 8000a74:	f000 f96c 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000a78:	22d9      	movs	r2, #217	@ 0xd9
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	207a      	movs	r0, #122	@ 0x7a
 8000a7e:	f000 f967 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000a82:	2222      	movs	r2, #34	@ 0x22
 8000a84:	2100      	movs	r1, #0
 8000a86:	207a      	movs	r0, #122	@ 0x7a
 8000a88:	f000 f962 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000a8c:	22da      	movs	r2, #218	@ 0xda
 8000a8e:	2100      	movs	r1, #0
 8000a90:	207a      	movs	r0, #122	@ 0x7a
 8000a92:	f000 f95d 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000a96:	2212      	movs	r2, #18
 8000a98:	2100      	movs	r1, #0
 8000a9a:	207a      	movs	r0, #122	@ 0x7a
 8000a9c:	f000 f958 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000aa0:	22db      	movs	r2, #219	@ 0xdb
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	207a      	movs	r0, #122	@ 0x7a
 8000aa6:	f000 f953 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000aaa:	2220      	movs	r2, #32
 8000aac:	2100      	movs	r1, #0
 8000aae:	207a      	movs	r0, #122	@ 0x7a
 8000ab0:	f000 f94e 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000ab4:	228d      	movs	r2, #141	@ 0x8d
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	207a      	movs	r0, #122	@ 0x7a
 8000aba:	f000 f949 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000abe:	2214      	movs	r2, #20
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	207a      	movs	r0, #122	@ 0x7a
 8000ac4:	f000 f944 	bl	8000d50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000ac8:	22af      	movs	r2, #175	@ 0xaf
 8000aca:	2100      	movs	r1, #0
 8000acc:	207a      	movs	r0, #122	@ 0x7a
 8000ace:	f000 f93f 	bl	8000d50 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000ad2:	222e      	movs	r2, #46	@ 0x2e
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	207a      	movs	r0, #122	@ 0x7a
 8000ad8:	f000 f93a 	bl	8000d50 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 f843 	bl	8000b68 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000ae2:	f000 f813 	bl	8000b0c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <SSD1306_Init+0x184>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <SSD1306_Init+0x184>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000af2:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <SSD1306_Init+0x184>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000af8:	2301      	movs	r3, #1
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000070 	.word	0x20000070
 8000b08:	20000524 	.word	0x20000524

08000b0c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	e01d      	b.n	8000b54 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	3b50      	subs	r3, #80	@ 0x50
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	2100      	movs	r1, #0
 8000b22:	207a      	movs	r0, #122	@ 0x7a
 8000b24:	f000 f914 	bl	8000d50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	207a      	movs	r0, #122	@ 0x7a
 8000b2e:	f000 f90f 	bl	8000d50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000b32:	2210      	movs	r2, #16
 8000b34:	2100      	movs	r1, #0
 8000b36:	207a      	movs	r0, #122	@ 0x7a
 8000b38:	f000 f90a 	bl	8000d50 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	01db      	lsls	r3, r3, #7
 8000b40:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <SSD1306_UpdateScreen+0x58>)
 8000b42:	441a      	add	r2, r3
 8000b44:	2380      	movs	r3, #128	@ 0x80
 8000b46:	2140      	movs	r1, #64	@ 0x40
 8000b48:	207a      	movs	r0, #122	@ 0x7a
 8000b4a:	f000 f89b 	bl	8000c84 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	3301      	adds	r3, #1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b07      	cmp	r3, #7
 8000b58:	d9de      	bls.n	8000b18 <SSD1306_UpdateScreen+0xc>
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000124 	.word	0x20000124

08000b68 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <SSD1306_Fill+0x14>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e000      	b.n	8000b7e <SSD1306_Fill+0x16>
 8000b7c:	23ff      	movs	r3, #255	@ 0xff
 8000b7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b82:	4619      	mov	r1, r3
 8000b84:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <SSD1306_Fill+0x2c>)
 8000b86:	f003 fceb 	bl	8004560 <memset>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000124 	.word	0x20000124

08000b98 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	80bb      	strh	r3, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	70fb      	strb	r3, [r7, #3]
	if (
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bae:	d848      	bhi.n	8000c42 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000bb0:	88bb      	ldrh	r3, [r7, #4]
 8000bb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bb4:	d845      	bhi.n	8000c42 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000bb6:	4b26      	ldr	r3, [pc, #152]	@ (8000c50 <SSD1306_DrawPixel+0xb8>)
 8000bb8:	791b      	ldrb	r3, [r3, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d006      	beq.n	8000bcc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bf0c      	ite	eq
 8000bc4:	2301      	moveq	r3, #1
 8000bc6:	2300      	movne	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000bcc:	78fb      	ldrb	r3, [r7, #3]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d11a      	bne.n	8000c08 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000bd2:	88fa      	ldrh	r2, [r7, #6]
 8000bd4:	88bb      	ldrh	r3, [r7, #4]
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	b298      	uxth	r0, r3
 8000bda:	4603      	mov	r3, r0
 8000bdc:	01db      	lsls	r3, r3, #7
 8000bde:	4413      	add	r3, r2
 8000be0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c54 <SSD1306_DrawPixel+0xbc>)
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	b25a      	sxtb	r2, r3
 8000be6:	88bb      	ldrh	r3, [r7, #4]
 8000be8:	f003 0307 	and.w	r3, r3, #7
 8000bec:	2101      	movs	r1, #1
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b259      	sxtb	r1, r3
 8000bf8:	88fa      	ldrh	r2, [r7, #6]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	01db      	lsls	r3, r3, #7
 8000bfe:	4413      	add	r3, r2
 8000c00:	b2c9      	uxtb	r1, r1
 8000c02:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <SSD1306_DrawPixel+0xbc>)
 8000c04:	54d1      	strb	r1, [r2, r3]
 8000c06:	e01d      	b.n	8000c44 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c08:	88fa      	ldrh	r2, [r7, #6]
 8000c0a:	88bb      	ldrh	r3, [r7, #4]
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	b298      	uxth	r0, r3
 8000c10:	4603      	mov	r3, r0
 8000c12:	01db      	lsls	r3, r3, #7
 8000c14:	4413      	add	r3, r2
 8000c16:	4a0f      	ldr	r2, [pc, #60]	@ (8000c54 <SSD1306_DrawPixel+0xbc>)
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	b25a      	sxtb	r2, r3
 8000c1c:	88bb      	ldrh	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	2101      	movs	r1, #1
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	4013      	ands	r3, r2
 8000c30:	b259      	sxtb	r1, r3
 8000c32:	88fa      	ldrh	r2, [r7, #6]
 8000c34:	4603      	mov	r3, r0
 8000c36:	01db      	lsls	r3, r3, #7
 8000c38:	4413      	add	r3, r2
 8000c3a:	b2c9      	uxtb	r1, r1
 8000c3c:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <SSD1306_DrawPixel+0xbc>)
 8000c3e:	54d1      	strb	r1, [r2, r3]
 8000c40:	e000      	b.n	8000c44 <SSD1306_DrawPixel+0xac>
		return;
 8000c42:	bf00      	nop
	}
}
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000524 	.word	0x20000524
 8000c54:	20000124 	.word	0x20000124

08000c58 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <ssd1306_I2C_Init+0x28>)
 8000c60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c62:	e002      	b.n	8000c6a <ssd1306_I2C_Init+0x12>
		p--;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1f9      	bne.n	8000c64 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	0003d090 	.word	0x0003d090

08000c84 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b0c7      	sub	sp, #284	@ 0x11c
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000c92:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000c96:	600a      	str	r2, [r1, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c9e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000ca2:	4622      	mov	r2, r4
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000caa:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000cae:	4602      	mov	r2, r0
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cba:	460a      	mov	r2, r1
 8000cbc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000cbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000cc6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000cca:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000cce:	7812      	ldrb	r2, [r2, #0]
 8000cd0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000cd8:	e015      	b.n	8000d06 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000cda:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000cde:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000ce2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000ce6:	6812      	ldr	r2, [r2, #0]
 8000ce8:	441a      	add	r2, r3
 8000cea:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000cee:	3301      	adds	r3, #1
 8000cf0:	7811      	ldrb	r1, [r2, #0]
 8000cf2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000cf6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000cfa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000cfc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000d00:	3301      	adds	r3, #1
 8000d02:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000d06:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000d10:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000d14:	8812      	ldrh	r2, [r2, #0]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d8df      	bhi.n	8000cda <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000d1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d1e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b299      	uxth	r1, r3
 8000d26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	f107 020c 	add.w	r2, r7, #12
 8000d38:	200a      	movs	r0, #10
 8000d3a:	9000      	str	r0, [sp, #0]
 8000d3c:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <ssd1306_I2C_WriteMulti+0xc8>)
 8000d3e:	f001 facb 	bl	80022d8 <HAL_I2C_Master_Transmit>
}
 8000d42:	bf00      	nop
 8000d44:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	20000070 	.word	0x20000070

08000d50 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	71bb      	strb	r3, [r7, #6]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000d66:	797b      	ldrb	r3, [r7, #5]
 8000d68:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	b299      	uxth	r1, r3
 8000d6e:	f107 020c 	add.w	r2, r7, #12
 8000d72:	230a      	movs	r3, #10
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2302      	movs	r3, #2
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <ssd1306_I2C_Write+0x38>)
 8000d7a:	f001 faad 	bl	80022d8 <HAL_I2C_Master_Transmit>
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000070 	.word	0x20000070

08000d8c <SSD1306_ShiftBufferLeft>:

void SSD1306_ShiftBufferLeft(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < SSD1306_HEIGHT / 8; page++) {
 8000d92:	2300      	movs	r3, #0
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	e015      	b.n	8000dc4 <SSD1306_ShiftBufferLeft+0x38>
        memmove(&SSD1306_Buffer[page * SSD1306_WIDTH],
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	01db      	lsls	r3, r3, #7
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <SSD1306_ShiftBufferLeft+0x48>)
 8000d9e:	1898      	adds	r0, r3, r2
                &SSD1306_Buffer[page * SSD1306_WIDTH + 1],
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	01db      	lsls	r3, r3, #7
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd4 <SSD1306_ShiftBufferLeft+0x48>)
 8000da8:	4413      	add	r3, r2
        memmove(&SSD1306_Buffer[page * SSD1306_WIDTH],
 8000daa:	227f      	movs	r2, #127	@ 0x7f
 8000dac:	4619      	mov	r1, r3
 8000dae:	f003 fbbd 	bl	800452c <memmove>
                SSD1306_WIDTH - 1);
        SSD1306_Buffer[page * SSD1306_WIDTH + (SSD1306_WIDTH - 1)] = 0x00; // Clear the last column
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	01db      	lsls	r3, r3, #7
 8000db6:	337f      	adds	r3, #127	@ 0x7f
 8000db8:	4a06      	ldr	r2, [pc, #24]	@ (8000dd4 <SSD1306_ShiftBufferLeft+0x48>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = 0; page < SSD1306_HEIGHT / 8; page++) {
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b07      	cmp	r3, #7
 8000dc8:	d9e6      	bls.n	8000d98 <SSD1306_ShiftBufferLeft+0xc>
    }
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000124 	.word	0x20000124

08000dd8 <SSD1306_DrawVerticalLineInRightmostColumn>:

void SSD1306_DrawVerticalLineInRightmostColumn(uint8_t y1, uint8_t y2, SSD1306_COLOR_t color) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
 8000de2:	460b      	mov	r3, r1
 8000de4:	71bb      	strb	r3, [r7, #6]
 8000de6:	4613      	mov	r3, r2
 8000de8:	717b      	strb	r3, [r7, #5]
    if (y1 > y2) {
 8000dea:	79fa      	ldrb	r2, [r7, #7]
 8000dec:	79bb      	ldrb	r3, [r7, #6]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d905      	bls.n	8000dfe <SSD1306_DrawVerticalLineInRightmostColumn+0x26>
        uint8_t temp = y1;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	73bb      	strb	r3, [r7, #14]
        y1 = y2;
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	71fb      	strb	r3, [r7, #7]
        y2 = temp;
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	71bb      	strb	r3, [r7, #6]
    }
    for (uint8_t y = y1; y <= y2; y++) {
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	73fb      	strb	r3, [r7, #15]
 8000e02:	e009      	b.n	8000e18 <SSD1306_DrawVerticalLineInRightmostColumn+0x40>
        SSD1306_DrawPixel(SSD1306_WIDTH - 1, y, color);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	797a      	ldrb	r2, [r7, #5]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	207f      	movs	r0, #127	@ 0x7f
 8000e0e:	f7ff fec3 	bl	8000b98 <SSD1306_DrawPixel>
    for (uint8_t y = y1; y <= y2; y++) {
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	3301      	adds	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	7bfa      	ldrb	r2, [r7, #15]
 8000e1a:	79bb      	ldrb	r3, [r7, #6]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d9f1      	bls.n	8000e04 <SSD1306_DrawVerticalLineInRightmostColumn+0x2c>
    }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e42:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	4a08      	ldr	r2, [pc, #32]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a17      	ldr	r2, [pc, #92]	@ (8000ef8 <HAL_ADC_MspInit+0x7c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d127      	bne.n	8000eee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <HAL_ADC_MspInit+0x80>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea6:	4a15      	ldr	r2, [pc, #84]	@ (8000efc <HAL_ADC_MspInit+0x80>)
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <HAL_ADC_MspInit+0x80>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <HAL_ADC_MspInit+0x80>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8000efc <HAL_ADC_MspInit+0x80>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <HAL_ADC_MspInit+0x80>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	2303      	movs	r3, #3
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <HAL_ADC_MspInit+0x84>)
 8000eea:	f000 ff09 	bl	8001d00 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	@ 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40012000 	.word	0x40012000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000

08000f04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a19      	ldr	r2, [pc, #100]	@ (8000f88 <HAL_I2C_MspInit+0x84>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d12c      	bne.n	8000f80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f48:	2312      	movs	r3, #18
 8000f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f54:	2304      	movs	r3, #4
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <HAL_I2C_MspInit+0x8c>)
 8000f60:	f000 fece 	bl	8001d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	4a07      	ldr	r2, [pc, #28]	@ (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	@ 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40005400 	.word	0x40005400
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020400 	.word	0x40020400

08000f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001028 <HAL_UART_MspInit+0x94>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d134      	bne.n	8001020 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <HAL_UART_MspInit+0x98>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800102c <HAL_UART_MspInit+0x98>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc6:	4b19      	ldr	r3, [pc, #100]	@ (800102c <HAL_UART_MspInit+0x98>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_UART_MspInit+0x98>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a14      	ldr	r2, [pc, #80]	@ (800102c <HAL_UART_MspInit+0x98>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_UART_MspInit+0x98>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001000:	2307      	movs	r3, #7
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4809      	ldr	r0, [pc, #36]	@ (8001030 <HAL_UART_MspInit+0x9c>)
 800100c:	f000 fe78 	bl	8001d00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	2025      	movs	r0, #37	@ 0x25
 8001016:	f000 fdaa 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800101a:	2025      	movs	r0, #37	@ 0x25
 800101c:	f000 fdc3 	bl	8001ba6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	@ 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40011000 	.word	0x40011000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108a:	f000 f8a3 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001098:	4802      	ldr	r0, [pc, #8]	@ (80010a4 <USART1_IRQHandler+0x10>)
 800109a:	f002 fb21 	bl	80036e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000c4 	.word	0x200000c4

080010a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010b0:	f000 ffaa 	bl	8002008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001114 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010e0:	f7ff ffea 	bl	80010b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e4:	480c      	ldr	r0, [pc, #48]	@ (8001118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e6:	490d      	ldr	r1, [pc, #52]	@ (800111c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800110a:	f003 fa31 	bl	8004570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f7ff f9d9 	bl	80004c4 <main>
  bx  lr    
 8001112:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001114:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001120:	08004608 	.word	0x08004608
  ldr r2, =_sbss
 8001124:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001128:	20000530 	.word	0x20000530

0800112c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC_IRQHandler>
	...

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001134:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <HAL_Init+0x40>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <HAL_Init+0x40>)
 8001146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800114a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <HAL_Init+0x40>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 fcfd 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	200f      	movs	r0, #15
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fe62 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023c00 	.word	0x40023c00

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fd15 	bl	8001bc2 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 fcdd 	bl	8001b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	2000052c 	.word	0x2000052c

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	2000052c 	.word	0x2000052c

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e033      	b.n	80012da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	2b00      	cmp	r3, #0
 8001278:	d109      	bne.n	800128e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fdfe 	bl	8000e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	2b00      	cmp	r3, #0
 8001298:	d118      	bne.n	80012cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012a2:	f023 0302 	bic.w	r3, r3, #2
 80012a6:	f043 0202 	orr.w	r2, r3, #2
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 fa86 	bl	80017c0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	f023 0303 	bic.w	r3, r3, #3
 80012c2:	f043 0201 	orr.w	r2, r3, #1
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80012ca:	e001      	b.n	80012d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_ADC_Start+0x1a>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e097      	b.n	800142e <HAL_ADC_Start+0x14a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d018      	beq.n	8001346 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001324:	4b45      	ldr	r3, [pc, #276]	@ (800143c <HAL_ADC_Start+0x158>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a45      	ldr	r2, [pc, #276]	@ (8001440 <HAL_ADC_Start+0x15c>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	0c9a      	lsrs	r2, r3, #18
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001338:	e002      	b.n	8001340 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	3b01      	subs	r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f9      	bne.n	800133a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	d15f      	bne.n	8001414 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001358:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001372:	2b00      	cmp	r3, #0
 8001374:	d007      	beq.n	8001386 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800137e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800138e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001392:	d106      	bne.n	80013a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001398:	f023 0206 	bic.w	r2, r3, #6
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	645a      	str	r2, [r3, #68]	@ 0x44
 80013a0:	e002      	b.n	80013a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b0:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <HAL_ADC_Start+0x160>)
 80013b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80013bc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10f      	bne.n	80013ea <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d129      	bne.n	800142c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	e020      	b.n	800142c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a16      	ldr	r2, [pc, #88]	@ (8001448 <HAL_ADC_Start+0x164>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d11b      	bne.n	800142c <HAL_ADC_Start+0x148>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d114      	bne.n	800142c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	e00b      	b.n	800142c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	f043 0210 	orr.w	r2, r3, #16
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001424:	f043 0201 	orr.w	r2, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000
 8001440:	431bde83 	.word	0x431bde83
 8001444:	40012300 	.word	0x40012300
 8001448:	40012000 	.word	0x40012000

0800144c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001468:	d113      	bne.n	8001492 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001478:	d10b      	bne.n	8001492 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	f043 0220 	orr.w	r2, r3, #32
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e063      	b.n	800155a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001492:	f7ff feb3 	bl	80011fc <HAL_GetTick>
 8001496:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001498:	e021      	b.n	80014de <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d01d      	beq.n	80014de <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d007      	beq.n	80014b8 <HAL_ADC_PollForConversion+0x6c>
 80014a8:	f7ff fea8 	bl	80011fc <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d212      	bcs.n	80014de <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d00b      	beq.n	80014de <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f043 0204 	orr.w	r2, r3, #4
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e03d      	b.n	800155a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d1d6      	bne.n	800149a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f06f 0212 	mvn.w	r2, #18
 80014f4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d123      	bne.n	8001558 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001514:	2b00      	cmp	r3, #0
 8001516:	d11f      	bne.n	8001558 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001522:	2b00      	cmp	r3, #0
 8001524:	d006      	beq.n	8001534 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001530:	2b00      	cmp	r3, #0
 8001532:	d111      	bne.n	8001558 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x1c>
 8001594:	2302      	movs	r3, #2
 8001596:	e105      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x228>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b09      	cmp	r3, #9
 80015a6:	d925      	bls.n	80015f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68d9      	ldr	r1, [r3, #12]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	3b1e      	subs	r3, #30
 80015be:	2207      	movs	r2, #7
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43da      	mvns	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	400a      	ands	r2, r1
 80015cc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68d9      	ldr	r1, [r3, #12]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	4603      	mov	r3, r0
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4403      	add	r3, r0
 80015e6:	3b1e      	subs	r3, #30
 80015e8:	409a      	lsls	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	e022      	b.n	800163a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6919      	ldr	r1, [r3, #16]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	2207      	movs	r2, #7
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	400a      	ands	r2, r1
 8001616:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6919      	ldr	r1, [r3, #16]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	4603      	mov	r3, r0
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4403      	add	r3, r0
 8001630:	409a      	lsls	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b06      	cmp	r3, #6
 8001640:	d824      	bhi.n	800168c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	3b05      	subs	r3, #5
 8001654:	221f      	movs	r2, #31
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	400a      	ands	r2, r1
 8001662:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	3b05      	subs	r3, #5
 800167e:	fa00 f203 	lsl.w	r2, r0, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	635a      	str	r2, [r3, #52]	@ 0x34
 800168a:	e04c      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d824      	bhi.n	80016de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	3b23      	subs	r3, #35	@ 0x23
 80016a6:	221f      	movs	r2, #31
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43da      	mvns	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	400a      	ands	r2, r1
 80016b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	3b23      	subs	r3, #35	@ 0x23
 80016d0:	fa00 f203 	lsl.w	r2, r0, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	631a      	str	r2, [r3, #48]	@ 0x30
 80016dc:	e023      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	3b41      	subs	r3, #65	@ 0x41
 80016f0:	221f      	movs	r2, #31
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	400a      	ands	r2, r1
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	4618      	mov	r0, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	3b41      	subs	r3, #65	@ 0x41
 800171a:	fa00 f203 	lsl.w	r2, r0, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001726:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <HAL_ADC_ConfigChannel+0x234>)
 8001728:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a21      	ldr	r2, [pc, #132]	@ (80017b4 <HAL_ADC_ConfigChannel+0x238>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d109      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x1cc>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b12      	cmp	r3, #18
 800173a:	d105      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <HAL_ADC_ConfigChannel+0x238>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d123      	bne.n	800179a <HAL_ADC_ConfigChannel+0x21e>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b10      	cmp	r3, #16
 8001758:	d003      	beq.n	8001762 <HAL_ADC_ConfigChannel+0x1e6>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b11      	cmp	r3, #17
 8001760:	d11b      	bne.n	800179a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d111      	bne.n	800179a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <HAL_ADC_ConfigChannel+0x23c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a10      	ldr	r2, [pc, #64]	@ (80017bc <HAL_ADC_ConfigChannel+0x240>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	0c9a      	lsrs	r2, r3, #18
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800178c:	e002      	b.n	8001794 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	3b01      	subs	r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f9      	bne.n	800178e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40012300 	.word	0x40012300
 80017b4:	40012000 	.word	0x40012000
 80017b8:	20000000 	.word	0x20000000
 80017bc:	431bde83 	.word	0x431bde83

080017c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017c8:	4b79      	ldr	r3, [pc, #484]	@ (80019b0 <ADC_Init+0x1f0>)
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	021a      	lsls	r2, r3, #8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001818:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800183a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6899      	ldr	r1, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001852:	4a58      	ldr	r2, [pc, #352]	@ (80019b4 <ADC_Init+0x1f4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d022      	beq.n	800189e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001866:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6899      	ldr	r1, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001888:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6899      	ldr	r1, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	e00f      	b.n	80018be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0202 	bic.w	r2, r2, #2
 80018cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6899      	ldr	r1, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7e1b      	ldrb	r3, [r3, #24]
 80018d8:	005a      	lsls	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d01b      	beq.n	8001924 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018fa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800190a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	3b01      	subs	r3, #1
 8001918:	035a      	lsls	r2, r3, #13
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	e007      	b.n	8001934 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001932:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001942:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	3b01      	subs	r3, #1
 8001950:	051a      	lsls	r2, r3, #20
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001968:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6899      	ldr	r1, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001976:	025a      	lsls	r2, r3, #9
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800198e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6899      	ldr	r1, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	029a      	lsls	r2, r3, #10
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	609a      	str	r2, [r3, #8]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	40012300 	.word	0x40012300
 80019b4:	0f000001 	.word	0x0f000001

080019b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a04:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <__NVIC_GetPriorityGrouping+0x18>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 0307 	and.w	r3, r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4907      	ldr	r1, [pc, #28]	@ (8001a54 <__NVIC_EnableIRQ+0x38>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100

08001a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db0a      	blt.n	8001a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	490c      	ldr	r1, [pc, #48]	@ (8001aa4 <__NVIC_SetPriority+0x4c>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a80:	e00a      	b.n	8001a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4908      	ldr	r1, [pc, #32]	@ (8001aa8 <__NVIC_SetPriority+0x50>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	3b04      	subs	r3, #4
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	440b      	add	r3, r1
 8001a96:	761a      	strb	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	@ 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f1c3 0307 	rsb	r3, r3, #7
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	bf28      	it	cs
 8001aca:	2304      	movcs	r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d902      	bls.n	8001adc <NVIC_EncodePriority+0x30>
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3b03      	subs	r3, #3
 8001ada:	e000      	b.n	8001ade <NVIC_EncodePriority+0x32>
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	401a      	ands	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43d9      	mvns	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	4313      	orrs	r3, r2
         );
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	@ 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f7ff ff8e 	bl	8001a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff29 	bl	80019b8 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff3e 	bl	8001a00 <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff8e 	bl	8001aac <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5d 	bl	8001a58 <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff31 	bl	8001a1c <__NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffa2 	bl	8001b14 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff fb08 	bl	80011fc <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d008      	beq.n	8001c0c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e052      	b.n	8001cb2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0216 	bic.w	r2, r2, #22
 8001c1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c2a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d103      	bne.n	8001c3c <HAL_DMA_Abort+0x62>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0208 	bic.w	r2, r2, #8
 8001c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c5c:	e013      	b.n	8001c86 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c5e:	f7ff facd 	bl	80011fc <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d90c      	bls.n	8001c86 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2203      	movs	r2, #3
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e015      	b.n	8001cb2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e4      	bne.n	8001c5e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c98:	223f      	movs	r2, #63	@ 0x3f
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d004      	beq.n	8001cd8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2280      	movs	r2, #128	@ 0x80
 8001cd2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e00c      	b.n	8001cf2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2205      	movs	r2, #5
 8001cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	e159      	b.n	8001fd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 8148 	bne.w	8001fca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d005      	beq.n	8001d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d130      	bne.n	8001db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 0201 	and.w	r2, r3, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d017      	beq.n	8001df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d123      	bne.n	8001e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	08da      	lsrs	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	2203      	movs	r2, #3
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80a2 	beq.w	8001fca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b57      	ldr	r3, [pc, #348]	@ (8001fe8 <HAL_GPIO_Init+0x2e8>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	4a56      	ldr	r2, [pc, #344]	@ (8001fe8 <HAL_GPIO_Init+0x2e8>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e96:	4b54      	ldr	r3, [pc, #336]	@ (8001fe8 <HAL_GPIO_Init+0x2e8>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea2:	4a52      	ldr	r2, [pc, #328]	@ (8001fec <HAL_GPIO_Init+0x2ec>)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a49      	ldr	r2, [pc, #292]	@ (8001ff0 <HAL_GPIO_Init+0x2f0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d019      	beq.n	8001f02 <HAL_GPIO_Init+0x202>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a48      	ldr	r2, [pc, #288]	@ (8001ff4 <HAL_GPIO_Init+0x2f4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x1fe>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a47      	ldr	r2, [pc, #284]	@ (8001ff8 <HAL_GPIO_Init+0x2f8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x1fa>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a46      	ldr	r2, [pc, #280]	@ (8001ffc <HAL_GPIO_Init+0x2fc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x1f6>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a45      	ldr	r2, [pc, #276]	@ (8002000 <HAL_GPIO_Init+0x300>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x1f2>
 8001eee:	2304      	movs	r3, #4
 8001ef0:	e008      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e004      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e002      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001f02:	2300      	movs	r3, #0
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	f002 0203 	and.w	r2, r2, #3
 8001f0a:	0092      	lsls	r2, r2, #2
 8001f0c:	4093      	lsls	r3, r2
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f14:	4935      	ldr	r1, [pc, #212]	@ (8001fec <HAL_GPIO_Init+0x2ec>)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f22:	4b38      	ldr	r3, [pc, #224]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f46:	4a2f      	ldr	r2, [pc, #188]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f70:	4a24      	ldr	r2, [pc, #144]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f76:	4b23      	ldr	r3, [pc, #140]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc4:	4a0f      	ldr	r2, [pc, #60]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	2b0f      	cmp	r3, #15
 8001fd4:	f67f aea2 	bls.w	8001d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3724      	adds	r7, #36	@ 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40013800 	.word	0x40013800
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	40020c00 	.word	0x40020c00
 8002000:	40021000 	.word	0x40021000
 8002004:	40013c00 	.word	0x40013c00

08002008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d006      	beq.n	800202c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800201e:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f806 	bl	8002038 <HAL_GPIO_EXTI_Callback>
  }
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40013c00 	.word	0x40013c00

08002038 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e12b      	b.n	80022ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe ff44 	bl	8000f04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2224      	movs	r2, #36	@ 0x24
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020b4:	f001 fa08 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 80020b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4a81      	ldr	r2, [pc, #516]	@ (80022c4 <HAL_I2C_Init+0x274>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d807      	bhi.n	80020d4 <HAL_I2C_Init+0x84>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4a80      	ldr	r2, [pc, #512]	@ (80022c8 <HAL_I2C_Init+0x278>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	bf94      	ite	ls
 80020cc:	2301      	movls	r3, #1
 80020ce:	2300      	movhi	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	e006      	b.n	80020e2 <HAL_I2C_Init+0x92>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4a7d      	ldr	r2, [pc, #500]	@ (80022cc <HAL_I2C_Init+0x27c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	bf94      	ite	ls
 80020dc:	2301      	movls	r3, #1
 80020de:	2300      	movhi	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0e7      	b.n	80022ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4a78      	ldr	r2, [pc, #480]	@ (80022d0 <HAL_I2C_Init+0x280>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	0c9b      	lsrs	r3, r3, #18
 80020f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	430a      	orrs	r2, r1
 8002108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a6a      	ldr	r2, [pc, #424]	@ (80022c4 <HAL_I2C_Init+0x274>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d802      	bhi.n	8002124 <HAL_I2C_Init+0xd4>
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	3301      	adds	r3, #1
 8002122:	e009      	b.n	8002138 <HAL_I2C_Init+0xe8>
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	4a69      	ldr	r2, [pc, #420]	@ (80022d4 <HAL_I2C_Init+0x284>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	3301      	adds	r3, #1
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	430b      	orrs	r3, r1
 800213e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800214a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	495c      	ldr	r1, [pc, #368]	@ (80022c4 <HAL_I2C_Init+0x274>)
 8002154:	428b      	cmp	r3, r1
 8002156:	d819      	bhi.n	800218c <HAL_I2C_Init+0x13c>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1e59      	subs	r1, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fbb1 f3f3 	udiv	r3, r1, r3
 8002166:	1c59      	adds	r1, r3, #1
 8002168:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800216c:	400b      	ands	r3, r1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_I2C_Init+0x138>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1e59      	subs	r1, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002180:	3301      	adds	r3, #1
 8002182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002186:	e051      	b.n	800222c <HAL_I2C_Init+0x1dc>
 8002188:	2304      	movs	r3, #4
 800218a:	e04f      	b.n	800222c <HAL_I2C_Init+0x1dc>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d111      	bne.n	80021b8 <HAL_I2C_Init+0x168>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1e58      	subs	r0, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	440b      	add	r3, r1
 80021a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e012      	b.n	80021de <HAL_I2C_Init+0x18e>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1e58      	subs	r0, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	0099      	lsls	r1, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Init+0x196>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e022      	b.n	800222c <HAL_I2C_Init+0x1dc>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10e      	bne.n	800220c <HAL_I2C_Init+0x1bc>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1e58      	subs	r0, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6859      	ldr	r1, [r3, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	440b      	add	r3, r1
 80021fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002200:	3301      	adds	r3, #1
 8002202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800220a:	e00f      	b.n	800222c <HAL_I2C_Init+0x1dc>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1e58      	subs	r0, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	0099      	lsls	r1, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002222:	3301      	adds	r3, #1
 8002224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002228:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	6809      	ldr	r1, [r1, #0]
 8002230:	4313      	orrs	r3, r2
 8002232:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800225a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6911      	ldr	r1, [r2, #16]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68d2      	ldr	r2, [r2, #12]
 8002266:	4311      	orrs	r1, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	430b      	orrs	r3, r1
 800226e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	000186a0 	.word	0x000186a0
 80022c8:	001e847f 	.word	0x001e847f
 80022cc:	003d08ff 	.word	0x003d08ff
 80022d0:	431bde83 	.word	0x431bde83
 80022d4:	10624dd3 	.word	0x10624dd3

080022d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	461a      	mov	r2, r3
 80022e4:	460b      	mov	r3, r1
 80022e6:	817b      	strh	r3, [r7, #10]
 80022e8:	4613      	mov	r3, r2
 80022ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7fe ff86 	bl	80011fc <HAL_GetTick>
 80022f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	f040 80e0 	bne.w	80024c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2319      	movs	r3, #25
 8002306:	2201      	movs	r2, #1
 8002308:	4970      	ldr	r1, [pc, #448]	@ (80024cc <HAL_I2C_Master_Transmit+0x1f4>)
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fa92 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002316:	2302      	movs	r3, #2
 8002318:	e0d3      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_I2C_Master_Transmit+0x50>
 8002324:	2302      	movs	r3, #2
 8002326:	e0cc      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1ea>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b01      	cmp	r3, #1
 800233c:	d007      	beq.n	800234e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800235c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2221      	movs	r2, #33	@ 0x21
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2210      	movs	r2, #16
 800236a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	893a      	ldrh	r2, [r7, #8]
 800237e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4a50      	ldr	r2, [pc, #320]	@ (80024d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800238e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002390:	8979      	ldrh	r1, [r7, #10]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f9ca 	bl	8002730 <I2C_MasterRequestWrite>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e08d      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023bc:	e066      	b.n	800248c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	6a39      	ldr	r1, [r7, #32]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fb50 	bl	8002a68 <I2C_WaitOnTXEFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00d      	beq.n	80023ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d107      	bne.n	80023e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e06b      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b04      	cmp	r3, #4
 8002426:	d11b      	bne.n	8002460 <HAL_I2C_Master_Transmit+0x188>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	d017      	beq.n	8002460 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	781a      	ldrb	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	6a39      	ldr	r1, [r7, #32]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fb47 	bl	8002af8 <I2C_WaitOnBTFFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00d      	beq.n	800248c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	2b04      	cmp	r3, #4
 8002476:	d107      	bne.n	8002488 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002486:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e01a      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	d194      	bne.n	80023be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	00100002 	.word	0x00100002
 80024d0:	ffff0000 	.word	0xffff0000

080024d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	@ 0x28
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	460b      	mov	r3, r1
 80024e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7fe fe8a 	bl	80011fc <HAL_GetTick>
 80024e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	f040 8111 	bne.w	800271e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2319      	movs	r3, #25
 8002502:	2201      	movs	r2, #1
 8002504:	4988      	ldr	r1, [pc, #544]	@ (8002728 <HAL_I2C_IsDeviceReady+0x254>)
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f994 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002512:	2302      	movs	r3, #2
 8002514:	e104      	b.n	8002720 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_I2C_IsDeviceReady+0x50>
 8002520:	2302      	movs	r3, #2
 8002522:	e0fd      	b.n	8002720 <HAL_I2C_IsDeviceReady+0x24c>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d007      	beq.n	800254a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002558:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2224      	movs	r2, #36	@ 0x24
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a70      	ldr	r2, [pc, #448]	@ (800272c <HAL_I2C_IsDeviceReady+0x258>)
 800256c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800257c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2200      	movs	r2, #0
 8002586:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f952 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00d      	beq.n	80025b2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025a4:	d103      	bne.n	80025ae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025ac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e0b6      	b.n	8002720 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025b2:	897b      	ldrh	r3, [r7, #10]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025c2:	f7fe fe1b 	bl	80011fc <HAL_GetTick>
 80025c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025f6:	e025      	b.n	8002644 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025f8:	f7fe fe00 	bl	80011fc <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d302      	bcc.n	800260e <HAL_I2C_IsDeviceReady+0x13a>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	22a0      	movs	r2, #160	@ 0xa0
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b02      	cmp	r3, #2
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2ba0      	cmp	r3, #160	@ 0xa0
 800264e:	d005      	beq.n	800265c <HAL_I2C_IsDeviceReady+0x188>
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <HAL_I2C_IsDeviceReady+0x188>
 8002656:	7dbb      	ldrb	r3, [r7, #22]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0cd      	beq.n	80025f8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b02      	cmp	r3, #2
 8002670:	d129      	bne.n	80026c6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002680:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2319      	movs	r3, #25
 800269e:	2201      	movs	r2, #1
 80026a0:	4921      	ldr	r1, [pc, #132]	@ (8002728 <HAL_I2C_IsDeviceReady+0x254>)
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f8c6 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e036      	b.n	8002720 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e02c      	b.n	8002720 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026d4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026de:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2319      	movs	r3, #25
 80026e6:	2201      	movs	r2, #1
 80026e8:	490f      	ldr	r1, [pc, #60]	@ (8002728 <HAL_I2C_IsDeviceReady+0x254>)
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f8a2 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e012      	b.n	8002720 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	3301      	adds	r3, #1
 80026fe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	f4ff af32 	bcc.w	800256e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
  }
}
 8002720:	4618      	mov	r0, r3
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	00100002 	.word	0x00100002
 800272c:	ffff0000 	.word	0xffff0000

08002730 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	460b      	mov	r3, r1
 800273e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d006      	beq.n	800275a <I2C_MasterRequestWrite+0x2a>
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d003      	beq.n	800275a <I2C_MasterRequestWrite+0x2a>
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002758:	d108      	bne.n	800276c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e00b      	b.n	8002784 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	2b12      	cmp	r3, #18
 8002772:	d107      	bne.n	8002784 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002782:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f84f 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00d      	beq.n	80027b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027aa:	d103      	bne.n	80027b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e035      	b.n	8002824 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027c0:	d108      	bne.n	80027d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027d0:	611a      	str	r2, [r3, #16]
 80027d2:	e01b      	b.n	800280c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027d4:	897b      	ldrh	r3, [r7, #10]
 80027d6:	11db      	asrs	r3, r3, #7
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f003 0306 	and.w	r3, r3, #6
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f063 030f 	orn	r3, r3, #15
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	490e      	ldr	r1, [pc, #56]	@ (800282c <I2C_MasterRequestWrite+0xfc>)
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f898 	bl	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e010      	b.n	8002824 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4907      	ldr	r1, [pc, #28]	@ (8002830 <I2C_MasterRequestWrite+0x100>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f888 	bl	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	00010008 	.word	0x00010008
 8002830:	00010002 	.word	0x00010002

08002834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002844:	e048      	b.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d044      	beq.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284e:	f7fe fcd5 	bl	80011fc <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <I2C_WaitOnFlagUntilTimeout+0x30>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d139      	bne.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	0c1b      	lsrs	r3, r3, #16
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10d      	bne.n	800288a <I2C_WaitOnFlagUntilTimeout+0x56>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	43da      	mvns	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	e00c      	b.n	80028a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	43da      	mvns	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4013      	ands	r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d116      	bne.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e023      	b.n	8002920 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	0c1b      	lsrs	r3, r3, #16
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d10d      	bne.n	80028fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	43da      	mvns	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4013      	ands	r3, r2
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	e00c      	b.n	8002918 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	43da      	mvns	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4013      	ands	r3, r2
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	429a      	cmp	r2, r3
 800291c:	d093      	beq.n	8002846 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002936:	e071      	b.n	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002946:	d123      	bne.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002956:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002960:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	f043 0204 	orr.w	r2, r3, #4
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e067      	b.n	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d041      	beq.n	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002998:	f7fe fc30 	bl	80011fc <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d302      	bcc.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d136      	bne.n	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d10c      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	e00b      	b.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	43da      	mvns	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4013      	ands	r3, r2
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d016      	beq.n	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e021      	b.n	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	0c1b      	lsrs	r3, r3, #16
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10c      	bne.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	43da      	mvns	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4013      	ands	r3, r2
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	e00b      	b.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf14      	ite	ne
 8002a52:	2301      	movne	r3, #1
 8002a54:	2300      	moveq	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f47f af6d 	bne.w	8002938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a74:	e034      	b.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f886 	bl	8002b88 <I2C_IsAcknowledgeFailed>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e034      	b.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d028      	beq.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7fe fbb5 	bl	80011fc <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d11d      	bne.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aae:	2b80      	cmp	r3, #128	@ 0x80
 8002ab0:	d016      	beq.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aea:	2b80      	cmp	r3, #128	@ 0x80
 8002aec:	d1c3      	bne.n	8002a76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b04:	e034      	b.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f83e 	bl	8002b88 <I2C_IsAcknowledgeFailed>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e034      	b.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d028      	beq.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1e:	f7fe fb6d 	bl	80011fc <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d302      	bcc.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d11d      	bne.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d016      	beq.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	f043 0220 	orr.w	r2, r3, #32
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e007      	b.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d1c3      	bne.n	8002b06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b9e:	d11b      	bne.n	8002bd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ba8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	f043 0204 	orr.w	r2, r3, #4
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e267      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d075      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c06:	4b88      	ldr	r3, [pc, #544]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d00c      	beq.n	8002c2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c12:	4b85      	ldr	r3, [pc, #532]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d112      	bne.n	8002c44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1e:	4b82      	ldr	r3, [pc, #520]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c2a:	d10b      	bne.n	8002c44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d05b      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x108>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d157      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e242      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCC_OscConfig+0x74>
 8002c4e:	4b76      	ldr	r3, [pc, #472]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a75      	ldr	r2, [pc, #468]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e01d      	b.n	8002c98 <HAL_RCC_OscConfig+0xb0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x98>
 8002c66:	4b70      	ldr	r3, [pc, #448]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6f      	ldr	r2, [pc, #444]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b6d      	ldr	r3, [pc, #436]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6c      	ldr	r2, [pc, #432]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0xb0>
 8002c80:	4b69      	ldr	r3, [pc, #420]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a68      	ldr	r2, [pc, #416]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b66      	ldr	r3, [pc, #408]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a65      	ldr	r2, [pc, #404]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe faac 	bl	80011fc <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe faa8 	bl	80011fc <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	@ 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e207      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b5b      	ldr	r3, [pc, #364]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xc0>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fa98 	bl	80011fc <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fa94 	bl	80011fc <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	@ 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1f3      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce2:	4b51      	ldr	r3, [pc, #324]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0xe8>
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d063      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0a:	4b47      	ldr	r3, [pc, #284]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d11c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d16:	4b44      	ldr	r3, [pc, #272]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d116      	bne.n	8002d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	4b41      	ldr	r3, [pc, #260]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_RCC_OscConfig+0x152>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e1c7      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4937      	ldr	r1, [pc, #220]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	e03a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d58:	4b34      	ldr	r3, [pc, #208]	@ (8002e2c <HAL_RCC_OscConfig+0x244>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fa4d 	bl	80011fc <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d66:	f7fe fa49 	bl	80011fc <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1a8      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	4b2b      	ldr	r3, [pc, #172]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d84:	4b28      	ldr	r3, [pc, #160]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4925      	ldr	r1, [pc, #148]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
 8002d98:	e015      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9a:	4b24      	ldr	r3, [pc, #144]	@ (8002e2c <HAL_RCC_OscConfig+0x244>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe fa2c 	bl	80011fc <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da8:	f7fe fa28 	bl	80011fc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e187      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d036      	beq.n	8002e40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	4b15      	ldr	r3, [pc, #84]	@ (8002e30 <HAL_RCC_OscConfig+0x248>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe fa0c 	bl	80011fc <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fe fa08 	bl	80011fc <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e167      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x200>
 8002e06:	e01b      	b.n	8002e40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e08:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <HAL_RCC_OscConfig+0x248>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe f9f5 	bl	80011fc <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	e00e      	b.n	8002e34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fe f9f1 	bl	80011fc <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d907      	bls.n	8002e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e150      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	42470000 	.word	0x42470000
 8002e30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	4b88      	ldr	r3, [pc, #544]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ea      	bne.n	8002e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8097 	beq.w	8002f7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e52:	4b81      	ldr	r3, [pc, #516]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10f      	bne.n	8002e7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	4b7d      	ldr	r3, [pc, #500]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	4a7c      	ldr	r2, [pc, #496]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6e:	4b7a      	ldr	r3, [pc, #488]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b77      	ldr	r3, [pc, #476]	@ (800305c <HAL_RCC_OscConfig+0x474>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8a:	4b74      	ldr	r3, [pc, #464]	@ (800305c <HAL_RCC_OscConfig+0x474>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a73      	ldr	r2, [pc, #460]	@ (800305c <HAL_RCC_OscConfig+0x474>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe f9b1 	bl	80011fc <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fe f9ad 	bl	80011fc <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e10c      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	4b6a      	ldr	r3, [pc, #424]	@ (800305c <HAL_RCC_OscConfig+0x474>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d106      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x2ea>
 8002ec4:	4b64      	ldr	r3, [pc, #400]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	4a63      	ldr	r2, [pc, #396]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed0:	e01c      	b.n	8002f0c <HAL_RCC_OscConfig+0x324>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x30c>
 8002eda:	4b5f      	ldr	r3, [pc, #380]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ede:	4a5e      	ldr	r2, [pc, #376]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee6:	4b5c      	ldr	r3, [pc, #368]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eea:	4a5b      	ldr	r2, [pc, #364]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0x324>
 8002ef4:	4b58      	ldr	r3, [pc, #352]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef8:	4a57      	ldr	r2, [pc, #348]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f00:	4b55      	ldr	r3, [pc, #340]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f04:	4a54      	ldr	r2, [pc, #336]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f06:	f023 0304 	bic.w	r3, r3, #4
 8002f0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe f972 	bl	80011fc <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe f96e 	bl	80011fc <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0cb      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	4b49      	ldr	r3, [pc, #292]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0ee      	beq.n	8002f1c <HAL_RCC_OscConfig+0x334>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f40:	f7fe f95c 	bl	80011fc <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7fe f958 	bl	80011fc <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0b5      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1ee      	bne.n	8002f48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f70:	4b39      	ldr	r3, [pc, #228]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	4a38      	ldr	r2, [pc, #224]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80a1 	beq.w	80030c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f86:	4b34      	ldr	r3, [pc, #208]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d05c      	beq.n	800304c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d141      	bne.n	800301e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b31      	ldr	r3, [pc, #196]	@ (8003060 <HAL_RCC_OscConfig+0x478>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe f92c 	bl	80011fc <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe f928 	bl	80011fc <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e087      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b27      	ldr	r3, [pc, #156]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	019b      	lsls	r3, r3, #6
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	061b      	lsls	r3, r3, #24
 8002fea:	491b      	ldr	r1, [pc, #108]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <HAL_RCC_OscConfig+0x478>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fe f901 	bl	80011fc <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe f8fd 	bl	80011fc <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e05c      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003010:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x416>
 800301c:	e054      	b.n	80030c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b10      	ldr	r3, [pc, #64]	@ (8003060 <HAL_RCC_OscConfig+0x478>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe f8ea 	bl	80011fc <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe f8e6 	bl	80011fc <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e045      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_RCC_OscConfig+0x470>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x444>
 800304a:	e03d      	b.n	80030c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e038      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
 8003058:	40023800 	.word	0x40023800
 800305c:	40007000 	.word	0x40007000
 8003060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003064:	4b1b      	ldr	r3, [pc, #108]	@ (80030d4 <HAL_RCC_OscConfig+0x4ec>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d028      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d121      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d11a      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800309a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309c:	4293      	cmp	r3, r2
 800309e:	d111      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	3b01      	subs	r3, #1
 80030ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800

080030d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0cc      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b68      	ldr	r3, [pc, #416]	@ (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d90c      	bls.n	8003114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b65      	ldr	r3, [pc, #404]	@ (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b63      	ldr	r3, [pc, #396]	@ (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0b8      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800312c:	4b59      	ldr	r3, [pc, #356]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a58      	ldr	r2, [pc, #352]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003136:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003144:	4b53      	ldr	r3, [pc, #332]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a52      	ldr	r2, [pc, #328]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800314e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003150:	4b50      	ldr	r3, [pc, #320]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	494d      	ldr	r1, [pc, #308]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d044      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b47      	ldr	r3, [pc, #284]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d119      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e07f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d003      	beq.n	8003196 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003192:	2b03      	cmp	r3, #3
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	4b3f      	ldr	r3, [pc, #252]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e06f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e067      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b6:	4b37      	ldr	r3, [pc, #220]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 0203 	bic.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4934      	ldr	r1, [pc, #208]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c8:	f7fe f818 	bl	80011fc <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7fe f814 	bl	80011fc <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e04f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 020c 	and.w	r2, r3, #12
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1eb      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f8:	4b25      	ldr	r3, [pc, #148]	@ (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d20c      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b22      	ldr	r3, [pc, #136]	@ (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b20      	ldr	r3, [pc, #128]	@ (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e032      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800322c:	4b19      	ldr	r3, [pc, #100]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4916      	ldr	r1, [pc, #88]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800324a:	4b12      	ldr	r3, [pc, #72]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	490e      	ldr	r1, [pc, #56]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800325e:	f000 f821 	bl	80032a4 <HAL_RCC_GetSysClockFreq>
 8003262:	4602      	mov	r2, r0
 8003264:	4b0b      	ldr	r3, [pc, #44]	@ (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	490a      	ldr	r1, [pc, #40]	@ (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	5ccb      	ldrb	r3, [r1, r3]
 8003272:	fa22 f303 	lsr.w	r3, r2, r3
 8003276:	4a09      	ldr	r2, [pc, #36]	@ (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800327a:	4b09      	ldr	r3, [pc, #36]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd ff78 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023c00 	.word	0x40023c00
 8003294:	40023800 	.word	0x40023800
 8003298:	080045e0 	.word	0x080045e0
 800329c:	20000000 	.word	0x20000000
 80032a0:	20000004 	.word	0x20000004

080032a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a8:	b094      	sub	sp, #80	@ 0x50
 80032aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032bc:	4b79      	ldr	r3, [pc, #484]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d00d      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x40>
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	f200 80e1 	bhi.w	8003490 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x34>
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d003      	beq.n	80032de <HAL_RCC_GetSysClockFreq+0x3a>
 80032d6:	e0db      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d8:	4b73      	ldr	r3, [pc, #460]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032dc:	e0db      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032de:	4b73      	ldr	r3, [pc, #460]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x208>)
 80032e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032e2:	e0d8      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e4:	4b6f      	ldr	r3, [pc, #444]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ee:	4b6d      	ldr	r3, [pc, #436]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d063      	beq.n	80033c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fa:	4b6a      	ldr	r3, [pc, #424]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	099b      	lsrs	r3, r3, #6
 8003300:	2200      	movs	r2, #0
 8003302:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003304:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330c:	633b      	str	r3, [r7, #48]	@ 0x30
 800330e:	2300      	movs	r3, #0
 8003310:	637b      	str	r3, [r7, #52]	@ 0x34
 8003312:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003316:	4622      	mov	r2, r4
 8003318:	462b      	mov	r3, r5
 800331a:	f04f 0000 	mov.w	r0, #0
 800331e:	f04f 0100 	mov.w	r1, #0
 8003322:	0159      	lsls	r1, r3, #5
 8003324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003328:	0150      	lsls	r0, r2, #5
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4621      	mov	r1, r4
 8003330:	1a51      	subs	r1, r2, r1
 8003332:	6139      	str	r1, [r7, #16]
 8003334:	4629      	mov	r1, r5
 8003336:	eb63 0301 	sbc.w	r3, r3, r1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003348:	4659      	mov	r1, fp
 800334a:	018b      	lsls	r3, r1, #6
 800334c:	4651      	mov	r1, sl
 800334e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003352:	4651      	mov	r1, sl
 8003354:	018a      	lsls	r2, r1, #6
 8003356:	4651      	mov	r1, sl
 8003358:	ebb2 0801 	subs.w	r8, r2, r1
 800335c:	4659      	mov	r1, fp
 800335e:	eb63 0901 	sbc.w	r9, r3, r1
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800336e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003376:	4690      	mov	r8, r2
 8003378:	4699      	mov	r9, r3
 800337a:	4623      	mov	r3, r4
 800337c:	eb18 0303 	adds.w	r3, r8, r3
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	462b      	mov	r3, r5
 8003384:	eb49 0303 	adc.w	r3, r9, r3
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003396:	4629      	mov	r1, r5
 8003398:	024b      	lsls	r3, r1, #9
 800339a:	4621      	mov	r1, r4
 800339c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033a0:	4621      	mov	r1, r4
 80033a2:	024a      	lsls	r2, r1, #9
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033aa:	2200      	movs	r2, #0
 80033ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033b4:	f7fc ff0e 	bl	80001d4 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033c0:	e058      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c2:	4b38      	ldr	r3, [pc, #224]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	2200      	movs	r2, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	4611      	mov	r1, r2
 80033ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033dc:	4642      	mov	r2, r8
 80033de:	464b      	mov	r3, r9
 80033e0:	f04f 0000 	mov.w	r0, #0
 80033e4:	f04f 0100 	mov.w	r1, #0
 80033e8:	0159      	lsls	r1, r3, #5
 80033ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ee:	0150      	lsls	r0, r2, #5
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4641      	mov	r1, r8
 80033f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80033fa:	4649      	mov	r1, r9
 80033fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800340c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003410:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003414:	ebb2 040a 	subs.w	r4, r2, sl
 8003418:	eb63 050b 	sbc.w	r5, r3, fp
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	00eb      	lsls	r3, r5, #3
 8003426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800342a:	00e2      	lsls	r2, r4, #3
 800342c:	4614      	mov	r4, r2
 800342e:	461d      	mov	r5, r3
 8003430:	4643      	mov	r3, r8
 8003432:	18e3      	adds	r3, r4, r3
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	464b      	mov	r3, r9
 8003438:	eb45 0303 	adc.w	r3, r5, r3
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800344a:	4629      	mov	r1, r5
 800344c:	028b      	lsls	r3, r1, #10
 800344e:	4621      	mov	r1, r4
 8003450:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003454:	4621      	mov	r1, r4
 8003456:	028a      	lsls	r2, r1, #10
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800345e:	2200      	movs	r2, #0
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	61fa      	str	r2, [r7, #28]
 8003464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003468:	f7fc feb4 	bl	80001d4 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4613      	mov	r3, r2
 8003472:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003474:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	3301      	adds	r3, #1
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003484:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800348e:	e002      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003492:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003498:	4618      	mov	r0, r3
 800349a:	3750      	adds	r7, #80	@ 0x50
 800349c:	46bd      	mov	sp, r7
 800349e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800
 80034a8:	00f42400 	.word	0x00f42400
 80034ac:	007a1200 	.word	0x007a1200

080034b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b4:	4b03      	ldr	r3, [pc, #12]	@ (80034c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000000 	.word	0x20000000

080034c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034cc:	f7ff fff0 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	0a9b      	lsrs	r3, r3, #10
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4903      	ldr	r1, [pc, #12]	@ (80034ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	080045f0 	.word	0x080045f0

080034f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034f4:	f7ff ffdc 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034f8:	4602      	mov	r2, r0
 80034fa:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	0b5b      	lsrs	r3, r3, #13
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	4903      	ldr	r1, [pc, #12]	@ (8003514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003506:	5ccb      	ldrb	r3, [r1, r3]
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40023800 	.word	0x40023800
 8003514:	080045f0 	.word	0x080045f0

08003518 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e04a      	b.n	80035c0 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd fd28 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2224      	movs	r2, #36	@ 0x24
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800355a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fd71 	bl	8004044 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8003580:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0208 	orr.w	r2, r2, #8
 8003590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08a      	sub	sp, #40	@ 0x28
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d175      	bne.n	80036d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_UART_Transmit+0x2c>
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e06e      	b.n	80036d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2221      	movs	r2, #33	@ 0x21
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003606:	f7fd fdf9 	bl	80011fc <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	88fa      	ldrh	r2, [r7, #6]
 8003616:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003620:	d108      	bne.n	8003634 <HAL_UART_Transmit+0x6c>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d104      	bne.n	8003634 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	e003      	b.n	800363c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003638:	2300      	movs	r3, #0
 800363a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800363c:	e02e      	b.n	800369c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	2180      	movs	r1, #128	@ 0x80
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fb05 	bl	8003c58 <UART_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e03a      	b.n	80036d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003674:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	3302      	adds	r3, #2
 800367a:	61bb      	str	r3, [r7, #24]
 800367c:	e007      	b.n	800368e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	3301      	adds	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1cb      	bne.n	800363e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2200      	movs	r2, #0
 80036ae:	2140      	movs	r1, #64	@ 0x40
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fad1 	bl	8003c58 <UART_WaitOnFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e006      	b.n	80036d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e000      	b.n	80036d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
  }
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3720      	adds	r7, #32
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b0ba      	sub	sp, #232	@ 0xe8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003706:	2300      	movs	r3, #0
 8003708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800371e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_UART_IRQHandler+0x66>
 8003732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fbc2 	bl	8003ec8 <UART_Receive_IT>
      return;
 8003744:	e25b      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80de 	beq.w	800390c <HAL_UART_IRQHandler+0x22c>
 8003750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800375c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003760:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80d1 	beq.w	800390c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_UART_IRQHandler+0xae>
 8003776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800377a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_UART_IRQHandler+0xd2>
 800379a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f043 0202 	orr.w	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <HAL_UART_IRQHandler+0xf6>
 80037be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	f043 0204 	orr.w	r2, r3, #4
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d011      	beq.n	8003806 <HAL_UART_IRQHandler+0x126>
 80037e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d105      	bne.n	80037fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fe:	f043 0208 	orr.w	r2, r3, #8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 81f2 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_UART_IRQHandler+0x14e>
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fb4d 	bl	8003ec8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003838:	2b40      	cmp	r3, #64	@ 0x40
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <HAL_UART_IRQHandler+0x17a>
 8003852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d04f      	beq.n	80038fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fa55 	bl	8003d0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386a:	2b40      	cmp	r3, #64	@ 0x40
 800386c:	d141      	bne.n	80038f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3314      	adds	r3, #20
 8003874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800388c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800389a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800389e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1d9      	bne.n	800386e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d013      	beq.n	80038ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ac0 <HAL_UART_IRQHandler+0x3e0>)
 80038c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe f9f3 	bl	8001cba <HAL_DMA_Abort_IT>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038e4:	4610      	mov	r0, r2
 80038e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	e00e      	b.n	8003908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f99e 	bl	8003c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f0:	e00a      	b.n	8003908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f99a 	bl	8003c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	e006      	b.n	8003908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f996 	bl	8003c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003906:	e175      	b.n	8003bf4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	bf00      	nop
    return;
 800390a:	e173      	b.n	8003bf4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003910:	2b01      	cmp	r3, #1
 8003912:	f040 814f 	bne.w	8003bb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8148 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8141 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003952:	2b40      	cmp	r3, #64	@ 0x40
 8003954:	f040 80b6 	bne.w	8003ac4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8145 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003976:	429a      	cmp	r2, r3
 8003978:	f080 813e 	bcs.w	8003bf8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003982:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800398e:	f000 8088 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	330c      	adds	r3, #12
 80039ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1d9      	bne.n	8003992 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3314      	adds	r3, #20
 80039e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3314      	adds	r3, #20
 80039fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e1      	bne.n	80039de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3314      	adds	r3, #20
 8003a20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3314      	adds	r3, #20
 8003a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e3      	bne.n	8003a1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a72:	f023 0310 	bic.w	r3, r3, #16
 8003a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a84:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a86:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e3      	bne.n	8003a60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe f89c 	bl	8001bda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f8c1 	bl	8003c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003abe:	e09b      	b.n	8003bf8 <HAL_UART_IRQHandler+0x518>
 8003ac0:	08003dd1 	.word	0x08003dd1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 808e 	beq.w	8003bfc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8089 	beq.w	8003bfc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e3      	bne.n	8003aea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3314      	adds	r3, #20
 8003b28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	623b      	str	r3, [r7, #32]
   return(result);
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3314      	adds	r3, #20
 8003b42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b46:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e3      	bne.n	8003b22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	330c      	adds	r3, #12
 8003b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0310 	bic.w	r3, r3, #16
 8003b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b8c:	61fa      	str	r2, [r7, #28]
 8003b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	69b9      	ldr	r1, [r7, #24]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	617b      	str	r3, [r7, #20]
   return(result);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e3      	bne.n	8003b68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ba6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f847 	bl	8003c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bb2:	e023      	b.n	8003bfc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d009      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x4f4>
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f913 	bl	8003df8 <UART_Transmit_IT>
    return;
 8003bd2:	e014      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00e      	beq.n	8003bfe <HAL_UART_IRQHandler+0x51e>
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f953 	bl	8003e98 <UART_EndTransmit_IT>
    return;
 8003bf2:	e004      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
    return;
 8003bf4:	bf00      	nop
 8003bf6:	e002      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
      return;
 8003bf8:	bf00      	nop
 8003bfa:	e000      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
      return;
 8003bfc:	bf00      	nop
  }
}
 8003bfe:	37e8      	adds	r7, #232	@ 0xe8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c68:	e03b      	b.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d037      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fd fac3 	bl	80011fc <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	6a3a      	ldr	r2, [r7, #32]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e03a      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d023      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b80      	cmp	r3, #128	@ 0x80
 8003c9e:	d020      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b40      	cmp	r3, #64	@ 0x40
 8003ca4:	d01d      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d116      	bne.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f81d 	bl	8003d0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e00f      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d0b4      	beq.n	8003c6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b095      	sub	sp, #84	@ 0x54
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d32:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e5      	bne.n	8003d12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3314      	adds	r3, #20
 8003d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3314      	adds	r3, #20
 8003d64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e5      	bne.n	8003d46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d119      	bne.n	8003db6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f023 0310 	bic.w	r3, r3, #16
 8003d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003da2:	61ba      	str	r2, [r7, #24]
 8003da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6979      	ldr	r1, [r7, #20]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	613b      	str	r3, [r7, #16]
   return(result);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e5      	bne.n	8003d82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dc4:	bf00      	nop
 8003dc6:	3754      	adds	r7, #84	@ 0x54
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ddc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff ff1e 	bl	8003c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b21      	cmp	r3, #33	@ 0x21
 8003e0a:	d13e      	bne.n	8003e8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e14:	d114      	bne.n	8003e40 <UART_Transmit_IT+0x48>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d110      	bne.n	8003e40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	1c9a      	adds	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	621a      	str	r2, [r3, #32]
 8003e3e:	e008      	b.n	8003e52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	1c59      	adds	r1, r3, #1
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6211      	str	r1, [r2, #32]
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e000      	b.n	8003e8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e8a:	2302      	movs	r3, #2
  }
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff fea3 	bl	8003c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08c      	sub	sp, #48	@ 0x30
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b22      	cmp	r3, #34	@ 0x22
 8003eda:	f040 80ae 	bne.w	800403a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee6:	d117      	bne.n	8003f18 <UART_Receive_IT+0x50>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d113      	bne.n	8003f18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	1c9a      	adds	r2, r3, #2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f16:	e026      	b.n	8003f66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2a:	d007      	beq.n	8003f3c <UART_Receive_IT+0x74>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <UART_Receive_IT+0x82>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f46:	701a      	strb	r2, [r3, #0]
 8003f48:	e008      	b.n	8003f5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4619      	mov	r1, r3
 8003f74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d15d      	bne.n	8004036 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0220 	bic.w	r2, r2, #32
 8003f88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d135      	bne.n	800402c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f023 0310 	bic.w	r3, r3, #16
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe6:	623a      	str	r2, [r7, #32]
 8003fe8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	69f9      	ldr	r1, [r7, #28]
 8003fec:	6a3a      	ldr	r2, [r7, #32]
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e5      	bne.n	8003fc6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b10      	cmp	r3, #16
 8004006:	d10a      	bne.n	800401e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff fe0b 	bl	8003c40 <HAL_UARTEx_RxEventCallback>
 800402a:	e002      	b.n	8004032 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff fdf3 	bl	8003c18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e002      	b.n	800403c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800403a:	2302      	movs	r3, #2
  }
}
 800403c:	4618      	mov	r0, r3
 800403e:	3730      	adds	r7, #48	@ 0x30
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004048:	b0c0      	sub	sp, #256	@ 0x100
 800404a:	af00      	add	r7, sp, #0
 800404c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004060:	68d9      	ldr	r1, [r3, #12]
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	ea40 0301 	orr.w	r3, r0, r1
 800406c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	431a      	orrs	r2, r3
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	431a      	orrs	r2, r3
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800409c:	f021 010c 	bic.w	r1, r1, #12
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040aa:	430b      	orrs	r3, r1
 80040ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040be:	6999      	ldr	r1, [r3, #24]
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	ea40 0301 	orr.w	r3, r0, r1
 80040ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004310 <UART_SetConfig+0x2cc>)
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d005      	beq.n	80040e4 <UART_SetConfig+0xa0>
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4b8d      	ldr	r3, [pc, #564]	@ (8004314 <UART_SetConfig+0x2d0>)
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d104      	bne.n	80040ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040e4:	f7ff fa04 	bl	80034f0 <HAL_RCC_GetPCLK2Freq>
 80040e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040ec:	e003      	b.n	80040f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ee:	f7ff f9eb 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 80040f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004100:	f040 810c 	bne.w	800431c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004108:	2200      	movs	r2, #0
 800410a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800410e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	1891      	adds	r1, r2, r2
 800411c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800411e:	415b      	adcs	r3, r3
 8004120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004126:	4621      	mov	r1, r4
 8004128:	eb12 0801 	adds.w	r8, r2, r1
 800412c:	4629      	mov	r1, r5
 800412e:	eb43 0901 	adc.w	r9, r3, r1
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004146:	4690      	mov	r8, r2
 8004148:	4699      	mov	r9, r3
 800414a:	4623      	mov	r3, r4
 800414c:	eb18 0303 	adds.w	r3, r8, r3
 8004150:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004154:	462b      	mov	r3, r5
 8004156:	eb49 0303 	adc.w	r3, r9, r3
 800415a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800416a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800416e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004172:	460b      	mov	r3, r1
 8004174:	18db      	adds	r3, r3, r3
 8004176:	653b      	str	r3, [r7, #80]	@ 0x50
 8004178:	4613      	mov	r3, r2
 800417a:	eb42 0303 	adc.w	r3, r2, r3
 800417e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004188:	f7fc f824 	bl	80001d4 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4b61      	ldr	r3, [pc, #388]	@ (8004318 <UART_SetConfig+0x2d4>)
 8004192:	fba3 2302 	umull	r2, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	011c      	lsls	r4, r3, #4
 800419a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	1891      	adds	r1, r2, r2
 80041b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041b4:	415b      	adcs	r3, r3
 80041b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041bc:	4641      	mov	r1, r8
 80041be:	eb12 0a01 	adds.w	sl, r2, r1
 80041c2:	4649      	mov	r1, r9
 80041c4:	eb43 0b01 	adc.w	fp, r3, r1
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041dc:	4692      	mov	sl, r2
 80041de:	469b      	mov	fp, r3
 80041e0:	4643      	mov	r3, r8
 80041e2:	eb1a 0303 	adds.w	r3, sl, r3
 80041e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ea:	464b      	mov	r3, r9
 80041ec:	eb4b 0303 	adc.w	r3, fp, r3
 80041f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004200:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004208:	460b      	mov	r3, r1
 800420a:	18db      	adds	r3, r3, r3
 800420c:	643b      	str	r3, [r7, #64]	@ 0x40
 800420e:	4613      	mov	r3, r2
 8004210:	eb42 0303 	adc.w	r3, r2, r3
 8004214:	647b      	str	r3, [r7, #68]	@ 0x44
 8004216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800421a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800421e:	f7fb ffd9 	bl	80001d4 <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4611      	mov	r1, r2
 8004228:	4b3b      	ldr	r3, [pc, #236]	@ (8004318 <UART_SetConfig+0x2d4>)
 800422a:	fba3 2301 	umull	r2, r3, r3, r1
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2264      	movs	r2, #100	@ 0x64
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	1acb      	subs	r3, r1, r3
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800423e:	4b36      	ldr	r3, [pc, #216]	@ (8004318 <UART_SetConfig+0x2d4>)
 8004240:	fba3 2302 	umull	r2, r3, r3, r2
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800424c:	441c      	add	r4, r3
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004258:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800425c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004268:	415b      	adcs	r3, r3
 800426a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800426c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004270:	4641      	mov	r1, r8
 8004272:	1851      	adds	r1, r2, r1
 8004274:	6339      	str	r1, [r7, #48]	@ 0x30
 8004276:	4649      	mov	r1, r9
 8004278:	414b      	adcs	r3, r1
 800427a:	637b      	str	r3, [r7, #52]	@ 0x34
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004288:	4659      	mov	r1, fp
 800428a:	00cb      	lsls	r3, r1, #3
 800428c:	4651      	mov	r1, sl
 800428e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004292:	4651      	mov	r1, sl
 8004294:	00ca      	lsls	r2, r1, #3
 8004296:	4610      	mov	r0, r2
 8004298:	4619      	mov	r1, r3
 800429a:	4603      	mov	r3, r0
 800429c:	4642      	mov	r2, r8
 800429e:	189b      	adds	r3, r3, r2
 80042a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042a4:	464b      	mov	r3, r9
 80042a6:	460a      	mov	r2, r1
 80042a8:	eb42 0303 	adc.w	r3, r2, r3
 80042ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042c4:	460b      	mov	r3, r1
 80042c6:	18db      	adds	r3, r3, r3
 80042c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ca:	4613      	mov	r3, r2
 80042cc:	eb42 0303 	adc.w	r3, r2, r3
 80042d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042da:	f7fb ff7b 	bl	80001d4 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <UART_SetConfig+0x2d4>)
 80042e4:	fba3 1302 	umull	r1, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	2164      	movs	r1, #100	@ 0x64
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	3332      	adds	r3, #50	@ 0x32
 80042f6:	4a08      	ldr	r2, [pc, #32]	@ (8004318 <UART_SetConfig+0x2d4>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f003 0207 	and.w	r2, r3, #7
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4422      	add	r2, r4
 800430a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800430c:	e106      	b.n	800451c <UART_SetConfig+0x4d8>
 800430e:	bf00      	nop
 8004310:	40011000 	.word	0x40011000
 8004314:	40011400 	.word	0x40011400
 8004318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800431c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004326:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800432a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800432e:	4642      	mov	r2, r8
 8004330:	464b      	mov	r3, r9
 8004332:	1891      	adds	r1, r2, r2
 8004334:	6239      	str	r1, [r7, #32]
 8004336:	415b      	adcs	r3, r3
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
 800433a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800433e:	4641      	mov	r1, r8
 8004340:	1854      	adds	r4, r2, r1
 8004342:	4649      	mov	r1, r9
 8004344:	eb43 0501 	adc.w	r5, r3, r1
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	00eb      	lsls	r3, r5, #3
 8004352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004356:	00e2      	lsls	r2, r4, #3
 8004358:	4614      	mov	r4, r2
 800435a:	461d      	mov	r5, r3
 800435c:	4643      	mov	r3, r8
 800435e:	18e3      	adds	r3, r4, r3
 8004360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004364:	464b      	mov	r3, r9
 8004366:	eb45 0303 	adc.w	r3, r5, r3
 800436a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800437a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800438a:	4629      	mov	r1, r5
 800438c:	008b      	lsls	r3, r1, #2
 800438e:	4621      	mov	r1, r4
 8004390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004394:	4621      	mov	r1, r4
 8004396:	008a      	lsls	r2, r1, #2
 8004398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800439c:	f7fb ff1a 	bl	80001d4 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4b60      	ldr	r3, [pc, #384]	@ (8004528 <UART_SetConfig+0x4e4>)
 80043a6:	fba3 2302 	umull	r2, r3, r3, r2
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	011c      	lsls	r4, r3, #4
 80043ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043c0:	4642      	mov	r2, r8
 80043c2:	464b      	mov	r3, r9
 80043c4:	1891      	adds	r1, r2, r2
 80043c6:	61b9      	str	r1, [r7, #24]
 80043c8:	415b      	adcs	r3, r3
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d0:	4641      	mov	r1, r8
 80043d2:	1851      	adds	r1, r2, r1
 80043d4:	6139      	str	r1, [r7, #16]
 80043d6:	4649      	mov	r1, r9
 80043d8:	414b      	adcs	r3, r1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e8:	4659      	mov	r1, fp
 80043ea:	00cb      	lsls	r3, r1, #3
 80043ec:	4651      	mov	r1, sl
 80043ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f2:	4651      	mov	r1, sl
 80043f4:	00ca      	lsls	r2, r1, #3
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	4642      	mov	r2, r8
 80043fe:	189b      	adds	r3, r3, r2
 8004400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004404:	464b      	mov	r3, r9
 8004406:	460a      	mov	r2, r1
 8004408:	eb42 0303 	adc.w	r3, r2, r3
 800440c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	67bb      	str	r3, [r7, #120]	@ 0x78
 800441a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004428:	4649      	mov	r1, r9
 800442a:	008b      	lsls	r3, r1, #2
 800442c:	4641      	mov	r1, r8
 800442e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004432:	4641      	mov	r1, r8
 8004434:	008a      	lsls	r2, r1, #2
 8004436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800443a:	f7fb fecb 	bl	80001d4 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4611      	mov	r1, r2
 8004444:	4b38      	ldr	r3, [pc, #224]	@ (8004528 <UART_SetConfig+0x4e4>)
 8004446:	fba3 2301 	umull	r2, r3, r3, r1
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2264      	movs	r2, #100	@ 0x64
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	1acb      	subs	r3, r1, r3
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	3332      	adds	r3, #50	@ 0x32
 8004458:	4a33      	ldr	r2, [pc, #204]	@ (8004528 <UART_SetConfig+0x4e4>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004464:	441c      	add	r4, r3
 8004466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800446a:	2200      	movs	r2, #0
 800446c:	673b      	str	r3, [r7, #112]	@ 0x70
 800446e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004470:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	1891      	adds	r1, r2, r2
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	415b      	adcs	r3, r3
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004484:	4641      	mov	r1, r8
 8004486:	1851      	adds	r1, r2, r1
 8004488:	6039      	str	r1, [r7, #0]
 800448a:	4649      	mov	r1, r9
 800448c:	414b      	adcs	r3, r1
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800449c:	4659      	mov	r1, fp
 800449e:	00cb      	lsls	r3, r1, #3
 80044a0:	4651      	mov	r1, sl
 80044a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a6:	4651      	mov	r1, sl
 80044a8:	00ca      	lsls	r2, r1, #3
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	4642      	mov	r2, r8
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044b6:	464b      	mov	r3, r9
 80044b8:	460a      	mov	r2, r1
 80044ba:	eb42 0303 	adc.w	r3, r2, r3
 80044be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044d8:	4649      	mov	r1, r9
 80044da:	008b      	lsls	r3, r1, #2
 80044dc:	4641      	mov	r1, r8
 80044de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e2:	4641      	mov	r1, r8
 80044e4:	008a      	lsls	r2, r1, #2
 80044e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044ea:	f7fb fe73 	bl	80001d4 <__aeabi_uldivmod>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <UART_SetConfig+0x4e4>)
 80044f4:	fba3 1302 	umull	r1, r3, r3, r2
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	2164      	movs	r1, #100	@ 0x64
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	3332      	adds	r3, #50	@ 0x32
 8004506:	4a08      	ldr	r2, [pc, #32]	@ (8004528 <UART_SetConfig+0x4e4>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	f003 020f 	and.w	r2, r3, #15
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4422      	add	r2, r4
 800451a:	609a      	str	r2, [r3, #8]
}
 800451c:	bf00      	nop
 800451e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004522:	46bd      	mov	sp, r7
 8004524:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004528:	51eb851f 	.word	0x51eb851f

0800452c <memmove>:
 800452c:	4288      	cmp	r0, r1
 800452e:	b510      	push	{r4, lr}
 8004530:	eb01 0402 	add.w	r4, r1, r2
 8004534:	d902      	bls.n	800453c <memmove+0x10>
 8004536:	4284      	cmp	r4, r0
 8004538:	4623      	mov	r3, r4
 800453a:	d807      	bhi.n	800454c <memmove+0x20>
 800453c:	1e43      	subs	r3, r0, #1
 800453e:	42a1      	cmp	r1, r4
 8004540:	d008      	beq.n	8004554 <memmove+0x28>
 8004542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800454a:	e7f8      	b.n	800453e <memmove+0x12>
 800454c:	4402      	add	r2, r0
 800454e:	4601      	mov	r1, r0
 8004550:	428a      	cmp	r2, r1
 8004552:	d100      	bne.n	8004556 <memmove+0x2a>
 8004554:	bd10      	pop	{r4, pc}
 8004556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800455a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800455e:	e7f7      	b.n	8004550 <memmove+0x24>

08004560 <memset>:
 8004560:	4402      	add	r2, r0
 8004562:	4603      	mov	r3, r0
 8004564:	4293      	cmp	r3, r2
 8004566:	d100      	bne.n	800456a <memset+0xa>
 8004568:	4770      	bx	lr
 800456a:	f803 1b01 	strb.w	r1, [r3], #1
 800456e:	e7f9      	b.n	8004564 <memset+0x4>

08004570 <__libc_init_array>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	4d0d      	ldr	r5, [pc, #52]	@ (80045a8 <__libc_init_array+0x38>)
 8004574:	4c0d      	ldr	r4, [pc, #52]	@ (80045ac <__libc_init_array+0x3c>)
 8004576:	1b64      	subs	r4, r4, r5
 8004578:	10a4      	asrs	r4, r4, #2
 800457a:	2600      	movs	r6, #0
 800457c:	42a6      	cmp	r6, r4
 800457e:	d109      	bne.n	8004594 <__libc_init_array+0x24>
 8004580:	4d0b      	ldr	r5, [pc, #44]	@ (80045b0 <__libc_init_array+0x40>)
 8004582:	4c0c      	ldr	r4, [pc, #48]	@ (80045b4 <__libc_init_array+0x44>)
 8004584:	f000 f818 	bl	80045b8 <_init>
 8004588:	1b64      	subs	r4, r4, r5
 800458a:	10a4      	asrs	r4, r4, #2
 800458c:	2600      	movs	r6, #0
 800458e:	42a6      	cmp	r6, r4
 8004590:	d105      	bne.n	800459e <__libc_init_array+0x2e>
 8004592:	bd70      	pop	{r4, r5, r6, pc}
 8004594:	f855 3b04 	ldr.w	r3, [r5], #4
 8004598:	4798      	blx	r3
 800459a:	3601      	adds	r6, #1
 800459c:	e7ee      	b.n	800457c <__libc_init_array+0xc>
 800459e:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a2:	4798      	blx	r3
 80045a4:	3601      	adds	r6, #1
 80045a6:	e7f2      	b.n	800458e <__libc_init_array+0x1e>
 80045a8:	08004600 	.word	0x08004600
 80045ac:	08004600 	.word	0x08004600
 80045b0:	08004600 	.word	0x08004600
 80045b4:	08004604 	.word	0x08004604

080045b8 <_init>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	bf00      	nop
 80045bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045be:	bc08      	pop	{r3}
 80045c0:	469e      	mov	lr, r3
 80045c2:	4770      	bx	lr

080045c4 <_fini>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr
