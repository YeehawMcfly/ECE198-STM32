
Sending Data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dc0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b10  08007f60  08007f60  00008f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a70  08008a70  0000a1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008a70  08008a70  00009a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a78  08008a78  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a78  08008a78  00009a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a7c  08008a7c  00009a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008a80  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  200001e0  08008c60  0000a1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  08008c60  0000a850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dff6  00000000  00000000  0000a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022db  00000000  00000000  00018206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0001a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009dc  00000000  00000000  0001b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c3f0  00000000  00000000  0001bb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003a48  00000000  00000000  00027f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0002b9a4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000045f0  00000000  00000000  0002b9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006a  00000000  00000000  0002ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f48 	.word	0x08007f48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007f48 	.word	0x08007f48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_UART_TxCpltCallback>:

// Buffer for encryption/decryption operations (2 uint32_t for 8 bytes)
uint32_t data_buffer[2];

// Transmission Complete Callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_UART_TxCpltCallback+0x24>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d102      	bne.n	8000ebe <HAL_UART_TxCpltCallback+0x16>
        transmissionComplete = 1;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_UART_TxCpltCallback+0x28>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
    }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000298 	.word	0x20000298
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <encrypt>:

// Encryption Function
void encrypt(uint32_t v[2], const uint32_t k[4]) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b08d      	sub	sp, #52	@ 0x34
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
    uint32_t v0 = v[0], v1 = v[1], sum = 0, i;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t delta = 0x9E3779B9;
 8000eee:	4b25      	ldr	r3, [pc, #148]	@ (8000f84 <encrypt+0xb0>)
 8000ef0:	61fb      	str	r3, [r7, #28]
    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	3304      	adds	r3, #4
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	3308      	adds	r3, #8
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	330c      	adds	r3, #12
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 32; i++) {
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
 8000f14:	e026      	b.n	8000f64 <encrypt+0x90>
        sum += delta;
 8000f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
        v0 += ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1);
 8000f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f20:	011a      	lsls	r2, r3, #4
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	441a      	add	r2, r3
 8000f26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2a:	440b      	add	r3, r1
 8000f2c:	405a      	eors	r2, r3
 8000f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f30:	0959      	lsrs	r1, r3, #5
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	440b      	add	r3, r1
 8000f36:	4053      	eors	r3, r2
 8000f38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f3a:	4413      	add	r3, r2
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        v1 += ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3);
 8000f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f40:	011a      	lsls	r2, r3, #4
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	441a      	add	r2, r3
 8000f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4a:	440b      	add	r3, r1
 8000f4c:	405a      	eors	r2, r3
 8000f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f50:	0959      	lsrs	r1, r3, #5
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	440b      	add	r3, r1
 8000f56:	4053      	eors	r3, r2
 8000f58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f5a:	4413      	add	r3, r2
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (i = 0; i < 32; i++) {
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	3301      	adds	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	2b1f      	cmp	r3, #31
 8000f68:	d9d5      	bls.n	8000f16 <encrypt+0x42>
    }
    v[0] = v0;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f6e:	601a      	str	r2, [r3, #0]
    v[1] = v1;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3304      	adds	r3, #4
 8000f74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f76:	601a      	str	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	3734      	adds	r7, #52	@ 0x34
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	9e3779b9 	.word	0x9e3779b9

08000f88 <encryptMessage>:
    v[0] = v0;
    v[1] = v1;
}

// Encrypt Message Function
void encryptMessage(uint8_t* input, size_t len) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    // Ensure len is a multiple of 8
    if (len % 8 != 0) {
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d010      	beq.n	8000fbe <encryptMessage+0x36>
        // Handle padding if necessary
        memset(input + len, 0, 8 - (len % 8));
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	18d0      	adds	r0, r2, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	f1c3 0308 	rsb	r3, r3, #8
 8000fac:	461a      	mov	r2, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f004 ff19 	bl	8005de6 <memset>
        len += 8 - (len % 8);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f023 0307 	bic.w	r3, r3, #7
 8000fba:	3308      	adds	r3, #8
 8000fbc:	603b      	str	r3, [r7, #0]
    }

    // Clear the buffer first
    memset(data_buffer, 0, sizeof(data_buffer));
 8000fbe:	2208      	movs	r2, #8
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4812      	ldr	r0, [pc, #72]	@ (800100c <encryptMessage+0x84>)
 8000fc4:	f004 ff0f 	bl	8005de6 <memset>

    // Copy input data to buffer as uint32_t
    memcpy(data_buffer, input, len);
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	480f      	ldr	r0, [pc, #60]	@ (800100c <encryptMessage+0x84>)
 8000fce:	f004 ff8a 	bl	8005ee6 <memcpy>

    // Encrypt in blocks of 8 bytes (2 uint32_t)
    for (int i = 0; i < (len / 4); i += 2) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	e00a      	b.n	8000fee <encryptMessage+0x66>
        encrypt(&data_buffer[i], key);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <encryptMessage+0x84>)
 8000fde:	4413      	add	r3, r2
 8000fe0:	490b      	ldr	r1, [pc, #44]	@ (8001010 <encryptMessage+0x88>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff76 	bl	8000ed4 <encrypt>
    for (int i = 0; i < (len / 4); i += 2) {
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3302      	adds	r3, #2
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	089a      	lsrs	r2, r3, #2
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8ef      	bhi.n	8000fd8 <encryptMessage+0x50>
    }

    // Copy back to input buffer
    memcpy(input, data_buffer, len);
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	4904      	ldr	r1, [pc, #16]	@ (800100c <encryptMessage+0x84>)
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f004 ff72 	bl	8005ee6 <memcpy>
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200002ec 	.word	0x200002ec
 8001010:	080086d8 	.word	0x080086d8

08001014 <main>:
// Decrypt Message Function (Not used in Sender)
void decryptMessage(uint8_t* input, size_t len) {
    // Sender does not decrypt, so this can remain empty or be removed
}

int main(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af00      	add	r7, sp, #0
    // Initialize the Hardware Abstraction Layer
    HAL_Init();
 800101a:	f000 ffcb 	bl	8001fb4 <HAL_Init>

    // Configure the system clock
    SystemClock_Config();
 800101e:	f000 f97b 	bl	8001318 <SystemClock_Config>

    // Initialize all configured peripherals
    MX_GPIO_Init();
 8001022:	f000 f8fb 	bl	800121c <MX_GPIO_Init>
    MX_I2C1_Init();
 8001026:	f000 f9e1 	bl	80013ec <MX_I2C1_Init>
    MX_ADC1_Init();
 800102a:	f000 fa0d 	bl	8001448 <MX_ADC1_Init>
    MX_USART1_UART_Init();
 800102e:	f000 f8cb 	bl	80011c8 <MX_USART1_UART_Init>

    // Initialize the SSD1306 OLED display
    SSD1306_Init();
 8001032:	f000 fa61 	bl	80014f8 <SSD1306_Init>

    // Perform an initial ADC conversion to set yPos and prevYPos
    HAL_ADC_Start(&hadc1);
 8001036:	4856      	ldr	r0, [pc, #344]	@ (8001190 <main+0x17c>)
 8001038:	f001 f896 	bl	8002168 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	4853      	ldr	r0, [pc, #332]	@ (8001190 <main+0x17c>)
 8001042:	f001 f945 	bl	80022d0 <HAL_ADC_PollForConversion>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d114      	bne.n	8001076 <main+0x62>
        uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 800104c:	4850      	ldr	r0, [pc, #320]	@ (8001190 <main+0x17c>)
 800104e:	f001 f9ca 	bl	80023e6 <HAL_ADC_GetValue>
 8001052:	4603      	mov	r3, r0
 8001054:	84fb      	strh	r3, [r7, #38]	@ 0x26
        yPos = SSD1306_HEIGHT - 1 - ((adcValue * (SSD1306_HEIGHT - 1)) / 4095);
 8001056:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001058:	4a4e      	ldr	r2, [pc, #312]	@ (8001194 <main+0x180>)
 800105a:	fb82 1203 	smull	r1, r2, r2, r3
 800105e:	1152      	asrs	r2, r2, #5
 8001060:	17db      	asrs	r3, r3, #31
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	b2db      	uxtb	r3, r3
 8001066:	333f      	adds	r3, #63	@ 0x3f
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <main+0x184>)
 800106c:	701a      	strb	r2, [r3, #0]
        prevYPos = yPos;
 800106e:	4b4a      	ldr	r3, [pc, #296]	@ (8001198 <main+0x184>)
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	4b4a      	ldr	r3, [pc, #296]	@ (800119c <main+0x188>)
 8001074:	701a      	strb	r2, [r3, #0]
    }

    while (1) {
        if (transmissionComplete) {
 8001076:	4b4a      	ldr	r3, [pc, #296]	@ (80011a0 <main+0x18c>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 8082 	beq.w	8001186 <main+0x172>
            HAL_ADC_Start(&hadc1);
 8001082:	4843      	ldr	r0, [pc, #268]	@ (8001190 <main+0x17c>)
 8001084:	f001 f870 	bl	8002168 <HAL_ADC_Start>

            if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	4840      	ldr	r0, [pc, #256]	@ (8001190 <main+0x17c>)
 800108e:	f001 f91f 	bl	80022d0 <HAL_ADC_PollForConversion>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d176      	bne.n	8001186 <main+0x172>
                uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 8001098:	483d      	ldr	r0, [pc, #244]	@ (8001190 <main+0x17c>)
 800109a:	f001 f9a4 	bl	80023e6 <HAL_ADC_GetValue>
 800109e:	4603      	mov	r3, r0
 80010a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
                float lux = adcValue; // Use ADC value as 'lux'
 80010a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ac:	edc7 7a08 	vstr	s15, [r7, #32]
                float VREF = 3.3f;    // Reference voltage
 80010b0:	4b3c      	ldr	r3, [pc, #240]	@ (80011a4 <main+0x190>)
 80010b2:	61fb      	str	r3, [r7, #28]
                float ADC_RESOLUTION = 4095.0f; // 12-bit ADC resolution
 80010b4:	4b3c      	ldr	r3, [pc, #240]	@ (80011a8 <main+0x194>)
 80010b6:	61bb      	str	r3, [r7, #24]
                float voltage = (lux * VREF) / ADC_RESOLUTION;
 80010b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80010bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80010c0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80010c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80010c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010cc:	edc7 7a05 	vstr	s15, [r7, #20]
                float epsilon = 0.01f; // Threshold for voltage change
 80010d0:	4b36      	ldr	r3, [pc, #216]	@ (80011ac <main+0x198>)
 80010d2:	613b      	str	r3, [r7, #16]
                yPos = SSD1306_HEIGHT - 1 - ((adcValue * (SSD1306_HEIGHT - 1)) / 4095);
 80010d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001194 <main+0x180>)
 80010d8:	fb82 1203 	smull	r1, r2, r2, r3
 80010dc:	1152      	asrs	r2, r2, #5
 80010de:	17db      	asrs	r3, r3, #31
 80010e0:	1a9b      	subs	r3, r3, r2
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	333f      	adds	r3, #63	@ 0x3f
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001198 <main+0x184>)
 80010ea:	701a      	strb	r2, [r3, #0]

                if (displayVoltage) {
 80010ec:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <main+0x19c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d01f      	beq.n	8001136 <main+0x122>
                    // Display Voltage
                	static uint8_t prevYPosDisplayed = 0xFF;

                	if (yPos != prevYPosDisplayed) {         // Only update if the yPos changes
 80010f6:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <main+0x184>)
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	4b2e      	ldr	r3, [pc, #184]	@ (80011b4 <main+0x1a0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d029      	beq.n	8001156 <main+0x142>
						prevYPosDisplayed = yPos;
 8001102:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <main+0x184>)
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	4b2b      	ldr	r3, [pc, #172]	@ (80011b4 <main+0x1a0>)
 8001108:	701a      	strb	r2, [r3, #0]

						// Format yPos for display
						char yPosStr[16];
						snprintf(yPosStr, sizeof(yPosStr), "yPos: %u", yPos);
 800110a:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <main+0x184>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	4638      	mov	r0, r7
 8001110:	4a29      	ldr	r2, [pc, #164]	@ (80011b8 <main+0x1a4>)
 8001112:	2110      	movs	r1, #16
 8001114:	f004 fdd6 	bl	8005cc4 <sniprintf>

						// Update OLED Display
						SSD1306_Clear(); // Clear screen only when necessary
 8001118:	f000 fc11 	bl	800193e <SSD1306_Clear>
						SSD1306_GotoXY(0, 0);
 800111c:	2100      	movs	r1, #0
 800111e:	2000      	movs	r0, #0
 8001120:	f000 fb54 	bl	80017cc <SSD1306_GotoXY>
						SSD1306_Puts(yPosStr, &Font_7x10, SSD1306_COLOR_WHITE);
 8001124:	463b      	mov	r3, r7
 8001126:	2201      	movs	r2, #1
 8001128:	4924      	ldr	r1, [pc, #144]	@ (80011bc <main+0x1a8>)
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fbe2 	bl	80018f4 <SSD1306_Puts>
						SSD1306_UpdateScreen();
 8001130:	f000 faa6 	bl	8001680 <SSD1306_UpdateScreen>
 8001134:	e00f      	b.n	8001156 <main+0x142>
					}
                } else {
                    SSD1306_ShiftBufferLeft();
 8001136:	f000 fca5 	bl	8001a84 <SSD1306_ShiftBufferLeft>
                    SSD1306_DrawVerticalLineInRightmostColumn(prevYPos, yPos, SSD1306_COLOR_WHITE);
 800113a:	4b18      	ldr	r3, [pc, #96]	@ (800119c <main+0x188>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	4a16      	ldr	r2, [pc, #88]	@ (8001198 <main+0x184>)
 8001140:	7811      	ldrb	r1, [r2, #0]
 8001142:	2201      	movs	r2, #1
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fcc3 	bl	8001ad0 <SSD1306_DrawVerticalLineInRightmostColumn>
                    SSD1306_UpdateScreen();
 800114a:	f000 fa99 	bl	8001680 <SSD1306_UpdateScreen>
                    prevYPos = yPos;
 800114e:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <main+0x184>)
 8001150:	781a      	ldrb	r2, [r3, #0]
 8001152:	4b12      	ldr	r3, [pc, #72]	@ (800119c <main+0x188>)
 8001154:	701a      	strb	r2, [r3, #0]
                }

                // Transmit Data (Always Transmit Regardless of Display Mode)
                memset(TxData, 0, sizeof(TxData));
 8001156:	2208      	movs	r2, #8
 8001158:	2100      	movs	r1, #0
 800115a:	4819      	ldr	r0, [pc, #100]	@ (80011c0 <main+0x1ac>)
 800115c:	f004 fe43 	bl	8005de6 <memset>
                TxData[0] = yPos;
 8001160:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <main+0x184>)
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <main+0x1ac>)
 8001166:	701a      	strb	r2, [r3, #0]

                // Encrypt the TxData before transmission
                encryptMessage(TxData, sizeof(TxData));
 8001168:	2108      	movs	r1, #8
 800116a:	4815      	ldr	r0, [pc, #84]	@ (80011c0 <main+0x1ac>)
 800116c:	f7ff ff0c 	bl	8000f88 <encryptMessage>
                HAL_HalfDuplex_EnableTransmitter(&huart1);
 8001170:	4814      	ldr	r0, [pc, #80]	@ (80011c4 <main+0x1b0>)
 8001172:	f003 fc47 	bl	8004a04 <HAL_HalfDuplex_EnableTransmitter>
                transmissionComplete = 0;
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <main+0x18c>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit_IT(&huart1, TxData, sizeof(TxData));
 800117c:	2208      	movs	r2, #8
 800117e:	4910      	ldr	r1, [pc, #64]	@ (80011c0 <main+0x1ac>)
 8001180:	4810      	ldr	r0, [pc, #64]	@ (80011c4 <main+0x1b0>)
 8001182:	f003 f957 	bl	8004434 <HAL_UART_Transmit_IT>
            }
        }

        HAL_Delay(1); // Minimal delay to prevent watchdog reset
 8001186:	2001      	movs	r0, #1
 8001188:	f000 ff86 	bl	8002098 <HAL_Delay>
        if (transmissionComplete) {
 800118c:	e773      	b.n	8001076 <main+0x62>
 800118e:	bf00      	nop
 8001190:	200001fc 	.word	0x200001fc
 8001194:	7e07e07f 	.word	0x7e07e07f
 8001198:	200002e8 	.word	0x200002e8
 800119c:	200002e9 	.word	0x200002e9
 80011a0:	20000008 	.word	0x20000008
 80011a4:	40533333 	.word	0x40533333
 80011a8:	457ff000 	.word	0x457ff000
 80011ac:	3c23d70a 	.word	0x3c23d70a
 80011b0:	200002ea 	.word	0x200002ea
 80011b4:	20000009 	.word	0x20000009
 80011b8:	08007f60 	.word	0x08007f60
 80011bc:	20000000 	.word	0x20000000
 80011c0:	200002e0 	.word	0x200002e0
 80011c4:	20000298 	.word	0x20000298

080011c8 <MX_USART1_UART_Init>:
    }


}

static void MX_USART1_UART_Init(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <MX_USART1_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX; // Enable both TX and RX for Half-Duplex
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]

    if (HAL_HalfDuplex_Init(&huart1) != HAL_OK) {
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 8001200:	f003 f8c0 	bl	8004384 <HAL_HalfDuplex_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART1_UART_Init+0x46>
        Error_Handler();
 800120a:	f000 f96f 	bl	80014ec <Error_Handler>
    }
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000298 	.word	0x20000298
 8001218:	40011000 	.word	0x40011000

0800121c <MX_GPIO_Init>:

static void MX_GPIO_Init(void){
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

    // Enable GPIO Ports Clock
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b28      	ldr	r3, [pc, #160]	@ (80012d8 <MX_GPIO_Init+0xbc>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a27      	ldr	r2, [pc, #156]	@ (80012d8 <MX_GPIO_Init+0xbc>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b25      	ldr	r3, [pc, #148]	@ (80012d8 <MX_GPIO_Init+0xbc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <MX_GPIO_Init+0xbc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a20      	ldr	r2, [pc, #128]	@ (80012d8 <MX_GPIO_Init+0xbc>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b1e      	ldr	r3, [pc, #120]	@ (80012d8 <MX_GPIO_Init+0xbc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_GPIO_Init+0xbc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a19      	ldr	r2, [pc, #100]	@ (80012d8 <MX_GPIO_Init+0xbc>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <MX_GPIO_Init+0xbc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <MX_GPIO_Init+0xbc>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <MX_GPIO_Init+0xbc>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <MX_GPIO_Init+0xbc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

    // Configure PC13 as Input with External Interrupt
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4808      	ldr	r0, [pc, #32]	@ (80012dc <MX_GPIO_Init+0xc0>)
 80012ba:	f001 fc63 	bl	8002b84 <HAL_GPIO_Init>

    // Set EXTI Line 15_10 Interrupt Priority and Enable it
    HAL_NVIC_SetPriority(EXTI15_10_IRQn,0,0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2028      	movs	r0, #40	@ 0x28
 80012c4:	f001 fb95 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012c8:	2028      	movs	r0, #40	@ 0x28
 80012ca:	f001 fbae 	bl	8002a2a <HAL_NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	@ 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020800 	.word	0x40020800

080012e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012f0:	d10a      	bne.n	8001308 <HAL_GPIO_EXTI_Callback+0x28>
        displayVoltage = !displayVoltage; // Toggle display mode
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <HAL_GPIO_EXTI_Callback+0x34>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	461a      	mov	r2, r3
 8001304:	4b03      	ldr	r3, [pc, #12]	@ (8001314 <HAL_GPIO_EXTI_Callback+0x34>)
 8001306:	701a      	strb	r2, [r3, #0]
    }
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	200002ea 	.word	0x200002ea

08001318 <SystemClock_Config>:


void SystemClock_Config(void){
 8001318:	b580      	push	{r7, lr}
 800131a:	b094      	sub	sp, #80	@ 0x50
 800131c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	2230      	movs	r2, #48	@ 0x30
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f004 fd5d 	bl	8005de6 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <SystemClock_Config+0xcc>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	4a27      	ldr	r2, [pc, #156]	@ (80013e4 <SystemClock_Config+0xcc>)
 8001346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134a:	6413      	str	r3, [r2, #64]	@ 0x40
 800134c:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <SystemClock_Config+0xcc>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <SystemClock_Config+0xd0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001364:	4a20      	ldr	r2, [pc, #128]	@ (80013e8 <SystemClock_Config+0xd0>)
 8001366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <SystemClock_Config+0xd0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]

    // Initialize RCC Oscillators
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001378:	2302      	movs	r3, #2
 800137a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137c:	2301      	movs	r3, #1
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001380:	2310      	movs	r3, #16
 8001382:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001384:	2302      	movs	r3, #2
 8001386:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001388:	2300      	movs	r3, #0
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 800138c:	2308      	movs	r3, #8
 800138e:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 8001390:	2354      	movs	r3, #84	@ 0x54
 8001392:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001394:	2302      	movs	r3, #2
 8001396:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001398:	2304      	movs	r3, #4
 800139a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 fb57 	bl	8003a54 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x98>
        Error_Handler();
 80013ac:	f000 f89e 	bl	80014ec <Error_Handler>
    }

    // Initialize CPU, AHB and APB Clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2302      	movs	r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c0:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK){
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	2102      	movs	r1, #2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fdb9 	bl	8003f44 <HAL_RCC_ClockConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0xc4>
        Error_Handler();
 80013d8:	f000 f888 	bl	80014ec <Error_Handler>
    }
}
 80013dc:	bf00      	nop
 80013de:	3750      	adds	r7, #80	@ 0x50
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40007000 	.word	0x40007000

080013ec <MX_I2C1_Init>:

static void MX_I2C1_Init(void){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_I2C1_Init+0x50>)
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <MX_I2C1_Init+0x54>)
 80013f4:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000; // 400 kHz Fast Mode
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_I2C1_Init+0x50>)
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <MX_I2C1_Init+0x58>)
 80013fa:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_I2C1_Init+0x50>)
 800140a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800140e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <MX_I2C1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_I2C1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
    if(HAL_I2C_Init(&hi2c1)!= HAL_OK){
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_I2C1_Init+0x50>)
 800142a:	f001 fd47 	bl	8002ebc <HAL_I2C_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8001434:	f000 f85a 	bl	80014ec <Error_Handler>
    }
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000244 	.word	0x20000244
 8001440:	40005400 	.word	0x40005400
 8001444:	00061a80 	.word	0x00061a80

08001448 <MX_ADC1_Init>:

static void MX_ADC1_Init(void){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
    hadc1.Instance = ADC1;
 800145a:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <MX_ADC1_Init+0x98>)
 800145c:	4a21      	ldr	r2, [pc, #132]	@ (80014e4 <MX_ADC1_Init+0x9c>)
 800145e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001460:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <MX_ADC1_Init+0x98>)
 8001462:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001466:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <MX_ADC1_Init+0x98>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 800146e:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <MX_ADC1_Init+0x98>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <MX_ADC1_Init+0x98>)
 8001476:	2200      	movs	r2, #0
 8001478:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <MX_ADC1_Init+0x98>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001482:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <MX_ADC1_Init+0x98>)
 8001484:	2200      	movs	r2, #0
 8001486:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001488:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <MX_ADC1_Init+0x98>)
 800148a:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <MX_ADC1_Init+0xa0>)
 800148c:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_ADC1_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <MX_ADC1_Init+0x98>)
 8001496:	2201      	movs	r2, #1
 8001498:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_ADC1_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_ADC1_Init+0x98>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1)!= HAL_OK){
 80014a8:	480d      	ldr	r0, [pc, #52]	@ (80014e0 <MX_ADC1_Init+0x98>)
 80014aa:	f000 fe19 	bl	80020e0 <HAL_ADC_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC1_Init+0x70>
        Error_Handler();
 80014b4:	f000 f81a 	bl	80014ec <Error_Handler>
    }
    sConfig.Channel = ADC_CHANNEL_0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80014bc:	2301      	movs	r3, #1
 80014be:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80014c0:	2301      	movs	r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
    if(HAL_ADC_ConfigChannel(&hadc1, &sConfig)!= HAL_OK){
 80014c4:	463b      	mov	r3, r7
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_ADC1_Init+0x98>)
 80014ca:	f000 ff99 	bl	8002400 <HAL_ADC_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0x90>
        Error_Handler();
 80014d4:	f000 f80a 	bl	80014ec <Error_Handler>
    }
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200001fc 	.word	0x200001fc
 80014e4:	40012000 	.word	0x40012000
 80014e8:	0f000001 	.word	0x0f000001

080014ec <Error_Handler>:

void Error_Handler(void){
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
    __disable_irq();
    while (1){}
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <Error_Handler+0x8>

080014f8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80014fe:	f000 fa27 	bl	8001950 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001502:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001506:	2201      	movs	r2, #1
 8001508:	2178      	movs	r1, #120	@ 0x78
 800150a:	485b      	ldr	r0, [pc, #364]	@ (8001678 <SSD1306_Init+0x180>)
 800150c:	f001 ff18 	bl	8003340 <HAL_I2C_IsDeviceReady>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001516:	2300      	movs	r3, #0
 8001518:	e0a9      	b.n	800166e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800151a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800151e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001520:	e002      	b.n	8001528 <SSD1306_Init+0x30>
		p--;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3b01      	subs	r3, #1
 8001526:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f9      	bne.n	8001522 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800152e:	22ae      	movs	r2, #174	@ 0xae
 8001530:	2100      	movs	r1, #0
 8001532:	2078      	movs	r0, #120	@ 0x78
 8001534:	f000 fa88 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001538:	2220      	movs	r2, #32
 800153a:	2100      	movs	r1, #0
 800153c:	2078      	movs	r0, #120	@ 0x78
 800153e:	f000 fa83 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001542:	2210      	movs	r2, #16
 8001544:	2100      	movs	r1, #0
 8001546:	2078      	movs	r0, #120	@ 0x78
 8001548:	f000 fa7e 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800154c:	22b0      	movs	r2, #176	@ 0xb0
 800154e:	2100      	movs	r1, #0
 8001550:	2078      	movs	r0, #120	@ 0x78
 8001552:	f000 fa79 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001556:	22c8      	movs	r2, #200	@ 0xc8
 8001558:	2100      	movs	r1, #0
 800155a:	2078      	movs	r0, #120	@ 0x78
 800155c:	f000 fa74 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	2078      	movs	r0, #120	@ 0x78
 8001566:	f000 fa6f 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800156a:	2210      	movs	r2, #16
 800156c:	2100      	movs	r1, #0
 800156e:	2078      	movs	r0, #120	@ 0x78
 8001570:	f000 fa6a 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001574:	2240      	movs	r2, #64	@ 0x40
 8001576:	2100      	movs	r1, #0
 8001578:	2078      	movs	r0, #120	@ 0x78
 800157a:	f000 fa65 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800157e:	2281      	movs	r2, #129	@ 0x81
 8001580:	2100      	movs	r1, #0
 8001582:	2078      	movs	r0, #120	@ 0x78
 8001584:	f000 fa60 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001588:	22ff      	movs	r2, #255	@ 0xff
 800158a:	2100      	movs	r1, #0
 800158c:	2078      	movs	r0, #120	@ 0x78
 800158e:	f000 fa5b 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001592:	22a1      	movs	r2, #161	@ 0xa1
 8001594:	2100      	movs	r1, #0
 8001596:	2078      	movs	r0, #120	@ 0x78
 8001598:	f000 fa56 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800159c:	22a6      	movs	r2, #166	@ 0xa6
 800159e:	2100      	movs	r1, #0
 80015a0:	2078      	movs	r0, #120	@ 0x78
 80015a2:	f000 fa51 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80015a6:	22a8      	movs	r2, #168	@ 0xa8
 80015a8:	2100      	movs	r1, #0
 80015aa:	2078      	movs	r0, #120	@ 0x78
 80015ac:	f000 fa4c 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80015b0:	223f      	movs	r2, #63	@ 0x3f
 80015b2:	2100      	movs	r1, #0
 80015b4:	2078      	movs	r0, #120	@ 0x78
 80015b6:	f000 fa47 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015ba:	22a4      	movs	r2, #164	@ 0xa4
 80015bc:	2100      	movs	r1, #0
 80015be:	2078      	movs	r0, #120	@ 0x78
 80015c0:	f000 fa42 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015c4:	22d3      	movs	r2, #211	@ 0xd3
 80015c6:	2100      	movs	r1, #0
 80015c8:	2078      	movs	r0, #120	@ 0x78
 80015ca:	f000 fa3d 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2078      	movs	r0, #120	@ 0x78
 80015d4:	f000 fa38 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80015d8:	22d5      	movs	r2, #213	@ 0xd5
 80015da:	2100      	movs	r1, #0
 80015dc:	2078      	movs	r0, #120	@ 0x78
 80015de:	f000 fa33 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80015e2:	22f0      	movs	r2, #240	@ 0xf0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2078      	movs	r0, #120	@ 0x78
 80015e8:	f000 fa2e 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80015ec:	22d9      	movs	r2, #217	@ 0xd9
 80015ee:	2100      	movs	r1, #0
 80015f0:	2078      	movs	r0, #120	@ 0x78
 80015f2:	f000 fa29 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80015f6:	2222      	movs	r2, #34	@ 0x22
 80015f8:	2100      	movs	r1, #0
 80015fa:	2078      	movs	r0, #120	@ 0x78
 80015fc:	f000 fa24 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001600:	22da      	movs	r2, #218	@ 0xda
 8001602:	2100      	movs	r1, #0
 8001604:	2078      	movs	r0, #120	@ 0x78
 8001606:	f000 fa1f 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800160a:	2212      	movs	r2, #18
 800160c:	2100      	movs	r1, #0
 800160e:	2078      	movs	r0, #120	@ 0x78
 8001610:	f000 fa1a 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001614:	22db      	movs	r2, #219	@ 0xdb
 8001616:	2100      	movs	r1, #0
 8001618:	2078      	movs	r0, #120	@ 0x78
 800161a:	f000 fa15 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800161e:	2220      	movs	r2, #32
 8001620:	2100      	movs	r1, #0
 8001622:	2078      	movs	r0, #120	@ 0x78
 8001624:	f000 fa10 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001628:	228d      	movs	r2, #141	@ 0x8d
 800162a:	2100      	movs	r1, #0
 800162c:	2078      	movs	r0, #120	@ 0x78
 800162e:	f000 fa0b 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001632:	2214      	movs	r2, #20
 8001634:	2100      	movs	r1, #0
 8001636:	2078      	movs	r0, #120	@ 0x78
 8001638:	f000 fa06 	bl	8001a48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800163c:	22af      	movs	r2, #175	@ 0xaf
 800163e:	2100      	movs	r1, #0
 8001640:	2078      	movs	r0, #120	@ 0x78
 8001642:	f000 fa01 	bl	8001a48 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001646:	222e      	movs	r2, #46	@ 0x2e
 8001648:	2100      	movs	r1, #0
 800164a:	2078      	movs	r0, #120	@ 0x78
 800164c:	f000 f9fc 	bl	8001a48 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001650:	2000      	movs	r0, #0
 8001652:	f000 f843 	bl	80016dc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001656:	f000 f813 	bl	8001680 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800165a:	4b08      	ldr	r3, [pc, #32]	@ (800167c <SSD1306_Init+0x184>)
 800165c:	2200      	movs	r2, #0
 800165e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <SSD1306_Init+0x184>)
 8001662:	2200      	movs	r2, #0
 8001664:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <SSD1306_Init+0x184>)
 8001668:	2201      	movs	r2, #1
 800166a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800166c:	2301      	movs	r3, #1
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000244 	.word	0x20000244
 800167c:	200006f4 	.word	0x200006f4

08001680 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001686:	2300      	movs	r3, #0
 8001688:	71fb      	strb	r3, [r7, #7]
 800168a:	e01d      	b.n	80016c8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	3b50      	subs	r3, #80	@ 0x50
 8001690:	b2db      	uxtb	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	2100      	movs	r1, #0
 8001696:	2078      	movs	r0, #120	@ 0x78
 8001698:	f000 f9d6 	bl	8001a48 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	2078      	movs	r0, #120	@ 0x78
 80016a2:	f000 f9d1 	bl	8001a48 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80016a6:	2210      	movs	r2, #16
 80016a8:	2100      	movs	r1, #0
 80016aa:	2078      	movs	r0, #120	@ 0x78
 80016ac:	f000 f9cc 	bl	8001a48 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	01db      	lsls	r3, r3, #7
 80016b4:	4a08      	ldr	r2, [pc, #32]	@ (80016d8 <SSD1306_UpdateScreen+0x58>)
 80016b6:	441a      	add	r2, r3
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	2140      	movs	r1, #64	@ 0x40
 80016bc:	2078      	movs	r0, #120	@ 0x78
 80016be:	f000 f95d 	bl	800197c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	3301      	adds	r3, #1
 80016c6:	71fb      	strb	r3, [r7, #7]
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b07      	cmp	r3, #7
 80016cc:	d9de      	bls.n	800168c <SSD1306_UpdateScreen+0xc>
	}
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200002f4 	.word	0x200002f4

080016dc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <SSD1306_Fill+0x14>
 80016ec:	2300      	movs	r3, #0
 80016ee:	e000      	b.n	80016f2 <SSD1306_Fill+0x16>
 80016f0:	23ff      	movs	r3, #255	@ 0xff
 80016f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f6:	4619      	mov	r1, r3
 80016f8:	4803      	ldr	r0, [pc, #12]	@ (8001708 <SSD1306_Fill+0x2c>)
 80016fa:	f004 fb74 	bl	8005de6 <memset>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002f4 	.word	0x200002f4

0800170c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
 8001716:	460b      	mov	r3, r1
 8001718:	80bb      	strh	r3, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	70fb      	strb	r3, [r7, #3]
	if (
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	2b7f      	cmp	r3, #127	@ 0x7f
 8001722:	d848      	bhi.n	80017b6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001724:	88bb      	ldrh	r3, [r7, #4]
 8001726:	2b3f      	cmp	r3, #63	@ 0x3f
 8001728:	d845      	bhi.n	80017b6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <SSD1306_DrawPixel+0xb8>)
 800172c:	791b      	ldrb	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d11a      	bne.n	800177c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001746:	88fa      	ldrh	r2, [r7, #6]
 8001748:	88bb      	ldrh	r3, [r7, #4]
 800174a:	08db      	lsrs	r3, r3, #3
 800174c:	b298      	uxth	r0, r3
 800174e:	4603      	mov	r3, r0
 8001750:	01db      	lsls	r3, r3, #7
 8001752:	4413      	add	r3, r2
 8001754:	4a1c      	ldr	r2, [pc, #112]	@ (80017c8 <SSD1306_DrawPixel+0xbc>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	b25a      	sxtb	r2, r3
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	b25b      	sxtb	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b259      	sxtb	r1, r3
 800176c:	88fa      	ldrh	r2, [r7, #6]
 800176e:	4603      	mov	r3, r0
 8001770:	01db      	lsls	r3, r3, #7
 8001772:	4413      	add	r3, r2
 8001774:	b2c9      	uxtb	r1, r1
 8001776:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <SSD1306_DrawPixel+0xbc>)
 8001778:	54d1      	strb	r1, [r2, r3]
 800177a:	e01d      	b.n	80017b8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800177c:	88fa      	ldrh	r2, [r7, #6]
 800177e:	88bb      	ldrh	r3, [r7, #4]
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	b298      	uxth	r0, r3
 8001784:	4603      	mov	r3, r0
 8001786:	01db      	lsls	r3, r3, #7
 8001788:	4413      	add	r3, r2
 800178a:	4a0f      	ldr	r2, [pc, #60]	@ (80017c8 <SSD1306_DrawPixel+0xbc>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	b25a      	sxtb	r2, r3
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	2101      	movs	r1, #1
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	b25b      	sxtb	r3, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	4013      	ands	r3, r2
 80017a4:	b259      	sxtb	r1, r3
 80017a6:	88fa      	ldrh	r2, [r7, #6]
 80017a8:	4603      	mov	r3, r0
 80017aa:	01db      	lsls	r3, r3, #7
 80017ac:	4413      	add	r3, r2
 80017ae:	b2c9      	uxtb	r1, r1
 80017b0:	4a05      	ldr	r2, [pc, #20]	@ (80017c8 <SSD1306_DrawPixel+0xbc>)
 80017b2:	54d1      	strb	r1, [r2, r3]
 80017b4:	e000      	b.n	80017b8 <SSD1306_DrawPixel+0xac>
		return;
 80017b6:	bf00      	nop
	}
}
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	200006f4 	.word	0x200006f4
 80017c8:	200002f4 	.word	0x200002f4

080017cc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	460a      	mov	r2, r1
 80017d6:	80fb      	strh	r3, [r7, #6]
 80017d8:	4613      	mov	r3, r2
 80017da:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80017dc:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <SSD1306_GotoXY+0x28>)
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80017e2:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <SSD1306_GotoXY+0x28>)
 80017e4:	88bb      	ldrh	r3, [r7, #4]
 80017e6:	8053      	strh	r3, [r2, #2]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	200006f4 	.word	0x200006f4

080017f8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	4613      	mov	r3, r2
 8001806:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001808:	4b39      	ldr	r3, [pc, #228]	@ (80018f0 <SSD1306_Putc+0xf8>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
	if (
 8001814:	2b7f      	cmp	r3, #127	@ 0x7f
 8001816:	dc07      	bgt.n	8001828 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001818:	4b35      	ldr	r3, [pc, #212]	@ (80018f0 <SSD1306_Putc+0xf8>)
 800181a:	885b      	ldrh	r3, [r3, #2]
 800181c:	461a      	mov	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	785b      	ldrb	r3, [r3, #1]
 8001822:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001824:	2b3f      	cmp	r3, #63	@ 0x3f
 8001826:	dd01      	ble.n	800182c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001828:	2300      	movs	r3, #0
 800182a:	e05d      	b.n	80018e8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e04b      	b.n	80018ca <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	3b20      	subs	r3, #32
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	7849      	ldrb	r1, [r1, #1]
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4619      	mov	r1, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	440b      	add	r3, r1
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e030      	b.n	80018b8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d010      	beq.n	8001888 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001866:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <SSD1306_Putc+0xf8>)
 8001868:	881a      	ldrh	r2, [r3, #0]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b298      	uxth	r0, r3
 8001872:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <SSD1306_Putc+0xf8>)
 8001874:	885a      	ldrh	r2, [r3, #2]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	79ba      	ldrb	r2, [r7, #6]
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff ff43 	bl	800170c <SSD1306_DrawPixel>
 8001886:	e014      	b.n	80018b2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <SSD1306_Putc+0xf8>)
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	b29b      	uxth	r3, r3
 8001890:	4413      	add	r3, r2
 8001892:	b298      	uxth	r0, r3
 8001894:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <SSD1306_Putc+0xf8>)
 8001896:	885a      	ldrh	r2, [r3, #2]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	b29b      	uxth	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	b299      	uxth	r1, r3
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bf0c      	ite	eq
 80018a6:	2301      	moveq	r3, #1
 80018a8:	2300      	movne	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	f7ff ff2d 	bl	800170c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	3301      	adds	r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d3c8      	bcc.n	8001856 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3301      	adds	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	785b      	ldrb	r3, [r3, #1]
 80018ce:	461a      	mov	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d3ad      	bcc.n	8001832 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <SSD1306_Putc+0xf8>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <SSD1306_Putc+0xf8>)
 80018e4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80018e6:	79fb      	ldrb	r3, [r7, #7]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200006f4 	.word	0x200006f4

080018f4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	4613      	mov	r3, r2
 8001900:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001902:	e012      	b.n	800192a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	79fa      	ldrb	r2, [r7, #7]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff73 	bl	80017f8 <SSD1306_Putc>
 8001912:	4603      	mov	r3, r0
 8001914:	461a      	mov	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d002      	beq.n	8001924 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	e008      	b.n	8001936 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3301      	adds	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1e8      	bne.n	8001904 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	781b      	ldrb	r3, [r3, #0]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff feca 	bl	80016dc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001948:	f7ff fe9a 	bl	8001680 <SSD1306_UpdateScreen>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <ssd1306_I2C_Init+0x28>)
 8001958:	607b      	str	r3, [r7, #4]
	while(p>0)
 800195a:	e002      	b.n	8001962 <ssd1306_I2C_Init+0x12>
		p--;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f9      	bne.n	800195c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	0003d090 	.word	0x0003d090

0800197c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b0c7      	sub	sp, #284	@ 0x11c
 8001980:	af02      	add	r7, sp, #8
 8001982:	4604      	mov	r4, r0
 8001984:	4608      	mov	r0, r1
 8001986:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800198a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800198e:	600a      	str	r2, [r1, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001996:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800199a:	4622      	mov	r2, r4
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019a2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80019a6:	4602      	mov	r2, r0
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80019b2:	460a      	mov	r2, r1
 80019b4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80019b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019be:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80019c2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80019c6:	7812      	ldrb	r2, [r2, #0]
 80019c8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80019d0:	e015      	b.n	80019fe <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80019d2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80019d6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80019da:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	441a      	add	r2, r3
 80019e2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80019e6:	3301      	adds	r3, #1
 80019e8:	7811      	ldrb	r1, [r2, #0]
 80019ea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80019ee:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80019f2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019f4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80019f8:	3301      	adds	r3, #1
 80019fa:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80019fe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a08:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001a0c:	8812      	ldrh	r2, [r2, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d8df      	bhi.n	80019d2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a16:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b299      	uxth	r1, r3
 8001a1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f107 020c 	add.w	r2, r7, #12
 8001a30:	200a      	movs	r0, #10
 8001a32:	9000      	str	r0, [sp, #0]
 8001a34:	4803      	ldr	r0, [pc, #12]	@ (8001a44 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a36:	f001 fb85 	bl	8003144 <HAL_I2C_Master_Transmit>
}
 8001a3a:	bf00      	nop
 8001a3c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd90      	pop	{r4, r7, pc}
 8001a44:	20000244 	.word	0x20000244

08001a48 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	460b      	mov	r3, r1
 8001a54:	71bb      	strb	r3, [r7, #6]
 8001a56:	4613      	mov	r3, r2
 8001a58:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a5e:	797b      	ldrb	r3, [r7, #5]
 8001a60:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	b299      	uxth	r1, r3
 8001a66:	f107 020c 	add.w	r2, r7, #12
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2302      	movs	r3, #2
 8001a70:	4803      	ldr	r0, [pc, #12]	@ (8001a80 <ssd1306_I2C_Write+0x38>)
 8001a72:	f001 fb67 	bl	8003144 <HAL_I2C_Master_Transmit>
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000244 	.word	0x20000244

08001a84 <SSD1306_ShiftBufferLeft>:

void SSD1306_ShiftBufferLeft(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < SSD1306_HEIGHT / 8; page++) {
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	e015      	b.n	8001abc <SSD1306_ShiftBufferLeft+0x38>
        memmove(&SSD1306_Buffer[page * SSD1306_WIDTH],
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	01db      	lsls	r3, r3, #7
 8001a94:	4a0d      	ldr	r2, [pc, #52]	@ (8001acc <SSD1306_ShiftBufferLeft+0x48>)
 8001a96:	1898      	adds	r0, r3, r2
                &SSD1306_Buffer[page * SSD1306_WIDTH + 1],
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	01db      	lsls	r3, r3, #7
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001acc <SSD1306_ShiftBufferLeft+0x48>)
 8001aa0:	4413      	add	r3, r2
        memmove(&SSD1306_Buffer[page * SSD1306_WIDTH],
 8001aa2:	227f      	movs	r2, #127	@ 0x7f
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f004 f984 	bl	8005db2 <memmove>
                SSD1306_WIDTH - 1);
        SSD1306_Buffer[page * SSD1306_WIDTH + (SSD1306_WIDTH - 1)] = 0x00; // Clear the last column
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	01db      	lsls	r3, r3, #7
 8001aae:	337f      	adds	r3, #127	@ 0x7f
 8001ab0:	4a06      	ldr	r2, [pc, #24]	@ (8001acc <SSD1306_ShiftBufferLeft+0x48>)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = 0; page < SSD1306_HEIGHT / 8; page++) {
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	2b07      	cmp	r3, #7
 8001ac0:	d9e6      	bls.n	8001a90 <SSD1306_ShiftBufferLeft+0xc>
    }
}
 8001ac2:	bf00      	nop
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200002f4 	.word	0x200002f4

08001ad0 <SSD1306_DrawVerticalLineInRightmostColumn>:

void SSD1306_DrawVerticalLineInRightmostColumn(uint8_t y1, uint8_t y2, SSD1306_COLOR_t color) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	460b      	mov	r3, r1
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	717b      	strb	r3, [r7, #5]
    if (y1 > y2) {
 8001ae2:	79fa      	ldrb	r2, [r7, #7]
 8001ae4:	79bb      	ldrb	r3, [r7, #6]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d905      	bls.n	8001af6 <SSD1306_DrawVerticalLineInRightmostColumn+0x26>
        uint8_t temp = y1;
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	73bb      	strb	r3, [r7, #14]
        y1 = y2;
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	71fb      	strb	r3, [r7, #7]
        y2 = temp;
 8001af2:	7bbb      	ldrb	r3, [r7, #14]
 8001af4:	71bb      	strb	r3, [r7, #6]
    }
    for (uint8_t y = y1; y <= y2; y++) {
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e009      	b.n	8001b10 <SSD1306_DrawVerticalLineInRightmostColumn+0x40>
        SSD1306_DrawPixel(SSD1306_WIDTH - 1, y, color);
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	797a      	ldrb	r2, [r7, #5]
 8001b02:	4619      	mov	r1, r3
 8001b04:	207f      	movs	r0, #127	@ 0x7f
 8001b06:	f7ff fe01 	bl	800170c <SSD1306_DrawPixel>
    for (uint8_t y = y1; y <= y2; y++) {
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d9f1      	bls.n	8001afc <SSD1306_DrawVerticalLineInRightmostColumn+0x2c>
    }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	4a0f      	ldr	r2, [pc, #60]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	4a08      	ldr	r2, [pc, #32]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a17      	ldr	r2, [pc, #92]	@ (8001bf0 <HAL_ADC_MspInit+0x7c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d127      	bne.n	8001be6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <HAL_ADC_MspInit+0x80>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a15      	ldr	r2, [pc, #84]	@ (8001bf4 <HAL_ADC_MspInit+0x80>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <HAL_ADC_MspInit+0x80>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <HAL_ADC_MspInit+0x80>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf4 <HAL_ADC_MspInit+0x80>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <HAL_ADC_MspInit+0x80>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <HAL_ADC_MspInit+0x84>)
 8001be2:	f000 ffcf 	bl	8002b84 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	@ 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	@ 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a19      	ldr	r2, [pc, #100]	@ (8001c80 <HAL_I2C_MspInit+0x84>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d12c      	bne.n	8001c78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a17      	ldr	r2, [pc, #92]	@ (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c40:	2312      	movs	r3, #18
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	480c      	ldr	r0, [pc, #48]	@ (8001c88 <HAL_I2C_MspInit+0x8c>)
 8001c58:	f000 ff94 	bl	8002b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	4a07      	ldr	r2, [pc, #28]	@ (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	@ 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40005400 	.word	0x40005400
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020400 	.word	0x40020400

08001c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	@ 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d20 <HAL_UART_MspInit+0x94>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d134      	bne.n	8001d18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <HAL_UART_MspInit+0x98>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d24 <HAL_UART_MspInit+0x98>)
 8001cb8:	f043 0310 	orr.w	r3, r3, #16
 8001cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_UART_MspInit+0x98>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <HAL_UART_MspInit+0x98>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a14      	ldr	r2, [pc, #80]	@ (8001d24 <HAL_UART_MspInit+0x98>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <HAL_UART_MspInit+0x98>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ce6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cec:	2312      	movs	r3, #18
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	4809      	ldr	r0, [pc, #36]	@ (8001d28 <HAL_UART_MspInit+0x9c>)
 8001d04:	f000 ff3e 	bl	8002b84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2025      	movs	r0, #37	@ 0x25
 8001d0e:	f000 fe70 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d12:	2025      	movs	r0, #37	@ 0x25
 8001d14:	f000 fe89 	bl	8002a2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	@ 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40011000 	.word	0x40011000
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <NMI_Handler+0x4>

08001d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <HardFault_Handler+0x4>

08001d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <MemManage_Handler+0x4>

08001d44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <BusFault_Handler+0x4>

08001d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <UsageFault_Handler+0x4>

08001d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d82:	f000 f969 	bl	8002058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d90:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <USART1_IRQHandler+0x10>)
 8001d92:	f002 fb85 	bl	80044a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000298 	.word	0x20000298

08001da0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001da4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001da8:	f001 f870 	bl	8002e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return 1;
 8001db4:	2301      	movs	r3, #1
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_kill>:

int _kill(int pid, int sig)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dca:	f004 f85f 	bl	8005e8c <__errno>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2216      	movs	r2, #22
 8001dd2:	601a      	str	r2, [r3, #0]
  return -1;
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_exit>:

void _exit (int status)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ffe7 	bl	8001dc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001df2:	bf00      	nop
 8001df4:	e7fd      	b.n	8001df2 <_exit+0x12>

08001df6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e00a      	b.n	8001e1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e08:	f3af 8000 	nop.w
 8001e0c:	4601      	mov	r1, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	60ba      	str	r2, [r7, #8]
 8001e14:	b2ca      	uxtb	r2, r1
 8001e16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	dbf0      	blt.n	8001e08 <_read+0x12>
  }

  return len;
 8001e26:	687b      	ldr	r3, [r7, #4]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e009      	b.n	8001e56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	60ba      	str	r2, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	dbf1      	blt.n	8001e42 <_write+0x12>
  }
  return len;
 8001e5e:	687b      	ldr	r3, [r7, #4]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_close>:

int _close(int file)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e90:	605a      	str	r2, [r3, #4]
  return 0;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <_isatty>:

int _isatty(int file)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ea8:	2301      	movs	r3, #1
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed8:	4a14      	ldr	r2, [pc, #80]	@ (8001f2c <_sbrk+0x5c>)
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <_sbrk+0x60>)
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee4:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eec:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <_sbrk+0x64>)
 8001eee:	4a12      	ldr	r2, [pc, #72]	@ (8001f38 <_sbrk+0x68>)
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d207      	bcs.n	8001f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f00:	f003 ffc4 	bl	8005e8c <__errno>
 8001f04:	4603      	mov	r3, r0
 8001f06:	220c      	movs	r2, #12
 8001f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	e009      	b.n	8001f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f10:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f16:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a05      	ldr	r2, [pc, #20]	@ (8001f34 <_sbrk+0x64>)
 8001f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20018000 	.word	0x20018000
 8001f30:	00000400 	.word	0x00000400
 8001f34:	200006fc 	.word	0x200006fc
 8001f38:	20000850 	.word	0x20000850

08001f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <SystemInit+0x20>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f46:	4a05      	ldr	r2, [pc, #20]	@ (8001f5c <SystemInit+0x20>)
 8001f48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f64:	f7ff ffea 	bl	8001f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f68:	480c      	ldr	r0, [pc, #48]	@ (8001f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f6a:	490d      	ldr	r1, [pc, #52]	@ (8001fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f80:	4c0a      	ldr	r4, [pc, #40]	@ (8001fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f003 ff83 	bl	8005e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f92:	f7ff f83f 	bl	8001014 <main>
  bx  lr    
 8001f96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001fa4:	08008a80 	.word	0x08008a80
  ldr r2, =_sbss
 8001fa8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001fac:	20000850 	.word	0x20000850

08001fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC_IRQHandler>
	...

08001fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff4 <HAL_Init+0x40>)
 8001fbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <HAL_Init+0x40>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <HAL_Init+0x40>)
 8001fca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd0:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <HAL_Init+0x40>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a07      	ldr	r2, [pc, #28]	@ (8001ff4 <HAL_Init+0x40>)
 8001fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fdc:	2003      	movs	r0, #3
 8001fde:	f000 fcfd 	bl	80029dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe2:	200f      	movs	r0, #15
 8001fe4:	f000 f808 	bl	8001ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe8:	f7ff fd9c 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023c00 	.word	0x40023c00

08001ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002000:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_InitTick+0x54>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <HAL_InitTick+0x58>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800200e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fd15 	bl	8002a46 <HAL_SYSTICK_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e00e      	b.n	8002044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b0f      	cmp	r3, #15
 800202a:	d80a      	bhi.n	8002042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202c:	2200      	movs	r2, #0
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	f000 fcdd 	bl	80029f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002038:	4a06      	ldr	r2, [pc, #24]	@ (8002054 <HAL_InitTick+0x5c>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e000      	b.n	8002044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000000c 	.word	0x2000000c
 8002050:	20000014 	.word	0x20000014
 8002054:	20000010 	.word	0x20000010

08002058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_IncTick+0x20>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b06      	ldr	r3, [pc, #24]	@ (800207c <HAL_IncTick+0x24>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4a04      	ldr	r2, [pc, #16]	@ (800207c <HAL_IncTick+0x24>)
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000014 	.word	0x20000014
 800207c:	20000700 	.word	0x20000700

08002080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return uwTick;
 8002084:	4b03      	ldr	r3, [pc, #12]	@ (8002094 <HAL_GetTick+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000700 	.word	0x20000700

08002098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff ffee 	bl	8002080 <HAL_GetTick>
 80020a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d005      	beq.n	80020be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <HAL_Delay+0x44>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020be:	bf00      	nop
 80020c0:	f7ff ffde 	bl	8002080 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d8f7      	bhi.n	80020c0 <HAL_Delay+0x28>
  {
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000014 	.word	0x20000014

080020e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e033      	b.n	800215e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fd38 	bl	8001b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	d118      	bne.n	8002150 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002126:	f023 0302 	bic.w	r3, r3, #2
 800212a:	f043 0202 	orr.w	r2, r3, #2
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fa86 	bl	8002644 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f023 0303 	bic.w	r3, r3, #3
 8002146:	f043 0201 	orr.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	641a      	str	r2, [r3, #64]	@ 0x40
 800214e:	e001      	b.n	8002154 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_ADC_Start+0x1a>
 800217e:	2302      	movs	r3, #2
 8002180:	e097      	b.n	80022b2 <HAL_ADC_Start+0x14a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d018      	beq.n	80021ca <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021a8:	4b45      	ldr	r3, [pc, #276]	@ (80022c0 <HAL_ADC_Start+0x158>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a45      	ldr	r2, [pc, #276]	@ (80022c4 <HAL_ADC_Start+0x15c>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	0c9a      	lsrs	r2, r3, #18
 80021b4:	4613      	mov	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4413      	add	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021bc:	e002      	b.n	80021c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f9      	bne.n	80021be <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d15f      	bne.n	8002298 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002202:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002216:	d106      	bne.n	8002226 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221c:	f023 0206 	bic.w	r2, r3, #6
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	645a      	str	r2, [r3, #68]	@ 0x44
 8002224:	e002      	b.n	800222c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002234:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <HAL_ADC_Start+0x160>)
 8002236:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002240:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10f      	bne.n	800226e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d129      	bne.n	80022b0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	e020      	b.n	80022b0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a16      	ldr	r2, [pc, #88]	@ (80022cc <HAL_ADC_Start+0x164>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d11b      	bne.n	80022b0 <HAL_ADC_Start+0x148>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d114      	bne.n	80022b0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	e00b      	b.n	80022b0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	f043 0210 	orr.w	r2, r3, #16
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a8:	f043 0201 	orr.w	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	2000000c 	.word	0x2000000c
 80022c4:	431bde83 	.word	0x431bde83
 80022c8:	40012300 	.word	0x40012300
 80022cc:	40012000 	.word	0x40012000

080022d0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ec:	d113      	bne.n	8002316 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022fc:	d10b      	bne.n	8002316 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f043 0220 	orr.w	r2, r3, #32
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e063      	b.n	80023de <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002316:	f7ff feb3 	bl	8002080 <HAL_GetTick>
 800231a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800231c:	e021      	b.n	8002362 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d01d      	beq.n	8002362 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <HAL_ADC_PollForConversion+0x6c>
 800232c:	f7ff fea8 	bl	8002080 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d212      	bcs.n	8002362 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d00b      	beq.n	8002362 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f043 0204 	orr.w	r2, r3, #4
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e03d      	b.n	80023de <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d1d6      	bne.n	800231e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0212 	mvn.w	r2, #18
 8002378:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d123      	bne.n	80023dc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11f      	bne.n	80023dc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d111      	bne.n	80023dc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1c>
 8002418:	2302      	movs	r3, #2
 800241a:	e105      	b.n	8002628 <HAL_ADC_ConfigChannel+0x228>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b09      	cmp	r3, #9
 800242a:	d925      	bls.n	8002478 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68d9      	ldr	r1, [r3, #12]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	3b1e      	subs	r3, #30
 8002442:	2207      	movs	r2, #7
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43da      	mvns	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	400a      	ands	r2, r1
 8002450:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68d9      	ldr	r1, [r3, #12]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	4618      	mov	r0, r3
 8002464:	4603      	mov	r3, r0
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4403      	add	r3, r0
 800246a:	3b1e      	subs	r3, #30
 800246c:	409a      	lsls	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	e022      	b.n	80024be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6919      	ldr	r1, [r3, #16]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	2207      	movs	r2, #7
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	400a      	ands	r2, r1
 800249a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6919      	ldr	r1, [r3, #16]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4403      	add	r3, r0
 80024b4:	409a      	lsls	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d824      	bhi.n	8002510 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	3b05      	subs	r3, #5
 80024d8:	221f      	movs	r2, #31
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	400a      	ands	r2, r1
 80024e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4618      	mov	r0, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	3b05      	subs	r3, #5
 8002502:	fa00 f203 	lsl.w	r2, r0, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	635a      	str	r2, [r3, #52]	@ 0x34
 800250e:	e04c      	b.n	80025aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d824      	bhi.n	8002562 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	3b23      	subs	r3, #35	@ 0x23
 800252a:	221f      	movs	r2, #31
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43da      	mvns	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	400a      	ands	r2, r1
 8002538:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	4618      	mov	r0, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	3b23      	subs	r3, #35	@ 0x23
 8002554:	fa00 f203 	lsl.w	r2, r0, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002560:	e023      	b.n	80025aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3b41      	subs	r3, #65	@ 0x41
 8002574:	221f      	movs	r2, #31
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43da      	mvns	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	400a      	ands	r2, r1
 8002582:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	4618      	mov	r0, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b41      	subs	r3, #65	@ 0x41
 800259e:	fa00 f203 	lsl.w	r2, r0, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025aa:	4b22      	ldr	r3, [pc, #136]	@ (8002634 <HAL_ADC_ConfigChannel+0x234>)
 80025ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a21      	ldr	r2, [pc, #132]	@ (8002638 <HAL_ADC_ConfigChannel+0x238>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d109      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1cc>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b12      	cmp	r3, #18
 80025be:	d105      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a19      	ldr	r2, [pc, #100]	@ (8002638 <HAL_ADC_ConfigChannel+0x238>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d123      	bne.n	800261e <HAL_ADC_ConfigChannel+0x21e>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d003      	beq.n	80025e6 <HAL_ADC_ConfigChannel+0x1e6>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b11      	cmp	r3, #17
 80025e4:	d11b      	bne.n	800261e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d111      	bne.n	800261e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <HAL_ADC_ConfigChannel+0x23c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a10      	ldr	r2, [pc, #64]	@ (8002640 <HAL_ADC_ConfigChannel+0x240>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	0c9a      	lsrs	r2, r3, #18
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002610:	e002      	b.n	8002618 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3b01      	subs	r3, #1
 8002616:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f9      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40012300 	.word	0x40012300
 8002638:	40012000 	.word	0x40012000
 800263c:	2000000c 	.word	0x2000000c
 8002640:	431bde83 	.word	0x431bde83

08002644 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800264c:	4b79      	ldr	r3, [pc, #484]	@ (8002834 <ADC_Init+0x1f0>)
 800264e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	431a      	orrs	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002678:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	021a      	lsls	r2, r3, #8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800269c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6899      	ldr	r1, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d6:	4a58      	ldr	r2, [pc, #352]	@ (8002838 <ADC_Init+0x1f4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6899      	ldr	r1, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800270c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6899      	ldr	r1, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	e00f      	b.n	8002742 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002730:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002740:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0202 	bic.w	r2, r2, #2
 8002750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6899      	ldr	r1, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7e1b      	ldrb	r3, [r3, #24]
 800275c:	005a      	lsls	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01b      	beq.n	80027a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800277e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800278e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	3b01      	subs	r3, #1
 800279c:	035a      	lsls	r2, r3, #13
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	e007      	b.n	80027b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80027c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	051a      	lsls	r2, r3, #20
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6899      	ldr	r1, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027fa:	025a      	lsls	r2, r3, #9
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	029a      	lsls	r2, r3, #10
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40012300 	.word	0x40012300
 8002838:	0f000001 	.word	0x0f000001

0800283c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800284c:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002858:	4013      	ands	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800286c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286e:	4a04      	ldr	r2, [pc, #16]	@ (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	60d3      	str	r3, [r2, #12]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002888:	4b04      	ldr	r3, [pc, #16]	@ (800289c <__NVIC_GetPriorityGrouping+0x18>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	f003 0307 	and.w	r3, r3, #7
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	db0b      	blt.n	80028ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	4907      	ldr	r1, [pc, #28]	@ (80028d8 <__NVIC_EnableIRQ+0x38>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	2001      	movs	r0, #1
 80028c2:	fa00 f202 	lsl.w	r2, r0, r2
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000e100 	.word	0xe000e100

080028dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	db0a      	blt.n	8002906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	490c      	ldr	r1, [pc, #48]	@ (8002928 <__NVIC_SetPriority+0x4c>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	440b      	add	r3, r1
 8002900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002904:	e00a      	b.n	800291c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4908      	ldr	r1, [pc, #32]	@ (800292c <__NVIC_SetPriority+0x50>)
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3b04      	subs	r3, #4
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	440b      	add	r3, r1
 800291a:	761a      	strb	r2, [r3, #24]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000e100 	.word	0xe000e100
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	@ 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f1c3 0307 	rsb	r3, r3, #7
 800294a:	2b04      	cmp	r3, #4
 800294c:	bf28      	it	cs
 800294e:	2304      	movcs	r3, #4
 8002950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3304      	adds	r3, #4
 8002956:	2b06      	cmp	r3, #6
 8002958:	d902      	bls.n	8002960 <NVIC_EncodePriority+0x30>
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3b03      	subs	r3, #3
 800295e:	e000      	b.n	8002962 <NVIC_EncodePriority+0x32>
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	f04f 32ff 	mov.w	r2, #4294967295
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	401a      	ands	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002978:	f04f 31ff 	mov.w	r1, #4294967295
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	43d9      	mvns	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	4313      	orrs	r3, r2
         );
}
 800298a:	4618      	mov	r0, r3
 800298c:	3724      	adds	r7, #36	@ 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029a8:	d301      	bcc.n	80029ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00f      	b.n	80029ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ae:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <SysTick_Config+0x40>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b6:	210f      	movs	r1, #15
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	f7ff ff8e 	bl	80028dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <SysTick_Config+0x40>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c6:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <SysTick_Config+0x40>)
 80029c8:	2207      	movs	r2, #7
 80029ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	e000e010 	.word	0xe000e010

080029dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff29 	bl	800283c <__NVIC_SetPriorityGrouping>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a04:	f7ff ff3e 	bl	8002884 <__NVIC_GetPriorityGrouping>
 8002a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f7ff ff8e 	bl	8002930 <NVIC_EncodePriority>
 8002a14:	4602      	mov	r2, r0
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff5d 	bl	80028dc <__NVIC_SetPriority>
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff31 	bl	80028a0 <__NVIC_EnableIRQ>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ffa2 	bl	8002998 <SysTick_Config>
 8002a54:	4603      	mov	r3, r0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a6c:	f7ff fb08 	bl	8002080 <HAL_GetTick>
 8002a70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d008      	beq.n	8002a90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2280      	movs	r2, #128	@ 0x80
 8002a82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e052      	b.n	8002b36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0216 	bic.w	r2, r2, #22
 8002a9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d103      	bne.n	8002ac0 <HAL_DMA_Abort+0x62>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0208 	bic.w	r2, r2, #8
 8002ace:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae0:	e013      	b.n	8002b0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ae2:	f7ff facd 	bl	8002080 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b05      	cmp	r3, #5
 8002aee:	d90c      	bls.n	8002b0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2203      	movs	r2, #3
 8002afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e015      	b.n	8002b36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e4      	bne.n	8002ae2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1c:	223f      	movs	r2, #63	@ 0x3f
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d004      	beq.n	8002b5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2280      	movs	r2, #128	@ 0x80
 8002b56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e00c      	b.n	8002b76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2205      	movs	r2, #5
 8002b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	@ 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	e159      	b.n	8002e54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	f040 8148 	bne.w	8002e4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d005      	beq.n	8002bd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d130      	bne.n	8002c38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	2203      	movs	r2, #3
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 0201 	and.w	r2, r3, #1
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d017      	beq.n	8002c74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d123      	bne.n	8002cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	08da      	lsrs	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3208      	adds	r2, #8
 8002c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	220f      	movs	r2, #15
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	08da      	lsrs	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3208      	adds	r2, #8
 8002cc2:	69b9      	ldr	r1, [r7, #24]
 8002cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0203 	and.w	r2, r3, #3
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80a2 	beq.w	8002e4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b57      	ldr	r3, [pc, #348]	@ (8002e6c <HAL_GPIO_Init+0x2e8>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	4a56      	ldr	r2, [pc, #344]	@ (8002e6c <HAL_GPIO_Init+0x2e8>)
 8002d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d1a:	4b54      	ldr	r3, [pc, #336]	@ (8002e6c <HAL_GPIO_Init+0x2e8>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d26:	4a52      	ldr	r2, [pc, #328]	@ (8002e70 <HAL_GPIO_Init+0x2ec>)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a49      	ldr	r2, [pc, #292]	@ (8002e74 <HAL_GPIO_Init+0x2f0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d019      	beq.n	8002d86 <HAL_GPIO_Init+0x202>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a48      	ldr	r2, [pc, #288]	@ (8002e78 <HAL_GPIO_Init+0x2f4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_GPIO_Init+0x1fe>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a47      	ldr	r2, [pc, #284]	@ (8002e7c <HAL_GPIO_Init+0x2f8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00d      	beq.n	8002d7e <HAL_GPIO_Init+0x1fa>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a46      	ldr	r2, [pc, #280]	@ (8002e80 <HAL_GPIO_Init+0x2fc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <HAL_GPIO_Init+0x1f6>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a45      	ldr	r2, [pc, #276]	@ (8002e84 <HAL_GPIO_Init+0x300>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d101      	bne.n	8002d76 <HAL_GPIO_Init+0x1f2>
 8002d72:	2304      	movs	r3, #4
 8002d74:	e008      	b.n	8002d88 <HAL_GPIO_Init+0x204>
 8002d76:	2307      	movs	r3, #7
 8002d78:	e006      	b.n	8002d88 <HAL_GPIO_Init+0x204>
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e004      	b.n	8002d88 <HAL_GPIO_Init+0x204>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e002      	b.n	8002d88 <HAL_GPIO_Init+0x204>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_GPIO_Init+0x204>
 8002d86:	2300      	movs	r3, #0
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	f002 0203 	and.w	r2, r2, #3
 8002d8e:	0092      	lsls	r2, r2, #2
 8002d90:	4093      	lsls	r3, r2
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d98:	4935      	ldr	r1, [pc, #212]	@ (8002e70 <HAL_GPIO_Init+0x2ec>)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	089b      	lsrs	r3, r3, #2
 8002d9e:	3302      	adds	r3, #2
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002da6:	4b38      	ldr	r3, [pc, #224]	@ (8002e88 <HAL_GPIO_Init+0x304>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dca:	4a2f      	ldr	r2, [pc, #188]	@ (8002e88 <HAL_GPIO_Init+0x304>)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e88 <HAL_GPIO_Init+0x304>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df4:	4a24      	ldr	r2, [pc, #144]	@ (8002e88 <HAL_GPIO_Init+0x304>)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dfa:	4b23      	ldr	r3, [pc, #140]	@ (8002e88 <HAL_GPIO_Init+0x304>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8002e88 <HAL_GPIO_Init+0x304>)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e24:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <HAL_GPIO_Init+0x304>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e48:	4a0f      	ldr	r2, [pc, #60]	@ (8002e88 <HAL_GPIO_Init+0x304>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3301      	adds	r3, #1
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	f67f aea2 	bls.w	8002ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3724      	adds	r7, #36	@ 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40013800 	.word	0x40013800
 8002e74:	40020000 	.word	0x40020000
 8002e78:	40020400 	.word	0x40020400
 8002e7c:	40020800 	.word	0x40020800
 8002e80:	40020c00 	.word	0x40020c00
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40013c00 	.word	0x40013c00

08002e8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e96:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d006      	beq.n	8002eb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ea2:	4a05      	ldr	r2, [pc, #20]	@ (8002eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fa18 	bl	80012e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40013c00 	.word	0x40013c00

08002ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e12b      	b.n	8003126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe fe8a 	bl	8001bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	@ 0x24
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f20:	f001 fa08 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 8002f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4a81      	ldr	r2, [pc, #516]	@ (8003130 <HAL_I2C_Init+0x274>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d807      	bhi.n	8002f40 <HAL_I2C_Init+0x84>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a80      	ldr	r2, [pc, #512]	@ (8003134 <HAL_I2C_Init+0x278>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bf94      	ite	ls
 8002f38:	2301      	movls	r3, #1
 8002f3a:	2300      	movhi	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e006      	b.n	8002f4e <HAL_I2C_Init+0x92>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a7d      	ldr	r2, [pc, #500]	@ (8003138 <HAL_I2C_Init+0x27c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	bf94      	ite	ls
 8002f48:	2301      	movls	r3, #1
 8002f4a:	2300      	movhi	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0e7      	b.n	8003126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a78      	ldr	r2, [pc, #480]	@ (800313c <HAL_I2C_Init+0x280>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0c9b      	lsrs	r3, r3, #18
 8002f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a6a      	ldr	r2, [pc, #424]	@ (8003130 <HAL_I2C_Init+0x274>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d802      	bhi.n	8002f90 <HAL_I2C_Init+0xd4>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	e009      	b.n	8002fa4 <HAL_I2C_Init+0xe8>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	4a69      	ldr	r2, [pc, #420]	@ (8003140 <HAL_I2C_Init+0x284>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fb6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	495c      	ldr	r1, [pc, #368]	@ (8003130 <HAL_I2C_Init+0x274>)
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	d819      	bhi.n	8002ff8 <HAL_I2C_Init+0x13c>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1e59      	subs	r1, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd2:	1c59      	adds	r1, r3, #1
 8002fd4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fd8:	400b      	ands	r3, r1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_I2C_Init+0x138>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e59      	subs	r1, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff2:	e051      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	e04f      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d111      	bne.n	8003024 <HAL_I2C_Init+0x168>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e012      	b.n	800304a <HAL_I2C_Init+0x18e>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e58      	subs	r0, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	0099      	lsls	r1, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	fbb0 f3f3 	udiv	r3, r0, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Init+0x196>
 800304e:	2301      	movs	r3, #1
 8003050:	e022      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10e      	bne.n	8003078 <HAL_I2C_Init+0x1bc>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1e58      	subs	r0, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	440b      	add	r3, r1
 8003068:	fbb0 f3f3 	udiv	r3, r0, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003076:	e00f      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1e58      	subs	r0, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	0099      	lsls	r1, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	fbb0 f3f3 	udiv	r3, r0, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	6809      	ldr	r1, [r1, #0]
 800309c:	4313      	orrs	r3, r2
 800309e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6911      	ldr	r1, [r2, #16]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68d2      	ldr	r2, [r2, #12]
 80030d2:	4311      	orrs	r1, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	430b      	orrs	r3, r1
 80030da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	000186a0 	.word	0x000186a0
 8003134:	001e847f 	.word	0x001e847f
 8003138:	003d08ff 	.word	0x003d08ff
 800313c:	431bde83 	.word	0x431bde83
 8003140:	10624dd3 	.word	0x10624dd3

08003144 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	461a      	mov	r2, r3
 8003150:	460b      	mov	r3, r1
 8003152:	817b      	strh	r3, [r7, #10]
 8003154:	4613      	mov	r3, r2
 8003156:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7fe ff92 	bl	8002080 <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b20      	cmp	r3, #32
 8003168:	f040 80e0 	bne.w	800332c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2319      	movs	r3, #25
 8003172:	2201      	movs	r2, #1
 8003174:	4970      	ldr	r1, [pc, #448]	@ (8003338 <HAL_I2C_Master_Transmit+0x1f4>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fa92 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
 8003184:	e0d3      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_I2C_Master_Transmit+0x50>
 8003190:	2302      	movs	r3, #2
 8003192:	e0cc      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d007      	beq.n	80031ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2221      	movs	r2, #33	@ 0x21
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2210      	movs	r2, #16
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	893a      	ldrh	r2, [r7, #8]
 80031ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a50      	ldr	r2, [pc, #320]	@ (800333c <HAL_I2C_Master_Transmit+0x1f8>)
 80031fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031fc:	8979      	ldrh	r1, [r7, #10]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f9ca 	bl	800359c <I2C_MasterRequestWrite>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e08d      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003228:	e066      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	6a39      	ldr	r1, [r7, #32]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fb50 	bl	80038d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	2b04      	cmp	r3, #4
 8003240:	d107      	bne.n	8003252 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003250:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06b      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b04      	cmp	r3, #4
 8003292:	d11b      	bne.n	80032cc <HAL_I2C_Master_Transmit+0x188>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d017      	beq.n	80032cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	6a39      	ldr	r1, [r7, #32]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fb47 	bl	8003964 <I2C_WaitOnBTFFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d107      	bne.n	80032f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e01a      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d194      	bne.n	800322a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800330e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e000      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	00100002 	.word	0x00100002
 800333c:	ffff0000 	.word	0xffff0000

08003340 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	@ 0x28
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	460b      	mov	r3, r1
 800334e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003350:	f7fe fe96 	bl	8002080 <HAL_GetTick>
 8003354:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b20      	cmp	r3, #32
 8003364:	f040 8111 	bne.w	800358a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	2319      	movs	r3, #25
 800336e:	2201      	movs	r2, #1
 8003370:	4988      	ldr	r1, [pc, #544]	@ (8003594 <HAL_I2C_IsDeviceReady+0x254>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f994 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
 8003380:	e104      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_I2C_IsDeviceReady+0x50>
 800338c:	2302      	movs	r3, #2
 800338e:	e0fd      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d007      	beq.n	80033b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0201 	orr.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2224      	movs	r2, #36	@ 0x24
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4a70      	ldr	r2, [pc, #448]	@ (8003598 <HAL_I2C_IsDeviceReady+0x258>)
 80033d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f952 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003410:	d103      	bne.n	800341a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003418:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0b6      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800342c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800342e:	f7fe fe27 	bl	8002080 <HAL_GetTick>
 8003432:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003462:	e025      	b.n	80034b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7fe fe0c 	bl	8002080 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <HAL_I2C_IsDeviceReady+0x13a>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22a0      	movs	r2, #160	@ 0xa0
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2ba0      	cmp	r3, #160	@ 0xa0
 80034ba:	d005      	beq.n	80034c8 <HAL_I2C_IsDeviceReady+0x188>
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_I2C_IsDeviceReady+0x188>
 80034c2:	7dbb      	ldrb	r3, [r7, #22]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0cd      	beq.n	8003464 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d129      	bne.n	8003532 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2319      	movs	r3, #25
 800350a:	2201      	movs	r2, #1
 800350c:	4921      	ldr	r1, [pc, #132]	@ (8003594 <HAL_I2C_IsDeviceReady+0x254>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f8c6 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e036      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e02c      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003540:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800354a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2319      	movs	r3, #25
 8003552:	2201      	movs	r2, #1
 8003554:	490f      	ldr	r1, [pc, #60]	@ (8003594 <HAL_I2C_IsDeviceReady+0x254>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8a2 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e012      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3301      	adds	r3, #1
 800356a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	f4ff af32 	bcc.w	80033da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800358a:	2302      	movs	r3, #2
  }
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	00100002 	.word	0x00100002
 8003598:	ffff0000 	.word	0xffff0000

0800359c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	460b      	mov	r3, r1
 80035aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d006      	beq.n	80035c6 <I2C_MasterRequestWrite+0x2a>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d003      	beq.n	80035c6 <I2C_MasterRequestWrite+0x2a>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035c4:	d108      	bne.n	80035d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e00b      	b.n	80035f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	2b12      	cmp	r3, #18
 80035de:	d107      	bne.n	80035f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f84f 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00d      	beq.n	8003624 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003616:	d103      	bne.n	8003620 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800361e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e035      	b.n	8003690 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800362c:	d108      	bne.n	8003640 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800363c:	611a      	str	r2, [r3, #16]
 800363e:	e01b      	b.n	8003678 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003640:	897b      	ldrh	r3, [r7, #10]
 8003642:	11db      	asrs	r3, r3, #7
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f003 0306 	and.w	r3, r3, #6
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f063 030f 	orn	r3, r3, #15
 8003650:	b2da      	uxtb	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	490e      	ldr	r1, [pc, #56]	@ (8003698 <I2C_MasterRequestWrite+0xfc>)
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f898 	bl	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e010      	b.n	8003690 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4907      	ldr	r1, [pc, #28]	@ (800369c <I2C_MasterRequestWrite+0x100>)
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f888 	bl	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	00010008 	.word	0x00010008
 800369c:	00010002 	.word	0x00010002

080036a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b0:	e048      	b.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d044      	beq.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7fe fce1 	bl	8002080 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d139      	bne.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	0c1b      	lsrs	r3, r3, #16
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10d      	bne.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	43da      	mvns	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	e00c      	b.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	43da      	mvns	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4013      	ands	r3, r2
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	429a      	cmp	r2, r3
 8003714:	d116      	bne.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e023      	b.n	800378c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	0c1b      	lsrs	r3, r3, #16
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d10d      	bne.n	800376a <I2C_WaitOnFlagUntilTimeout+0xca>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	43da      	mvns	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4013      	ands	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	e00c      	b.n	8003784 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	43da      	mvns	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4013      	ands	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	429a      	cmp	r2, r3
 8003788:	d093      	beq.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037a2:	e071      	b.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b2:	d123      	bne.n	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	f043 0204 	orr.w	r2, r3, #4
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e067      	b.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d041      	beq.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003804:	f7fe fc3c 	bl	8002080 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d302      	bcc.n	800381a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d136      	bne.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10c      	bne.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4013      	ands	r3, r2
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf14      	ite	ne
 8003836:	2301      	movne	r3, #1
 8003838:	2300      	moveq	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e00b      	b.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	43da      	mvns	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4013      	ands	r3, r2
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d016      	beq.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e021      	b.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	0c1b      	lsrs	r3, r3, #16
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d10c      	bne.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	43da      	mvns	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e00b      	b.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	43da      	mvns	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4013      	ands	r3, r2
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bf14      	ite	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	2300      	moveq	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f af6d 	bne.w	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e0:	e034      	b.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f886 	bl	80039f4 <I2C_IsAcknowledgeFailed>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e034      	b.n	800395c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d028      	beq.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fbc1 	bl	8002080 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d11d      	bne.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391a:	2b80      	cmp	r3, #128	@ 0x80
 800391c:	d016      	beq.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e007      	b.n	800395c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003956:	2b80      	cmp	r3, #128	@ 0x80
 8003958:	d1c3      	bne.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003970:	e034      	b.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f83e 	bl	80039f4 <I2C_IsAcknowledgeFailed>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e034      	b.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d028      	beq.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7fe fb79 	bl	8002080 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d11d      	bne.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d016      	beq.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	f043 0220 	orr.w	r2, r3, #32
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e007      	b.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d1c3      	bne.n	8003972 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0a:	d11b      	bne.n	8003a44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	f043 0204 	orr.w	r2, r3, #4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e267      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d075      	beq.n	8003b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a72:	4b88      	ldr	r3, [pc, #544]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d00c      	beq.n	8003a98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7e:	4b85      	ldr	r3, [pc, #532]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d112      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a8a:	4b82      	ldr	r3, [pc, #520]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a96:	d10b      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	4b7e      	ldr	r3, [pc, #504]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d05b      	beq.n	8003b5c <HAL_RCC_OscConfig+0x108>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d157      	bne.n	8003b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e242      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab8:	d106      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x74>
 8003aba:	4b76      	ldr	r3, [pc, #472]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a75      	ldr	r2, [pc, #468]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e01d      	b.n	8003b04 <HAL_RCC_OscConfig+0xb0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x98>
 8003ad2:	4b70      	ldr	r3, [pc, #448]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6f      	ldr	r2, [pc, #444]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4b6d      	ldr	r3, [pc, #436]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6c      	ldr	r2, [pc, #432]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e00b      	b.n	8003b04 <HAL_RCC_OscConfig+0xb0>
 8003aec:	4b69      	ldr	r3, [pc, #420]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a68      	ldr	r2, [pc, #416]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	4b66      	ldr	r3, [pc, #408]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a65      	ldr	r2, [pc, #404]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003afe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d013      	beq.n	8003b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fab8 	bl	8002080 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fe fab4 	bl	8002080 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	@ 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e207      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	4b5b      	ldr	r3, [pc, #364]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0xc0>
 8003b32:	e014      	b.n	8003b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fe faa4 	bl	8002080 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7fe faa0 	bl	8002080 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	@ 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e1f3      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4e:	4b51      	ldr	r3, [pc, #324]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0xe8>
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d063      	beq.n	8003c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b76:	4b47      	ldr	r3, [pc, #284]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d11c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b82:	4b44      	ldr	r3, [pc, #272]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d116      	bne.n	8003bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8e:	4b41      	ldr	r3, [pc, #260]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x152>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e1c7      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4937      	ldr	r1, [pc, #220]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bba:	e03a      	b.n	8003c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d020      	beq.n	8003c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc4:	4b34      	ldr	r3, [pc, #208]	@ (8003c98 <HAL_RCC_OscConfig+0x244>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fe fa59 	bl	8002080 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd2:	f7fe fa55 	bl	8002080 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e1a8      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf0:	4b28      	ldr	r3, [pc, #160]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4925      	ldr	r1, [pc, #148]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]
 8003c04:	e015      	b.n	8003c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c06:	4b24      	ldr	r3, [pc, #144]	@ (8003c98 <HAL_RCC_OscConfig+0x244>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fa38 	bl	8002080 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fe fa34 	bl	8002080 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e187      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c26:	4b1b      	ldr	r3, [pc, #108]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d036      	beq.n	8003cac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d016      	beq.n	8003c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c46:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <HAL_RCC_OscConfig+0x248>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7fe fa18 	bl	8002080 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c54:	f7fe fa14 	bl	8002080 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e167      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c66:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x200>
 8003c72:	e01b      	b.n	8003cac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c74:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <HAL_RCC_OscConfig+0x248>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7a:	f7fe fa01 	bl	8002080 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	e00e      	b.n	8003ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c82:	f7fe f9fd 	bl	8002080 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d907      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e150      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
 8003c94:	40023800 	.word	0x40023800
 8003c98:	42470000 	.word	0x42470000
 8003c9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca0:	4b88      	ldr	r3, [pc, #544]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1ea      	bne.n	8003c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8097 	beq.w	8003de8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cbe:	4b81      	ldr	r3, [pc, #516]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10f      	bne.n	8003cea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	4b7d      	ldr	r3, [pc, #500]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cda:	4b7a      	ldr	r3, [pc, #488]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cea:	4b77      	ldr	r3, [pc, #476]	@ (8003ec8 <HAL_RCC_OscConfig+0x474>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d118      	bne.n	8003d28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cf6:	4b74      	ldr	r3, [pc, #464]	@ (8003ec8 <HAL_RCC_OscConfig+0x474>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a73      	ldr	r2, [pc, #460]	@ (8003ec8 <HAL_RCC_OscConfig+0x474>)
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d02:	f7fe f9bd 	bl	8002080 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0a:	f7fe f9b9 	bl	8002080 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e10c      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ec8 <HAL_RCC_OscConfig+0x474>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCC_OscConfig+0x2ea>
 8003d30:	4b64      	ldr	r3, [pc, #400]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d34:	4a63      	ldr	r2, [pc, #396]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3c:	e01c      	b.n	8003d78 <HAL_RCC_OscConfig+0x324>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b05      	cmp	r3, #5
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x30c>
 8003d46:	4b5f      	ldr	r3, [pc, #380]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	f043 0304 	orr.w	r3, r3, #4
 8003d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d52:	4b5c      	ldr	r3, [pc, #368]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d56:	4a5b      	ldr	r2, [pc, #364]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d5e:	e00b      	b.n	8003d78 <HAL_RCC_OscConfig+0x324>
 8003d60:	4b58      	ldr	r3, [pc, #352]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d64:	4a57      	ldr	r2, [pc, #348]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6c:	4b55      	ldr	r3, [pc, #340]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d70:	4a54      	ldr	r2, [pc, #336]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d72:	f023 0304 	bic.w	r3, r3, #4
 8003d76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d015      	beq.n	8003dac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fe f97e 	bl	8002080 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d88:	f7fe f97a 	bl	8002080 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0cb      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9e:	4b49      	ldr	r3, [pc, #292]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0ee      	beq.n	8003d88 <HAL_RCC_OscConfig+0x334>
 8003daa:	e014      	b.n	8003dd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dac:	f7fe f968 	bl	8002080 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db2:	e00a      	b.n	8003dca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db4:	f7fe f964 	bl	8002080 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e0b5      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dca:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1ee      	bne.n	8003db4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d105      	bne.n	8003de8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ddc:	4b39      	ldr	r3, [pc, #228]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	4a38      	ldr	r2, [pc, #224]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a1 	beq.w	8003f34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003df2:	4b34      	ldr	r3, [pc, #208]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d05c      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d141      	bne.n	8003e8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e06:	4b31      	ldr	r3, [pc, #196]	@ (8003ecc <HAL_RCC_OscConfig+0x478>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe f938 	bl	8002080 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fe f934 	bl	8002080 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e087      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	4b27      	ldr	r3, [pc, #156]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69da      	ldr	r2, [r3, #28]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	019b      	lsls	r3, r3, #6
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	061b      	lsls	r3, r3, #24
 8003e56:	491b      	ldr	r1, [pc, #108]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ecc <HAL_RCC_OscConfig+0x478>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e62:	f7fe f90d 	bl	8002080 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7fe f909 	bl	8002080 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e05c      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x416>
 8003e88:	e054      	b.n	8003f34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ecc <HAL_RCC_OscConfig+0x478>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fe f8f6 	bl	8002080 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e98:	f7fe f8f2 	bl	8002080 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e045      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eaa:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x444>
 8003eb6:	e03d      	b.n	8003f34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d107      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e038      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f40 <HAL_RCC_OscConfig+0x4ec>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d028      	beq.n	8003f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d121      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d11a      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f00:	4013      	ands	r3, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d111      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800

08003f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0cc      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f58:	4b68      	ldr	r3, [pc, #416]	@ (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d90c      	bls.n	8003f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b65      	ldr	r3, [pc, #404]	@ (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b63      	ldr	r3, [pc, #396]	@ (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0b8      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d020      	beq.n	8003fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f98:	4b59      	ldr	r3, [pc, #356]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4a58      	ldr	r2, [pc, #352]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb0:	4b53      	ldr	r3, [pc, #332]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4a52      	ldr	r2, [pc, #328]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fbc:	4b50      	ldr	r3, [pc, #320]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	494d      	ldr	r1, [pc, #308]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d044      	beq.n	8004064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe2:	4b47      	ldr	r3, [pc, #284]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d119      	bne.n	8004022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e07f      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d003      	beq.n	8004002 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d107      	bne.n	8004012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	4b3f      	ldr	r3, [pc, #252]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e06f      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004012:	4b3b      	ldr	r3, [pc, #236]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e067      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004022:	4b37      	ldr	r3, [pc, #220]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 0203 	bic.w	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4934      	ldr	r1, [pc, #208]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004034:	f7fe f824 	bl	8002080 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	e00a      	b.n	8004052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403c:	f7fe f820 	bl	8002080 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e04f      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	4b2b      	ldr	r3, [pc, #172]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 020c 	and.w	r2, r3, #12
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	429a      	cmp	r2, r3
 8004062:	d1eb      	bne.n	800403c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004064:	4b25      	ldr	r3, [pc, #148]	@ (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d20c      	bcs.n	800408c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b22      	ldr	r3, [pc, #136]	@ (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b20      	ldr	r3, [pc, #128]	@ (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e032      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004098:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4916      	ldr	r1, [pc, #88]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040b6:	4b12      	ldr	r3, [pc, #72]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	490e      	ldr	r1, [pc, #56]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ca:	f000 f821 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80040ce:	4602      	mov	r2, r0
 80040d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	490a      	ldr	r1, [pc, #40]	@ (8004104 <HAL_RCC_ClockConfig+0x1c0>)
 80040dc:	5ccb      	ldrb	r3, [r1, r3]
 80040de:	fa22 f303 	lsr.w	r3, r2, r3
 80040e2:	4a09      	ldr	r2, [pc, #36]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040e6:	4b09      	ldr	r3, [pc, #36]	@ (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fd ff84 	bl	8001ff8 <HAL_InitTick>

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40023c00 	.word	0x40023c00
 8004100:	40023800 	.word	0x40023800
 8004104:	080086e8 	.word	0x080086e8
 8004108:	2000000c 	.word	0x2000000c
 800410c:	20000010 	.word	0x20000010

08004110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004114:	b094      	sub	sp, #80	@ 0x50
 8004116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004128:	4b79      	ldr	r3, [pc, #484]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x200>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b08      	cmp	r3, #8
 8004132:	d00d      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x40>
 8004134:	2b08      	cmp	r3, #8
 8004136:	f200 80e1 	bhi.w	80042fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0x34>
 800413e:	2b04      	cmp	r3, #4
 8004140:	d003      	beq.n	800414a <HAL_RCC_GetSysClockFreq+0x3a>
 8004142:	e0db      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004144:	4b73      	ldr	r3, [pc, #460]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x204>)
 8004146:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004148:	e0db      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800414a:	4b73      	ldr	r3, [pc, #460]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x208>)
 800414c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800414e:	e0d8      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004150:	4b6f      	ldr	r3, [pc, #444]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x200>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004158:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800415a:	4b6d      	ldr	r3, [pc, #436]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x200>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d063      	beq.n	800422e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004166:	4b6a      	ldr	r3, [pc, #424]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x200>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	099b      	lsrs	r3, r3, #6
 800416c:	2200      	movs	r2, #0
 800416e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004170:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004178:	633b      	str	r3, [r7, #48]	@ 0x30
 800417a:	2300      	movs	r3, #0
 800417c:	637b      	str	r3, [r7, #52]	@ 0x34
 800417e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004182:	4622      	mov	r2, r4
 8004184:	462b      	mov	r3, r5
 8004186:	f04f 0000 	mov.w	r0, #0
 800418a:	f04f 0100 	mov.w	r1, #0
 800418e:	0159      	lsls	r1, r3, #5
 8004190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004194:	0150      	lsls	r0, r2, #5
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4621      	mov	r1, r4
 800419c:	1a51      	subs	r1, r2, r1
 800419e:	6139      	str	r1, [r7, #16]
 80041a0:	4629      	mov	r1, r5
 80041a2:	eb63 0301 	sbc.w	r3, r3, r1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041b4:	4659      	mov	r1, fp
 80041b6:	018b      	lsls	r3, r1, #6
 80041b8:	4651      	mov	r1, sl
 80041ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041be:	4651      	mov	r1, sl
 80041c0:	018a      	lsls	r2, r1, #6
 80041c2:	4651      	mov	r1, sl
 80041c4:	ebb2 0801 	subs.w	r8, r2, r1
 80041c8:	4659      	mov	r1, fp
 80041ca:	eb63 0901 	sbc.w	r9, r3, r1
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041e2:	4690      	mov	r8, r2
 80041e4:	4699      	mov	r9, r3
 80041e6:	4623      	mov	r3, r4
 80041e8:	eb18 0303 	adds.w	r3, r8, r3
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	462b      	mov	r3, r5
 80041f0:	eb49 0303 	adc.w	r3, r9, r3
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004202:	4629      	mov	r1, r5
 8004204:	024b      	lsls	r3, r1, #9
 8004206:	4621      	mov	r1, r4
 8004208:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800420c:	4621      	mov	r1, r4
 800420e:	024a      	lsls	r2, r1, #9
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004216:	2200      	movs	r2, #0
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800421a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800421c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004220:	f7fc fcca 	bl	8000bb8 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4613      	mov	r3, r2
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800422c:	e058      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422e:	4b38      	ldr	r3, [pc, #224]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x200>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	2200      	movs	r2, #0
 8004236:	4618      	mov	r0, r3
 8004238:	4611      	mov	r1, r2
 800423a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800423e:	623b      	str	r3, [r7, #32]
 8004240:	2300      	movs	r3, #0
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
 8004244:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004248:	4642      	mov	r2, r8
 800424a:	464b      	mov	r3, r9
 800424c:	f04f 0000 	mov.w	r0, #0
 8004250:	f04f 0100 	mov.w	r1, #0
 8004254:	0159      	lsls	r1, r3, #5
 8004256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800425a:	0150      	lsls	r0, r2, #5
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4641      	mov	r1, r8
 8004262:	ebb2 0a01 	subs.w	sl, r2, r1
 8004266:	4649      	mov	r1, r9
 8004268:	eb63 0b01 	sbc.w	fp, r3, r1
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004278:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800427c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004280:	ebb2 040a 	subs.w	r4, r2, sl
 8004284:	eb63 050b 	sbc.w	r5, r3, fp
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	00eb      	lsls	r3, r5, #3
 8004292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004296:	00e2      	lsls	r2, r4, #3
 8004298:	4614      	mov	r4, r2
 800429a:	461d      	mov	r5, r3
 800429c:	4643      	mov	r3, r8
 800429e:	18e3      	adds	r3, r4, r3
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	464b      	mov	r3, r9
 80042a4:	eb45 0303 	adc.w	r3, r5, r3
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042b6:	4629      	mov	r1, r5
 80042b8:	028b      	lsls	r3, r1, #10
 80042ba:	4621      	mov	r1, r4
 80042bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042c0:	4621      	mov	r1, r4
 80042c2:	028a      	lsls	r2, r1, #10
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ca:	2200      	movs	r2, #0
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	61fa      	str	r2, [r7, #28]
 80042d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d4:	f7fc fc70 	bl	8000bb8 <__aeabi_uldivmod>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4613      	mov	r3, r2
 80042de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	3301      	adds	r3, #1
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80042f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042fa:	e002      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042fc:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x204>)
 80042fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004304:	4618      	mov	r0, r3
 8004306:	3750      	adds	r7, #80	@ 0x50
 8004308:	46bd      	mov	sp, r7
 800430a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800
 8004314:	00f42400 	.word	0x00f42400
 8004318:	007a1200 	.word	0x007a1200

0800431c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004320:	4b03      	ldr	r3, [pc, #12]	@ (8004330 <HAL_RCC_GetHCLKFreq+0x14>)
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	2000000c 	.word	0x2000000c

08004334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004338:	f7ff fff0 	bl	800431c <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	@ (8004354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0a9b      	lsrs	r3, r3, #10
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4903      	ldr	r1, [pc, #12]	@ (8004358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	080086f8 	.word	0x080086f8

0800435c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004360:	f7ff ffdc 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8004364:	4602      	mov	r2, r0
 8004366:	4b05      	ldr	r3, [pc, #20]	@ (800437c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	0b5b      	lsrs	r3, r3, #13
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	4903      	ldr	r1, [pc, #12]	@ (8004380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004372:	5ccb      	ldrb	r3, [r1, r3]
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40023800 	.word	0x40023800
 8004380:	080086f8 	.word	0x080086f8

08004384 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e04a      	b.n	800442c <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fd fc6e 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2224      	movs	r2, #36	@ 0x24
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fced 	bl	8004da8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80043ec:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0208 	orr.w	r2, r2, #8
 80043fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800440c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b20      	cmp	r3, #32
 800444c:	d121      	bne.n	8004492 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_UART_Transmit_IT+0x26>
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e01a      	b.n	8004494 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	88fa      	ldrh	r2, [r7, #6]
 800446e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2221      	movs	r2, #33	@ 0x21
 800447a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800448c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
  }
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b0ba      	sub	sp, #232	@ 0xe8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80044de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10f      	bne.n	8004506 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <HAL_UART_IRQHandler+0x66>
 80044f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fb93 	bl	8004c2a <UART_Receive_IT>
      return;
 8004504:	e25b      	b.n	80049be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 80de 	beq.w	80046cc <HAL_UART_IRQHandler+0x22c>
 8004510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800451c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004520:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80d1 	beq.w	80046cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800452a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00b      	beq.n	800454e <HAL_UART_IRQHandler+0xae>
 8004536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800453a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004546:	f043 0201 	orr.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00b      	beq.n	8004572 <HAL_UART_IRQHandler+0xd2>
 800455a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456a:	f043 0202 	orr.w	r2, r3, #2
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_UART_IRQHandler+0xf6>
 800457e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458e:	f043 0204 	orr.w	r2, r3, #4
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d011      	beq.n	80045c6 <HAL_UART_IRQHandler+0x126>
 80045a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045be:	f043 0208 	orr.w	r2, r3, #8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 81f2 	beq.w	80049b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <HAL_UART_IRQHandler+0x14e>
 80045dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fb1e 	bl	8004c2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f8:	2b40      	cmp	r3, #64	@ 0x40
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <HAL_UART_IRQHandler+0x17a>
 8004612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d04f      	beq.n	80046ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa26 	bl	8004a6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b40      	cmp	r3, #64	@ 0x40
 800462c:	d141      	bne.n	80046b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3314      	adds	r3, #20
 8004634:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004644:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800464c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3314      	adds	r3, #20
 8004656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800465a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800465e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1d9      	bne.n	800462e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d013      	beq.n	80046aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004686:	4a7e      	ldr	r2, [pc, #504]	@ (8004880 <HAL_UART_IRQHandler+0x3e0>)
 8004688:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe fa55 	bl	8002b3e <HAL_DMA_Abort_IT>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d016      	beq.n	80046c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046a4:	4610      	mov	r0, r2
 80046a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a8:	e00e      	b.n	80046c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f994 	bl	80049d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	e00a      	b.n	80046c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f990 	bl	80049d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b8:	e006      	b.n	80046c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f98c 	bl	80049d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80046c6:	e175      	b.n	80049b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c8:	bf00      	nop
    return;
 80046ca:	e173      	b.n	80049b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	f040 814f 	bne.w	8004974 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8148 	beq.w	8004974 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8141 	beq.w	8004974 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004712:	2b40      	cmp	r3, #64	@ 0x40
 8004714:	f040 80b6 	bne.w	8004884 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004724:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8145 	beq.w	80049b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004736:	429a      	cmp	r2, r3
 8004738:	f080 813e 	bcs.w	80049b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004742:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800474e:	f000 8088 	beq.w	8004862 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004768:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800476c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004770:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800477e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004782:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800478a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004796:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1d9      	bne.n	8004752 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3314      	adds	r3, #20
 80047a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3314      	adds	r3, #20
 80047be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e1      	bne.n	800479e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3314      	adds	r3, #20
 80047e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3314      	adds	r3, #20
 80047fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80047fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004800:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004804:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800480c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e3      	bne.n	80047da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004832:	f023 0310 	bic.w	r3, r3, #16
 8004836:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	330c      	adds	r3, #12
 8004840:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004844:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004846:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800484a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e3      	bne.n	8004820 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe f8fe 	bl	8002a5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004870:	b29b      	uxth	r3, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	b29b      	uxth	r3, r3
 8004876:	4619      	mov	r1, r3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f8b7 	bl	80049ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800487e:	e09b      	b.n	80049b8 <HAL_UART_IRQHandler+0x518>
 8004880:	08004b33 	.word	0x08004b33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800488c:	b29b      	uxth	r3, r3
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 808e 	beq.w	80049bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80048a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8089 	beq.w	80049bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330c      	adds	r3, #12
 80048ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80048ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80048d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e3      	bne.n	80048aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3314      	adds	r3, #20
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	623b      	str	r3, [r7, #32]
   return(result);
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3314      	adds	r3, #20
 8004902:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004906:	633a      	str	r2, [r7, #48]	@ 0x30
 8004908:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800490c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e3      	bne.n	80048e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	330c      	adds	r3, #12
 800492e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	60fb      	str	r3, [r7, #12]
   return(result);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0310 	bic.w	r3, r3, #16
 800493e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800494c:	61fa      	str	r2, [r7, #28]
 800494e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	69b9      	ldr	r1, [r7, #24]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	617b      	str	r3, [r7, #20]
   return(result);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e3      	bne.n	8004928 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004966:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800496a:	4619      	mov	r1, r3
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f83d 	bl	80049ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004972:	e023      	b.n	80049bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497c:	2b00      	cmp	r3, #0
 800497e:	d009      	beq.n	8004994 <HAL_UART_IRQHandler+0x4f4>
 8004980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f8e4 	bl	8004b5a <UART_Transmit_IT>
    return;
 8004992:	e014      	b.n	80049be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <HAL_UART_IRQHandler+0x51e>
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f924 	bl	8004bfa <UART_EndTransmit_IT>
    return;
 80049b2:	e004      	b.n	80049be <HAL_UART_IRQHandler+0x51e>
    return;
 80049b4:	bf00      	nop
 80049b6:	e002      	b.n	80049be <HAL_UART_IRQHandler+0x51e>
      return;
 80049b8:	bf00      	nop
 80049ba:	e000      	b.n	80049be <HAL_UART_IRQHandler+0x51e>
      return;
 80049bc:	bf00      	nop
  }
}
 80049be:	37e8      	adds	r7, #232	@ 0xe8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e020      	b.n	8004a60 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2224      	movs	r2, #36	@ 0x24
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f023 030c 	bic.w	r3, r3, #12
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f043 0308 	orr.w	r3, r3, #8
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b095      	sub	sp, #84	@ 0x54
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	330c      	adds	r3, #12
 8004a92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a94:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e5      	bne.n	8004a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3314      	adds	r3, #20
 8004aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e5      	bne.n	8004aa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d119      	bne.n	8004b18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f023 0310 	bic.w	r3, r3, #16
 8004afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b04:	61ba      	str	r2, [r7, #24]
 8004b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6979      	ldr	r1, [r7, #20]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	613b      	str	r3, [r7, #16]
   return(result);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e5      	bne.n	8004ae4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b26:	bf00      	nop
 8004b28:	3754      	adds	r7, #84	@ 0x54
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f7ff ff43 	bl	80049d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b21      	cmp	r3, #33	@ 0x21
 8004b6c:	d13e      	bne.n	8004bec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b76:	d114      	bne.n	8004ba2 <UART_Transmit_IT+0x48>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d110      	bne.n	8004ba2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	1c9a      	adds	r2, r3, #2
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	621a      	str	r2, [r3, #32]
 8004ba0:	e008      	b.n	8004bb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6211      	str	r1, [r2, #32]
 8004bac:	781a      	ldrb	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10f      	bne.n	8004be8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004be6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e000      	b.n	8004bee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
  }
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc f944 	bl	8000ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b08c      	sub	sp, #48	@ 0x30
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b22      	cmp	r3, #34	@ 0x22
 8004c3c:	f040 80ae 	bne.w	8004d9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c48:	d117      	bne.n	8004c7a <UART_Receive_IT+0x50>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d113      	bne.n	8004c7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c72:	1c9a      	adds	r2, r3, #2
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c78:	e026      	b.n	8004cc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c8c:	d007      	beq.n	8004c9e <UART_Receive_IT+0x74>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10a      	bne.n	8004cac <UART_Receive_IT+0x82>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e008      	b.n	8004cbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d15d      	bne.n	8004d98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0220 	bic.w	r2, r2, #32
 8004cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d135      	bne.n	8004d8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	e853 3f00 	ldrex	r3, [r3]
 8004d36:	613b      	str	r3, [r7, #16]
   return(result);
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f023 0310 	bic.w	r3, r3, #16
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	330c      	adds	r3, #12
 8004d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d48:	623a      	str	r2, [r7, #32]
 8004d4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	69f9      	ldr	r1, [r7, #28]
 8004d4e:	6a3a      	ldr	r2, [r7, #32]
 8004d50:	e841 2300 	strex	r3, r2, [r1]
 8004d54:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e5      	bne.n	8004d28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0310 	and.w	r3, r3, #16
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d10a      	bne.n	8004d80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fe30 	bl	80049ec <HAL_UARTEx_RxEventCallback>
 8004d8c:	e002      	b.n	8004d94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff fe18 	bl	80049c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e002      	b.n	8004d9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d9c:	2302      	movs	r3, #2
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3730      	adds	r7, #48	@ 0x30
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dac:	b0c0      	sub	sp, #256	@ 0x100
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc4:	68d9      	ldr	r1, [r3, #12]
 8004dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	ea40 0301 	orr.w	r3, r0, r1
 8004dd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e00:	f021 010c 	bic.w	r1, r1, #12
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e22:	6999      	ldr	r1, [r3, #24]
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	ea40 0301 	orr.w	r3, r0, r1
 8004e2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4b8f      	ldr	r3, [pc, #572]	@ (8005074 <UART_SetConfig+0x2cc>)
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d005      	beq.n	8004e48 <UART_SetConfig+0xa0>
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b8d      	ldr	r3, [pc, #564]	@ (8005078 <UART_SetConfig+0x2d0>)
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d104      	bne.n	8004e52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e48:	f7ff fa88 	bl	800435c <HAL_RCC_GetPCLK2Freq>
 8004e4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e50:	e003      	b.n	8004e5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e52:	f7ff fa6f 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 8004e56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e64:	f040 810c 	bne.w	8005080 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	1891      	adds	r1, r2, r2
 8004e80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e82:	415b      	adcs	r3, r3
 8004e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	eb12 0801 	adds.w	r8, r2, r1
 8004e90:	4629      	mov	r1, r5
 8004e92:	eb43 0901 	adc.w	r9, r3, r1
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eaa:	4690      	mov	r8, r2
 8004eac:	4699      	mov	r9, r3
 8004eae:	4623      	mov	r3, r4
 8004eb0:	eb18 0303 	adds.w	r3, r8, r3
 8004eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004eb8:	462b      	mov	r3, r5
 8004eba:	eb49 0303 	adc.w	r3, r9, r3
 8004ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ece:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ed2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	18db      	adds	r3, r3, r3
 8004eda:	653b      	str	r3, [r7, #80]	@ 0x50
 8004edc:	4613      	mov	r3, r2
 8004ede:	eb42 0303 	adc.w	r3, r2, r3
 8004ee2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ee8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004eec:	f7fb fe64 	bl	8000bb8 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4b61      	ldr	r3, [pc, #388]	@ (800507c <UART_SetConfig+0x2d4>)
 8004ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	011c      	lsls	r4, r3, #4
 8004efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f10:	4642      	mov	r2, r8
 8004f12:	464b      	mov	r3, r9
 8004f14:	1891      	adds	r1, r2, r2
 8004f16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f18:	415b      	adcs	r3, r3
 8004f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f20:	4641      	mov	r1, r8
 8004f22:	eb12 0a01 	adds.w	sl, r2, r1
 8004f26:	4649      	mov	r1, r9
 8004f28:	eb43 0b01 	adc.w	fp, r3, r1
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f40:	4692      	mov	sl, r2
 8004f42:	469b      	mov	fp, r3
 8004f44:	4643      	mov	r3, r8
 8004f46:	eb1a 0303 	adds.w	r3, sl, r3
 8004f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	eb4b 0303 	adc.w	r3, fp, r3
 8004f54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	18db      	adds	r3, r3, r3
 8004f70:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f72:	4613      	mov	r3, r2
 8004f74:	eb42 0303 	adc.w	r3, r2, r3
 8004f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f82:	f7fb fe19 	bl	8000bb8 <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800507c <UART_SetConfig+0x2d4>)
 8004f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	2264      	movs	r2, #100	@ 0x64
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	1acb      	subs	r3, r1, r3
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fa2:	4b36      	ldr	r3, [pc, #216]	@ (800507c <UART_SetConfig+0x2d4>)
 8004fa4:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fb0:	441c      	add	r4, r3
 8004fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	1891      	adds	r1, r2, r2
 8004fca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fcc:	415b      	adcs	r3, r3
 8004fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	1851      	adds	r1, r2, r1
 8004fd8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fda:	4649      	mov	r1, r9
 8004fdc:	414b      	adcs	r3, r1
 8004fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fec:	4659      	mov	r1, fp
 8004fee:	00cb      	lsls	r3, r1, #3
 8004ff0:	4651      	mov	r1, sl
 8004ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ff6:	4651      	mov	r1, sl
 8004ff8:	00ca      	lsls	r2, r1, #3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	4642      	mov	r2, r8
 8005002:	189b      	adds	r3, r3, r2
 8005004:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005008:	464b      	mov	r3, r9
 800500a:	460a      	mov	r2, r1
 800500c:	eb42 0303 	adc.w	r3, r2, r3
 8005010:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005020:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005024:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005028:	460b      	mov	r3, r1
 800502a:	18db      	adds	r3, r3, r3
 800502c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800502e:	4613      	mov	r3, r2
 8005030:	eb42 0303 	adc.w	r3, r2, r3
 8005034:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800503a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800503e:	f7fb fdbb 	bl	8000bb8 <__aeabi_uldivmod>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <UART_SetConfig+0x2d4>)
 8005048:	fba3 1302 	umull	r1, r3, r3, r2
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	2164      	movs	r1, #100	@ 0x64
 8005050:	fb01 f303 	mul.w	r3, r1, r3
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	3332      	adds	r3, #50	@ 0x32
 800505a:	4a08      	ldr	r2, [pc, #32]	@ (800507c <UART_SetConfig+0x2d4>)
 800505c:	fba2 2303 	umull	r2, r3, r2, r3
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	f003 0207 	and.w	r2, r3, #7
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4422      	add	r2, r4
 800506e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005070:	e106      	b.n	8005280 <UART_SetConfig+0x4d8>
 8005072:	bf00      	nop
 8005074:	40011000 	.word	0x40011000
 8005078:	40011400 	.word	0x40011400
 800507c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005084:	2200      	movs	r2, #0
 8005086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800508a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800508e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005092:	4642      	mov	r2, r8
 8005094:	464b      	mov	r3, r9
 8005096:	1891      	adds	r1, r2, r2
 8005098:	6239      	str	r1, [r7, #32]
 800509a:	415b      	adcs	r3, r3
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
 800509e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050a2:	4641      	mov	r1, r8
 80050a4:	1854      	adds	r4, r2, r1
 80050a6:	4649      	mov	r1, r9
 80050a8:	eb43 0501 	adc.w	r5, r3, r1
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	00eb      	lsls	r3, r5, #3
 80050b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ba:	00e2      	lsls	r2, r4, #3
 80050bc:	4614      	mov	r4, r2
 80050be:	461d      	mov	r5, r3
 80050c0:	4643      	mov	r3, r8
 80050c2:	18e3      	adds	r3, r4, r3
 80050c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050c8:	464b      	mov	r3, r9
 80050ca:	eb45 0303 	adc.w	r3, r5, r3
 80050ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050ee:	4629      	mov	r1, r5
 80050f0:	008b      	lsls	r3, r1, #2
 80050f2:	4621      	mov	r1, r4
 80050f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f8:	4621      	mov	r1, r4
 80050fa:	008a      	lsls	r2, r1, #2
 80050fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005100:	f7fb fd5a 	bl	8000bb8 <__aeabi_uldivmod>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4b60      	ldr	r3, [pc, #384]	@ (800528c <UART_SetConfig+0x4e4>)
 800510a:	fba3 2302 	umull	r2, r3, r3, r2
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	011c      	lsls	r4, r3, #4
 8005112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005116:	2200      	movs	r2, #0
 8005118:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800511c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005120:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005124:	4642      	mov	r2, r8
 8005126:	464b      	mov	r3, r9
 8005128:	1891      	adds	r1, r2, r2
 800512a:	61b9      	str	r1, [r7, #24]
 800512c:	415b      	adcs	r3, r3
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005134:	4641      	mov	r1, r8
 8005136:	1851      	adds	r1, r2, r1
 8005138:	6139      	str	r1, [r7, #16]
 800513a:	4649      	mov	r1, r9
 800513c:	414b      	adcs	r3, r1
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800514c:	4659      	mov	r1, fp
 800514e:	00cb      	lsls	r3, r1, #3
 8005150:	4651      	mov	r1, sl
 8005152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005156:	4651      	mov	r1, sl
 8005158:	00ca      	lsls	r2, r1, #3
 800515a:	4610      	mov	r0, r2
 800515c:	4619      	mov	r1, r3
 800515e:	4603      	mov	r3, r0
 8005160:	4642      	mov	r2, r8
 8005162:	189b      	adds	r3, r3, r2
 8005164:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005168:	464b      	mov	r3, r9
 800516a:	460a      	mov	r2, r1
 800516c:	eb42 0303 	adc.w	r3, r2, r3
 8005170:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800517e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800518c:	4649      	mov	r1, r9
 800518e:	008b      	lsls	r3, r1, #2
 8005190:	4641      	mov	r1, r8
 8005192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005196:	4641      	mov	r1, r8
 8005198:	008a      	lsls	r2, r1, #2
 800519a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800519e:	f7fb fd0b 	bl	8000bb8 <__aeabi_uldivmod>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4611      	mov	r1, r2
 80051a8:	4b38      	ldr	r3, [pc, #224]	@ (800528c <UART_SetConfig+0x4e4>)
 80051aa:	fba3 2301 	umull	r2, r3, r3, r1
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	2264      	movs	r2, #100	@ 0x64
 80051b2:	fb02 f303 	mul.w	r3, r2, r3
 80051b6:	1acb      	subs	r3, r1, r3
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	3332      	adds	r3, #50	@ 0x32
 80051bc:	4a33      	ldr	r2, [pc, #204]	@ (800528c <UART_SetConfig+0x4e4>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051c8:	441c      	add	r4, r3
 80051ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ce:	2200      	movs	r2, #0
 80051d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80051d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80051d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051d8:	4642      	mov	r2, r8
 80051da:	464b      	mov	r3, r9
 80051dc:	1891      	adds	r1, r2, r2
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	415b      	adcs	r3, r3
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e8:	4641      	mov	r1, r8
 80051ea:	1851      	adds	r1, r2, r1
 80051ec:	6039      	str	r1, [r7, #0]
 80051ee:	4649      	mov	r1, r9
 80051f0:	414b      	adcs	r3, r1
 80051f2:	607b      	str	r3, [r7, #4]
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005200:	4659      	mov	r1, fp
 8005202:	00cb      	lsls	r3, r1, #3
 8005204:	4651      	mov	r1, sl
 8005206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800520a:	4651      	mov	r1, sl
 800520c:	00ca      	lsls	r2, r1, #3
 800520e:	4610      	mov	r0, r2
 8005210:	4619      	mov	r1, r3
 8005212:	4603      	mov	r3, r0
 8005214:	4642      	mov	r2, r8
 8005216:	189b      	adds	r3, r3, r2
 8005218:	66bb      	str	r3, [r7, #104]	@ 0x68
 800521a:	464b      	mov	r3, r9
 800521c:	460a      	mov	r2, r1
 800521e:	eb42 0303 	adc.w	r3, r2, r3
 8005222:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	663b      	str	r3, [r7, #96]	@ 0x60
 800522e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800523c:	4649      	mov	r1, r9
 800523e:	008b      	lsls	r3, r1, #2
 8005240:	4641      	mov	r1, r8
 8005242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005246:	4641      	mov	r1, r8
 8005248:	008a      	lsls	r2, r1, #2
 800524a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800524e:	f7fb fcb3 	bl	8000bb8 <__aeabi_uldivmod>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4b0d      	ldr	r3, [pc, #52]	@ (800528c <UART_SetConfig+0x4e4>)
 8005258:	fba3 1302 	umull	r1, r3, r3, r2
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	2164      	movs	r1, #100	@ 0x64
 8005260:	fb01 f303 	mul.w	r3, r1, r3
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	3332      	adds	r3, #50	@ 0x32
 800526a:	4a08      	ldr	r2, [pc, #32]	@ (800528c <UART_SetConfig+0x4e4>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	f003 020f 	and.w	r2, r3, #15
 8005276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4422      	add	r2, r4
 800527e:	609a      	str	r2, [r3, #8]
}
 8005280:	bf00      	nop
 8005282:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005286:	46bd      	mov	sp, r7
 8005288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800528c:	51eb851f 	.word	0x51eb851f

08005290 <__cvt>:
 8005290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	ec57 6b10 	vmov	r6, r7, d0
 8005298:	2f00      	cmp	r7, #0
 800529a:	460c      	mov	r4, r1
 800529c:	4619      	mov	r1, r3
 800529e:	463b      	mov	r3, r7
 80052a0:	bfbb      	ittet	lt
 80052a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80052a6:	461f      	movlt	r7, r3
 80052a8:	2300      	movge	r3, #0
 80052aa:	232d      	movlt	r3, #45	@ 0x2d
 80052ac:	700b      	strb	r3, [r1, #0]
 80052ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80052b4:	4691      	mov	r9, r2
 80052b6:	f023 0820 	bic.w	r8, r3, #32
 80052ba:	bfbc      	itt	lt
 80052bc:	4632      	movlt	r2, r6
 80052be:	4616      	movlt	r6, r2
 80052c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052c4:	d005      	beq.n	80052d2 <__cvt+0x42>
 80052c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80052ca:	d100      	bne.n	80052ce <__cvt+0x3e>
 80052cc:	3401      	adds	r4, #1
 80052ce:	2102      	movs	r1, #2
 80052d0:	e000      	b.n	80052d4 <__cvt+0x44>
 80052d2:	2103      	movs	r1, #3
 80052d4:	ab03      	add	r3, sp, #12
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	ab02      	add	r3, sp, #8
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	ec47 6b10 	vmov	d0, r6, r7
 80052e0:	4653      	mov	r3, sl
 80052e2:	4622      	mov	r2, r4
 80052e4:	f000 fe98 	bl	8006018 <_dtoa_r>
 80052e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80052ec:	4605      	mov	r5, r0
 80052ee:	d119      	bne.n	8005324 <__cvt+0x94>
 80052f0:	f019 0f01 	tst.w	r9, #1
 80052f4:	d00e      	beq.n	8005314 <__cvt+0x84>
 80052f6:	eb00 0904 	add.w	r9, r0, r4
 80052fa:	2200      	movs	r2, #0
 80052fc:	2300      	movs	r3, #0
 80052fe:	4630      	mov	r0, r6
 8005300:	4639      	mov	r1, r7
 8005302:	f7fb fbe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005306:	b108      	cbz	r0, 800530c <__cvt+0x7c>
 8005308:	f8cd 900c 	str.w	r9, [sp, #12]
 800530c:	2230      	movs	r2, #48	@ 0x30
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	454b      	cmp	r3, r9
 8005312:	d31e      	bcc.n	8005352 <__cvt+0xc2>
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005318:	1b5b      	subs	r3, r3, r5
 800531a:	4628      	mov	r0, r5
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	b004      	add	sp, #16
 8005320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005324:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005328:	eb00 0904 	add.w	r9, r0, r4
 800532c:	d1e5      	bne.n	80052fa <__cvt+0x6a>
 800532e:	7803      	ldrb	r3, [r0, #0]
 8005330:	2b30      	cmp	r3, #48	@ 0x30
 8005332:	d10a      	bne.n	800534a <__cvt+0xba>
 8005334:	2200      	movs	r2, #0
 8005336:	2300      	movs	r3, #0
 8005338:	4630      	mov	r0, r6
 800533a:	4639      	mov	r1, r7
 800533c:	f7fb fbcc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005340:	b918      	cbnz	r0, 800534a <__cvt+0xba>
 8005342:	f1c4 0401 	rsb	r4, r4, #1
 8005346:	f8ca 4000 	str.w	r4, [sl]
 800534a:	f8da 3000 	ldr.w	r3, [sl]
 800534e:	4499      	add	r9, r3
 8005350:	e7d3      	b.n	80052fa <__cvt+0x6a>
 8005352:	1c59      	adds	r1, r3, #1
 8005354:	9103      	str	r1, [sp, #12]
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e7d9      	b.n	800530e <__cvt+0x7e>

0800535a <__exponent>:
 800535a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800535c:	2900      	cmp	r1, #0
 800535e:	bfba      	itte	lt
 8005360:	4249      	neglt	r1, r1
 8005362:	232d      	movlt	r3, #45	@ 0x2d
 8005364:	232b      	movge	r3, #43	@ 0x2b
 8005366:	2909      	cmp	r1, #9
 8005368:	7002      	strb	r2, [r0, #0]
 800536a:	7043      	strb	r3, [r0, #1]
 800536c:	dd29      	ble.n	80053c2 <__exponent+0x68>
 800536e:	f10d 0307 	add.w	r3, sp, #7
 8005372:	461d      	mov	r5, r3
 8005374:	270a      	movs	r7, #10
 8005376:	461a      	mov	r2, r3
 8005378:	fbb1 f6f7 	udiv	r6, r1, r7
 800537c:	fb07 1416 	mls	r4, r7, r6, r1
 8005380:	3430      	adds	r4, #48	@ 0x30
 8005382:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005386:	460c      	mov	r4, r1
 8005388:	2c63      	cmp	r4, #99	@ 0x63
 800538a:	f103 33ff 	add.w	r3, r3, #4294967295
 800538e:	4631      	mov	r1, r6
 8005390:	dcf1      	bgt.n	8005376 <__exponent+0x1c>
 8005392:	3130      	adds	r1, #48	@ 0x30
 8005394:	1e94      	subs	r4, r2, #2
 8005396:	f803 1c01 	strb.w	r1, [r3, #-1]
 800539a:	1c41      	adds	r1, r0, #1
 800539c:	4623      	mov	r3, r4
 800539e:	42ab      	cmp	r3, r5
 80053a0:	d30a      	bcc.n	80053b8 <__exponent+0x5e>
 80053a2:	f10d 0309 	add.w	r3, sp, #9
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	42ac      	cmp	r4, r5
 80053aa:	bf88      	it	hi
 80053ac:	2300      	movhi	r3, #0
 80053ae:	3302      	adds	r3, #2
 80053b0:	4403      	add	r3, r0
 80053b2:	1a18      	subs	r0, r3, r0
 80053b4:	b003      	add	sp, #12
 80053b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053c0:	e7ed      	b.n	800539e <__exponent+0x44>
 80053c2:	2330      	movs	r3, #48	@ 0x30
 80053c4:	3130      	adds	r1, #48	@ 0x30
 80053c6:	7083      	strb	r3, [r0, #2]
 80053c8:	70c1      	strb	r1, [r0, #3]
 80053ca:	1d03      	adds	r3, r0, #4
 80053cc:	e7f1      	b.n	80053b2 <__exponent+0x58>
	...

080053d0 <_printf_float>:
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	b08d      	sub	sp, #52	@ 0x34
 80053d6:	460c      	mov	r4, r1
 80053d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80053dc:	4616      	mov	r6, r2
 80053de:	461f      	mov	r7, r3
 80053e0:	4605      	mov	r5, r0
 80053e2:	f000 fd09 	bl	8005df8 <_localeconv_r>
 80053e6:	6803      	ldr	r3, [r0, #0]
 80053e8:	9304      	str	r3, [sp, #16]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fa ff48 	bl	8000280 <strlen>
 80053f0:	2300      	movs	r3, #0
 80053f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80053f4:	f8d8 3000 	ldr.w	r3, [r8]
 80053f8:	9005      	str	r0, [sp, #20]
 80053fa:	3307      	adds	r3, #7
 80053fc:	f023 0307 	bic.w	r3, r3, #7
 8005400:	f103 0208 	add.w	r2, r3, #8
 8005404:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005408:	f8d4 b000 	ldr.w	fp, [r4]
 800540c:	f8c8 2000 	str.w	r2, [r8]
 8005410:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005414:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005418:	9307      	str	r3, [sp, #28]
 800541a:	f8cd 8018 	str.w	r8, [sp, #24]
 800541e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005426:	4b9c      	ldr	r3, [pc, #624]	@ (8005698 <_printf_float+0x2c8>)
 8005428:	f04f 32ff 	mov.w	r2, #4294967295
 800542c:	f7fb fb86 	bl	8000b3c <__aeabi_dcmpun>
 8005430:	bb70      	cbnz	r0, 8005490 <_printf_float+0xc0>
 8005432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005436:	4b98      	ldr	r3, [pc, #608]	@ (8005698 <_printf_float+0x2c8>)
 8005438:	f04f 32ff 	mov.w	r2, #4294967295
 800543c:	f7fb fb60 	bl	8000b00 <__aeabi_dcmple>
 8005440:	bb30      	cbnz	r0, 8005490 <_printf_float+0xc0>
 8005442:	2200      	movs	r2, #0
 8005444:	2300      	movs	r3, #0
 8005446:	4640      	mov	r0, r8
 8005448:	4649      	mov	r1, r9
 800544a:	f7fb fb4f 	bl	8000aec <__aeabi_dcmplt>
 800544e:	b110      	cbz	r0, 8005456 <_printf_float+0x86>
 8005450:	232d      	movs	r3, #45	@ 0x2d
 8005452:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005456:	4a91      	ldr	r2, [pc, #580]	@ (800569c <_printf_float+0x2cc>)
 8005458:	4b91      	ldr	r3, [pc, #580]	@ (80056a0 <_printf_float+0x2d0>)
 800545a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800545e:	bf94      	ite	ls
 8005460:	4690      	movls	r8, r2
 8005462:	4698      	movhi	r8, r3
 8005464:	2303      	movs	r3, #3
 8005466:	6123      	str	r3, [r4, #16]
 8005468:	f02b 0304 	bic.w	r3, fp, #4
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	f04f 0900 	mov.w	r9, #0
 8005472:	9700      	str	r7, [sp, #0]
 8005474:	4633      	mov	r3, r6
 8005476:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005478:	4621      	mov	r1, r4
 800547a:	4628      	mov	r0, r5
 800547c:	f000 f9d2 	bl	8005824 <_printf_common>
 8005480:	3001      	adds	r0, #1
 8005482:	f040 808d 	bne.w	80055a0 <_printf_float+0x1d0>
 8005486:	f04f 30ff 	mov.w	r0, #4294967295
 800548a:	b00d      	add	sp, #52	@ 0x34
 800548c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005490:	4642      	mov	r2, r8
 8005492:	464b      	mov	r3, r9
 8005494:	4640      	mov	r0, r8
 8005496:	4649      	mov	r1, r9
 8005498:	f7fb fb50 	bl	8000b3c <__aeabi_dcmpun>
 800549c:	b140      	cbz	r0, 80054b0 <_printf_float+0xe0>
 800549e:	464b      	mov	r3, r9
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bfbc      	itt	lt
 80054a4:	232d      	movlt	r3, #45	@ 0x2d
 80054a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054aa:	4a7e      	ldr	r2, [pc, #504]	@ (80056a4 <_printf_float+0x2d4>)
 80054ac:	4b7e      	ldr	r3, [pc, #504]	@ (80056a8 <_printf_float+0x2d8>)
 80054ae:	e7d4      	b.n	800545a <_printf_float+0x8a>
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80054b6:	9206      	str	r2, [sp, #24]
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	d13b      	bne.n	8005534 <_printf_float+0x164>
 80054bc:	2306      	movs	r3, #6
 80054be:	6063      	str	r3, [r4, #4]
 80054c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80054c4:	2300      	movs	r3, #0
 80054c6:	6022      	str	r2, [r4, #0]
 80054c8:	9303      	str	r3, [sp, #12]
 80054ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80054cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80054d0:	ab09      	add	r3, sp, #36	@ 0x24
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	6861      	ldr	r1, [r4, #4]
 80054d6:	ec49 8b10 	vmov	d0, r8, r9
 80054da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80054de:	4628      	mov	r0, r5
 80054e0:	f7ff fed6 	bl	8005290 <__cvt>
 80054e4:	9b06      	ldr	r3, [sp, #24]
 80054e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80054e8:	2b47      	cmp	r3, #71	@ 0x47
 80054ea:	4680      	mov	r8, r0
 80054ec:	d129      	bne.n	8005542 <_printf_float+0x172>
 80054ee:	1cc8      	adds	r0, r1, #3
 80054f0:	db02      	blt.n	80054f8 <_printf_float+0x128>
 80054f2:	6863      	ldr	r3, [r4, #4]
 80054f4:	4299      	cmp	r1, r3
 80054f6:	dd41      	ble.n	800557c <_printf_float+0x1ac>
 80054f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80054fc:	fa5f fa8a 	uxtb.w	sl, sl
 8005500:	3901      	subs	r1, #1
 8005502:	4652      	mov	r2, sl
 8005504:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005508:	9109      	str	r1, [sp, #36]	@ 0x24
 800550a:	f7ff ff26 	bl	800535a <__exponent>
 800550e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005510:	1813      	adds	r3, r2, r0
 8005512:	2a01      	cmp	r2, #1
 8005514:	4681      	mov	r9, r0
 8005516:	6123      	str	r3, [r4, #16]
 8005518:	dc02      	bgt.n	8005520 <_printf_float+0x150>
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	07d2      	lsls	r2, r2, #31
 800551e:	d501      	bpl.n	8005524 <_printf_float+0x154>
 8005520:	3301      	adds	r3, #1
 8005522:	6123      	str	r3, [r4, #16]
 8005524:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0a2      	beq.n	8005472 <_printf_float+0xa2>
 800552c:	232d      	movs	r3, #45	@ 0x2d
 800552e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005532:	e79e      	b.n	8005472 <_printf_float+0xa2>
 8005534:	9a06      	ldr	r2, [sp, #24]
 8005536:	2a47      	cmp	r2, #71	@ 0x47
 8005538:	d1c2      	bne.n	80054c0 <_printf_float+0xf0>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1c0      	bne.n	80054c0 <_printf_float+0xf0>
 800553e:	2301      	movs	r3, #1
 8005540:	e7bd      	b.n	80054be <_printf_float+0xee>
 8005542:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005546:	d9db      	bls.n	8005500 <_printf_float+0x130>
 8005548:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800554c:	d118      	bne.n	8005580 <_printf_float+0x1b0>
 800554e:	2900      	cmp	r1, #0
 8005550:	6863      	ldr	r3, [r4, #4]
 8005552:	dd0b      	ble.n	800556c <_printf_float+0x19c>
 8005554:	6121      	str	r1, [r4, #16]
 8005556:	b913      	cbnz	r3, 800555e <_printf_float+0x18e>
 8005558:	6822      	ldr	r2, [r4, #0]
 800555a:	07d0      	lsls	r0, r2, #31
 800555c:	d502      	bpl.n	8005564 <_printf_float+0x194>
 800555e:	3301      	adds	r3, #1
 8005560:	440b      	add	r3, r1
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005566:	f04f 0900 	mov.w	r9, #0
 800556a:	e7db      	b.n	8005524 <_printf_float+0x154>
 800556c:	b913      	cbnz	r3, 8005574 <_printf_float+0x1a4>
 800556e:	6822      	ldr	r2, [r4, #0]
 8005570:	07d2      	lsls	r2, r2, #31
 8005572:	d501      	bpl.n	8005578 <_printf_float+0x1a8>
 8005574:	3302      	adds	r3, #2
 8005576:	e7f4      	b.n	8005562 <_printf_float+0x192>
 8005578:	2301      	movs	r3, #1
 800557a:	e7f2      	b.n	8005562 <_printf_float+0x192>
 800557c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005582:	4299      	cmp	r1, r3
 8005584:	db05      	blt.n	8005592 <_printf_float+0x1c2>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	6121      	str	r1, [r4, #16]
 800558a:	07d8      	lsls	r0, r3, #31
 800558c:	d5ea      	bpl.n	8005564 <_printf_float+0x194>
 800558e:	1c4b      	adds	r3, r1, #1
 8005590:	e7e7      	b.n	8005562 <_printf_float+0x192>
 8005592:	2900      	cmp	r1, #0
 8005594:	bfd4      	ite	le
 8005596:	f1c1 0202 	rsble	r2, r1, #2
 800559a:	2201      	movgt	r2, #1
 800559c:	4413      	add	r3, r2
 800559e:	e7e0      	b.n	8005562 <_printf_float+0x192>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	055a      	lsls	r2, r3, #21
 80055a4:	d407      	bmi.n	80055b6 <_printf_float+0x1e6>
 80055a6:	6923      	ldr	r3, [r4, #16]
 80055a8:	4642      	mov	r2, r8
 80055aa:	4631      	mov	r1, r6
 80055ac:	4628      	mov	r0, r5
 80055ae:	47b8      	blx	r7
 80055b0:	3001      	adds	r0, #1
 80055b2:	d12b      	bne.n	800560c <_printf_float+0x23c>
 80055b4:	e767      	b.n	8005486 <_printf_float+0xb6>
 80055b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055ba:	f240 80dd 	bls.w	8005778 <_printf_float+0x3a8>
 80055be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055c2:	2200      	movs	r2, #0
 80055c4:	2300      	movs	r3, #0
 80055c6:	f7fb fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d033      	beq.n	8005636 <_printf_float+0x266>
 80055ce:	4a37      	ldr	r2, [pc, #220]	@ (80056ac <_printf_float+0x2dc>)
 80055d0:	2301      	movs	r3, #1
 80055d2:	4631      	mov	r1, r6
 80055d4:	4628      	mov	r0, r5
 80055d6:	47b8      	blx	r7
 80055d8:	3001      	adds	r0, #1
 80055da:	f43f af54 	beq.w	8005486 <_printf_float+0xb6>
 80055de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80055e2:	4543      	cmp	r3, r8
 80055e4:	db02      	blt.n	80055ec <_printf_float+0x21c>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	07d8      	lsls	r0, r3, #31
 80055ea:	d50f      	bpl.n	800560c <_printf_float+0x23c>
 80055ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055f0:	4631      	mov	r1, r6
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	f43f af45 	beq.w	8005486 <_printf_float+0xb6>
 80055fc:	f04f 0900 	mov.w	r9, #0
 8005600:	f108 38ff 	add.w	r8, r8, #4294967295
 8005604:	f104 0a1a 	add.w	sl, r4, #26
 8005608:	45c8      	cmp	r8, r9
 800560a:	dc09      	bgt.n	8005620 <_printf_float+0x250>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	079b      	lsls	r3, r3, #30
 8005610:	f100 8103 	bmi.w	800581a <_printf_float+0x44a>
 8005614:	68e0      	ldr	r0, [r4, #12]
 8005616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005618:	4298      	cmp	r0, r3
 800561a:	bfb8      	it	lt
 800561c:	4618      	movlt	r0, r3
 800561e:	e734      	b.n	800548a <_printf_float+0xba>
 8005620:	2301      	movs	r3, #1
 8005622:	4652      	mov	r2, sl
 8005624:	4631      	mov	r1, r6
 8005626:	4628      	mov	r0, r5
 8005628:	47b8      	blx	r7
 800562a:	3001      	adds	r0, #1
 800562c:	f43f af2b 	beq.w	8005486 <_printf_float+0xb6>
 8005630:	f109 0901 	add.w	r9, r9, #1
 8005634:	e7e8      	b.n	8005608 <_printf_float+0x238>
 8005636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	dc39      	bgt.n	80056b0 <_printf_float+0x2e0>
 800563c:	4a1b      	ldr	r2, [pc, #108]	@ (80056ac <_printf_float+0x2dc>)
 800563e:	2301      	movs	r3, #1
 8005640:	4631      	mov	r1, r6
 8005642:	4628      	mov	r0, r5
 8005644:	47b8      	blx	r7
 8005646:	3001      	adds	r0, #1
 8005648:	f43f af1d 	beq.w	8005486 <_printf_float+0xb6>
 800564c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005650:	ea59 0303 	orrs.w	r3, r9, r3
 8005654:	d102      	bne.n	800565c <_printf_float+0x28c>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	07d9      	lsls	r1, r3, #31
 800565a:	d5d7      	bpl.n	800560c <_printf_float+0x23c>
 800565c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005660:	4631      	mov	r1, r6
 8005662:	4628      	mov	r0, r5
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	f43f af0d 	beq.w	8005486 <_printf_float+0xb6>
 800566c:	f04f 0a00 	mov.w	sl, #0
 8005670:	f104 0b1a 	add.w	fp, r4, #26
 8005674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005676:	425b      	negs	r3, r3
 8005678:	4553      	cmp	r3, sl
 800567a:	dc01      	bgt.n	8005680 <_printf_float+0x2b0>
 800567c:	464b      	mov	r3, r9
 800567e:	e793      	b.n	80055a8 <_printf_float+0x1d8>
 8005680:	2301      	movs	r3, #1
 8005682:	465a      	mov	r2, fp
 8005684:	4631      	mov	r1, r6
 8005686:	4628      	mov	r0, r5
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	f43f aefb 	beq.w	8005486 <_printf_float+0xb6>
 8005690:	f10a 0a01 	add.w	sl, sl, #1
 8005694:	e7ee      	b.n	8005674 <_printf_float+0x2a4>
 8005696:	bf00      	nop
 8005698:	7fefffff 	.word	0x7fefffff
 800569c:	08008700 	.word	0x08008700
 80056a0:	08008704 	.word	0x08008704
 80056a4:	08008708 	.word	0x08008708
 80056a8:	0800870c 	.word	0x0800870c
 80056ac:	08008710 	.word	0x08008710
 80056b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056b6:	4553      	cmp	r3, sl
 80056b8:	bfa8      	it	ge
 80056ba:	4653      	movge	r3, sl
 80056bc:	2b00      	cmp	r3, #0
 80056be:	4699      	mov	r9, r3
 80056c0:	dc36      	bgt.n	8005730 <_printf_float+0x360>
 80056c2:	f04f 0b00 	mov.w	fp, #0
 80056c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056ca:	f104 021a 	add.w	r2, r4, #26
 80056ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056d0:	9306      	str	r3, [sp, #24]
 80056d2:	eba3 0309 	sub.w	r3, r3, r9
 80056d6:	455b      	cmp	r3, fp
 80056d8:	dc31      	bgt.n	800573e <_printf_float+0x36e>
 80056da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056dc:	459a      	cmp	sl, r3
 80056de:	dc3a      	bgt.n	8005756 <_printf_float+0x386>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	07da      	lsls	r2, r3, #31
 80056e4:	d437      	bmi.n	8005756 <_printf_float+0x386>
 80056e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056e8:	ebaa 0903 	sub.w	r9, sl, r3
 80056ec:	9b06      	ldr	r3, [sp, #24]
 80056ee:	ebaa 0303 	sub.w	r3, sl, r3
 80056f2:	4599      	cmp	r9, r3
 80056f4:	bfa8      	it	ge
 80056f6:	4699      	movge	r9, r3
 80056f8:	f1b9 0f00 	cmp.w	r9, #0
 80056fc:	dc33      	bgt.n	8005766 <_printf_float+0x396>
 80056fe:	f04f 0800 	mov.w	r8, #0
 8005702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005706:	f104 0b1a 	add.w	fp, r4, #26
 800570a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800570c:	ebaa 0303 	sub.w	r3, sl, r3
 8005710:	eba3 0309 	sub.w	r3, r3, r9
 8005714:	4543      	cmp	r3, r8
 8005716:	f77f af79 	ble.w	800560c <_printf_float+0x23c>
 800571a:	2301      	movs	r3, #1
 800571c:	465a      	mov	r2, fp
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	47b8      	blx	r7
 8005724:	3001      	adds	r0, #1
 8005726:	f43f aeae 	beq.w	8005486 <_printf_float+0xb6>
 800572a:	f108 0801 	add.w	r8, r8, #1
 800572e:	e7ec      	b.n	800570a <_printf_float+0x33a>
 8005730:	4642      	mov	r2, r8
 8005732:	4631      	mov	r1, r6
 8005734:	4628      	mov	r0, r5
 8005736:	47b8      	blx	r7
 8005738:	3001      	adds	r0, #1
 800573a:	d1c2      	bne.n	80056c2 <_printf_float+0x2f2>
 800573c:	e6a3      	b.n	8005486 <_printf_float+0xb6>
 800573e:	2301      	movs	r3, #1
 8005740:	4631      	mov	r1, r6
 8005742:	4628      	mov	r0, r5
 8005744:	9206      	str	r2, [sp, #24]
 8005746:	47b8      	blx	r7
 8005748:	3001      	adds	r0, #1
 800574a:	f43f ae9c 	beq.w	8005486 <_printf_float+0xb6>
 800574e:	9a06      	ldr	r2, [sp, #24]
 8005750:	f10b 0b01 	add.w	fp, fp, #1
 8005754:	e7bb      	b.n	80056ce <_printf_float+0x2fe>
 8005756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800575a:	4631      	mov	r1, r6
 800575c:	4628      	mov	r0, r5
 800575e:	47b8      	blx	r7
 8005760:	3001      	adds	r0, #1
 8005762:	d1c0      	bne.n	80056e6 <_printf_float+0x316>
 8005764:	e68f      	b.n	8005486 <_printf_float+0xb6>
 8005766:	9a06      	ldr	r2, [sp, #24]
 8005768:	464b      	mov	r3, r9
 800576a:	4442      	add	r2, r8
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	d1c3      	bne.n	80056fe <_printf_float+0x32e>
 8005776:	e686      	b.n	8005486 <_printf_float+0xb6>
 8005778:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800577c:	f1ba 0f01 	cmp.w	sl, #1
 8005780:	dc01      	bgt.n	8005786 <_printf_float+0x3b6>
 8005782:	07db      	lsls	r3, r3, #31
 8005784:	d536      	bpl.n	80057f4 <_printf_float+0x424>
 8005786:	2301      	movs	r3, #1
 8005788:	4642      	mov	r2, r8
 800578a:	4631      	mov	r1, r6
 800578c:	4628      	mov	r0, r5
 800578e:	47b8      	blx	r7
 8005790:	3001      	adds	r0, #1
 8005792:	f43f ae78 	beq.w	8005486 <_printf_float+0xb6>
 8005796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	f43f ae70 	beq.w	8005486 <_printf_float+0xb6>
 80057a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057aa:	2200      	movs	r2, #0
 80057ac:	2300      	movs	r3, #0
 80057ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057b2:	f7fb f991 	bl	8000ad8 <__aeabi_dcmpeq>
 80057b6:	b9c0      	cbnz	r0, 80057ea <_printf_float+0x41a>
 80057b8:	4653      	mov	r3, sl
 80057ba:	f108 0201 	add.w	r2, r8, #1
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	d10c      	bne.n	80057e2 <_printf_float+0x412>
 80057c8:	e65d      	b.n	8005486 <_printf_float+0xb6>
 80057ca:	2301      	movs	r3, #1
 80057cc:	465a      	mov	r2, fp
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	f43f ae56 	beq.w	8005486 <_printf_float+0xb6>
 80057da:	f108 0801 	add.w	r8, r8, #1
 80057de:	45d0      	cmp	r8, sl
 80057e0:	dbf3      	blt.n	80057ca <_printf_float+0x3fa>
 80057e2:	464b      	mov	r3, r9
 80057e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80057e8:	e6df      	b.n	80055aa <_printf_float+0x1da>
 80057ea:	f04f 0800 	mov.w	r8, #0
 80057ee:	f104 0b1a 	add.w	fp, r4, #26
 80057f2:	e7f4      	b.n	80057de <_printf_float+0x40e>
 80057f4:	2301      	movs	r3, #1
 80057f6:	4642      	mov	r2, r8
 80057f8:	e7e1      	b.n	80057be <_printf_float+0x3ee>
 80057fa:	2301      	movs	r3, #1
 80057fc:	464a      	mov	r2, r9
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	47b8      	blx	r7
 8005804:	3001      	adds	r0, #1
 8005806:	f43f ae3e 	beq.w	8005486 <_printf_float+0xb6>
 800580a:	f108 0801 	add.w	r8, r8, #1
 800580e:	68e3      	ldr	r3, [r4, #12]
 8005810:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005812:	1a5b      	subs	r3, r3, r1
 8005814:	4543      	cmp	r3, r8
 8005816:	dcf0      	bgt.n	80057fa <_printf_float+0x42a>
 8005818:	e6fc      	b.n	8005614 <_printf_float+0x244>
 800581a:	f04f 0800 	mov.w	r8, #0
 800581e:	f104 0919 	add.w	r9, r4, #25
 8005822:	e7f4      	b.n	800580e <_printf_float+0x43e>

08005824 <_printf_common>:
 8005824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	4616      	mov	r6, r2
 800582a:	4698      	mov	r8, r3
 800582c:	688a      	ldr	r2, [r1, #8]
 800582e:	690b      	ldr	r3, [r1, #16]
 8005830:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005834:	4293      	cmp	r3, r2
 8005836:	bfb8      	it	lt
 8005838:	4613      	movlt	r3, r2
 800583a:	6033      	str	r3, [r6, #0]
 800583c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005840:	4607      	mov	r7, r0
 8005842:	460c      	mov	r4, r1
 8005844:	b10a      	cbz	r2, 800584a <_printf_common+0x26>
 8005846:	3301      	adds	r3, #1
 8005848:	6033      	str	r3, [r6, #0]
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	0699      	lsls	r1, r3, #26
 800584e:	bf42      	ittt	mi
 8005850:	6833      	ldrmi	r3, [r6, #0]
 8005852:	3302      	addmi	r3, #2
 8005854:	6033      	strmi	r3, [r6, #0]
 8005856:	6825      	ldr	r5, [r4, #0]
 8005858:	f015 0506 	ands.w	r5, r5, #6
 800585c:	d106      	bne.n	800586c <_printf_common+0x48>
 800585e:	f104 0a19 	add.w	sl, r4, #25
 8005862:	68e3      	ldr	r3, [r4, #12]
 8005864:	6832      	ldr	r2, [r6, #0]
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	42ab      	cmp	r3, r5
 800586a:	dc26      	bgt.n	80058ba <_printf_common+0x96>
 800586c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005870:	6822      	ldr	r2, [r4, #0]
 8005872:	3b00      	subs	r3, #0
 8005874:	bf18      	it	ne
 8005876:	2301      	movne	r3, #1
 8005878:	0692      	lsls	r2, r2, #26
 800587a:	d42b      	bmi.n	80058d4 <_printf_common+0xb0>
 800587c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005880:	4641      	mov	r1, r8
 8005882:	4638      	mov	r0, r7
 8005884:	47c8      	blx	r9
 8005886:	3001      	adds	r0, #1
 8005888:	d01e      	beq.n	80058c8 <_printf_common+0xa4>
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	6922      	ldr	r2, [r4, #16]
 800588e:	f003 0306 	and.w	r3, r3, #6
 8005892:	2b04      	cmp	r3, #4
 8005894:	bf02      	ittt	eq
 8005896:	68e5      	ldreq	r5, [r4, #12]
 8005898:	6833      	ldreq	r3, [r6, #0]
 800589a:	1aed      	subeq	r5, r5, r3
 800589c:	68a3      	ldr	r3, [r4, #8]
 800589e:	bf0c      	ite	eq
 80058a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a4:	2500      	movne	r5, #0
 80058a6:	4293      	cmp	r3, r2
 80058a8:	bfc4      	itt	gt
 80058aa:	1a9b      	subgt	r3, r3, r2
 80058ac:	18ed      	addgt	r5, r5, r3
 80058ae:	2600      	movs	r6, #0
 80058b0:	341a      	adds	r4, #26
 80058b2:	42b5      	cmp	r5, r6
 80058b4:	d11a      	bne.n	80058ec <_printf_common+0xc8>
 80058b6:	2000      	movs	r0, #0
 80058b8:	e008      	b.n	80058cc <_printf_common+0xa8>
 80058ba:	2301      	movs	r3, #1
 80058bc:	4652      	mov	r2, sl
 80058be:	4641      	mov	r1, r8
 80058c0:	4638      	mov	r0, r7
 80058c2:	47c8      	blx	r9
 80058c4:	3001      	adds	r0, #1
 80058c6:	d103      	bne.n	80058d0 <_printf_common+0xac>
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d0:	3501      	adds	r5, #1
 80058d2:	e7c6      	b.n	8005862 <_printf_common+0x3e>
 80058d4:	18e1      	adds	r1, r4, r3
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	2030      	movs	r0, #48	@ 0x30
 80058da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058de:	4422      	add	r2, r4
 80058e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058e8:	3302      	adds	r3, #2
 80058ea:	e7c7      	b.n	800587c <_printf_common+0x58>
 80058ec:	2301      	movs	r3, #1
 80058ee:	4622      	mov	r2, r4
 80058f0:	4641      	mov	r1, r8
 80058f2:	4638      	mov	r0, r7
 80058f4:	47c8      	blx	r9
 80058f6:	3001      	adds	r0, #1
 80058f8:	d0e6      	beq.n	80058c8 <_printf_common+0xa4>
 80058fa:	3601      	adds	r6, #1
 80058fc:	e7d9      	b.n	80058b2 <_printf_common+0x8e>
	...

08005900 <_printf_i>:
 8005900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005904:	7e0f      	ldrb	r7, [r1, #24]
 8005906:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005908:	2f78      	cmp	r7, #120	@ 0x78
 800590a:	4691      	mov	r9, r2
 800590c:	4680      	mov	r8, r0
 800590e:	460c      	mov	r4, r1
 8005910:	469a      	mov	sl, r3
 8005912:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005916:	d807      	bhi.n	8005928 <_printf_i+0x28>
 8005918:	2f62      	cmp	r7, #98	@ 0x62
 800591a:	d80a      	bhi.n	8005932 <_printf_i+0x32>
 800591c:	2f00      	cmp	r7, #0
 800591e:	f000 80d2 	beq.w	8005ac6 <_printf_i+0x1c6>
 8005922:	2f58      	cmp	r7, #88	@ 0x58
 8005924:	f000 80b9 	beq.w	8005a9a <_printf_i+0x19a>
 8005928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800592c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005930:	e03a      	b.n	80059a8 <_printf_i+0xa8>
 8005932:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005936:	2b15      	cmp	r3, #21
 8005938:	d8f6      	bhi.n	8005928 <_printf_i+0x28>
 800593a:	a101      	add	r1, pc, #4	@ (adr r1, 8005940 <_printf_i+0x40>)
 800593c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005940:	08005999 	.word	0x08005999
 8005944:	080059ad 	.word	0x080059ad
 8005948:	08005929 	.word	0x08005929
 800594c:	08005929 	.word	0x08005929
 8005950:	08005929 	.word	0x08005929
 8005954:	08005929 	.word	0x08005929
 8005958:	080059ad 	.word	0x080059ad
 800595c:	08005929 	.word	0x08005929
 8005960:	08005929 	.word	0x08005929
 8005964:	08005929 	.word	0x08005929
 8005968:	08005929 	.word	0x08005929
 800596c:	08005aad 	.word	0x08005aad
 8005970:	080059d7 	.word	0x080059d7
 8005974:	08005a67 	.word	0x08005a67
 8005978:	08005929 	.word	0x08005929
 800597c:	08005929 	.word	0x08005929
 8005980:	08005acf 	.word	0x08005acf
 8005984:	08005929 	.word	0x08005929
 8005988:	080059d7 	.word	0x080059d7
 800598c:	08005929 	.word	0x08005929
 8005990:	08005929 	.word	0x08005929
 8005994:	08005a6f 	.word	0x08005a6f
 8005998:	6833      	ldr	r3, [r6, #0]
 800599a:	1d1a      	adds	r2, r3, #4
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6032      	str	r2, [r6, #0]
 80059a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059a8:	2301      	movs	r3, #1
 80059aa:	e09d      	b.n	8005ae8 <_printf_i+0x1e8>
 80059ac:	6833      	ldr	r3, [r6, #0]
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	1d19      	adds	r1, r3, #4
 80059b2:	6031      	str	r1, [r6, #0]
 80059b4:	0606      	lsls	r6, r0, #24
 80059b6:	d501      	bpl.n	80059bc <_printf_i+0xbc>
 80059b8:	681d      	ldr	r5, [r3, #0]
 80059ba:	e003      	b.n	80059c4 <_printf_i+0xc4>
 80059bc:	0645      	lsls	r5, r0, #25
 80059be:	d5fb      	bpl.n	80059b8 <_printf_i+0xb8>
 80059c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059c4:	2d00      	cmp	r5, #0
 80059c6:	da03      	bge.n	80059d0 <_printf_i+0xd0>
 80059c8:	232d      	movs	r3, #45	@ 0x2d
 80059ca:	426d      	negs	r5, r5
 80059cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059d0:	4859      	ldr	r0, [pc, #356]	@ (8005b38 <_printf_i+0x238>)
 80059d2:	230a      	movs	r3, #10
 80059d4:	e011      	b.n	80059fa <_printf_i+0xfa>
 80059d6:	6821      	ldr	r1, [r4, #0]
 80059d8:	6833      	ldr	r3, [r6, #0]
 80059da:	0608      	lsls	r0, r1, #24
 80059dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80059e0:	d402      	bmi.n	80059e8 <_printf_i+0xe8>
 80059e2:	0649      	lsls	r1, r1, #25
 80059e4:	bf48      	it	mi
 80059e6:	b2ad      	uxthmi	r5, r5
 80059e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80059ea:	4853      	ldr	r0, [pc, #332]	@ (8005b38 <_printf_i+0x238>)
 80059ec:	6033      	str	r3, [r6, #0]
 80059ee:	bf14      	ite	ne
 80059f0:	230a      	movne	r3, #10
 80059f2:	2308      	moveq	r3, #8
 80059f4:	2100      	movs	r1, #0
 80059f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059fa:	6866      	ldr	r6, [r4, #4]
 80059fc:	60a6      	str	r6, [r4, #8]
 80059fe:	2e00      	cmp	r6, #0
 8005a00:	bfa2      	ittt	ge
 8005a02:	6821      	ldrge	r1, [r4, #0]
 8005a04:	f021 0104 	bicge.w	r1, r1, #4
 8005a08:	6021      	strge	r1, [r4, #0]
 8005a0a:	b90d      	cbnz	r5, 8005a10 <_printf_i+0x110>
 8005a0c:	2e00      	cmp	r6, #0
 8005a0e:	d04b      	beq.n	8005aa8 <_printf_i+0x1a8>
 8005a10:	4616      	mov	r6, r2
 8005a12:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a16:	fb03 5711 	mls	r7, r3, r1, r5
 8005a1a:	5dc7      	ldrb	r7, [r0, r7]
 8005a1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a20:	462f      	mov	r7, r5
 8005a22:	42bb      	cmp	r3, r7
 8005a24:	460d      	mov	r5, r1
 8005a26:	d9f4      	bls.n	8005a12 <_printf_i+0x112>
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d10b      	bne.n	8005a44 <_printf_i+0x144>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	07df      	lsls	r7, r3, #31
 8005a30:	d508      	bpl.n	8005a44 <_printf_i+0x144>
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	6861      	ldr	r1, [r4, #4]
 8005a36:	4299      	cmp	r1, r3
 8005a38:	bfde      	ittt	le
 8005a3a:	2330      	movle	r3, #48	@ 0x30
 8005a3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a44:	1b92      	subs	r2, r2, r6
 8005a46:	6122      	str	r2, [r4, #16]
 8005a48:	f8cd a000 	str.w	sl, [sp]
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	aa03      	add	r2, sp, #12
 8005a50:	4621      	mov	r1, r4
 8005a52:	4640      	mov	r0, r8
 8005a54:	f7ff fee6 	bl	8005824 <_printf_common>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d14a      	bne.n	8005af2 <_printf_i+0x1f2>
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	b004      	add	sp, #16
 8005a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	f043 0320 	orr.w	r3, r3, #32
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	4833      	ldr	r0, [pc, #204]	@ (8005b3c <_printf_i+0x23c>)
 8005a70:	2778      	movs	r7, #120	@ 0x78
 8005a72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	6831      	ldr	r1, [r6, #0]
 8005a7a:	061f      	lsls	r7, r3, #24
 8005a7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a80:	d402      	bmi.n	8005a88 <_printf_i+0x188>
 8005a82:	065f      	lsls	r7, r3, #25
 8005a84:	bf48      	it	mi
 8005a86:	b2ad      	uxthmi	r5, r5
 8005a88:	6031      	str	r1, [r6, #0]
 8005a8a:	07d9      	lsls	r1, r3, #31
 8005a8c:	bf44      	itt	mi
 8005a8e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a92:	6023      	strmi	r3, [r4, #0]
 8005a94:	b11d      	cbz	r5, 8005a9e <_printf_i+0x19e>
 8005a96:	2310      	movs	r3, #16
 8005a98:	e7ac      	b.n	80059f4 <_printf_i+0xf4>
 8005a9a:	4827      	ldr	r0, [pc, #156]	@ (8005b38 <_printf_i+0x238>)
 8005a9c:	e7e9      	b.n	8005a72 <_printf_i+0x172>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	f023 0320 	bic.w	r3, r3, #32
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	e7f6      	b.n	8005a96 <_printf_i+0x196>
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	e7bd      	b.n	8005a28 <_printf_i+0x128>
 8005aac:	6833      	ldr	r3, [r6, #0]
 8005aae:	6825      	ldr	r5, [r4, #0]
 8005ab0:	6961      	ldr	r1, [r4, #20]
 8005ab2:	1d18      	adds	r0, r3, #4
 8005ab4:	6030      	str	r0, [r6, #0]
 8005ab6:	062e      	lsls	r6, r5, #24
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	d501      	bpl.n	8005ac0 <_printf_i+0x1c0>
 8005abc:	6019      	str	r1, [r3, #0]
 8005abe:	e002      	b.n	8005ac6 <_printf_i+0x1c6>
 8005ac0:	0668      	lsls	r0, r5, #25
 8005ac2:	d5fb      	bpl.n	8005abc <_printf_i+0x1bc>
 8005ac4:	8019      	strh	r1, [r3, #0]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	4616      	mov	r6, r2
 8005acc:	e7bc      	b.n	8005a48 <_printf_i+0x148>
 8005ace:	6833      	ldr	r3, [r6, #0]
 8005ad0:	1d1a      	adds	r2, r3, #4
 8005ad2:	6032      	str	r2, [r6, #0]
 8005ad4:	681e      	ldr	r6, [r3, #0]
 8005ad6:	6862      	ldr	r2, [r4, #4]
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4630      	mov	r0, r6
 8005adc:	f7fa fb80 	bl	80001e0 <memchr>
 8005ae0:	b108      	cbz	r0, 8005ae6 <_printf_i+0x1e6>
 8005ae2:	1b80      	subs	r0, r0, r6
 8005ae4:	6060      	str	r0, [r4, #4]
 8005ae6:	6863      	ldr	r3, [r4, #4]
 8005ae8:	6123      	str	r3, [r4, #16]
 8005aea:	2300      	movs	r3, #0
 8005aec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005af0:	e7aa      	b.n	8005a48 <_printf_i+0x148>
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	4632      	mov	r2, r6
 8005af6:	4649      	mov	r1, r9
 8005af8:	4640      	mov	r0, r8
 8005afa:	47d0      	blx	sl
 8005afc:	3001      	adds	r0, #1
 8005afe:	d0ad      	beq.n	8005a5c <_printf_i+0x15c>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	079b      	lsls	r3, r3, #30
 8005b04:	d413      	bmi.n	8005b2e <_printf_i+0x22e>
 8005b06:	68e0      	ldr	r0, [r4, #12]
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	4298      	cmp	r0, r3
 8005b0c:	bfb8      	it	lt
 8005b0e:	4618      	movlt	r0, r3
 8005b10:	e7a6      	b.n	8005a60 <_printf_i+0x160>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4632      	mov	r2, r6
 8005b16:	4649      	mov	r1, r9
 8005b18:	4640      	mov	r0, r8
 8005b1a:	47d0      	blx	sl
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d09d      	beq.n	8005a5c <_printf_i+0x15c>
 8005b20:	3501      	adds	r5, #1
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	9903      	ldr	r1, [sp, #12]
 8005b26:	1a5b      	subs	r3, r3, r1
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dcf2      	bgt.n	8005b12 <_printf_i+0x212>
 8005b2c:	e7eb      	b.n	8005b06 <_printf_i+0x206>
 8005b2e:	2500      	movs	r5, #0
 8005b30:	f104 0619 	add.w	r6, r4, #25
 8005b34:	e7f5      	b.n	8005b22 <_printf_i+0x222>
 8005b36:	bf00      	nop
 8005b38:	08008712 	.word	0x08008712
 8005b3c:	08008723 	.word	0x08008723

08005b40 <std>:
 8005b40:	2300      	movs	r3, #0
 8005b42:	b510      	push	{r4, lr}
 8005b44:	4604      	mov	r4, r0
 8005b46:	e9c0 3300 	strd	r3, r3, [r0]
 8005b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b4e:	6083      	str	r3, [r0, #8]
 8005b50:	8181      	strh	r1, [r0, #12]
 8005b52:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b54:	81c2      	strh	r2, [r0, #14]
 8005b56:	6183      	str	r3, [r0, #24]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	305c      	adds	r0, #92	@ 0x5c
 8005b5e:	f000 f942 	bl	8005de6 <memset>
 8005b62:	4b0d      	ldr	r3, [pc, #52]	@ (8005b98 <std+0x58>)
 8005b64:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b66:	4b0d      	ldr	r3, [pc, #52]	@ (8005b9c <std+0x5c>)
 8005b68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <std+0x60>)
 8005b6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba4 <std+0x64>)
 8005b70:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba8 <std+0x68>)
 8005b74:	6224      	str	r4, [r4, #32]
 8005b76:	429c      	cmp	r4, r3
 8005b78:	d006      	beq.n	8005b88 <std+0x48>
 8005b7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b7e:	4294      	cmp	r4, r2
 8005b80:	d002      	beq.n	8005b88 <std+0x48>
 8005b82:	33d0      	adds	r3, #208	@ 0xd0
 8005b84:	429c      	cmp	r4, r3
 8005b86:	d105      	bne.n	8005b94 <std+0x54>
 8005b88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b90:	f000 b9a6 	b.w	8005ee0 <__retarget_lock_init_recursive>
 8005b94:	bd10      	pop	{r4, pc}
 8005b96:	bf00      	nop
 8005b98:	08005d2d 	.word	0x08005d2d
 8005b9c:	08005d4f 	.word	0x08005d4f
 8005ba0:	08005d87 	.word	0x08005d87
 8005ba4:	08005dab 	.word	0x08005dab
 8005ba8:	20000704 	.word	0x20000704

08005bac <stdio_exit_handler>:
 8005bac:	4a02      	ldr	r2, [pc, #8]	@ (8005bb8 <stdio_exit_handler+0xc>)
 8005bae:	4903      	ldr	r1, [pc, #12]	@ (8005bbc <stdio_exit_handler+0x10>)
 8005bb0:	4803      	ldr	r0, [pc, #12]	@ (8005bc0 <stdio_exit_handler+0x14>)
 8005bb2:	f000 b869 	b.w	8005c88 <_fwalk_sglue>
 8005bb6:	bf00      	nop
 8005bb8:	20000018 	.word	0x20000018
 8005bbc:	0800785d 	.word	0x0800785d
 8005bc0:	20000028 	.word	0x20000028

08005bc4 <cleanup_stdio>:
 8005bc4:	6841      	ldr	r1, [r0, #4]
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf8 <cleanup_stdio+0x34>)
 8005bc8:	4299      	cmp	r1, r3
 8005bca:	b510      	push	{r4, lr}
 8005bcc:	4604      	mov	r4, r0
 8005bce:	d001      	beq.n	8005bd4 <cleanup_stdio+0x10>
 8005bd0:	f001 fe44 	bl	800785c <_fflush_r>
 8005bd4:	68a1      	ldr	r1, [r4, #8]
 8005bd6:	4b09      	ldr	r3, [pc, #36]	@ (8005bfc <cleanup_stdio+0x38>)
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	d002      	beq.n	8005be2 <cleanup_stdio+0x1e>
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f001 fe3d 	bl	800785c <_fflush_r>
 8005be2:	68e1      	ldr	r1, [r4, #12]
 8005be4:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <cleanup_stdio+0x3c>)
 8005be6:	4299      	cmp	r1, r3
 8005be8:	d004      	beq.n	8005bf4 <cleanup_stdio+0x30>
 8005bea:	4620      	mov	r0, r4
 8005bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf0:	f001 be34 	b.w	800785c <_fflush_r>
 8005bf4:	bd10      	pop	{r4, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000704 	.word	0x20000704
 8005bfc:	2000076c 	.word	0x2000076c
 8005c00:	200007d4 	.word	0x200007d4

08005c04 <global_stdio_init.part.0>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4b0b      	ldr	r3, [pc, #44]	@ (8005c34 <global_stdio_init.part.0+0x30>)
 8005c08:	4c0b      	ldr	r4, [pc, #44]	@ (8005c38 <global_stdio_init.part.0+0x34>)
 8005c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c3c <global_stdio_init.part.0+0x38>)
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	4620      	mov	r0, r4
 8005c10:	2200      	movs	r2, #0
 8005c12:	2104      	movs	r1, #4
 8005c14:	f7ff ff94 	bl	8005b40 <std>
 8005c18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	2109      	movs	r1, #9
 8005c20:	f7ff ff8e 	bl	8005b40 <std>
 8005c24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c28:	2202      	movs	r2, #2
 8005c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c2e:	2112      	movs	r1, #18
 8005c30:	f7ff bf86 	b.w	8005b40 <std>
 8005c34:	2000083c 	.word	0x2000083c
 8005c38:	20000704 	.word	0x20000704
 8005c3c:	08005bad 	.word	0x08005bad

08005c40 <__sfp_lock_acquire>:
 8005c40:	4801      	ldr	r0, [pc, #4]	@ (8005c48 <__sfp_lock_acquire+0x8>)
 8005c42:	f000 b94e 	b.w	8005ee2 <__retarget_lock_acquire_recursive>
 8005c46:	bf00      	nop
 8005c48:	20000845 	.word	0x20000845

08005c4c <__sfp_lock_release>:
 8005c4c:	4801      	ldr	r0, [pc, #4]	@ (8005c54 <__sfp_lock_release+0x8>)
 8005c4e:	f000 b949 	b.w	8005ee4 <__retarget_lock_release_recursive>
 8005c52:	bf00      	nop
 8005c54:	20000845 	.word	0x20000845

08005c58 <__sinit>:
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	f7ff fff0 	bl	8005c40 <__sfp_lock_acquire>
 8005c60:	6a23      	ldr	r3, [r4, #32]
 8005c62:	b11b      	cbz	r3, 8005c6c <__sinit+0x14>
 8005c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c68:	f7ff bff0 	b.w	8005c4c <__sfp_lock_release>
 8005c6c:	4b04      	ldr	r3, [pc, #16]	@ (8005c80 <__sinit+0x28>)
 8005c6e:	6223      	str	r3, [r4, #32]
 8005c70:	4b04      	ldr	r3, [pc, #16]	@ (8005c84 <__sinit+0x2c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f5      	bne.n	8005c64 <__sinit+0xc>
 8005c78:	f7ff ffc4 	bl	8005c04 <global_stdio_init.part.0>
 8005c7c:	e7f2      	b.n	8005c64 <__sinit+0xc>
 8005c7e:	bf00      	nop
 8005c80:	08005bc5 	.word	0x08005bc5
 8005c84:	2000083c 	.word	0x2000083c

08005c88 <_fwalk_sglue>:
 8005c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	4688      	mov	r8, r1
 8005c90:	4614      	mov	r4, r2
 8005c92:	2600      	movs	r6, #0
 8005c94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c98:	f1b9 0901 	subs.w	r9, r9, #1
 8005c9c:	d505      	bpl.n	8005caa <_fwalk_sglue+0x22>
 8005c9e:	6824      	ldr	r4, [r4, #0]
 8005ca0:	2c00      	cmp	r4, #0
 8005ca2:	d1f7      	bne.n	8005c94 <_fwalk_sglue+0xc>
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005caa:	89ab      	ldrh	r3, [r5, #12]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d907      	bls.n	8005cc0 <_fwalk_sglue+0x38>
 8005cb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	d003      	beq.n	8005cc0 <_fwalk_sglue+0x38>
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4638      	mov	r0, r7
 8005cbc:	47c0      	blx	r8
 8005cbe:	4306      	orrs	r6, r0
 8005cc0:	3568      	adds	r5, #104	@ 0x68
 8005cc2:	e7e9      	b.n	8005c98 <_fwalk_sglue+0x10>

08005cc4 <sniprintf>:
 8005cc4:	b40c      	push	{r2, r3}
 8005cc6:	b530      	push	{r4, r5, lr}
 8005cc8:	4b17      	ldr	r3, [pc, #92]	@ (8005d28 <sniprintf+0x64>)
 8005cca:	1e0c      	subs	r4, r1, #0
 8005ccc:	681d      	ldr	r5, [r3, #0]
 8005cce:	b09d      	sub	sp, #116	@ 0x74
 8005cd0:	da08      	bge.n	8005ce4 <sniprintf+0x20>
 8005cd2:	238b      	movs	r3, #139	@ 0x8b
 8005cd4:	602b      	str	r3, [r5, #0]
 8005cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cda:	b01d      	add	sp, #116	@ 0x74
 8005cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ce0:	b002      	add	sp, #8
 8005ce2:	4770      	bx	lr
 8005ce4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005ce8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005cec:	bf14      	ite	ne
 8005cee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005cf2:	4623      	moveq	r3, r4
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	9307      	str	r3, [sp, #28]
 8005cf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005cfc:	9002      	str	r0, [sp, #8]
 8005cfe:	9006      	str	r0, [sp, #24]
 8005d00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d06:	ab21      	add	r3, sp, #132	@ 0x84
 8005d08:	a902      	add	r1, sp, #8
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	f001 fc25 	bl	800755c <_svfiprintf_r>
 8005d12:	1c43      	adds	r3, r0, #1
 8005d14:	bfbc      	itt	lt
 8005d16:	238b      	movlt	r3, #139	@ 0x8b
 8005d18:	602b      	strlt	r3, [r5, #0]
 8005d1a:	2c00      	cmp	r4, #0
 8005d1c:	d0dd      	beq.n	8005cda <sniprintf+0x16>
 8005d1e:	9b02      	ldr	r3, [sp, #8]
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	e7d9      	b.n	8005cda <sniprintf+0x16>
 8005d26:	bf00      	nop
 8005d28:	20000024 	.word	0x20000024

08005d2c <__sread>:
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	460c      	mov	r4, r1
 8005d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d34:	f000 f886 	bl	8005e44 <_read_r>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	bfab      	itete	ge
 8005d3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d40:	181b      	addge	r3, r3, r0
 8005d42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d46:	bfac      	ite	ge
 8005d48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d4a:	81a3      	strhlt	r3, [r4, #12]
 8005d4c:	bd10      	pop	{r4, pc}

08005d4e <__swrite>:
 8005d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d52:	461f      	mov	r7, r3
 8005d54:	898b      	ldrh	r3, [r1, #12]
 8005d56:	05db      	lsls	r3, r3, #23
 8005d58:	4605      	mov	r5, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	4616      	mov	r6, r2
 8005d5e:	d505      	bpl.n	8005d6c <__swrite+0x1e>
 8005d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d64:	2302      	movs	r3, #2
 8005d66:	2200      	movs	r2, #0
 8005d68:	f000 f85a 	bl	8005e20 <_lseek_r>
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d76:	81a3      	strh	r3, [r4, #12]
 8005d78:	4632      	mov	r2, r6
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d82:	f000 b871 	b.w	8005e68 <_write_r>

08005d86 <__sseek>:
 8005d86:	b510      	push	{r4, lr}
 8005d88:	460c      	mov	r4, r1
 8005d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8e:	f000 f847 	bl	8005e20 <_lseek_r>
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	bf15      	itete	ne
 8005d98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005da2:	81a3      	strheq	r3, [r4, #12]
 8005da4:	bf18      	it	ne
 8005da6:	81a3      	strhne	r3, [r4, #12]
 8005da8:	bd10      	pop	{r4, pc}

08005daa <__sclose>:
 8005daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dae:	f000 b827 	b.w	8005e00 <_close_r>

08005db2 <memmove>:
 8005db2:	4288      	cmp	r0, r1
 8005db4:	b510      	push	{r4, lr}
 8005db6:	eb01 0402 	add.w	r4, r1, r2
 8005dba:	d902      	bls.n	8005dc2 <memmove+0x10>
 8005dbc:	4284      	cmp	r4, r0
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	d807      	bhi.n	8005dd2 <memmove+0x20>
 8005dc2:	1e43      	subs	r3, r0, #1
 8005dc4:	42a1      	cmp	r1, r4
 8005dc6:	d008      	beq.n	8005dda <memmove+0x28>
 8005dc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dcc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dd0:	e7f8      	b.n	8005dc4 <memmove+0x12>
 8005dd2:	4402      	add	r2, r0
 8005dd4:	4601      	mov	r1, r0
 8005dd6:	428a      	cmp	r2, r1
 8005dd8:	d100      	bne.n	8005ddc <memmove+0x2a>
 8005dda:	bd10      	pop	{r4, pc}
 8005ddc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005de0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005de4:	e7f7      	b.n	8005dd6 <memmove+0x24>

08005de6 <memset>:
 8005de6:	4402      	add	r2, r0
 8005de8:	4603      	mov	r3, r0
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d100      	bne.n	8005df0 <memset+0xa>
 8005dee:	4770      	bx	lr
 8005df0:	f803 1b01 	strb.w	r1, [r3], #1
 8005df4:	e7f9      	b.n	8005dea <memset+0x4>
	...

08005df8 <_localeconv_r>:
 8005df8:	4800      	ldr	r0, [pc, #0]	@ (8005dfc <_localeconv_r+0x4>)
 8005dfa:	4770      	bx	lr
 8005dfc:	20000164 	.word	0x20000164

08005e00 <_close_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d06      	ldr	r5, [pc, #24]	@ (8005e1c <_close_r+0x1c>)
 8005e04:	2300      	movs	r3, #0
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	f7fc f82c 	bl	8001e68 <_close>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_close_r+0x1a>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_close_r+0x1a>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	20000840 	.word	0x20000840

08005e20 <_lseek_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d07      	ldr	r5, [pc, #28]	@ (8005e40 <_lseek_r+0x20>)
 8005e24:	4604      	mov	r4, r0
 8005e26:	4608      	mov	r0, r1
 8005e28:	4611      	mov	r1, r2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	602a      	str	r2, [r5, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f7fc f841 	bl	8001eb6 <_lseek>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_lseek_r+0x1e>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_lseek_r+0x1e>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	20000840 	.word	0x20000840

08005e44 <_read_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d07      	ldr	r5, [pc, #28]	@ (8005e64 <_read_r+0x20>)
 8005e48:	4604      	mov	r4, r0
 8005e4a:	4608      	mov	r0, r1
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	2200      	movs	r2, #0
 8005e50:	602a      	str	r2, [r5, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f7fb ffcf 	bl	8001df6 <_read>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_read_r+0x1e>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_read_r+0x1e>
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	20000840 	.word	0x20000840

08005e68 <_write_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4d07      	ldr	r5, [pc, #28]	@ (8005e88 <_write_r+0x20>)
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	4608      	mov	r0, r1
 8005e70:	4611      	mov	r1, r2
 8005e72:	2200      	movs	r2, #0
 8005e74:	602a      	str	r2, [r5, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f7fb ffda 	bl	8001e30 <_write>
 8005e7c:	1c43      	adds	r3, r0, #1
 8005e7e:	d102      	bne.n	8005e86 <_write_r+0x1e>
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	b103      	cbz	r3, 8005e86 <_write_r+0x1e>
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	bd38      	pop	{r3, r4, r5, pc}
 8005e88:	20000840 	.word	0x20000840

08005e8c <__errno>:
 8005e8c:	4b01      	ldr	r3, [pc, #4]	@ (8005e94 <__errno+0x8>)
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	20000024 	.word	0x20000024

08005e98 <__libc_init_array>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005ed0 <__libc_init_array+0x38>)
 8005e9c:	4c0d      	ldr	r4, [pc, #52]	@ (8005ed4 <__libc_init_array+0x3c>)
 8005e9e:	1b64      	subs	r4, r4, r5
 8005ea0:	10a4      	asrs	r4, r4, #2
 8005ea2:	2600      	movs	r6, #0
 8005ea4:	42a6      	cmp	r6, r4
 8005ea6:	d109      	bne.n	8005ebc <__libc_init_array+0x24>
 8005ea8:	4d0b      	ldr	r5, [pc, #44]	@ (8005ed8 <__libc_init_array+0x40>)
 8005eaa:	4c0c      	ldr	r4, [pc, #48]	@ (8005edc <__libc_init_array+0x44>)
 8005eac:	f002 f84c 	bl	8007f48 <_init>
 8005eb0:	1b64      	subs	r4, r4, r5
 8005eb2:	10a4      	asrs	r4, r4, #2
 8005eb4:	2600      	movs	r6, #0
 8005eb6:	42a6      	cmp	r6, r4
 8005eb8:	d105      	bne.n	8005ec6 <__libc_init_array+0x2e>
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
 8005ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec0:	4798      	blx	r3
 8005ec2:	3601      	adds	r6, #1
 8005ec4:	e7ee      	b.n	8005ea4 <__libc_init_array+0xc>
 8005ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eca:	4798      	blx	r3
 8005ecc:	3601      	adds	r6, #1
 8005ece:	e7f2      	b.n	8005eb6 <__libc_init_array+0x1e>
 8005ed0:	08008a78 	.word	0x08008a78
 8005ed4:	08008a78 	.word	0x08008a78
 8005ed8:	08008a78 	.word	0x08008a78
 8005edc:	08008a7c 	.word	0x08008a7c

08005ee0 <__retarget_lock_init_recursive>:
 8005ee0:	4770      	bx	lr

08005ee2 <__retarget_lock_acquire_recursive>:
 8005ee2:	4770      	bx	lr

08005ee4 <__retarget_lock_release_recursive>:
 8005ee4:	4770      	bx	lr

08005ee6 <memcpy>:
 8005ee6:	440a      	add	r2, r1
 8005ee8:	4291      	cmp	r1, r2
 8005eea:	f100 33ff 	add.w	r3, r0, #4294967295
 8005eee:	d100      	bne.n	8005ef2 <memcpy+0xc>
 8005ef0:	4770      	bx	lr
 8005ef2:	b510      	push	{r4, lr}
 8005ef4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ef8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005efc:	4291      	cmp	r1, r2
 8005efe:	d1f9      	bne.n	8005ef4 <memcpy+0xe>
 8005f00:	bd10      	pop	{r4, pc}

08005f02 <quorem>:
 8005f02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f06:	6903      	ldr	r3, [r0, #16]
 8005f08:	690c      	ldr	r4, [r1, #16]
 8005f0a:	42a3      	cmp	r3, r4
 8005f0c:	4607      	mov	r7, r0
 8005f0e:	db7e      	blt.n	800600e <quorem+0x10c>
 8005f10:	3c01      	subs	r4, #1
 8005f12:	f101 0814 	add.w	r8, r1, #20
 8005f16:	00a3      	lsls	r3, r4, #2
 8005f18:	f100 0514 	add.w	r5, r0, #20
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f34:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f38:	d32e      	bcc.n	8005f98 <quorem+0x96>
 8005f3a:	f04f 0a00 	mov.w	sl, #0
 8005f3e:	46c4      	mov	ip, r8
 8005f40:	46ae      	mov	lr, r5
 8005f42:	46d3      	mov	fp, sl
 8005f44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f48:	b298      	uxth	r0, r3
 8005f4a:	fb06 a000 	mla	r0, r6, r0, sl
 8005f4e:	0c02      	lsrs	r2, r0, #16
 8005f50:	0c1b      	lsrs	r3, r3, #16
 8005f52:	fb06 2303 	mla	r3, r6, r3, r2
 8005f56:	f8de 2000 	ldr.w	r2, [lr]
 8005f5a:	b280      	uxth	r0, r0
 8005f5c:	b292      	uxth	r2, r2
 8005f5e:	1a12      	subs	r2, r2, r0
 8005f60:	445a      	add	r2, fp
 8005f62:	f8de 0000 	ldr.w	r0, [lr]
 8005f66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005f70:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005f74:	b292      	uxth	r2, r2
 8005f76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f7a:	45e1      	cmp	r9, ip
 8005f7c:	f84e 2b04 	str.w	r2, [lr], #4
 8005f80:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f84:	d2de      	bcs.n	8005f44 <quorem+0x42>
 8005f86:	9b00      	ldr	r3, [sp, #0]
 8005f88:	58eb      	ldr	r3, [r5, r3]
 8005f8a:	b92b      	cbnz	r3, 8005f98 <quorem+0x96>
 8005f8c:	9b01      	ldr	r3, [sp, #4]
 8005f8e:	3b04      	subs	r3, #4
 8005f90:	429d      	cmp	r5, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	d32f      	bcc.n	8005ff6 <quorem+0xf4>
 8005f96:	613c      	str	r4, [r7, #16]
 8005f98:	4638      	mov	r0, r7
 8005f9a:	f001 f97b 	bl	8007294 <__mcmp>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	db25      	blt.n	8005fee <quorem+0xec>
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	f858 2b04 	ldr.w	r2, [r8], #4
 8005faa:	f8d1 c000 	ldr.w	ip, [r1]
 8005fae:	fa1f fe82 	uxth.w	lr, r2
 8005fb2:	fa1f f38c 	uxth.w	r3, ip
 8005fb6:	eba3 030e 	sub.w	r3, r3, lr
 8005fba:	4403      	add	r3, r0
 8005fbc:	0c12      	lsrs	r2, r2, #16
 8005fbe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005fc2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fcc:	45c1      	cmp	r9, r8
 8005fce:	f841 3b04 	str.w	r3, [r1], #4
 8005fd2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005fd6:	d2e6      	bcs.n	8005fa6 <quorem+0xa4>
 8005fd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fe0:	b922      	cbnz	r2, 8005fec <quorem+0xea>
 8005fe2:	3b04      	subs	r3, #4
 8005fe4:	429d      	cmp	r5, r3
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	d30b      	bcc.n	8006002 <quorem+0x100>
 8005fea:	613c      	str	r4, [r7, #16]
 8005fec:	3601      	adds	r6, #1
 8005fee:	4630      	mov	r0, r6
 8005ff0:	b003      	add	sp, #12
 8005ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	3b04      	subs	r3, #4
 8005ffa:	2a00      	cmp	r2, #0
 8005ffc:	d1cb      	bne.n	8005f96 <quorem+0x94>
 8005ffe:	3c01      	subs	r4, #1
 8006000:	e7c6      	b.n	8005f90 <quorem+0x8e>
 8006002:	6812      	ldr	r2, [r2, #0]
 8006004:	3b04      	subs	r3, #4
 8006006:	2a00      	cmp	r2, #0
 8006008:	d1ef      	bne.n	8005fea <quorem+0xe8>
 800600a:	3c01      	subs	r4, #1
 800600c:	e7ea      	b.n	8005fe4 <quorem+0xe2>
 800600e:	2000      	movs	r0, #0
 8006010:	e7ee      	b.n	8005ff0 <quorem+0xee>
 8006012:	0000      	movs	r0, r0
 8006014:	0000      	movs	r0, r0
	...

08006018 <_dtoa_r>:
 8006018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601c:	69c7      	ldr	r7, [r0, #28]
 800601e:	b099      	sub	sp, #100	@ 0x64
 8006020:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006024:	ec55 4b10 	vmov	r4, r5, d0
 8006028:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800602a:	9109      	str	r1, [sp, #36]	@ 0x24
 800602c:	4683      	mov	fp, r0
 800602e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006030:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006032:	b97f      	cbnz	r7, 8006054 <_dtoa_r+0x3c>
 8006034:	2010      	movs	r0, #16
 8006036:	f000 fdfd 	bl	8006c34 <malloc>
 800603a:	4602      	mov	r2, r0
 800603c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006040:	b920      	cbnz	r0, 800604c <_dtoa_r+0x34>
 8006042:	4ba7      	ldr	r3, [pc, #668]	@ (80062e0 <_dtoa_r+0x2c8>)
 8006044:	21ef      	movs	r1, #239	@ 0xef
 8006046:	48a7      	ldr	r0, [pc, #668]	@ (80062e4 <_dtoa_r+0x2cc>)
 8006048:	f001 fc40 	bl	80078cc <__assert_func>
 800604c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006050:	6007      	str	r7, [r0, #0]
 8006052:	60c7      	str	r7, [r0, #12]
 8006054:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006058:	6819      	ldr	r1, [r3, #0]
 800605a:	b159      	cbz	r1, 8006074 <_dtoa_r+0x5c>
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	604a      	str	r2, [r1, #4]
 8006060:	2301      	movs	r3, #1
 8006062:	4093      	lsls	r3, r2
 8006064:	608b      	str	r3, [r1, #8]
 8006066:	4658      	mov	r0, fp
 8006068:	f000 feda 	bl	8006e20 <_Bfree>
 800606c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	1e2b      	subs	r3, r5, #0
 8006076:	bfb9      	ittee	lt
 8006078:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800607c:	9303      	strlt	r3, [sp, #12]
 800607e:	2300      	movge	r3, #0
 8006080:	6033      	strge	r3, [r6, #0]
 8006082:	9f03      	ldr	r7, [sp, #12]
 8006084:	4b98      	ldr	r3, [pc, #608]	@ (80062e8 <_dtoa_r+0x2d0>)
 8006086:	bfbc      	itt	lt
 8006088:	2201      	movlt	r2, #1
 800608a:	6032      	strlt	r2, [r6, #0]
 800608c:	43bb      	bics	r3, r7
 800608e:	d112      	bne.n	80060b6 <_dtoa_r+0x9e>
 8006090:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006092:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800609c:	4323      	orrs	r3, r4
 800609e:	f000 854d 	beq.w	8006b3c <_dtoa_r+0xb24>
 80060a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80060a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80062fc <_dtoa_r+0x2e4>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 854f 	beq.w	8006b4c <_dtoa_r+0xb34>
 80060ae:	f10a 0303 	add.w	r3, sl, #3
 80060b2:	f000 bd49 	b.w	8006b48 <_dtoa_r+0xb30>
 80060b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060ba:	2200      	movs	r2, #0
 80060bc:	ec51 0b17 	vmov	r0, r1, d7
 80060c0:	2300      	movs	r3, #0
 80060c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80060c6:	f7fa fd07 	bl	8000ad8 <__aeabi_dcmpeq>
 80060ca:	4680      	mov	r8, r0
 80060cc:	b158      	cbz	r0, 80060e6 <_dtoa_r+0xce>
 80060ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80060d0:	2301      	movs	r3, #1
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80060d6:	b113      	cbz	r3, 80060de <_dtoa_r+0xc6>
 80060d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80060da:	4b84      	ldr	r3, [pc, #528]	@ (80062ec <_dtoa_r+0x2d4>)
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006300 <_dtoa_r+0x2e8>
 80060e2:	f000 bd33 	b.w	8006b4c <_dtoa_r+0xb34>
 80060e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80060ea:	aa16      	add	r2, sp, #88	@ 0x58
 80060ec:	a917      	add	r1, sp, #92	@ 0x5c
 80060ee:	4658      	mov	r0, fp
 80060f0:	f001 f980 	bl	80073f4 <__d2b>
 80060f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80060f8:	4681      	mov	r9, r0
 80060fa:	2e00      	cmp	r6, #0
 80060fc:	d077      	beq.n	80061ee <_dtoa_r+0x1d6>
 80060fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006100:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800610c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006110:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006114:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006118:	4619      	mov	r1, r3
 800611a:	2200      	movs	r2, #0
 800611c:	4b74      	ldr	r3, [pc, #464]	@ (80062f0 <_dtoa_r+0x2d8>)
 800611e:	f7fa f8bb 	bl	8000298 <__aeabi_dsub>
 8006122:	a369      	add	r3, pc, #420	@ (adr r3, 80062c8 <_dtoa_r+0x2b0>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f7fa fa6e 	bl	8000608 <__aeabi_dmul>
 800612c:	a368      	add	r3, pc, #416	@ (adr r3, 80062d0 <_dtoa_r+0x2b8>)
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	f7fa f8b3 	bl	800029c <__adddf3>
 8006136:	4604      	mov	r4, r0
 8006138:	4630      	mov	r0, r6
 800613a:	460d      	mov	r5, r1
 800613c:	f7fa f9fa 	bl	8000534 <__aeabi_i2d>
 8006140:	a365      	add	r3, pc, #404	@ (adr r3, 80062d8 <_dtoa_r+0x2c0>)
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	f7fa fa5f 	bl	8000608 <__aeabi_dmul>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4620      	mov	r0, r4
 8006150:	4629      	mov	r1, r5
 8006152:	f7fa f8a3 	bl	800029c <__adddf3>
 8006156:	4604      	mov	r4, r0
 8006158:	460d      	mov	r5, r1
 800615a:	f7fa fd05 	bl	8000b68 <__aeabi_d2iz>
 800615e:	2200      	movs	r2, #0
 8006160:	4607      	mov	r7, r0
 8006162:	2300      	movs	r3, #0
 8006164:	4620      	mov	r0, r4
 8006166:	4629      	mov	r1, r5
 8006168:	f7fa fcc0 	bl	8000aec <__aeabi_dcmplt>
 800616c:	b140      	cbz	r0, 8006180 <_dtoa_r+0x168>
 800616e:	4638      	mov	r0, r7
 8006170:	f7fa f9e0 	bl	8000534 <__aeabi_i2d>
 8006174:	4622      	mov	r2, r4
 8006176:	462b      	mov	r3, r5
 8006178:	f7fa fcae 	bl	8000ad8 <__aeabi_dcmpeq>
 800617c:	b900      	cbnz	r0, 8006180 <_dtoa_r+0x168>
 800617e:	3f01      	subs	r7, #1
 8006180:	2f16      	cmp	r7, #22
 8006182:	d851      	bhi.n	8006228 <_dtoa_r+0x210>
 8006184:	4b5b      	ldr	r3, [pc, #364]	@ (80062f4 <_dtoa_r+0x2dc>)
 8006186:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006192:	f7fa fcab 	bl	8000aec <__aeabi_dcmplt>
 8006196:	2800      	cmp	r0, #0
 8006198:	d048      	beq.n	800622c <_dtoa_r+0x214>
 800619a:	3f01      	subs	r7, #1
 800619c:	2300      	movs	r3, #0
 800619e:	9312      	str	r3, [sp, #72]	@ 0x48
 80061a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80061a2:	1b9b      	subs	r3, r3, r6
 80061a4:	1e5a      	subs	r2, r3, #1
 80061a6:	bf44      	itt	mi
 80061a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80061ac:	2300      	movmi	r3, #0
 80061ae:	9208      	str	r2, [sp, #32]
 80061b0:	bf54      	ite	pl
 80061b2:	f04f 0800 	movpl.w	r8, #0
 80061b6:	9308      	strmi	r3, [sp, #32]
 80061b8:	2f00      	cmp	r7, #0
 80061ba:	db39      	blt.n	8006230 <_dtoa_r+0x218>
 80061bc:	9b08      	ldr	r3, [sp, #32]
 80061be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80061c0:	443b      	add	r3, r7
 80061c2:	9308      	str	r3, [sp, #32]
 80061c4:	2300      	movs	r3, #0
 80061c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80061c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ca:	2b09      	cmp	r3, #9
 80061cc:	d864      	bhi.n	8006298 <_dtoa_r+0x280>
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	bfc4      	itt	gt
 80061d2:	3b04      	subgt	r3, #4
 80061d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80061d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061d8:	f1a3 0302 	sub.w	r3, r3, #2
 80061dc:	bfcc      	ite	gt
 80061de:	2400      	movgt	r4, #0
 80061e0:	2401      	movle	r4, #1
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d863      	bhi.n	80062ae <_dtoa_r+0x296>
 80061e6:	e8df f003 	tbb	[pc, r3]
 80061ea:	372a      	.short	0x372a
 80061ec:	5535      	.short	0x5535
 80061ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80061f2:	441e      	add	r6, r3
 80061f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	bfc1      	itttt	gt
 80061fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006200:	409f      	lslgt	r7, r3
 8006202:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006206:	fa24 f303 	lsrgt.w	r3, r4, r3
 800620a:	bfd6      	itet	le
 800620c:	f1c3 0320 	rsble	r3, r3, #32
 8006210:	ea47 0003 	orrgt.w	r0, r7, r3
 8006214:	fa04 f003 	lslle.w	r0, r4, r3
 8006218:	f7fa f97c 	bl	8000514 <__aeabi_ui2d>
 800621c:	2201      	movs	r2, #1
 800621e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006222:	3e01      	subs	r6, #1
 8006224:	9214      	str	r2, [sp, #80]	@ 0x50
 8006226:	e777      	b.n	8006118 <_dtoa_r+0x100>
 8006228:	2301      	movs	r3, #1
 800622a:	e7b8      	b.n	800619e <_dtoa_r+0x186>
 800622c:	9012      	str	r0, [sp, #72]	@ 0x48
 800622e:	e7b7      	b.n	80061a0 <_dtoa_r+0x188>
 8006230:	427b      	negs	r3, r7
 8006232:	930a      	str	r3, [sp, #40]	@ 0x28
 8006234:	2300      	movs	r3, #0
 8006236:	eba8 0807 	sub.w	r8, r8, r7
 800623a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800623c:	e7c4      	b.n	80061c8 <_dtoa_r+0x1b0>
 800623e:	2300      	movs	r3, #0
 8006240:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006244:	2b00      	cmp	r3, #0
 8006246:	dc35      	bgt.n	80062b4 <_dtoa_r+0x29c>
 8006248:	2301      	movs	r3, #1
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	9307      	str	r3, [sp, #28]
 800624e:	461a      	mov	r2, r3
 8006250:	920e      	str	r2, [sp, #56]	@ 0x38
 8006252:	e00b      	b.n	800626c <_dtoa_r+0x254>
 8006254:	2301      	movs	r3, #1
 8006256:	e7f3      	b.n	8006240 <_dtoa_r+0x228>
 8006258:	2300      	movs	r3, #0
 800625a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800625c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	3301      	adds	r3, #1
 8006264:	2b01      	cmp	r3, #1
 8006266:	9307      	str	r3, [sp, #28]
 8006268:	bfb8      	it	lt
 800626a:	2301      	movlt	r3, #1
 800626c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006270:	2100      	movs	r1, #0
 8006272:	2204      	movs	r2, #4
 8006274:	f102 0514 	add.w	r5, r2, #20
 8006278:	429d      	cmp	r5, r3
 800627a:	d91f      	bls.n	80062bc <_dtoa_r+0x2a4>
 800627c:	6041      	str	r1, [r0, #4]
 800627e:	4658      	mov	r0, fp
 8006280:	f000 fd8e 	bl	8006da0 <_Balloc>
 8006284:	4682      	mov	sl, r0
 8006286:	2800      	cmp	r0, #0
 8006288:	d13c      	bne.n	8006304 <_dtoa_r+0x2ec>
 800628a:	4b1b      	ldr	r3, [pc, #108]	@ (80062f8 <_dtoa_r+0x2e0>)
 800628c:	4602      	mov	r2, r0
 800628e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006292:	e6d8      	b.n	8006046 <_dtoa_r+0x2e>
 8006294:	2301      	movs	r3, #1
 8006296:	e7e0      	b.n	800625a <_dtoa_r+0x242>
 8006298:	2401      	movs	r4, #1
 800629a:	2300      	movs	r3, #0
 800629c:	9309      	str	r3, [sp, #36]	@ 0x24
 800629e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80062a0:	f04f 33ff 	mov.w	r3, #4294967295
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	9307      	str	r3, [sp, #28]
 80062a8:	2200      	movs	r2, #0
 80062aa:	2312      	movs	r3, #18
 80062ac:	e7d0      	b.n	8006250 <_dtoa_r+0x238>
 80062ae:	2301      	movs	r3, #1
 80062b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062b2:	e7f5      	b.n	80062a0 <_dtoa_r+0x288>
 80062b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	9307      	str	r3, [sp, #28]
 80062ba:	e7d7      	b.n	800626c <_dtoa_r+0x254>
 80062bc:	3101      	adds	r1, #1
 80062be:	0052      	lsls	r2, r2, #1
 80062c0:	e7d8      	b.n	8006274 <_dtoa_r+0x25c>
 80062c2:	bf00      	nop
 80062c4:	f3af 8000 	nop.w
 80062c8:	636f4361 	.word	0x636f4361
 80062cc:	3fd287a7 	.word	0x3fd287a7
 80062d0:	8b60c8b3 	.word	0x8b60c8b3
 80062d4:	3fc68a28 	.word	0x3fc68a28
 80062d8:	509f79fb 	.word	0x509f79fb
 80062dc:	3fd34413 	.word	0x3fd34413
 80062e0:	08008741 	.word	0x08008741
 80062e4:	08008758 	.word	0x08008758
 80062e8:	7ff00000 	.word	0x7ff00000
 80062ec:	08008711 	.word	0x08008711
 80062f0:	3ff80000 	.word	0x3ff80000
 80062f4:	08008850 	.word	0x08008850
 80062f8:	080087b0 	.word	0x080087b0
 80062fc:	0800873d 	.word	0x0800873d
 8006300:	08008710 	.word	0x08008710
 8006304:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006308:	6018      	str	r0, [r3, #0]
 800630a:	9b07      	ldr	r3, [sp, #28]
 800630c:	2b0e      	cmp	r3, #14
 800630e:	f200 80a4 	bhi.w	800645a <_dtoa_r+0x442>
 8006312:	2c00      	cmp	r4, #0
 8006314:	f000 80a1 	beq.w	800645a <_dtoa_r+0x442>
 8006318:	2f00      	cmp	r7, #0
 800631a:	dd33      	ble.n	8006384 <_dtoa_r+0x36c>
 800631c:	4bad      	ldr	r3, [pc, #692]	@ (80065d4 <_dtoa_r+0x5bc>)
 800631e:	f007 020f 	and.w	r2, r7, #15
 8006322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006326:	ed93 7b00 	vldr	d7, [r3]
 800632a:	05f8      	lsls	r0, r7, #23
 800632c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006330:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006334:	d516      	bpl.n	8006364 <_dtoa_r+0x34c>
 8006336:	4ba8      	ldr	r3, [pc, #672]	@ (80065d8 <_dtoa_r+0x5c0>)
 8006338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800633c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006340:	f7fa fa8c 	bl	800085c <__aeabi_ddiv>
 8006344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006348:	f004 040f 	and.w	r4, r4, #15
 800634c:	2603      	movs	r6, #3
 800634e:	4da2      	ldr	r5, [pc, #648]	@ (80065d8 <_dtoa_r+0x5c0>)
 8006350:	b954      	cbnz	r4, 8006368 <_dtoa_r+0x350>
 8006352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800635a:	f7fa fa7f 	bl	800085c <__aeabi_ddiv>
 800635e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006362:	e028      	b.n	80063b6 <_dtoa_r+0x39e>
 8006364:	2602      	movs	r6, #2
 8006366:	e7f2      	b.n	800634e <_dtoa_r+0x336>
 8006368:	07e1      	lsls	r1, r4, #31
 800636a:	d508      	bpl.n	800637e <_dtoa_r+0x366>
 800636c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006370:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006374:	f7fa f948 	bl	8000608 <__aeabi_dmul>
 8006378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800637c:	3601      	adds	r6, #1
 800637e:	1064      	asrs	r4, r4, #1
 8006380:	3508      	adds	r5, #8
 8006382:	e7e5      	b.n	8006350 <_dtoa_r+0x338>
 8006384:	f000 80d2 	beq.w	800652c <_dtoa_r+0x514>
 8006388:	427c      	negs	r4, r7
 800638a:	4b92      	ldr	r3, [pc, #584]	@ (80065d4 <_dtoa_r+0x5bc>)
 800638c:	4d92      	ldr	r5, [pc, #584]	@ (80065d8 <_dtoa_r+0x5c0>)
 800638e:	f004 020f 	and.w	r2, r4, #15
 8006392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800639e:	f7fa f933 	bl	8000608 <__aeabi_dmul>
 80063a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a6:	1124      	asrs	r4, r4, #4
 80063a8:	2300      	movs	r3, #0
 80063aa:	2602      	movs	r6, #2
 80063ac:	2c00      	cmp	r4, #0
 80063ae:	f040 80b2 	bne.w	8006516 <_dtoa_r+0x4fe>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1d3      	bne.n	800635e <_dtoa_r+0x346>
 80063b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80063b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 80b7 	beq.w	8006530 <_dtoa_r+0x518>
 80063c2:	4b86      	ldr	r3, [pc, #536]	@ (80065dc <_dtoa_r+0x5c4>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	4620      	mov	r0, r4
 80063c8:	4629      	mov	r1, r5
 80063ca:	f7fa fb8f 	bl	8000aec <__aeabi_dcmplt>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f000 80ae 	beq.w	8006530 <_dtoa_r+0x518>
 80063d4:	9b07      	ldr	r3, [sp, #28]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 80aa 	beq.w	8006530 <_dtoa_r+0x518>
 80063dc:	9b00      	ldr	r3, [sp, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	dd37      	ble.n	8006452 <_dtoa_r+0x43a>
 80063e2:	1e7b      	subs	r3, r7, #1
 80063e4:	9304      	str	r3, [sp, #16]
 80063e6:	4620      	mov	r0, r4
 80063e8:	4b7d      	ldr	r3, [pc, #500]	@ (80065e0 <_dtoa_r+0x5c8>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	4629      	mov	r1, r5
 80063ee:	f7fa f90b 	bl	8000608 <__aeabi_dmul>
 80063f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063f6:	9c00      	ldr	r4, [sp, #0]
 80063f8:	3601      	adds	r6, #1
 80063fa:	4630      	mov	r0, r6
 80063fc:	f7fa f89a 	bl	8000534 <__aeabi_i2d>
 8006400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006404:	f7fa f900 	bl	8000608 <__aeabi_dmul>
 8006408:	4b76      	ldr	r3, [pc, #472]	@ (80065e4 <_dtoa_r+0x5cc>)
 800640a:	2200      	movs	r2, #0
 800640c:	f7f9 ff46 	bl	800029c <__adddf3>
 8006410:	4605      	mov	r5, r0
 8006412:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006416:	2c00      	cmp	r4, #0
 8006418:	f040 808d 	bne.w	8006536 <_dtoa_r+0x51e>
 800641c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006420:	4b71      	ldr	r3, [pc, #452]	@ (80065e8 <_dtoa_r+0x5d0>)
 8006422:	2200      	movs	r2, #0
 8006424:	f7f9 ff38 	bl	8000298 <__aeabi_dsub>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006430:	462a      	mov	r2, r5
 8006432:	4633      	mov	r3, r6
 8006434:	f7fa fb78 	bl	8000b28 <__aeabi_dcmpgt>
 8006438:	2800      	cmp	r0, #0
 800643a:	f040 828b 	bne.w	8006954 <_dtoa_r+0x93c>
 800643e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006442:	462a      	mov	r2, r5
 8006444:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006448:	f7fa fb50 	bl	8000aec <__aeabi_dcmplt>
 800644c:	2800      	cmp	r0, #0
 800644e:	f040 8128 	bne.w	80066a2 <_dtoa_r+0x68a>
 8006452:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006456:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800645a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800645c:	2b00      	cmp	r3, #0
 800645e:	f2c0 815a 	blt.w	8006716 <_dtoa_r+0x6fe>
 8006462:	2f0e      	cmp	r7, #14
 8006464:	f300 8157 	bgt.w	8006716 <_dtoa_r+0x6fe>
 8006468:	4b5a      	ldr	r3, [pc, #360]	@ (80065d4 <_dtoa_r+0x5bc>)
 800646a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800646e:	ed93 7b00 	vldr	d7, [r3]
 8006472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006474:	2b00      	cmp	r3, #0
 8006476:	ed8d 7b00 	vstr	d7, [sp]
 800647a:	da03      	bge.n	8006484 <_dtoa_r+0x46c>
 800647c:	9b07      	ldr	r3, [sp, #28]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f340 8101 	ble.w	8006686 <_dtoa_r+0x66e>
 8006484:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006488:	4656      	mov	r6, sl
 800648a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800648e:	4620      	mov	r0, r4
 8006490:	4629      	mov	r1, r5
 8006492:	f7fa f9e3 	bl	800085c <__aeabi_ddiv>
 8006496:	f7fa fb67 	bl	8000b68 <__aeabi_d2iz>
 800649a:	4680      	mov	r8, r0
 800649c:	f7fa f84a 	bl	8000534 <__aeabi_i2d>
 80064a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064a4:	f7fa f8b0 	bl	8000608 <__aeabi_dmul>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4620      	mov	r0, r4
 80064ae:	4629      	mov	r1, r5
 80064b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80064b4:	f7f9 fef0 	bl	8000298 <__aeabi_dsub>
 80064b8:	f806 4b01 	strb.w	r4, [r6], #1
 80064bc:	9d07      	ldr	r5, [sp, #28]
 80064be:	eba6 040a 	sub.w	r4, r6, sl
 80064c2:	42a5      	cmp	r5, r4
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	f040 8117 	bne.w	80066fa <_dtoa_r+0x6e2>
 80064cc:	f7f9 fee6 	bl	800029c <__adddf3>
 80064d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064d4:	4604      	mov	r4, r0
 80064d6:	460d      	mov	r5, r1
 80064d8:	f7fa fb26 	bl	8000b28 <__aeabi_dcmpgt>
 80064dc:	2800      	cmp	r0, #0
 80064de:	f040 80f9 	bne.w	80066d4 <_dtoa_r+0x6bc>
 80064e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064e6:	4620      	mov	r0, r4
 80064e8:	4629      	mov	r1, r5
 80064ea:	f7fa faf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80064ee:	b118      	cbz	r0, 80064f8 <_dtoa_r+0x4e0>
 80064f0:	f018 0f01 	tst.w	r8, #1
 80064f4:	f040 80ee 	bne.w	80066d4 <_dtoa_r+0x6bc>
 80064f8:	4649      	mov	r1, r9
 80064fa:	4658      	mov	r0, fp
 80064fc:	f000 fc90 	bl	8006e20 <_Bfree>
 8006500:	2300      	movs	r3, #0
 8006502:	7033      	strb	r3, [r6, #0]
 8006504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006506:	3701      	adds	r7, #1
 8006508:	601f      	str	r7, [r3, #0]
 800650a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 831d 	beq.w	8006b4c <_dtoa_r+0xb34>
 8006512:	601e      	str	r6, [r3, #0]
 8006514:	e31a      	b.n	8006b4c <_dtoa_r+0xb34>
 8006516:	07e2      	lsls	r2, r4, #31
 8006518:	d505      	bpl.n	8006526 <_dtoa_r+0x50e>
 800651a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800651e:	f7fa f873 	bl	8000608 <__aeabi_dmul>
 8006522:	3601      	adds	r6, #1
 8006524:	2301      	movs	r3, #1
 8006526:	1064      	asrs	r4, r4, #1
 8006528:	3508      	adds	r5, #8
 800652a:	e73f      	b.n	80063ac <_dtoa_r+0x394>
 800652c:	2602      	movs	r6, #2
 800652e:	e742      	b.n	80063b6 <_dtoa_r+0x39e>
 8006530:	9c07      	ldr	r4, [sp, #28]
 8006532:	9704      	str	r7, [sp, #16]
 8006534:	e761      	b.n	80063fa <_dtoa_r+0x3e2>
 8006536:	4b27      	ldr	r3, [pc, #156]	@ (80065d4 <_dtoa_r+0x5bc>)
 8006538:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800653a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800653e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006542:	4454      	add	r4, sl
 8006544:	2900      	cmp	r1, #0
 8006546:	d053      	beq.n	80065f0 <_dtoa_r+0x5d8>
 8006548:	4928      	ldr	r1, [pc, #160]	@ (80065ec <_dtoa_r+0x5d4>)
 800654a:	2000      	movs	r0, #0
 800654c:	f7fa f986 	bl	800085c <__aeabi_ddiv>
 8006550:	4633      	mov	r3, r6
 8006552:	462a      	mov	r2, r5
 8006554:	f7f9 fea0 	bl	8000298 <__aeabi_dsub>
 8006558:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800655c:	4656      	mov	r6, sl
 800655e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006562:	f7fa fb01 	bl	8000b68 <__aeabi_d2iz>
 8006566:	4605      	mov	r5, r0
 8006568:	f7f9 ffe4 	bl	8000534 <__aeabi_i2d>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006574:	f7f9 fe90 	bl	8000298 <__aeabi_dsub>
 8006578:	3530      	adds	r5, #48	@ 0x30
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006582:	f806 5b01 	strb.w	r5, [r6], #1
 8006586:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800658a:	f7fa faaf 	bl	8000aec <__aeabi_dcmplt>
 800658e:	2800      	cmp	r0, #0
 8006590:	d171      	bne.n	8006676 <_dtoa_r+0x65e>
 8006592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006596:	4911      	ldr	r1, [pc, #68]	@ (80065dc <_dtoa_r+0x5c4>)
 8006598:	2000      	movs	r0, #0
 800659a:	f7f9 fe7d 	bl	8000298 <__aeabi_dsub>
 800659e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065a2:	f7fa faa3 	bl	8000aec <__aeabi_dcmplt>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f040 8095 	bne.w	80066d6 <_dtoa_r+0x6be>
 80065ac:	42a6      	cmp	r6, r4
 80065ae:	f43f af50 	beq.w	8006452 <_dtoa_r+0x43a>
 80065b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80065b6:	4b0a      	ldr	r3, [pc, #40]	@ (80065e0 <_dtoa_r+0x5c8>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	f7fa f825 	bl	8000608 <__aeabi_dmul>
 80065be:	4b08      	ldr	r3, [pc, #32]	@ (80065e0 <_dtoa_r+0x5c8>)
 80065c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065c4:	2200      	movs	r2, #0
 80065c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ca:	f7fa f81d 	bl	8000608 <__aeabi_dmul>
 80065ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065d2:	e7c4      	b.n	800655e <_dtoa_r+0x546>
 80065d4:	08008850 	.word	0x08008850
 80065d8:	08008828 	.word	0x08008828
 80065dc:	3ff00000 	.word	0x3ff00000
 80065e0:	40240000 	.word	0x40240000
 80065e4:	401c0000 	.word	0x401c0000
 80065e8:	40140000 	.word	0x40140000
 80065ec:	3fe00000 	.word	0x3fe00000
 80065f0:	4631      	mov	r1, r6
 80065f2:	4628      	mov	r0, r5
 80065f4:	f7fa f808 	bl	8000608 <__aeabi_dmul>
 80065f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80065fe:	4656      	mov	r6, sl
 8006600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006604:	f7fa fab0 	bl	8000b68 <__aeabi_d2iz>
 8006608:	4605      	mov	r5, r0
 800660a:	f7f9 ff93 	bl	8000534 <__aeabi_i2d>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006616:	f7f9 fe3f 	bl	8000298 <__aeabi_dsub>
 800661a:	3530      	adds	r5, #48	@ 0x30
 800661c:	f806 5b01 	strb.w	r5, [r6], #1
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	42a6      	cmp	r6, r4
 8006626:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	d124      	bne.n	800667a <_dtoa_r+0x662>
 8006630:	4bac      	ldr	r3, [pc, #688]	@ (80068e4 <_dtoa_r+0x8cc>)
 8006632:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006636:	f7f9 fe31 	bl	800029c <__adddf3>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006642:	f7fa fa71 	bl	8000b28 <__aeabi_dcmpgt>
 8006646:	2800      	cmp	r0, #0
 8006648:	d145      	bne.n	80066d6 <_dtoa_r+0x6be>
 800664a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800664e:	49a5      	ldr	r1, [pc, #660]	@ (80068e4 <_dtoa_r+0x8cc>)
 8006650:	2000      	movs	r0, #0
 8006652:	f7f9 fe21 	bl	8000298 <__aeabi_dsub>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800665e:	f7fa fa45 	bl	8000aec <__aeabi_dcmplt>
 8006662:	2800      	cmp	r0, #0
 8006664:	f43f aef5 	beq.w	8006452 <_dtoa_r+0x43a>
 8006668:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800666a:	1e73      	subs	r3, r6, #1
 800666c:	9315      	str	r3, [sp, #84]	@ 0x54
 800666e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006672:	2b30      	cmp	r3, #48	@ 0x30
 8006674:	d0f8      	beq.n	8006668 <_dtoa_r+0x650>
 8006676:	9f04      	ldr	r7, [sp, #16]
 8006678:	e73e      	b.n	80064f8 <_dtoa_r+0x4e0>
 800667a:	4b9b      	ldr	r3, [pc, #620]	@ (80068e8 <_dtoa_r+0x8d0>)
 800667c:	f7f9 ffc4 	bl	8000608 <__aeabi_dmul>
 8006680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006684:	e7bc      	b.n	8006600 <_dtoa_r+0x5e8>
 8006686:	d10c      	bne.n	80066a2 <_dtoa_r+0x68a>
 8006688:	4b98      	ldr	r3, [pc, #608]	@ (80068ec <_dtoa_r+0x8d4>)
 800668a:	2200      	movs	r2, #0
 800668c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006690:	f7f9 ffba 	bl	8000608 <__aeabi_dmul>
 8006694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006698:	f7fa fa3c 	bl	8000b14 <__aeabi_dcmpge>
 800669c:	2800      	cmp	r0, #0
 800669e:	f000 8157 	beq.w	8006950 <_dtoa_r+0x938>
 80066a2:	2400      	movs	r4, #0
 80066a4:	4625      	mov	r5, r4
 80066a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066a8:	43db      	mvns	r3, r3
 80066aa:	9304      	str	r3, [sp, #16]
 80066ac:	4656      	mov	r6, sl
 80066ae:	2700      	movs	r7, #0
 80066b0:	4621      	mov	r1, r4
 80066b2:	4658      	mov	r0, fp
 80066b4:	f000 fbb4 	bl	8006e20 <_Bfree>
 80066b8:	2d00      	cmp	r5, #0
 80066ba:	d0dc      	beq.n	8006676 <_dtoa_r+0x65e>
 80066bc:	b12f      	cbz	r7, 80066ca <_dtoa_r+0x6b2>
 80066be:	42af      	cmp	r7, r5
 80066c0:	d003      	beq.n	80066ca <_dtoa_r+0x6b2>
 80066c2:	4639      	mov	r1, r7
 80066c4:	4658      	mov	r0, fp
 80066c6:	f000 fbab 	bl	8006e20 <_Bfree>
 80066ca:	4629      	mov	r1, r5
 80066cc:	4658      	mov	r0, fp
 80066ce:	f000 fba7 	bl	8006e20 <_Bfree>
 80066d2:	e7d0      	b.n	8006676 <_dtoa_r+0x65e>
 80066d4:	9704      	str	r7, [sp, #16]
 80066d6:	4633      	mov	r3, r6
 80066d8:	461e      	mov	r6, r3
 80066da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066de:	2a39      	cmp	r2, #57	@ 0x39
 80066e0:	d107      	bne.n	80066f2 <_dtoa_r+0x6da>
 80066e2:	459a      	cmp	sl, r3
 80066e4:	d1f8      	bne.n	80066d8 <_dtoa_r+0x6c0>
 80066e6:	9a04      	ldr	r2, [sp, #16]
 80066e8:	3201      	adds	r2, #1
 80066ea:	9204      	str	r2, [sp, #16]
 80066ec:	2230      	movs	r2, #48	@ 0x30
 80066ee:	f88a 2000 	strb.w	r2, [sl]
 80066f2:	781a      	ldrb	r2, [r3, #0]
 80066f4:	3201      	adds	r2, #1
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	e7bd      	b.n	8006676 <_dtoa_r+0x65e>
 80066fa:	4b7b      	ldr	r3, [pc, #492]	@ (80068e8 <_dtoa_r+0x8d0>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	f7f9 ff83 	bl	8000608 <__aeabi_dmul>
 8006702:	2200      	movs	r2, #0
 8006704:	2300      	movs	r3, #0
 8006706:	4604      	mov	r4, r0
 8006708:	460d      	mov	r5, r1
 800670a:	f7fa f9e5 	bl	8000ad8 <__aeabi_dcmpeq>
 800670e:	2800      	cmp	r0, #0
 8006710:	f43f aebb 	beq.w	800648a <_dtoa_r+0x472>
 8006714:	e6f0      	b.n	80064f8 <_dtoa_r+0x4e0>
 8006716:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006718:	2a00      	cmp	r2, #0
 800671a:	f000 80db 	beq.w	80068d4 <_dtoa_r+0x8bc>
 800671e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006720:	2a01      	cmp	r2, #1
 8006722:	f300 80bf 	bgt.w	80068a4 <_dtoa_r+0x88c>
 8006726:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006728:	2a00      	cmp	r2, #0
 800672a:	f000 80b7 	beq.w	800689c <_dtoa_r+0x884>
 800672e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006732:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006734:	4646      	mov	r6, r8
 8006736:	9a08      	ldr	r2, [sp, #32]
 8006738:	2101      	movs	r1, #1
 800673a:	441a      	add	r2, r3
 800673c:	4658      	mov	r0, fp
 800673e:	4498      	add	r8, r3
 8006740:	9208      	str	r2, [sp, #32]
 8006742:	f000 fc21 	bl	8006f88 <__i2b>
 8006746:	4605      	mov	r5, r0
 8006748:	b15e      	cbz	r6, 8006762 <_dtoa_r+0x74a>
 800674a:	9b08      	ldr	r3, [sp, #32]
 800674c:	2b00      	cmp	r3, #0
 800674e:	dd08      	ble.n	8006762 <_dtoa_r+0x74a>
 8006750:	42b3      	cmp	r3, r6
 8006752:	9a08      	ldr	r2, [sp, #32]
 8006754:	bfa8      	it	ge
 8006756:	4633      	movge	r3, r6
 8006758:	eba8 0803 	sub.w	r8, r8, r3
 800675c:	1af6      	subs	r6, r6, r3
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	9308      	str	r3, [sp, #32]
 8006762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006764:	b1f3      	cbz	r3, 80067a4 <_dtoa_r+0x78c>
 8006766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 80b7 	beq.w	80068dc <_dtoa_r+0x8c4>
 800676e:	b18c      	cbz	r4, 8006794 <_dtoa_r+0x77c>
 8006770:	4629      	mov	r1, r5
 8006772:	4622      	mov	r2, r4
 8006774:	4658      	mov	r0, fp
 8006776:	f000 fcc7 	bl	8007108 <__pow5mult>
 800677a:	464a      	mov	r2, r9
 800677c:	4601      	mov	r1, r0
 800677e:	4605      	mov	r5, r0
 8006780:	4658      	mov	r0, fp
 8006782:	f000 fc17 	bl	8006fb4 <__multiply>
 8006786:	4649      	mov	r1, r9
 8006788:	9004      	str	r0, [sp, #16]
 800678a:	4658      	mov	r0, fp
 800678c:	f000 fb48 	bl	8006e20 <_Bfree>
 8006790:	9b04      	ldr	r3, [sp, #16]
 8006792:	4699      	mov	r9, r3
 8006794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006796:	1b1a      	subs	r2, r3, r4
 8006798:	d004      	beq.n	80067a4 <_dtoa_r+0x78c>
 800679a:	4649      	mov	r1, r9
 800679c:	4658      	mov	r0, fp
 800679e:	f000 fcb3 	bl	8007108 <__pow5mult>
 80067a2:	4681      	mov	r9, r0
 80067a4:	2101      	movs	r1, #1
 80067a6:	4658      	mov	r0, fp
 80067a8:	f000 fbee 	bl	8006f88 <__i2b>
 80067ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067ae:	4604      	mov	r4, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 81cf 	beq.w	8006b54 <_dtoa_r+0xb3c>
 80067b6:	461a      	mov	r2, r3
 80067b8:	4601      	mov	r1, r0
 80067ba:	4658      	mov	r0, fp
 80067bc:	f000 fca4 	bl	8007108 <__pow5mult>
 80067c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	4604      	mov	r4, r0
 80067c6:	f300 8095 	bgt.w	80068f4 <_dtoa_r+0x8dc>
 80067ca:	9b02      	ldr	r3, [sp, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f040 8087 	bne.w	80068e0 <_dtoa_r+0x8c8>
 80067d2:	9b03      	ldr	r3, [sp, #12]
 80067d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f040 8089 	bne.w	80068f0 <_dtoa_r+0x8d8>
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067e4:	0d1b      	lsrs	r3, r3, #20
 80067e6:	051b      	lsls	r3, r3, #20
 80067e8:	b12b      	cbz	r3, 80067f6 <_dtoa_r+0x7de>
 80067ea:	9b08      	ldr	r3, [sp, #32]
 80067ec:	3301      	adds	r3, #1
 80067ee:	9308      	str	r3, [sp, #32]
 80067f0:	f108 0801 	add.w	r8, r8, #1
 80067f4:	2301      	movs	r3, #1
 80067f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80067f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 81b0 	beq.w	8006b60 <_dtoa_r+0xb48>
 8006800:	6923      	ldr	r3, [r4, #16]
 8006802:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006806:	6918      	ldr	r0, [r3, #16]
 8006808:	f000 fb72 	bl	8006ef0 <__hi0bits>
 800680c:	f1c0 0020 	rsb	r0, r0, #32
 8006810:	9b08      	ldr	r3, [sp, #32]
 8006812:	4418      	add	r0, r3
 8006814:	f010 001f 	ands.w	r0, r0, #31
 8006818:	d077      	beq.n	800690a <_dtoa_r+0x8f2>
 800681a:	f1c0 0320 	rsb	r3, r0, #32
 800681e:	2b04      	cmp	r3, #4
 8006820:	dd6b      	ble.n	80068fa <_dtoa_r+0x8e2>
 8006822:	9b08      	ldr	r3, [sp, #32]
 8006824:	f1c0 001c 	rsb	r0, r0, #28
 8006828:	4403      	add	r3, r0
 800682a:	4480      	add	r8, r0
 800682c:	4406      	add	r6, r0
 800682e:	9308      	str	r3, [sp, #32]
 8006830:	f1b8 0f00 	cmp.w	r8, #0
 8006834:	dd05      	ble.n	8006842 <_dtoa_r+0x82a>
 8006836:	4649      	mov	r1, r9
 8006838:	4642      	mov	r2, r8
 800683a:	4658      	mov	r0, fp
 800683c:	f000 fcbe 	bl	80071bc <__lshift>
 8006840:	4681      	mov	r9, r0
 8006842:	9b08      	ldr	r3, [sp, #32]
 8006844:	2b00      	cmp	r3, #0
 8006846:	dd05      	ble.n	8006854 <_dtoa_r+0x83c>
 8006848:	4621      	mov	r1, r4
 800684a:	461a      	mov	r2, r3
 800684c:	4658      	mov	r0, fp
 800684e:	f000 fcb5 	bl	80071bc <__lshift>
 8006852:	4604      	mov	r4, r0
 8006854:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006856:	2b00      	cmp	r3, #0
 8006858:	d059      	beq.n	800690e <_dtoa_r+0x8f6>
 800685a:	4621      	mov	r1, r4
 800685c:	4648      	mov	r0, r9
 800685e:	f000 fd19 	bl	8007294 <__mcmp>
 8006862:	2800      	cmp	r0, #0
 8006864:	da53      	bge.n	800690e <_dtoa_r+0x8f6>
 8006866:	1e7b      	subs	r3, r7, #1
 8006868:	9304      	str	r3, [sp, #16]
 800686a:	4649      	mov	r1, r9
 800686c:	2300      	movs	r3, #0
 800686e:	220a      	movs	r2, #10
 8006870:	4658      	mov	r0, fp
 8006872:	f000 faf7 	bl	8006e64 <__multadd>
 8006876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006878:	4681      	mov	r9, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8172 	beq.w	8006b64 <_dtoa_r+0xb4c>
 8006880:	2300      	movs	r3, #0
 8006882:	4629      	mov	r1, r5
 8006884:	220a      	movs	r2, #10
 8006886:	4658      	mov	r0, fp
 8006888:	f000 faec 	bl	8006e64 <__multadd>
 800688c:	9b00      	ldr	r3, [sp, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	4605      	mov	r5, r0
 8006892:	dc67      	bgt.n	8006964 <_dtoa_r+0x94c>
 8006894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006896:	2b02      	cmp	r3, #2
 8006898:	dc41      	bgt.n	800691e <_dtoa_r+0x906>
 800689a:	e063      	b.n	8006964 <_dtoa_r+0x94c>
 800689c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800689e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80068a2:	e746      	b.n	8006732 <_dtoa_r+0x71a>
 80068a4:	9b07      	ldr	r3, [sp, #28]
 80068a6:	1e5c      	subs	r4, r3, #1
 80068a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068aa:	42a3      	cmp	r3, r4
 80068ac:	bfbf      	itttt	lt
 80068ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80068b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80068b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80068b4:	1ae3      	sublt	r3, r4, r3
 80068b6:	bfb4      	ite	lt
 80068b8:	18d2      	addlt	r2, r2, r3
 80068ba:	1b1c      	subge	r4, r3, r4
 80068bc:	9b07      	ldr	r3, [sp, #28]
 80068be:	bfbc      	itt	lt
 80068c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80068c2:	2400      	movlt	r4, #0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	bfb5      	itete	lt
 80068c8:	eba8 0603 	sublt.w	r6, r8, r3
 80068cc:	9b07      	ldrge	r3, [sp, #28]
 80068ce:	2300      	movlt	r3, #0
 80068d0:	4646      	movge	r6, r8
 80068d2:	e730      	b.n	8006736 <_dtoa_r+0x71e>
 80068d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80068d8:	4646      	mov	r6, r8
 80068da:	e735      	b.n	8006748 <_dtoa_r+0x730>
 80068dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068de:	e75c      	b.n	800679a <_dtoa_r+0x782>
 80068e0:	2300      	movs	r3, #0
 80068e2:	e788      	b.n	80067f6 <_dtoa_r+0x7de>
 80068e4:	3fe00000 	.word	0x3fe00000
 80068e8:	40240000 	.word	0x40240000
 80068ec:	40140000 	.word	0x40140000
 80068f0:	9b02      	ldr	r3, [sp, #8]
 80068f2:	e780      	b.n	80067f6 <_dtoa_r+0x7de>
 80068f4:	2300      	movs	r3, #0
 80068f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80068f8:	e782      	b.n	8006800 <_dtoa_r+0x7e8>
 80068fa:	d099      	beq.n	8006830 <_dtoa_r+0x818>
 80068fc:	9a08      	ldr	r2, [sp, #32]
 80068fe:	331c      	adds	r3, #28
 8006900:	441a      	add	r2, r3
 8006902:	4498      	add	r8, r3
 8006904:	441e      	add	r6, r3
 8006906:	9208      	str	r2, [sp, #32]
 8006908:	e792      	b.n	8006830 <_dtoa_r+0x818>
 800690a:	4603      	mov	r3, r0
 800690c:	e7f6      	b.n	80068fc <_dtoa_r+0x8e4>
 800690e:	9b07      	ldr	r3, [sp, #28]
 8006910:	9704      	str	r7, [sp, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	dc20      	bgt.n	8006958 <_dtoa_r+0x940>
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691a:	2b02      	cmp	r3, #2
 800691c:	dd1e      	ble.n	800695c <_dtoa_r+0x944>
 800691e:	9b00      	ldr	r3, [sp, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f47f aec0 	bne.w	80066a6 <_dtoa_r+0x68e>
 8006926:	4621      	mov	r1, r4
 8006928:	2205      	movs	r2, #5
 800692a:	4658      	mov	r0, fp
 800692c:	f000 fa9a 	bl	8006e64 <__multadd>
 8006930:	4601      	mov	r1, r0
 8006932:	4604      	mov	r4, r0
 8006934:	4648      	mov	r0, r9
 8006936:	f000 fcad 	bl	8007294 <__mcmp>
 800693a:	2800      	cmp	r0, #0
 800693c:	f77f aeb3 	ble.w	80066a6 <_dtoa_r+0x68e>
 8006940:	4656      	mov	r6, sl
 8006942:	2331      	movs	r3, #49	@ 0x31
 8006944:	f806 3b01 	strb.w	r3, [r6], #1
 8006948:	9b04      	ldr	r3, [sp, #16]
 800694a:	3301      	adds	r3, #1
 800694c:	9304      	str	r3, [sp, #16]
 800694e:	e6ae      	b.n	80066ae <_dtoa_r+0x696>
 8006950:	9c07      	ldr	r4, [sp, #28]
 8006952:	9704      	str	r7, [sp, #16]
 8006954:	4625      	mov	r5, r4
 8006956:	e7f3      	b.n	8006940 <_dtoa_r+0x928>
 8006958:	9b07      	ldr	r3, [sp, #28]
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8104 	beq.w	8006b6c <_dtoa_r+0xb54>
 8006964:	2e00      	cmp	r6, #0
 8006966:	dd05      	ble.n	8006974 <_dtoa_r+0x95c>
 8006968:	4629      	mov	r1, r5
 800696a:	4632      	mov	r2, r6
 800696c:	4658      	mov	r0, fp
 800696e:	f000 fc25 	bl	80071bc <__lshift>
 8006972:	4605      	mov	r5, r0
 8006974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006976:	2b00      	cmp	r3, #0
 8006978:	d05a      	beq.n	8006a30 <_dtoa_r+0xa18>
 800697a:	6869      	ldr	r1, [r5, #4]
 800697c:	4658      	mov	r0, fp
 800697e:	f000 fa0f 	bl	8006da0 <_Balloc>
 8006982:	4606      	mov	r6, r0
 8006984:	b928      	cbnz	r0, 8006992 <_dtoa_r+0x97a>
 8006986:	4b84      	ldr	r3, [pc, #528]	@ (8006b98 <_dtoa_r+0xb80>)
 8006988:	4602      	mov	r2, r0
 800698a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800698e:	f7ff bb5a 	b.w	8006046 <_dtoa_r+0x2e>
 8006992:	692a      	ldr	r2, [r5, #16]
 8006994:	3202      	adds	r2, #2
 8006996:	0092      	lsls	r2, r2, #2
 8006998:	f105 010c 	add.w	r1, r5, #12
 800699c:	300c      	adds	r0, #12
 800699e:	f7ff faa2 	bl	8005ee6 <memcpy>
 80069a2:	2201      	movs	r2, #1
 80069a4:	4631      	mov	r1, r6
 80069a6:	4658      	mov	r0, fp
 80069a8:	f000 fc08 	bl	80071bc <__lshift>
 80069ac:	f10a 0301 	add.w	r3, sl, #1
 80069b0:	9307      	str	r3, [sp, #28]
 80069b2:	9b00      	ldr	r3, [sp, #0]
 80069b4:	4453      	add	r3, sl
 80069b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069b8:	9b02      	ldr	r3, [sp, #8]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	462f      	mov	r7, r5
 80069c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80069c2:	4605      	mov	r5, r0
 80069c4:	9b07      	ldr	r3, [sp, #28]
 80069c6:	4621      	mov	r1, r4
 80069c8:	3b01      	subs	r3, #1
 80069ca:	4648      	mov	r0, r9
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	f7ff fa98 	bl	8005f02 <quorem>
 80069d2:	4639      	mov	r1, r7
 80069d4:	9002      	str	r0, [sp, #8]
 80069d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80069da:	4648      	mov	r0, r9
 80069dc:	f000 fc5a 	bl	8007294 <__mcmp>
 80069e0:	462a      	mov	r2, r5
 80069e2:	9008      	str	r0, [sp, #32]
 80069e4:	4621      	mov	r1, r4
 80069e6:	4658      	mov	r0, fp
 80069e8:	f000 fc70 	bl	80072cc <__mdiff>
 80069ec:	68c2      	ldr	r2, [r0, #12]
 80069ee:	4606      	mov	r6, r0
 80069f0:	bb02      	cbnz	r2, 8006a34 <_dtoa_r+0xa1c>
 80069f2:	4601      	mov	r1, r0
 80069f4:	4648      	mov	r0, r9
 80069f6:	f000 fc4d 	bl	8007294 <__mcmp>
 80069fa:	4602      	mov	r2, r0
 80069fc:	4631      	mov	r1, r6
 80069fe:	4658      	mov	r0, fp
 8006a00:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a02:	f000 fa0d 	bl	8006e20 <_Bfree>
 8006a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a0a:	9e07      	ldr	r6, [sp, #28]
 8006a0c:	ea43 0102 	orr.w	r1, r3, r2
 8006a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a12:	4319      	orrs	r1, r3
 8006a14:	d110      	bne.n	8006a38 <_dtoa_r+0xa20>
 8006a16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a1a:	d029      	beq.n	8006a70 <_dtoa_r+0xa58>
 8006a1c:	9b08      	ldr	r3, [sp, #32]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	dd02      	ble.n	8006a28 <_dtoa_r+0xa10>
 8006a22:	9b02      	ldr	r3, [sp, #8]
 8006a24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006a28:	9b00      	ldr	r3, [sp, #0]
 8006a2a:	f883 8000 	strb.w	r8, [r3]
 8006a2e:	e63f      	b.n	80066b0 <_dtoa_r+0x698>
 8006a30:	4628      	mov	r0, r5
 8006a32:	e7bb      	b.n	80069ac <_dtoa_r+0x994>
 8006a34:	2201      	movs	r2, #1
 8006a36:	e7e1      	b.n	80069fc <_dtoa_r+0x9e4>
 8006a38:	9b08      	ldr	r3, [sp, #32]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	db04      	blt.n	8006a48 <_dtoa_r+0xa30>
 8006a3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a40:	430b      	orrs	r3, r1
 8006a42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a44:	430b      	orrs	r3, r1
 8006a46:	d120      	bne.n	8006a8a <_dtoa_r+0xa72>
 8006a48:	2a00      	cmp	r2, #0
 8006a4a:	dded      	ble.n	8006a28 <_dtoa_r+0xa10>
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	2201      	movs	r2, #1
 8006a50:	4658      	mov	r0, fp
 8006a52:	f000 fbb3 	bl	80071bc <__lshift>
 8006a56:	4621      	mov	r1, r4
 8006a58:	4681      	mov	r9, r0
 8006a5a:	f000 fc1b 	bl	8007294 <__mcmp>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	dc03      	bgt.n	8006a6a <_dtoa_r+0xa52>
 8006a62:	d1e1      	bne.n	8006a28 <_dtoa_r+0xa10>
 8006a64:	f018 0f01 	tst.w	r8, #1
 8006a68:	d0de      	beq.n	8006a28 <_dtoa_r+0xa10>
 8006a6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a6e:	d1d8      	bne.n	8006a22 <_dtoa_r+0xa0a>
 8006a70:	9a00      	ldr	r2, [sp, #0]
 8006a72:	2339      	movs	r3, #57	@ 0x39
 8006a74:	7013      	strb	r3, [r2, #0]
 8006a76:	4633      	mov	r3, r6
 8006a78:	461e      	mov	r6, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a80:	2a39      	cmp	r2, #57	@ 0x39
 8006a82:	d052      	beq.n	8006b2a <_dtoa_r+0xb12>
 8006a84:	3201      	adds	r2, #1
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	e612      	b.n	80066b0 <_dtoa_r+0x698>
 8006a8a:	2a00      	cmp	r2, #0
 8006a8c:	dd07      	ble.n	8006a9e <_dtoa_r+0xa86>
 8006a8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a92:	d0ed      	beq.n	8006a70 <_dtoa_r+0xa58>
 8006a94:	9a00      	ldr	r2, [sp, #0]
 8006a96:	f108 0301 	add.w	r3, r8, #1
 8006a9a:	7013      	strb	r3, [r2, #0]
 8006a9c:	e608      	b.n	80066b0 <_dtoa_r+0x698>
 8006a9e:	9b07      	ldr	r3, [sp, #28]
 8006aa0:	9a07      	ldr	r2, [sp, #28]
 8006aa2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d028      	beq.n	8006afe <_dtoa_r+0xae6>
 8006aac:	4649      	mov	r1, r9
 8006aae:	2300      	movs	r3, #0
 8006ab0:	220a      	movs	r2, #10
 8006ab2:	4658      	mov	r0, fp
 8006ab4:	f000 f9d6 	bl	8006e64 <__multadd>
 8006ab8:	42af      	cmp	r7, r5
 8006aba:	4681      	mov	r9, r0
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	f04f 020a 	mov.w	r2, #10
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	4658      	mov	r0, fp
 8006ac8:	d107      	bne.n	8006ada <_dtoa_r+0xac2>
 8006aca:	f000 f9cb 	bl	8006e64 <__multadd>
 8006ace:	4607      	mov	r7, r0
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	9b07      	ldr	r3, [sp, #28]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	9307      	str	r3, [sp, #28]
 8006ad8:	e774      	b.n	80069c4 <_dtoa_r+0x9ac>
 8006ada:	f000 f9c3 	bl	8006e64 <__multadd>
 8006ade:	4629      	mov	r1, r5
 8006ae0:	4607      	mov	r7, r0
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	220a      	movs	r2, #10
 8006ae6:	4658      	mov	r0, fp
 8006ae8:	f000 f9bc 	bl	8006e64 <__multadd>
 8006aec:	4605      	mov	r5, r0
 8006aee:	e7f0      	b.n	8006ad2 <_dtoa_r+0xaba>
 8006af0:	9b00      	ldr	r3, [sp, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bfcc      	ite	gt
 8006af6:	461e      	movgt	r6, r3
 8006af8:	2601      	movle	r6, #1
 8006afa:	4456      	add	r6, sl
 8006afc:	2700      	movs	r7, #0
 8006afe:	4649      	mov	r1, r9
 8006b00:	2201      	movs	r2, #1
 8006b02:	4658      	mov	r0, fp
 8006b04:	f000 fb5a 	bl	80071bc <__lshift>
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4681      	mov	r9, r0
 8006b0c:	f000 fbc2 	bl	8007294 <__mcmp>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	dcb0      	bgt.n	8006a76 <_dtoa_r+0xa5e>
 8006b14:	d102      	bne.n	8006b1c <_dtoa_r+0xb04>
 8006b16:	f018 0f01 	tst.w	r8, #1
 8006b1a:	d1ac      	bne.n	8006a76 <_dtoa_r+0xa5e>
 8006b1c:	4633      	mov	r3, r6
 8006b1e:	461e      	mov	r6, r3
 8006b20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b24:	2a30      	cmp	r2, #48	@ 0x30
 8006b26:	d0fa      	beq.n	8006b1e <_dtoa_r+0xb06>
 8006b28:	e5c2      	b.n	80066b0 <_dtoa_r+0x698>
 8006b2a:	459a      	cmp	sl, r3
 8006b2c:	d1a4      	bne.n	8006a78 <_dtoa_r+0xa60>
 8006b2e:	9b04      	ldr	r3, [sp, #16]
 8006b30:	3301      	adds	r3, #1
 8006b32:	9304      	str	r3, [sp, #16]
 8006b34:	2331      	movs	r3, #49	@ 0x31
 8006b36:	f88a 3000 	strb.w	r3, [sl]
 8006b3a:	e5b9      	b.n	80066b0 <_dtoa_r+0x698>
 8006b3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006b9c <_dtoa_r+0xb84>
 8006b42:	b11b      	cbz	r3, 8006b4c <_dtoa_r+0xb34>
 8006b44:	f10a 0308 	add.w	r3, sl, #8
 8006b48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	4650      	mov	r0, sl
 8006b4e:	b019      	add	sp, #100	@ 0x64
 8006b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	f77f ae37 	ble.w	80067ca <_dtoa_r+0x7b2>
 8006b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b60:	2001      	movs	r0, #1
 8006b62:	e655      	b.n	8006810 <_dtoa_r+0x7f8>
 8006b64:	9b00      	ldr	r3, [sp, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f77f aed6 	ble.w	8006918 <_dtoa_r+0x900>
 8006b6c:	4656      	mov	r6, sl
 8006b6e:	4621      	mov	r1, r4
 8006b70:	4648      	mov	r0, r9
 8006b72:	f7ff f9c6 	bl	8005f02 <quorem>
 8006b76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b7a:	f806 8b01 	strb.w	r8, [r6], #1
 8006b7e:	9b00      	ldr	r3, [sp, #0]
 8006b80:	eba6 020a 	sub.w	r2, r6, sl
 8006b84:	4293      	cmp	r3, r2
 8006b86:	ddb3      	ble.n	8006af0 <_dtoa_r+0xad8>
 8006b88:	4649      	mov	r1, r9
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	220a      	movs	r2, #10
 8006b8e:	4658      	mov	r0, fp
 8006b90:	f000 f968 	bl	8006e64 <__multadd>
 8006b94:	4681      	mov	r9, r0
 8006b96:	e7ea      	b.n	8006b6e <_dtoa_r+0xb56>
 8006b98:	080087b0 	.word	0x080087b0
 8006b9c:	08008734 	.word	0x08008734

08006ba0 <_free_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4605      	mov	r5, r0
 8006ba4:	2900      	cmp	r1, #0
 8006ba6:	d041      	beq.n	8006c2c <_free_r+0x8c>
 8006ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bac:	1f0c      	subs	r4, r1, #4
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	bfb8      	it	lt
 8006bb2:	18e4      	addlt	r4, r4, r3
 8006bb4:	f000 f8e8 	bl	8006d88 <__malloc_lock>
 8006bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c30 <_free_r+0x90>)
 8006bba:	6813      	ldr	r3, [r2, #0]
 8006bbc:	b933      	cbnz	r3, 8006bcc <_free_r+0x2c>
 8006bbe:	6063      	str	r3, [r4, #4]
 8006bc0:	6014      	str	r4, [r2, #0]
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc8:	f000 b8e4 	b.w	8006d94 <__malloc_unlock>
 8006bcc:	42a3      	cmp	r3, r4
 8006bce:	d908      	bls.n	8006be2 <_free_r+0x42>
 8006bd0:	6820      	ldr	r0, [r4, #0]
 8006bd2:	1821      	adds	r1, r4, r0
 8006bd4:	428b      	cmp	r3, r1
 8006bd6:	bf01      	itttt	eq
 8006bd8:	6819      	ldreq	r1, [r3, #0]
 8006bda:	685b      	ldreq	r3, [r3, #4]
 8006bdc:	1809      	addeq	r1, r1, r0
 8006bde:	6021      	streq	r1, [r4, #0]
 8006be0:	e7ed      	b.n	8006bbe <_free_r+0x1e>
 8006be2:	461a      	mov	r2, r3
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	b10b      	cbz	r3, 8006bec <_free_r+0x4c>
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	d9fa      	bls.n	8006be2 <_free_r+0x42>
 8006bec:	6811      	ldr	r1, [r2, #0]
 8006bee:	1850      	adds	r0, r2, r1
 8006bf0:	42a0      	cmp	r0, r4
 8006bf2:	d10b      	bne.n	8006c0c <_free_r+0x6c>
 8006bf4:	6820      	ldr	r0, [r4, #0]
 8006bf6:	4401      	add	r1, r0
 8006bf8:	1850      	adds	r0, r2, r1
 8006bfa:	4283      	cmp	r3, r0
 8006bfc:	6011      	str	r1, [r2, #0]
 8006bfe:	d1e0      	bne.n	8006bc2 <_free_r+0x22>
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	6053      	str	r3, [r2, #4]
 8006c06:	4408      	add	r0, r1
 8006c08:	6010      	str	r0, [r2, #0]
 8006c0a:	e7da      	b.n	8006bc2 <_free_r+0x22>
 8006c0c:	d902      	bls.n	8006c14 <_free_r+0x74>
 8006c0e:	230c      	movs	r3, #12
 8006c10:	602b      	str	r3, [r5, #0]
 8006c12:	e7d6      	b.n	8006bc2 <_free_r+0x22>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	1821      	adds	r1, r4, r0
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	bf04      	itt	eq
 8006c1c:	6819      	ldreq	r1, [r3, #0]
 8006c1e:	685b      	ldreq	r3, [r3, #4]
 8006c20:	6063      	str	r3, [r4, #4]
 8006c22:	bf04      	itt	eq
 8006c24:	1809      	addeq	r1, r1, r0
 8006c26:	6021      	streq	r1, [r4, #0]
 8006c28:	6054      	str	r4, [r2, #4]
 8006c2a:	e7ca      	b.n	8006bc2 <_free_r+0x22>
 8006c2c:	bd38      	pop	{r3, r4, r5, pc}
 8006c2e:	bf00      	nop
 8006c30:	2000084c 	.word	0x2000084c

08006c34 <malloc>:
 8006c34:	4b02      	ldr	r3, [pc, #8]	@ (8006c40 <malloc+0xc>)
 8006c36:	4601      	mov	r1, r0
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	f000 b825 	b.w	8006c88 <_malloc_r>
 8006c3e:	bf00      	nop
 8006c40:	20000024 	.word	0x20000024

08006c44 <sbrk_aligned>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	4e0f      	ldr	r6, [pc, #60]	@ (8006c84 <sbrk_aligned+0x40>)
 8006c48:	460c      	mov	r4, r1
 8006c4a:	6831      	ldr	r1, [r6, #0]
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	b911      	cbnz	r1, 8006c56 <sbrk_aligned+0x12>
 8006c50:	f000 fe2c 	bl	80078ac <_sbrk_r>
 8006c54:	6030      	str	r0, [r6, #0]
 8006c56:	4621      	mov	r1, r4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f000 fe27 	bl	80078ac <_sbrk_r>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	d103      	bne.n	8006c6a <sbrk_aligned+0x26>
 8006c62:	f04f 34ff 	mov.w	r4, #4294967295
 8006c66:	4620      	mov	r0, r4
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
 8006c6a:	1cc4      	adds	r4, r0, #3
 8006c6c:	f024 0403 	bic.w	r4, r4, #3
 8006c70:	42a0      	cmp	r0, r4
 8006c72:	d0f8      	beq.n	8006c66 <sbrk_aligned+0x22>
 8006c74:	1a21      	subs	r1, r4, r0
 8006c76:	4628      	mov	r0, r5
 8006c78:	f000 fe18 	bl	80078ac <_sbrk_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d1f2      	bne.n	8006c66 <sbrk_aligned+0x22>
 8006c80:	e7ef      	b.n	8006c62 <sbrk_aligned+0x1e>
 8006c82:	bf00      	nop
 8006c84:	20000848 	.word	0x20000848

08006c88 <_malloc_r>:
 8006c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c8c:	1ccd      	adds	r5, r1, #3
 8006c8e:	f025 0503 	bic.w	r5, r5, #3
 8006c92:	3508      	adds	r5, #8
 8006c94:	2d0c      	cmp	r5, #12
 8006c96:	bf38      	it	cc
 8006c98:	250c      	movcc	r5, #12
 8006c9a:	2d00      	cmp	r5, #0
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	db01      	blt.n	8006ca4 <_malloc_r+0x1c>
 8006ca0:	42a9      	cmp	r1, r5
 8006ca2:	d904      	bls.n	8006cae <_malloc_r+0x26>
 8006ca4:	230c      	movs	r3, #12
 8006ca6:	6033      	str	r3, [r6, #0]
 8006ca8:	2000      	movs	r0, #0
 8006caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d84 <_malloc_r+0xfc>
 8006cb2:	f000 f869 	bl	8006d88 <__malloc_lock>
 8006cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006cba:	461c      	mov	r4, r3
 8006cbc:	bb44      	cbnz	r4, 8006d10 <_malloc_r+0x88>
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f7ff ffbf 	bl	8006c44 <sbrk_aligned>
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	4604      	mov	r4, r0
 8006cca:	d158      	bne.n	8006d7e <_malloc_r+0xf6>
 8006ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8006cd0:	4627      	mov	r7, r4
 8006cd2:	2f00      	cmp	r7, #0
 8006cd4:	d143      	bne.n	8006d5e <_malloc_r+0xd6>
 8006cd6:	2c00      	cmp	r4, #0
 8006cd8:	d04b      	beq.n	8006d72 <_malloc_r+0xea>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	4639      	mov	r1, r7
 8006cde:	4630      	mov	r0, r6
 8006ce0:	eb04 0903 	add.w	r9, r4, r3
 8006ce4:	f000 fde2 	bl	80078ac <_sbrk_r>
 8006ce8:	4581      	cmp	r9, r0
 8006cea:	d142      	bne.n	8006d72 <_malloc_r+0xea>
 8006cec:	6821      	ldr	r1, [r4, #0]
 8006cee:	1a6d      	subs	r5, r5, r1
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f7ff ffa6 	bl	8006c44 <sbrk_aligned>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d03a      	beq.n	8006d72 <_malloc_r+0xea>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	442b      	add	r3, r5
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	f8d8 3000 	ldr.w	r3, [r8]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	bb62      	cbnz	r2, 8006d64 <_malloc_r+0xdc>
 8006d0a:	f8c8 7000 	str.w	r7, [r8]
 8006d0e:	e00f      	b.n	8006d30 <_malloc_r+0xa8>
 8006d10:	6822      	ldr	r2, [r4, #0]
 8006d12:	1b52      	subs	r2, r2, r5
 8006d14:	d420      	bmi.n	8006d58 <_malloc_r+0xd0>
 8006d16:	2a0b      	cmp	r2, #11
 8006d18:	d917      	bls.n	8006d4a <_malloc_r+0xc2>
 8006d1a:	1961      	adds	r1, r4, r5
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	6025      	str	r5, [r4, #0]
 8006d20:	bf18      	it	ne
 8006d22:	6059      	strne	r1, [r3, #4]
 8006d24:	6863      	ldr	r3, [r4, #4]
 8006d26:	bf08      	it	eq
 8006d28:	f8c8 1000 	streq.w	r1, [r8]
 8006d2c:	5162      	str	r2, [r4, r5]
 8006d2e:	604b      	str	r3, [r1, #4]
 8006d30:	4630      	mov	r0, r6
 8006d32:	f000 f82f 	bl	8006d94 <__malloc_unlock>
 8006d36:	f104 000b 	add.w	r0, r4, #11
 8006d3a:	1d23      	adds	r3, r4, #4
 8006d3c:	f020 0007 	bic.w	r0, r0, #7
 8006d40:	1ac2      	subs	r2, r0, r3
 8006d42:	bf1c      	itt	ne
 8006d44:	1a1b      	subne	r3, r3, r0
 8006d46:	50a3      	strne	r3, [r4, r2]
 8006d48:	e7af      	b.n	8006caa <_malloc_r+0x22>
 8006d4a:	6862      	ldr	r2, [r4, #4]
 8006d4c:	42a3      	cmp	r3, r4
 8006d4e:	bf0c      	ite	eq
 8006d50:	f8c8 2000 	streq.w	r2, [r8]
 8006d54:	605a      	strne	r2, [r3, #4]
 8006d56:	e7eb      	b.n	8006d30 <_malloc_r+0xa8>
 8006d58:	4623      	mov	r3, r4
 8006d5a:	6864      	ldr	r4, [r4, #4]
 8006d5c:	e7ae      	b.n	8006cbc <_malloc_r+0x34>
 8006d5e:	463c      	mov	r4, r7
 8006d60:	687f      	ldr	r7, [r7, #4]
 8006d62:	e7b6      	b.n	8006cd2 <_malloc_r+0x4a>
 8006d64:	461a      	mov	r2, r3
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	d1fb      	bne.n	8006d64 <_malloc_r+0xdc>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	6053      	str	r3, [r2, #4]
 8006d70:	e7de      	b.n	8006d30 <_malloc_r+0xa8>
 8006d72:	230c      	movs	r3, #12
 8006d74:	6033      	str	r3, [r6, #0]
 8006d76:	4630      	mov	r0, r6
 8006d78:	f000 f80c 	bl	8006d94 <__malloc_unlock>
 8006d7c:	e794      	b.n	8006ca8 <_malloc_r+0x20>
 8006d7e:	6005      	str	r5, [r0, #0]
 8006d80:	e7d6      	b.n	8006d30 <_malloc_r+0xa8>
 8006d82:	bf00      	nop
 8006d84:	2000084c 	.word	0x2000084c

08006d88 <__malloc_lock>:
 8006d88:	4801      	ldr	r0, [pc, #4]	@ (8006d90 <__malloc_lock+0x8>)
 8006d8a:	f7ff b8aa 	b.w	8005ee2 <__retarget_lock_acquire_recursive>
 8006d8e:	bf00      	nop
 8006d90:	20000844 	.word	0x20000844

08006d94 <__malloc_unlock>:
 8006d94:	4801      	ldr	r0, [pc, #4]	@ (8006d9c <__malloc_unlock+0x8>)
 8006d96:	f7ff b8a5 	b.w	8005ee4 <__retarget_lock_release_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	20000844 	.word	0x20000844

08006da0 <_Balloc>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	69c6      	ldr	r6, [r0, #28]
 8006da4:	4604      	mov	r4, r0
 8006da6:	460d      	mov	r5, r1
 8006da8:	b976      	cbnz	r6, 8006dc8 <_Balloc+0x28>
 8006daa:	2010      	movs	r0, #16
 8006dac:	f7ff ff42 	bl	8006c34 <malloc>
 8006db0:	4602      	mov	r2, r0
 8006db2:	61e0      	str	r0, [r4, #28]
 8006db4:	b920      	cbnz	r0, 8006dc0 <_Balloc+0x20>
 8006db6:	4b18      	ldr	r3, [pc, #96]	@ (8006e18 <_Balloc+0x78>)
 8006db8:	4818      	ldr	r0, [pc, #96]	@ (8006e1c <_Balloc+0x7c>)
 8006dba:	216b      	movs	r1, #107	@ 0x6b
 8006dbc:	f000 fd86 	bl	80078cc <__assert_func>
 8006dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dc4:	6006      	str	r6, [r0, #0]
 8006dc6:	60c6      	str	r6, [r0, #12]
 8006dc8:	69e6      	ldr	r6, [r4, #28]
 8006dca:	68f3      	ldr	r3, [r6, #12]
 8006dcc:	b183      	cbz	r3, 8006df0 <_Balloc+0x50>
 8006dce:	69e3      	ldr	r3, [r4, #28]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dd6:	b9b8      	cbnz	r0, 8006e08 <_Balloc+0x68>
 8006dd8:	2101      	movs	r1, #1
 8006dda:	fa01 f605 	lsl.w	r6, r1, r5
 8006dde:	1d72      	adds	r2, r6, #5
 8006de0:	0092      	lsls	r2, r2, #2
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 fd90 	bl	8007908 <_calloc_r>
 8006de8:	b160      	cbz	r0, 8006e04 <_Balloc+0x64>
 8006dea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dee:	e00e      	b.n	8006e0e <_Balloc+0x6e>
 8006df0:	2221      	movs	r2, #33	@ 0x21
 8006df2:	2104      	movs	r1, #4
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 fd87 	bl	8007908 <_calloc_r>
 8006dfa:	69e3      	ldr	r3, [r4, #28]
 8006dfc:	60f0      	str	r0, [r6, #12]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e4      	bne.n	8006dce <_Balloc+0x2e>
 8006e04:	2000      	movs	r0, #0
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	6802      	ldr	r2, [r0, #0]
 8006e0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e14:	e7f7      	b.n	8006e06 <_Balloc+0x66>
 8006e16:	bf00      	nop
 8006e18:	08008741 	.word	0x08008741
 8006e1c:	080087c1 	.word	0x080087c1

08006e20 <_Bfree>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	69c6      	ldr	r6, [r0, #28]
 8006e24:	4605      	mov	r5, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	b976      	cbnz	r6, 8006e48 <_Bfree+0x28>
 8006e2a:	2010      	movs	r0, #16
 8006e2c:	f7ff ff02 	bl	8006c34 <malloc>
 8006e30:	4602      	mov	r2, r0
 8006e32:	61e8      	str	r0, [r5, #28]
 8006e34:	b920      	cbnz	r0, 8006e40 <_Bfree+0x20>
 8006e36:	4b09      	ldr	r3, [pc, #36]	@ (8006e5c <_Bfree+0x3c>)
 8006e38:	4809      	ldr	r0, [pc, #36]	@ (8006e60 <_Bfree+0x40>)
 8006e3a:	218f      	movs	r1, #143	@ 0x8f
 8006e3c:	f000 fd46 	bl	80078cc <__assert_func>
 8006e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e44:	6006      	str	r6, [r0, #0]
 8006e46:	60c6      	str	r6, [r0, #12]
 8006e48:	b13c      	cbz	r4, 8006e5a <_Bfree+0x3a>
 8006e4a:	69eb      	ldr	r3, [r5, #28]
 8006e4c:	6862      	ldr	r2, [r4, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e54:	6021      	str	r1, [r4, #0]
 8006e56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	08008741 	.word	0x08008741
 8006e60:	080087c1 	.word	0x080087c1

08006e64 <__multadd>:
 8006e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e68:	690d      	ldr	r5, [r1, #16]
 8006e6a:	4607      	mov	r7, r0
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	461e      	mov	r6, r3
 8006e70:	f101 0c14 	add.w	ip, r1, #20
 8006e74:	2000      	movs	r0, #0
 8006e76:	f8dc 3000 	ldr.w	r3, [ip]
 8006e7a:	b299      	uxth	r1, r3
 8006e7c:	fb02 6101 	mla	r1, r2, r1, r6
 8006e80:	0c1e      	lsrs	r6, r3, #16
 8006e82:	0c0b      	lsrs	r3, r1, #16
 8006e84:	fb02 3306 	mla	r3, r2, r6, r3
 8006e88:	b289      	uxth	r1, r1
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e90:	4285      	cmp	r5, r0
 8006e92:	f84c 1b04 	str.w	r1, [ip], #4
 8006e96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e9a:	dcec      	bgt.n	8006e76 <__multadd+0x12>
 8006e9c:	b30e      	cbz	r6, 8006ee2 <__multadd+0x7e>
 8006e9e:	68a3      	ldr	r3, [r4, #8]
 8006ea0:	42ab      	cmp	r3, r5
 8006ea2:	dc19      	bgt.n	8006ed8 <__multadd+0x74>
 8006ea4:	6861      	ldr	r1, [r4, #4]
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	3101      	adds	r1, #1
 8006eaa:	f7ff ff79 	bl	8006da0 <_Balloc>
 8006eae:	4680      	mov	r8, r0
 8006eb0:	b928      	cbnz	r0, 8006ebe <__multadd+0x5a>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee8 <__multadd+0x84>)
 8006eb6:	480d      	ldr	r0, [pc, #52]	@ (8006eec <__multadd+0x88>)
 8006eb8:	21ba      	movs	r1, #186	@ 0xba
 8006eba:	f000 fd07 	bl	80078cc <__assert_func>
 8006ebe:	6922      	ldr	r2, [r4, #16]
 8006ec0:	3202      	adds	r2, #2
 8006ec2:	f104 010c 	add.w	r1, r4, #12
 8006ec6:	0092      	lsls	r2, r2, #2
 8006ec8:	300c      	adds	r0, #12
 8006eca:	f7ff f80c 	bl	8005ee6 <memcpy>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f7ff ffa5 	bl	8006e20 <_Bfree>
 8006ed6:	4644      	mov	r4, r8
 8006ed8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006edc:	3501      	adds	r5, #1
 8006ede:	615e      	str	r6, [r3, #20]
 8006ee0:	6125      	str	r5, [r4, #16]
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee8:	080087b0 	.word	0x080087b0
 8006eec:	080087c1 	.word	0x080087c1

08006ef0 <__hi0bits>:
 8006ef0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	bf36      	itet	cc
 8006ef8:	0403      	lslcc	r3, r0, #16
 8006efa:	2000      	movcs	r0, #0
 8006efc:	2010      	movcc	r0, #16
 8006efe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f02:	bf3c      	itt	cc
 8006f04:	021b      	lslcc	r3, r3, #8
 8006f06:	3008      	addcc	r0, #8
 8006f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f0c:	bf3c      	itt	cc
 8006f0e:	011b      	lslcc	r3, r3, #4
 8006f10:	3004      	addcc	r0, #4
 8006f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f16:	bf3c      	itt	cc
 8006f18:	009b      	lslcc	r3, r3, #2
 8006f1a:	3002      	addcc	r0, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	db05      	blt.n	8006f2c <__hi0bits+0x3c>
 8006f20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006f24:	f100 0001 	add.w	r0, r0, #1
 8006f28:	bf08      	it	eq
 8006f2a:	2020      	moveq	r0, #32
 8006f2c:	4770      	bx	lr

08006f2e <__lo0bits>:
 8006f2e:	6803      	ldr	r3, [r0, #0]
 8006f30:	4602      	mov	r2, r0
 8006f32:	f013 0007 	ands.w	r0, r3, #7
 8006f36:	d00b      	beq.n	8006f50 <__lo0bits+0x22>
 8006f38:	07d9      	lsls	r1, r3, #31
 8006f3a:	d421      	bmi.n	8006f80 <__lo0bits+0x52>
 8006f3c:	0798      	lsls	r0, r3, #30
 8006f3e:	bf49      	itett	mi
 8006f40:	085b      	lsrmi	r3, r3, #1
 8006f42:	089b      	lsrpl	r3, r3, #2
 8006f44:	2001      	movmi	r0, #1
 8006f46:	6013      	strmi	r3, [r2, #0]
 8006f48:	bf5c      	itt	pl
 8006f4a:	6013      	strpl	r3, [r2, #0]
 8006f4c:	2002      	movpl	r0, #2
 8006f4e:	4770      	bx	lr
 8006f50:	b299      	uxth	r1, r3
 8006f52:	b909      	cbnz	r1, 8006f58 <__lo0bits+0x2a>
 8006f54:	0c1b      	lsrs	r3, r3, #16
 8006f56:	2010      	movs	r0, #16
 8006f58:	b2d9      	uxtb	r1, r3
 8006f5a:	b909      	cbnz	r1, 8006f60 <__lo0bits+0x32>
 8006f5c:	3008      	adds	r0, #8
 8006f5e:	0a1b      	lsrs	r3, r3, #8
 8006f60:	0719      	lsls	r1, r3, #28
 8006f62:	bf04      	itt	eq
 8006f64:	091b      	lsreq	r3, r3, #4
 8006f66:	3004      	addeq	r0, #4
 8006f68:	0799      	lsls	r1, r3, #30
 8006f6a:	bf04      	itt	eq
 8006f6c:	089b      	lsreq	r3, r3, #2
 8006f6e:	3002      	addeq	r0, #2
 8006f70:	07d9      	lsls	r1, r3, #31
 8006f72:	d403      	bmi.n	8006f7c <__lo0bits+0x4e>
 8006f74:	085b      	lsrs	r3, r3, #1
 8006f76:	f100 0001 	add.w	r0, r0, #1
 8006f7a:	d003      	beq.n	8006f84 <__lo0bits+0x56>
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	4770      	bx	lr
 8006f80:	2000      	movs	r0, #0
 8006f82:	4770      	bx	lr
 8006f84:	2020      	movs	r0, #32
 8006f86:	4770      	bx	lr

08006f88 <__i2b>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	f7ff ff07 	bl	8006da0 <_Balloc>
 8006f92:	4602      	mov	r2, r0
 8006f94:	b928      	cbnz	r0, 8006fa2 <__i2b+0x1a>
 8006f96:	4b05      	ldr	r3, [pc, #20]	@ (8006fac <__i2b+0x24>)
 8006f98:	4805      	ldr	r0, [pc, #20]	@ (8006fb0 <__i2b+0x28>)
 8006f9a:	f240 1145 	movw	r1, #325	@ 0x145
 8006f9e:	f000 fc95 	bl	80078cc <__assert_func>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	6144      	str	r4, [r0, #20]
 8006fa6:	6103      	str	r3, [r0, #16]
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	bf00      	nop
 8006fac:	080087b0 	.word	0x080087b0
 8006fb0:	080087c1 	.word	0x080087c1

08006fb4 <__multiply>:
 8006fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb8:	4614      	mov	r4, r2
 8006fba:	690a      	ldr	r2, [r1, #16]
 8006fbc:	6923      	ldr	r3, [r4, #16]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	bfa8      	it	ge
 8006fc2:	4623      	movge	r3, r4
 8006fc4:	460f      	mov	r7, r1
 8006fc6:	bfa4      	itt	ge
 8006fc8:	460c      	movge	r4, r1
 8006fca:	461f      	movge	r7, r3
 8006fcc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006fd0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006fd4:	68a3      	ldr	r3, [r4, #8]
 8006fd6:	6861      	ldr	r1, [r4, #4]
 8006fd8:	eb0a 0609 	add.w	r6, sl, r9
 8006fdc:	42b3      	cmp	r3, r6
 8006fde:	b085      	sub	sp, #20
 8006fe0:	bfb8      	it	lt
 8006fe2:	3101      	addlt	r1, #1
 8006fe4:	f7ff fedc 	bl	8006da0 <_Balloc>
 8006fe8:	b930      	cbnz	r0, 8006ff8 <__multiply+0x44>
 8006fea:	4602      	mov	r2, r0
 8006fec:	4b44      	ldr	r3, [pc, #272]	@ (8007100 <__multiply+0x14c>)
 8006fee:	4845      	ldr	r0, [pc, #276]	@ (8007104 <__multiply+0x150>)
 8006ff0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ff4:	f000 fc6a 	bl	80078cc <__assert_func>
 8006ff8:	f100 0514 	add.w	r5, r0, #20
 8006ffc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007000:	462b      	mov	r3, r5
 8007002:	2200      	movs	r2, #0
 8007004:	4543      	cmp	r3, r8
 8007006:	d321      	bcc.n	800704c <__multiply+0x98>
 8007008:	f107 0114 	add.w	r1, r7, #20
 800700c:	f104 0214 	add.w	r2, r4, #20
 8007010:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007014:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007018:	9302      	str	r3, [sp, #8]
 800701a:	1b13      	subs	r3, r2, r4
 800701c:	3b15      	subs	r3, #21
 800701e:	f023 0303 	bic.w	r3, r3, #3
 8007022:	3304      	adds	r3, #4
 8007024:	f104 0715 	add.w	r7, r4, #21
 8007028:	42ba      	cmp	r2, r7
 800702a:	bf38      	it	cc
 800702c:	2304      	movcc	r3, #4
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	9103      	str	r1, [sp, #12]
 8007034:	428b      	cmp	r3, r1
 8007036:	d80c      	bhi.n	8007052 <__multiply+0x9e>
 8007038:	2e00      	cmp	r6, #0
 800703a:	dd03      	ble.n	8007044 <__multiply+0x90>
 800703c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007040:	2b00      	cmp	r3, #0
 8007042:	d05b      	beq.n	80070fc <__multiply+0x148>
 8007044:	6106      	str	r6, [r0, #16]
 8007046:	b005      	add	sp, #20
 8007048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704c:	f843 2b04 	str.w	r2, [r3], #4
 8007050:	e7d8      	b.n	8007004 <__multiply+0x50>
 8007052:	f8b1 a000 	ldrh.w	sl, [r1]
 8007056:	f1ba 0f00 	cmp.w	sl, #0
 800705a:	d024      	beq.n	80070a6 <__multiply+0xf2>
 800705c:	f104 0e14 	add.w	lr, r4, #20
 8007060:	46a9      	mov	r9, r5
 8007062:	f04f 0c00 	mov.w	ip, #0
 8007066:	f85e 7b04 	ldr.w	r7, [lr], #4
 800706a:	f8d9 3000 	ldr.w	r3, [r9]
 800706e:	fa1f fb87 	uxth.w	fp, r7
 8007072:	b29b      	uxth	r3, r3
 8007074:	fb0a 330b 	mla	r3, sl, fp, r3
 8007078:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800707c:	f8d9 7000 	ldr.w	r7, [r9]
 8007080:	4463      	add	r3, ip
 8007082:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007086:	fb0a c70b 	mla	r7, sl, fp, ip
 800708a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800708e:	b29b      	uxth	r3, r3
 8007090:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007094:	4572      	cmp	r2, lr
 8007096:	f849 3b04 	str.w	r3, [r9], #4
 800709a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800709e:	d8e2      	bhi.n	8007066 <__multiply+0xb2>
 80070a0:	9b01      	ldr	r3, [sp, #4]
 80070a2:	f845 c003 	str.w	ip, [r5, r3]
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80070ac:	3104      	adds	r1, #4
 80070ae:	f1b9 0f00 	cmp.w	r9, #0
 80070b2:	d021      	beq.n	80070f8 <__multiply+0x144>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	f104 0c14 	add.w	ip, r4, #20
 80070ba:	46ae      	mov	lr, r5
 80070bc:	f04f 0a00 	mov.w	sl, #0
 80070c0:	f8bc b000 	ldrh.w	fp, [ip]
 80070c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80070c8:	fb09 770b 	mla	r7, r9, fp, r7
 80070cc:	4457      	add	r7, sl
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80070d4:	f84e 3b04 	str.w	r3, [lr], #4
 80070d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070e0:	f8be 3000 	ldrh.w	r3, [lr]
 80070e4:	fb09 330a 	mla	r3, r9, sl, r3
 80070e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80070ec:	4562      	cmp	r2, ip
 80070ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070f2:	d8e5      	bhi.n	80070c0 <__multiply+0x10c>
 80070f4:	9f01      	ldr	r7, [sp, #4]
 80070f6:	51eb      	str	r3, [r5, r7]
 80070f8:	3504      	adds	r5, #4
 80070fa:	e799      	b.n	8007030 <__multiply+0x7c>
 80070fc:	3e01      	subs	r6, #1
 80070fe:	e79b      	b.n	8007038 <__multiply+0x84>
 8007100:	080087b0 	.word	0x080087b0
 8007104:	080087c1 	.word	0x080087c1

08007108 <__pow5mult>:
 8007108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800710c:	4615      	mov	r5, r2
 800710e:	f012 0203 	ands.w	r2, r2, #3
 8007112:	4607      	mov	r7, r0
 8007114:	460e      	mov	r6, r1
 8007116:	d007      	beq.n	8007128 <__pow5mult+0x20>
 8007118:	4c25      	ldr	r4, [pc, #148]	@ (80071b0 <__pow5mult+0xa8>)
 800711a:	3a01      	subs	r2, #1
 800711c:	2300      	movs	r3, #0
 800711e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007122:	f7ff fe9f 	bl	8006e64 <__multadd>
 8007126:	4606      	mov	r6, r0
 8007128:	10ad      	asrs	r5, r5, #2
 800712a:	d03d      	beq.n	80071a8 <__pow5mult+0xa0>
 800712c:	69fc      	ldr	r4, [r7, #28]
 800712e:	b97c      	cbnz	r4, 8007150 <__pow5mult+0x48>
 8007130:	2010      	movs	r0, #16
 8007132:	f7ff fd7f 	bl	8006c34 <malloc>
 8007136:	4602      	mov	r2, r0
 8007138:	61f8      	str	r0, [r7, #28]
 800713a:	b928      	cbnz	r0, 8007148 <__pow5mult+0x40>
 800713c:	4b1d      	ldr	r3, [pc, #116]	@ (80071b4 <__pow5mult+0xac>)
 800713e:	481e      	ldr	r0, [pc, #120]	@ (80071b8 <__pow5mult+0xb0>)
 8007140:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007144:	f000 fbc2 	bl	80078cc <__assert_func>
 8007148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800714c:	6004      	str	r4, [r0, #0]
 800714e:	60c4      	str	r4, [r0, #12]
 8007150:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007158:	b94c      	cbnz	r4, 800716e <__pow5mult+0x66>
 800715a:	f240 2171 	movw	r1, #625	@ 0x271
 800715e:	4638      	mov	r0, r7
 8007160:	f7ff ff12 	bl	8006f88 <__i2b>
 8007164:	2300      	movs	r3, #0
 8007166:	f8c8 0008 	str.w	r0, [r8, #8]
 800716a:	4604      	mov	r4, r0
 800716c:	6003      	str	r3, [r0, #0]
 800716e:	f04f 0900 	mov.w	r9, #0
 8007172:	07eb      	lsls	r3, r5, #31
 8007174:	d50a      	bpl.n	800718c <__pow5mult+0x84>
 8007176:	4631      	mov	r1, r6
 8007178:	4622      	mov	r2, r4
 800717a:	4638      	mov	r0, r7
 800717c:	f7ff ff1a 	bl	8006fb4 <__multiply>
 8007180:	4631      	mov	r1, r6
 8007182:	4680      	mov	r8, r0
 8007184:	4638      	mov	r0, r7
 8007186:	f7ff fe4b 	bl	8006e20 <_Bfree>
 800718a:	4646      	mov	r6, r8
 800718c:	106d      	asrs	r5, r5, #1
 800718e:	d00b      	beq.n	80071a8 <__pow5mult+0xa0>
 8007190:	6820      	ldr	r0, [r4, #0]
 8007192:	b938      	cbnz	r0, 80071a4 <__pow5mult+0x9c>
 8007194:	4622      	mov	r2, r4
 8007196:	4621      	mov	r1, r4
 8007198:	4638      	mov	r0, r7
 800719a:	f7ff ff0b 	bl	8006fb4 <__multiply>
 800719e:	6020      	str	r0, [r4, #0]
 80071a0:	f8c0 9000 	str.w	r9, [r0]
 80071a4:	4604      	mov	r4, r0
 80071a6:	e7e4      	b.n	8007172 <__pow5mult+0x6a>
 80071a8:	4630      	mov	r0, r6
 80071aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ae:	bf00      	nop
 80071b0:	0800881c 	.word	0x0800881c
 80071b4:	08008741 	.word	0x08008741
 80071b8:	080087c1 	.word	0x080087c1

080071bc <__lshift>:
 80071bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c0:	460c      	mov	r4, r1
 80071c2:	6849      	ldr	r1, [r1, #4]
 80071c4:	6923      	ldr	r3, [r4, #16]
 80071c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071ca:	68a3      	ldr	r3, [r4, #8]
 80071cc:	4607      	mov	r7, r0
 80071ce:	4691      	mov	r9, r2
 80071d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071d4:	f108 0601 	add.w	r6, r8, #1
 80071d8:	42b3      	cmp	r3, r6
 80071da:	db0b      	blt.n	80071f4 <__lshift+0x38>
 80071dc:	4638      	mov	r0, r7
 80071de:	f7ff fddf 	bl	8006da0 <_Balloc>
 80071e2:	4605      	mov	r5, r0
 80071e4:	b948      	cbnz	r0, 80071fa <__lshift+0x3e>
 80071e6:	4602      	mov	r2, r0
 80071e8:	4b28      	ldr	r3, [pc, #160]	@ (800728c <__lshift+0xd0>)
 80071ea:	4829      	ldr	r0, [pc, #164]	@ (8007290 <__lshift+0xd4>)
 80071ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80071f0:	f000 fb6c 	bl	80078cc <__assert_func>
 80071f4:	3101      	adds	r1, #1
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	e7ee      	b.n	80071d8 <__lshift+0x1c>
 80071fa:	2300      	movs	r3, #0
 80071fc:	f100 0114 	add.w	r1, r0, #20
 8007200:	f100 0210 	add.w	r2, r0, #16
 8007204:	4618      	mov	r0, r3
 8007206:	4553      	cmp	r3, sl
 8007208:	db33      	blt.n	8007272 <__lshift+0xb6>
 800720a:	6920      	ldr	r0, [r4, #16]
 800720c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007210:	f104 0314 	add.w	r3, r4, #20
 8007214:	f019 091f 	ands.w	r9, r9, #31
 8007218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800721c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007220:	d02b      	beq.n	800727a <__lshift+0xbe>
 8007222:	f1c9 0e20 	rsb	lr, r9, #32
 8007226:	468a      	mov	sl, r1
 8007228:	2200      	movs	r2, #0
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	fa00 f009 	lsl.w	r0, r0, r9
 8007230:	4310      	orrs	r0, r2
 8007232:	f84a 0b04 	str.w	r0, [sl], #4
 8007236:	f853 2b04 	ldr.w	r2, [r3], #4
 800723a:	459c      	cmp	ip, r3
 800723c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007240:	d8f3      	bhi.n	800722a <__lshift+0x6e>
 8007242:	ebac 0304 	sub.w	r3, ip, r4
 8007246:	3b15      	subs	r3, #21
 8007248:	f023 0303 	bic.w	r3, r3, #3
 800724c:	3304      	adds	r3, #4
 800724e:	f104 0015 	add.w	r0, r4, #21
 8007252:	4584      	cmp	ip, r0
 8007254:	bf38      	it	cc
 8007256:	2304      	movcc	r3, #4
 8007258:	50ca      	str	r2, [r1, r3]
 800725a:	b10a      	cbz	r2, 8007260 <__lshift+0xa4>
 800725c:	f108 0602 	add.w	r6, r8, #2
 8007260:	3e01      	subs	r6, #1
 8007262:	4638      	mov	r0, r7
 8007264:	612e      	str	r6, [r5, #16]
 8007266:	4621      	mov	r1, r4
 8007268:	f7ff fdda 	bl	8006e20 <_Bfree>
 800726c:	4628      	mov	r0, r5
 800726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007272:	f842 0f04 	str.w	r0, [r2, #4]!
 8007276:	3301      	adds	r3, #1
 8007278:	e7c5      	b.n	8007206 <__lshift+0x4a>
 800727a:	3904      	subs	r1, #4
 800727c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007280:	f841 2f04 	str.w	r2, [r1, #4]!
 8007284:	459c      	cmp	ip, r3
 8007286:	d8f9      	bhi.n	800727c <__lshift+0xc0>
 8007288:	e7ea      	b.n	8007260 <__lshift+0xa4>
 800728a:	bf00      	nop
 800728c:	080087b0 	.word	0x080087b0
 8007290:	080087c1 	.word	0x080087c1

08007294 <__mcmp>:
 8007294:	690a      	ldr	r2, [r1, #16]
 8007296:	4603      	mov	r3, r0
 8007298:	6900      	ldr	r0, [r0, #16]
 800729a:	1a80      	subs	r0, r0, r2
 800729c:	b530      	push	{r4, r5, lr}
 800729e:	d10e      	bne.n	80072be <__mcmp+0x2a>
 80072a0:	3314      	adds	r3, #20
 80072a2:	3114      	adds	r1, #20
 80072a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80072a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80072ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072b4:	4295      	cmp	r5, r2
 80072b6:	d003      	beq.n	80072c0 <__mcmp+0x2c>
 80072b8:	d205      	bcs.n	80072c6 <__mcmp+0x32>
 80072ba:	f04f 30ff 	mov.w	r0, #4294967295
 80072be:	bd30      	pop	{r4, r5, pc}
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	d3f3      	bcc.n	80072ac <__mcmp+0x18>
 80072c4:	e7fb      	b.n	80072be <__mcmp+0x2a>
 80072c6:	2001      	movs	r0, #1
 80072c8:	e7f9      	b.n	80072be <__mcmp+0x2a>
	...

080072cc <__mdiff>:
 80072cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d0:	4689      	mov	r9, r1
 80072d2:	4606      	mov	r6, r0
 80072d4:	4611      	mov	r1, r2
 80072d6:	4648      	mov	r0, r9
 80072d8:	4614      	mov	r4, r2
 80072da:	f7ff ffdb 	bl	8007294 <__mcmp>
 80072de:	1e05      	subs	r5, r0, #0
 80072e0:	d112      	bne.n	8007308 <__mdiff+0x3c>
 80072e2:	4629      	mov	r1, r5
 80072e4:	4630      	mov	r0, r6
 80072e6:	f7ff fd5b 	bl	8006da0 <_Balloc>
 80072ea:	4602      	mov	r2, r0
 80072ec:	b928      	cbnz	r0, 80072fa <__mdiff+0x2e>
 80072ee:	4b3f      	ldr	r3, [pc, #252]	@ (80073ec <__mdiff+0x120>)
 80072f0:	f240 2137 	movw	r1, #567	@ 0x237
 80072f4:	483e      	ldr	r0, [pc, #248]	@ (80073f0 <__mdiff+0x124>)
 80072f6:	f000 fae9 	bl	80078cc <__assert_func>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007300:	4610      	mov	r0, r2
 8007302:	b003      	add	sp, #12
 8007304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007308:	bfbc      	itt	lt
 800730a:	464b      	movlt	r3, r9
 800730c:	46a1      	movlt	r9, r4
 800730e:	4630      	mov	r0, r6
 8007310:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007314:	bfba      	itte	lt
 8007316:	461c      	movlt	r4, r3
 8007318:	2501      	movlt	r5, #1
 800731a:	2500      	movge	r5, #0
 800731c:	f7ff fd40 	bl	8006da0 <_Balloc>
 8007320:	4602      	mov	r2, r0
 8007322:	b918      	cbnz	r0, 800732c <__mdiff+0x60>
 8007324:	4b31      	ldr	r3, [pc, #196]	@ (80073ec <__mdiff+0x120>)
 8007326:	f240 2145 	movw	r1, #581	@ 0x245
 800732a:	e7e3      	b.n	80072f4 <__mdiff+0x28>
 800732c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007330:	6926      	ldr	r6, [r4, #16]
 8007332:	60c5      	str	r5, [r0, #12]
 8007334:	f109 0310 	add.w	r3, r9, #16
 8007338:	f109 0514 	add.w	r5, r9, #20
 800733c:	f104 0e14 	add.w	lr, r4, #20
 8007340:	f100 0b14 	add.w	fp, r0, #20
 8007344:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007348:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	46d9      	mov	r9, fp
 8007350:	f04f 0c00 	mov.w	ip, #0
 8007354:	9b01      	ldr	r3, [sp, #4]
 8007356:	f85e 0b04 	ldr.w	r0, [lr], #4
 800735a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	fa1f f38a 	uxth.w	r3, sl
 8007364:	4619      	mov	r1, r3
 8007366:	b283      	uxth	r3, r0
 8007368:	1acb      	subs	r3, r1, r3
 800736a:	0c00      	lsrs	r0, r0, #16
 800736c:	4463      	add	r3, ip
 800736e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007372:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007376:	b29b      	uxth	r3, r3
 8007378:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800737c:	4576      	cmp	r6, lr
 800737e:	f849 3b04 	str.w	r3, [r9], #4
 8007382:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007386:	d8e5      	bhi.n	8007354 <__mdiff+0x88>
 8007388:	1b33      	subs	r3, r6, r4
 800738a:	3b15      	subs	r3, #21
 800738c:	f023 0303 	bic.w	r3, r3, #3
 8007390:	3415      	adds	r4, #21
 8007392:	3304      	adds	r3, #4
 8007394:	42a6      	cmp	r6, r4
 8007396:	bf38      	it	cc
 8007398:	2304      	movcc	r3, #4
 800739a:	441d      	add	r5, r3
 800739c:	445b      	add	r3, fp
 800739e:	461e      	mov	r6, r3
 80073a0:	462c      	mov	r4, r5
 80073a2:	4544      	cmp	r4, r8
 80073a4:	d30e      	bcc.n	80073c4 <__mdiff+0xf8>
 80073a6:	f108 0103 	add.w	r1, r8, #3
 80073aa:	1b49      	subs	r1, r1, r5
 80073ac:	f021 0103 	bic.w	r1, r1, #3
 80073b0:	3d03      	subs	r5, #3
 80073b2:	45a8      	cmp	r8, r5
 80073b4:	bf38      	it	cc
 80073b6:	2100      	movcc	r1, #0
 80073b8:	440b      	add	r3, r1
 80073ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073be:	b191      	cbz	r1, 80073e6 <__mdiff+0x11a>
 80073c0:	6117      	str	r7, [r2, #16]
 80073c2:	e79d      	b.n	8007300 <__mdiff+0x34>
 80073c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80073c8:	46e6      	mov	lr, ip
 80073ca:	0c08      	lsrs	r0, r1, #16
 80073cc:	fa1c fc81 	uxtah	ip, ip, r1
 80073d0:	4471      	add	r1, lr
 80073d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80073d6:	b289      	uxth	r1, r1
 80073d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073dc:	f846 1b04 	str.w	r1, [r6], #4
 80073e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073e4:	e7dd      	b.n	80073a2 <__mdiff+0xd6>
 80073e6:	3f01      	subs	r7, #1
 80073e8:	e7e7      	b.n	80073ba <__mdiff+0xee>
 80073ea:	bf00      	nop
 80073ec:	080087b0 	.word	0x080087b0
 80073f0:	080087c1 	.word	0x080087c1

080073f4 <__d2b>:
 80073f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073f8:	460f      	mov	r7, r1
 80073fa:	2101      	movs	r1, #1
 80073fc:	ec59 8b10 	vmov	r8, r9, d0
 8007400:	4616      	mov	r6, r2
 8007402:	f7ff fccd 	bl	8006da0 <_Balloc>
 8007406:	4604      	mov	r4, r0
 8007408:	b930      	cbnz	r0, 8007418 <__d2b+0x24>
 800740a:	4602      	mov	r2, r0
 800740c:	4b23      	ldr	r3, [pc, #140]	@ (800749c <__d2b+0xa8>)
 800740e:	4824      	ldr	r0, [pc, #144]	@ (80074a0 <__d2b+0xac>)
 8007410:	f240 310f 	movw	r1, #783	@ 0x30f
 8007414:	f000 fa5a 	bl	80078cc <__assert_func>
 8007418:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800741c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007420:	b10d      	cbz	r5, 8007426 <__d2b+0x32>
 8007422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	f1b8 0300 	subs.w	r3, r8, #0
 800742c:	d023      	beq.n	8007476 <__d2b+0x82>
 800742e:	4668      	mov	r0, sp
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	f7ff fd7c 	bl	8006f2e <__lo0bits>
 8007436:	e9dd 1200 	ldrd	r1, r2, [sp]
 800743a:	b1d0      	cbz	r0, 8007472 <__d2b+0x7e>
 800743c:	f1c0 0320 	rsb	r3, r0, #32
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	430b      	orrs	r3, r1
 8007446:	40c2      	lsrs	r2, r0
 8007448:	6163      	str	r3, [r4, #20]
 800744a:	9201      	str	r2, [sp, #4]
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	61a3      	str	r3, [r4, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	bf0c      	ite	eq
 8007454:	2201      	moveq	r2, #1
 8007456:	2202      	movne	r2, #2
 8007458:	6122      	str	r2, [r4, #16]
 800745a:	b1a5      	cbz	r5, 8007486 <__d2b+0x92>
 800745c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007460:	4405      	add	r5, r0
 8007462:	603d      	str	r5, [r7, #0]
 8007464:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007468:	6030      	str	r0, [r6, #0]
 800746a:	4620      	mov	r0, r4
 800746c:	b003      	add	sp, #12
 800746e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007472:	6161      	str	r1, [r4, #20]
 8007474:	e7ea      	b.n	800744c <__d2b+0x58>
 8007476:	a801      	add	r0, sp, #4
 8007478:	f7ff fd59 	bl	8006f2e <__lo0bits>
 800747c:	9b01      	ldr	r3, [sp, #4]
 800747e:	6163      	str	r3, [r4, #20]
 8007480:	3020      	adds	r0, #32
 8007482:	2201      	movs	r2, #1
 8007484:	e7e8      	b.n	8007458 <__d2b+0x64>
 8007486:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800748a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800748e:	6038      	str	r0, [r7, #0]
 8007490:	6918      	ldr	r0, [r3, #16]
 8007492:	f7ff fd2d 	bl	8006ef0 <__hi0bits>
 8007496:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800749a:	e7e5      	b.n	8007468 <__d2b+0x74>
 800749c:	080087b0 	.word	0x080087b0
 80074a0:	080087c1 	.word	0x080087c1

080074a4 <__ssputs_r>:
 80074a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	688e      	ldr	r6, [r1, #8]
 80074aa:	461f      	mov	r7, r3
 80074ac:	42be      	cmp	r6, r7
 80074ae:	680b      	ldr	r3, [r1, #0]
 80074b0:	4682      	mov	sl, r0
 80074b2:	460c      	mov	r4, r1
 80074b4:	4690      	mov	r8, r2
 80074b6:	d82d      	bhi.n	8007514 <__ssputs_r+0x70>
 80074b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074c0:	d026      	beq.n	8007510 <__ssputs_r+0x6c>
 80074c2:	6965      	ldr	r5, [r4, #20]
 80074c4:	6909      	ldr	r1, [r1, #16]
 80074c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074ca:	eba3 0901 	sub.w	r9, r3, r1
 80074ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074d2:	1c7b      	adds	r3, r7, #1
 80074d4:	444b      	add	r3, r9
 80074d6:	106d      	asrs	r5, r5, #1
 80074d8:	429d      	cmp	r5, r3
 80074da:	bf38      	it	cc
 80074dc:	461d      	movcc	r5, r3
 80074de:	0553      	lsls	r3, r2, #21
 80074e0:	d527      	bpl.n	8007532 <__ssputs_r+0x8e>
 80074e2:	4629      	mov	r1, r5
 80074e4:	f7ff fbd0 	bl	8006c88 <_malloc_r>
 80074e8:	4606      	mov	r6, r0
 80074ea:	b360      	cbz	r0, 8007546 <__ssputs_r+0xa2>
 80074ec:	6921      	ldr	r1, [r4, #16]
 80074ee:	464a      	mov	r2, r9
 80074f0:	f7fe fcf9 	bl	8005ee6 <memcpy>
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80074fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074fe:	81a3      	strh	r3, [r4, #12]
 8007500:	6126      	str	r6, [r4, #16]
 8007502:	6165      	str	r5, [r4, #20]
 8007504:	444e      	add	r6, r9
 8007506:	eba5 0509 	sub.w	r5, r5, r9
 800750a:	6026      	str	r6, [r4, #0]
 800750c:	60a5      	str	r5, [r4, #8]
 800750e:	463e      	mov	r6, r7
 8007510:	42be      	cmp	r6, r7
 8007512:	d900      	bls.n	8007516 <__ssputs_r+0x72>
 8007514:	463e      	mov	r6, r7
 8007516:	6820      	ldr	r0, [r4, #0]
 8007518:	4632      	mov	r2, r6
 800751a:	4641      	mov	r1, r8
 800751c:	f7fe fc49 	bl	8005db2 <memmove>
 8007520:	68a3      	ldr	r3, [r4, #8]
 8007522:	1b9b      	subs	r3, r3, r6
 8007524:	60a3      	str	r3, [r4, #8]
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	4433      	add	r3, r6
 800752a:	6023      	str	r3, [r4, #0]
 800752c:	2000      	movs	r0, #0
 800752e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007532:	462a      	mov	r2, r5
 8007534:	f000 fa0e 	bl	8007954 <_realloc_r>
 8007538:	4606      	mov	r6, r0
 800753a:	2800      	cmp	r0, #0
 800753c:	d1e0      	bne.n	8007500 <__ssputs_r+0x5c>
 800753e:	6921      	ldr	r1, [r4, #16]
 8007540:	4650      	mov	r0, sl
 8007542:	f7ff fb2d 	bl	8006ba0 <_free_r>
 8007546:	230c      	movs	r3, #12
 8007548:	f8ca 3000 	str.w	r3, [sl]
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	e7e9      	b.n	800752e <__ssputs_r+0x8a>
	...

0800755c <_svfiprintf_r>:
 800755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	4698      	mov	r8, r3
 8007562:	898b      	ldrh	r3, [r1, #12]
 8007564:	061b      	lsls	r3, r3, #24
 8007566:	b09d      	sub	sp, #116	@ 0x74
 8007568:	4607      	mov	r7, r0
 800756a:	460d      	mov	r5, r1
 800756c:	4614      	mov	r4, r2
 800756e:	d510      	bpl.n	8007592 <_svfiprintf_r+0x36>
 8007570:	690b      	ldr	r3, [r1, #16]
 8007572:	b973      	cbnz	r3, 8007592 <_svfiprintf_r+0x36>
 8007574:	2140      	movs	r1, #64	@ 0x40
 8007576:	f7ff fb87 	bl	8006c88 <_malloc_r>
 800757a:	6028      	str	r0, [r5, #0]
 800757c:	6128      	str	r0, [r5, #16]
 800757e:	b930      	cbnz	r0, 800758e <_svfiprintf_r+0x32>
 8007580:	230c      	movs	r3, #12
 8007582:	603b      	str	r3, [r7, #0]
 8007584:	f04f 30ff 	mov.w	r0, #4294967295
 8007588:	b01d      	add	sp, #116	@ 0x74
 800758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758e:	2340      	movs	r3, #64	@ 0x40
 8007590:	616b      	str	r3, [r5, #20]
 8007592:	2300      	movs	r3, #0
 8007594:	9309      	str	r3, [sp, #36]	@ 0x24
 8007596:	2320      	movs	r3, #32
 8007598:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800759c:	f8cd 800c 	str.w	r8, [sp, #12]
 80075a0:	2330      	movs	r3, #48	@ 0x30
 80075a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007740 <_svfiprintf_r+0x1e4>
 80075a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075aa:	f04f 0901 	mov.w	r9, #1
 80075ae:	4623      	mov	r3, r4
 80075b0:	469a      	mov	sl, r3
 80075b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b6:	b10a      	cbz	r2, 80075bc <_svfiprintf_r+0x60>
 80075b8:	2a25      	cmp	r2, #37	@ 0x25
 80075ba:	d1f9      	bne.n	80075b0 <_svfiprintf_r+0x54>
 80075bc:	ebba 0b04 	subs.w	fp, sl, r4
 80075c0:	d00b      	beq.n	80075da <_svfiprintf_r+0x7e>
 80075c2:	465b      	mov	r3, fp
 80075c4:	4622      	mov	r2, r4
 80075c6:	4629      	mov	r1, r5
 80075c8:	4638      	mov	r0, r7
 80075ca:	f7ff ff6b 	bl	80074a4 <__ssputs_r>
 80075ce:	3001      	adds	r0, #1
 80075d0:	f000 80a7 	beq.w	8007722 <_svfiprintf_r+0x1c6>
 80075d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075d6:	445a      	add	r2, fp
 80075d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80075da:	f89a 3000 	ldrb.w	r3, [sl]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 809f 	beq.w	8007722 <_svfiprintf_r+0x1c6>
 80075e4:	2300      	movs	r3, #0
 80075e6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ee:	f10a 0a01 	add.w	sl, sl, #1
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	9307      	str	r3, [sp, #28]
 80075f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80075fc:	4654      	mov	r4, sl
 80075fe:	2205      	movs	r2, #5
 8007600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007604:	484e      	ldr	r0, [pc, #312]	@ (8007740 <_svfiprintf_r+0x1e4>)
 8007606:	f7f8 fdeb 	bl	80001e0 <memchr>
 800760a:	9a04      	ldr	r2, [sp, #16]
 800760c:	b9d8      	cbnz	r0, 8007646 <_svfiprintf_r+0xea>
 800760e:	06d0      	lsls	r0, r2, #27
 8007610:	bf44      	itt	mi
 8007612:	2320      	movmi	r3, #32
 8007614:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007618:	0711      	lsls	r1, r2, #28
 800761a:	bf44      	itt	mi
 800761c:	232b      	movmi	r3, #43	@ 0x2b
 800761e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007622:	f89a 3000 	ldrb.w	r3, [sl]
 8007626:	2b2a      	cmp	r3, #42	@ 0x2a
 8007628:	d015      	beq.n	8007656 <_svfiprintf_r+0xfa>
 800762a:	9a07      	ldr	r2, [sp, #28]
 800762c:	4654      	mov	r4, sl
 800762e:	2000      	movs	r0, #0
 8007630:	f04f 0c0a 	mov.w	ip, #10
 8007634:	4621      	mov	r1, r4
 8007636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800763a:	3b30      	subs	r3, #48	@ 0x30
 800763c:	2b09      	cmp	r3, #9
 800763e:	d94b      	bls.n	80076d8 <_svfiprintf_r+0x17c>
 8007640:	b1b0      	cbz	r0, 8007670 <_svfiprintf_r+0x114>
 8007642:	9207      	str	r2, [sp, #28]
 8007644:	e014      	b.n	8007670 <_svfiprintf_r+0x114>
 8007646:	eba0 0308 	sub.w	r3, r0, r8
 800764a:	fa09 f303 	lsl.w	r3, r9, r3
 800764e:	4313      	orrs	r3, r2
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	46a2      	mov	sl, r4
 8007654:	e7d2      	b.n	80075fc <_svfiprintf_r+0xa0>
 8007656:	9b03      	ldr	r3, [sp, #12]
 8007658:	1d19      	adds	r1, r3, #4
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	9103      	str	r1, [sp, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	bfbb      	ittet	lt
 8007662:	425b      	neglt	r3, r3
 8007664:	f042 0202 	orrlt.w	r2, r2, #2
 8007668:	9307      	strge	r3, [sp, #28]
 800766a:	9307      	strlt	r3, [sp, #28]
 800766c:	bfb8      	it	lt
 800766e:	9204      	strlt	r2, [sp, #16]
 8007670:	7823      	ldrb	r3, [r4, #0]
 8007672:	2b2e      	cmp	r3, #46	@ 0x2e
 8007674:	d10a      	bne.n	800768c <_svfiprintf_r+0x130>
 8007676:	7863      	ldrb	r3, [r4, #1]
 8007678:	2b2a      	cmp	r3, #42	@ 0x2a
 800767a:	d132      	bne.n	80076e2 <_svfiprintf_r+0x186>
 800767c:	9b03      	ldr	r3, [sp, #12]
 800767e:	1d1a      	adds	r2, r3, #4
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	9203      	str	r2, [sp, #12]
 8007684:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007688:	3402      	adds	r4, #2
 800768a:	9305      	str	r3, [sp, #20]
 800768c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007750 <_svfiprintf_r+0x1f4>
 8007690:	7821      	ldrb	r1, [r4, #0]
 8007692:	2203      	movs	r2, #3
 8007694:	4650      	mov	r0, sl
 8007696:	f7f8 fda3 	bl	80001e0 <memchr>
 800769a:	b138      	cbz	r0, 80076ac <_svfiprintf_r+0x150>
 800769c:	9b04      	ldr	r3, [sp, #16]
 800769e:	eba0 000a 	sub.w	r0, r0, sl
 80076a2:	2240      	movs	r2, #64	@ 0x40
 80076a4:	4082      	lsls	r2, r0
 80076a6:	4313      	orrs	r3, r2
 80076a8:	3401      	adds	r4, #1
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b0:	4824      	ldr	r0, [pc, #144]	@ (8007744 <_svfiprintf_r+0x1e8>)
 80076b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076b6:	2206      	movs	r2, #6
 80076b8:	f7f8 fd92 	bl	80001e0 <memchr>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d036      	beq.n	800772e <_svfiprintf_r+0x1d2>
 80076c0:	4b21      	ldr	r3, [pc, #132]	@ (8007748 <_svfiprintf_r+0x1ec>)
 80076c2:	bb1b      	cbnz	r3, 800770c <_svfiprintf_r+0x1b0>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	3307      	adds	r3, #7
 80076c8:	f023 0307 	bic.w	r3, r3, #7
 80076cc:	3308      	adds	r3, #8
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d2:	4433      	add	r3, r6
 80076d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076d6:	e76a      	b.n	80075ae <_svfiprintf_r+0x52>
 80076d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80076dc:	460c      	mov	r4, r1
 80076de:	2001      	movs	r0, #1
 80076e0:	e7a8      	b.n	8007634 <_svfiprintf_r+0xd8>
 80076e2:	2300      	movs	r3, #0
 80076e4:	3401      	adds	r4, #1
 80076e6:	9305      	str	r3, [sp, #20]
 80076e8:	4619      	mov	r1, r3
 80076ea:	f04f 0c0a 	mov.w	ip, #10
 80076ee:	4620      	mov	r0, r4
 80076f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076f4:	3a30      	subs	r2, #48	@ 0x30
 80076f6:	2a09      	cmp	r2, #9
 80076f8:	d903      	bls.n	8007702 <_svfiprintf_r+0x1a6>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0c6      	beq.n	800768c <_svfiprintf_r+0x130>
 80076fe:	9105      	str	r1, [sp, #20]
 8007700:	e7c4      	b.n	800768c <_svfiprintf_r+0x130>
 8007702:	fb0c 2101 	mla	r1, ip, r1, r2
 8007706:	4604      	mov	r4, r0
 8007708:	2301      	movs	r3, #1
 800770a:	e7f0      	b.n	80076ee <_svfiprintf_r+0x192>
 800770c:	ab03      	add	r3, sp, #12
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	462a      	mov	r2, r5
 8007712:	4b0e      	ldr	r3, [pc, #56]	@ (800774c <_svfiprintf_r+0x1f0>)
 8007714:	a904      	add	r1, sp, #16
 8007716:	4638      	mov	r0, r7
 8007718:	f7fd fe5a 	bl	80053d0 <_printf_float>
 800771c:	1c42      	adds	r2, r0, #1
 800771e:	4606      	mov	r6, r0
 8007720:	d1d6      	bne.n	80076d0 <_svfiprintf_r+0x174>
 8007722:	89ab      	ldrh	r3, [r5, #12]
 8007724:	065b      	lsls	r3, r3, #25
 8007726:	f53f af2d 	bmi.w	8007584 <_svfiprintf_r+0x28>
 800772a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800772c:	e72c      	b.n	8007588 <_svfiprintf_r+0x2c>
 800772e:	ab03      	add	r3, sp, #12
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	462a      	mov	r2, r5
 8007734:	4b05      	ldr	r3, [pc, #20]	@ (800774c <_svfiprintf_r+0x1f0>)
 8007736:	a904      	add	r1, sp, #16
 8007738:	4638      	mov	r0, r7
 800773a:	f7fe f8e1 	bl	8005900 <_printf_i>
 800773e:	e7ed      	b.n	800771c <_svfiprintf_r+0x1c0>
 8007740:	08008918 	.word	0x08008918
 8007744:	08008922 	.word	0x08008922
 8007748:	080053d1 	.word	0x080053d1
 800774c:	080074a5 	.word	0x080074a5
 8007750:	0800891e 	.word	0x0800891e

08007754 <__sflush_r>:
 8007754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	0716      	lsls	r6, r2, #28
 800775e:	4605      	mov	r5, r0
 8007760:	460c      	mov	r4, r1
 8007762:	d454      	bmi.n	800780e <__sflush_r+0xba>
 8007764:	684b      	ldr	r3, [r1, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	dc02      	bgt.n	8007770 <__sflush_r+0x1c>
 800776a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	dd48      	ble.n	8007802 <__sflush_r+0xae>
 8007770:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007772:	2e00      	cmp	r6, #0
 8007774:	d045      	beq.n	8007802 <__sflush_r+0xae>
 8007776:	2300      	movs	r3, #0
 8007778:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800777c:	682f      	ldr	r7, [r5, #0]
 800777e:	6a21      	ldr	r1, [r4, #32]
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	d030      	beq.n	80077e6 <__sflush_r+0x92>
 8007784:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	0759      	lsls	r1, r3, #29
 800778a:	d505      	bpl.n	8007798 <__sflush_r+0x44>
 800778c:	6863      	ldr	r3, [r4, #4]
 800778e:	1ad2      	subs	r2, r2, r3
 8007790:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007792:	b10b      	cbz	r3, 8007798 <__sflush_r+0x44>
 8007794:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007796:	1ad2      	subs	r2, r2, r3
 8007798:	2300      	movs	r3, #0
 800779a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800779c:	6a21      	ldr	r1, [r4, #32]
 800779e:	4628      	mov	r0, r5
 80077a0:	47b0      	blx	r6
 80077a2:	1c43      	adds	r3, r0, #1
 80077a4:	89a3      	ldrh	r3, [r4, #12]
 80077a6:	d106      	bne.n	80077b6 <__sflush_r+0x62>
 80077a8:	6829      	ldr	r1, [r5, #0]
 80077aa:	291d      	cmp	r1, #29
 80077ac:	d82b      	bhi.n	8007806 <__sflush_r+0xb2>
 80077ae:	4a2a      	ldr	r2, [pc, #168]	@ (8007858 <__sflush_r+0x104>)
 80077b0:	410a      	asrs	r2, r1
 80077b2:	07d6      	lsls	r6, r2, #31
 80077b4:	d427      	bmi.n	8007806 <__sflush_r+0xb2>
 80077b6:	2200      	movs	r2, #0
 80077b8:	6062      	str	r2, [r4, #4]
 80077ba:	04d9      	lsls	r1, r3, #19
 80077bc:	6922      	ldr	r2, [r4, #16]
 80077be:	6022      	str	r2, [r4, #0]
 80077c0:	d504      	bpl.n	80077cc <__sflush_r+0x78>
 80077c2:	1c42      	adds	r2, r0, #1
 80077c4:	d101      	bne.n	80077ca <__sflush_r+0x76>
 80077c6:	682b      	ldr	r3, [r5, #0]
 80077c8:	b903      	cbnz	r3, 80077cc <__sflush_r+0x78>
 80077ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80077cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077ce:	602f      	str	r7, [r5, #0]
 80077d0:	b1b9      	cbz	r1, 8007802 <__sflush_r+0xae>
 80077d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077d6:	4299      	cmp	r1, r3
 80077d8:	d002      	beq.n	80077e0 <__sflush_r+0x8c>
 80077da:	4628      	mov	r0, r5
 80077dc:	f7ff f9e0 	bl	8006ba0 <_free_r>
 80077e0:	2300      	movs	r3, #0
 80077e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80077e4:	e00d      	b.n	8007802 <__sflush_r+0xae>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4628      	mov	r0, r5
 80077ea:	47b0      	blx	r6
 80077ec:	4602      	mov	r2, r0
 80077ee:	1c50      	adds	r0, r2, #1
 80077f0:	d1c9      	bne.n	8007786 <__sflush_r+0x32>
 80077f2:	682b      	ldr	r3, [r5, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0c6      	beq.n	8007786 <__sflush_r+0x32>
 80077f8:	2b1d      	cmp	r3, #29
 80077fa:	d001      	beq.n	8007800 <__sflush_r+0xac>
 80077fc:	2b16      	cmp	r3, #22
 80077fe:	d11e      	bne.n	800783e <__sflush_r+0xea>
 8007800:	602f      	str	r7, [r5, #0]
 8007802:	2000      	movs	r0, #0
 8007804:	e022      	b.n	800784c <__sflush_r+0xf8>
 8007806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800780a:	b21b      	sxth	r3, r3
 800780c:	e01b      	b.n	8007846 <__sflush_r+0xf2>
 800780e:	690f      	ldr	r7, [r1, #16]
 8007810:	2f00      	cmp	r7, #0
 8007812:	d0f6      	beq.n	8007802 <__sflush_r+0xae>
 8007814:	0793      	lsls	r3, r2, #30
 8007816:	680e      	ldr	r6, [r1, #0]
 8007818:	bf08      	it	eq
 800781a:	694b      	ldreq	r3, [r1, #20]
 800781c:	600f      	str	r7, [r1, #0]
 800781e:	bf18      	it	ne
 8007820:	2300      	movne	r3, #0
 8007822:	eba6 0807 	sub.w	r8, r6, r7
 8007826:	608b      	str	r3, [r1, #8]
 8007828:	f1b8 0f00 	cmp.w	r8, #0
 800782c:	dde9      	ble.n	8007802 <__sflush_r+0xae>
 800782e:	6a21      	ldr	r1, [r4, #32]
 8007830:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007832:	4643      	mov	r3, r8
 8007834:	463a      	mov	r2, r7
 8007836:	4628      	mov	r0, r5
 8007838:	47b0      	blx	r6
 800783a:	2800      	cmp	r0, #0
 800783c:	dc08      	bgt.n	8007850 <__sflush_r+0xfc>
 800783e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007846:	81a3      	strh	r3, [r4, #12]
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007850:	4407      	add	r7, r0
 8007852:	eba8 0800 	sub.w	r8, r8, r0
 8007856:	e7e7      	b.n	8007828 <__sflush_r+0xd4>
 8007858:	dfbffffe 	.word	0xdfbffffe

0800785c <_fflush_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	690b      	ldr	r3, [r1, #16]
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	b913      	cbnz	r3, 800786c <_fflush_r+0x10>
 8007866:	2500      	movs	r5, #0
 8007868:	4628      	mov	r0, r5
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	b118      	cbz	r0, 8007876 <_fflush_r+0x1a>
 800786e:	6a03      	ldr	r3, [r0, #32]
 8007870:	b90b      	cbnz	r3, 8007876 <_fflush_r+0x1a>
 8007872:	f7fe f9f1 	bl	8005c58 <__sinit>
 8007876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f3      	beq.n	8007866 <_fflush_r+0xa>
 800787e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007880:	07d0      	lsls	r0, r2, #31
 8007882:	d404      	bmi.n	800788e <_fflush_r+0x32>
 8007884:	0599      	lsls	r1, r3, #22
 8007886:	d402      	bmi.n	800788e <_fflush_r+0x32>
 8007888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800788a:	f7fe fb2a 	bl	8005ee2 <__retarget_lock_acquire_recursive>
 800788e:	4628      	mov	r0, r5
 8007890:	4621      	mov	r1, r4
 8007892:	f7ff ff5f 	bl	8007754 <__sflush_r>
 8007896:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007898:	07da      	lsls	r2, r3, #31
 800789a:	4605      	mov	r5, r0
 800789c:	d4e4      	bmi.n	8007868 <_fflush_r+0xc>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	059b      	lsls	r3, r3, #22
 80078a2:	d4e1      	bmi.n	8007868 <_fflush_r+0xc>
 80078a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078a6:	f7fe fb1d 	bl	8005ee4 <__retarget_lock_release_recursive>
 80078aa:	e7dd      	b.n	8007868 <_fflush_r+0xc>

080078ac <_sbrk_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d06      	ldr	r5, [pc, #24]	@ (80078c8 <_sbrk_r+0x1c>)
 80078b0:	2300      	movs	r3, #0
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	f7fa fb0a 	bl	8001ed0 <_sbrk>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_sbrk_r+0x1a>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_sbrk_r+0x1a>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20000840 	.word	0x20000840

080078cc <__assert_func>:
 80078cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ce:	4614      	mov	r4, r2
 80078d0:	461a      	mov	r2, r3
 80078d2:	4b09      	ldr	r3, [pc, #36]	@ (80078f8 <__assert_func+0x2c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4605      	mov	r5, r0
 80078d8:	68d8      	ldr	r0, [r3, #12]
 80078da:	b954      	cbnz	r4, 80078f2 <__assert_func+0x26>
 80078dc:	4b07      	ldr	r3, [pc, #28]	@ (80078fc <__assert_func+0x30>)
 80078de:	461c      	mov	r4, r3
 80078e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078e4:	9100      	str	r1, [sp, #0]
 80078e6:	462b      	mov	r3, r5
 80078e8:	4905      	ldr	r1, [pc, #20]	@ (8007900 <__assert_func+0x34>)
 80078ea:	f000 f86f 	bl	80079cc <fiprintf>
 80078ee:	f000 f87f 	bl	80079f0 <abort>
 80078f2:	4b04      	ldr	r3, [pc, #16]	@ (8007904 <__assert_func+0x38>)
 80078f4:	e7f4      	b.n	80078e0 <__assert_func+0x14>
 80078f6:	bf00      	nop
 80078f8:	20000024 	.word	0x20000024
 80078fc:	0800896e 	.word	0x0800896e
 8007900:	08008940 	.word	0x08008940
 8007904:	08008933 	.word	0x08008933

08007908 <_calloc_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	fba1 5402 	umull	r5, r4, r1, r2
 800790e:	b93c      	cbnz	r4, 8007920 <_calloc_r+0x18>
 8007910:	4629      	mov	r1, r5
 8007912:	f7ff f9b9 	bl	8006c88 <_malloc_r>
 8007916:	4606      	mov	r6, r0
 8007918:	b928      	cbnz	r0, 8007926 <_calloc_r+0x1e>
 800791a:	2600      	movs	r6, #0
 800791c:	4630      	mov	r0, r6
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	220c      	movs	r2, #12
 8007922:	6002      	str	r2, [r0, #0]
 8007924:	e7f9      	b.n	800791a <_calloc_r+0x12>
 8007926:	462a      	mov	r2, r5
 8007928:	4621      	mov	r1, r4
 800792a:	f7fe fa5c 	bl	8005de6 <memset>
 800792e:	e7f5      	b.n	800791c <_calloc_r+0x14>

08007930 <__ascii_mbtowc>:
 8007930:	b082      	sub	sp, #8
 8007932:	b901      	cbnz	r1, 8007936 <__ascii_mbtowc+0x6>
 8007934:	a901      	add	r1, sp, #4
 8007936:	b142      	cbz	r2, 800794a <__ascii_mbtowc+0x1a>
 8007938:	b14b      	cbz	r3, 800794e <__ascii_mbtowc+0x1e>
 800793a:	7813      	ldrb	r3, [r2, #0]
 800793c:	600b      	str	r3, [r1, #0]
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	1e10      	subs	r0, r2, #0
 8007942:	bf18      	it	ne
 8007944:	2001      	movne	r0, #1
 8007946:	b002      	add	sp, #8
 8007948:	4770      	bx	lr
 800794a:	4610      	mov	r0, r2
 800794c:	e7fb      	b.n	8007946 <__ascii_mbtowc+0x16>
 800794e:	f06f 0001 	mvn.w	r0, #1
 8007952:	e7f8      	b.n	8007946 <__ascii_mbtowc+0x16>

08007954 <_realloc_r>:
 8007954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007958:	4680      	mov	r8, r0
 800795a:	4615      	mov	r5, r2
 800795c:	460c      	mov	r4, r1
 800795e:	b921      	cbnz	r1, 800796a <_realloc_r+0x16>
 8007960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007964:	4611      	mov	r1, r2
 8007966:	f7ff b98f 	b.w	8006c88 <_malloc_r>
 800796a:	b92a      	cbnz	r2, 8007978 <_realloc_r+0x24>
 800796c:	f7ff f918 	bl	8006ba0 <_free_r>
 8007970:	2400      	movs	r4, #0
 8007972:	4620      	mov	r0, r4
 8007974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007978:	f000 f841 	bl	80079fe <_malloc_usable_size_r>
 800797c:	4285      	cmp	r5, r0
 800797e:	4606      	mov	r6, r0
 8007980:	d802      	bhi.n	8007988 <_realloc_r+0x34>
 8007982:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007986:	d8f4      	bhi.n	8007972 <_realloc_r+0x1e>
 8007988:	4629      	mov	r1, r5
 800798a:	4640      	mov	r0, r8
 800798c:	f7ff f97c 	bl	8006c88 <_malloc_r>
 8007990:	4607      	mov	r7, r0
 8007992:	2800      	cmp	r0, #0
 8007994:	d0ec      	beq.n	8007970 <_realloc_r+0x1c>
 8007996:	42b5      	cmp	r5, r6
 8007998:	462a      	mov	r2, r5
 800799a:	4621      	mov	r1, r4
 800799c:	bf28      	it	cs
 800799e:	4632      	movcs	r2, r6
 80079a0:	f7fe faa1 	bl	8005ee6 <memcpy>
 80079a4:	4621      	mov	r1, r4
 80079a6:	4640      	mov	r0, r8
 80079a8:	f7ff f8fa 	bl	8006ba0 <_free_r>
 80079ac:	463c      	mov	r4, r7
 80079ae:	e7e0      	b.n	8007972 <_realloc_r+0x1e>

080079b0 <__ascii_wctomb>:
 80079b0:	4603      	mov	r3, r0
 80079b2:	4608      	mov	r0, r1
 80079b4:	b141      	cbz	r1, 80079c8 <__ascii_wctomb+0x18>
 80079b6:	2aff      	cmp	r2, #255	@ 0xff
 80079b8:	d904      	bls.n	80079c4 <__ascii_wctomb+0x14>
 80079ba:	228a      	movs	r2, #138	@ 0x8a
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	f04f 30ff 	mov.w	r0, #4294967295
 80079c2:	4770      	bx	lr
 80079c4:	700a      	strb	r2, [r1, #0]
 80079c6:	2001      	movs	r0, #1
 80079c8:	4770      	bx	lr
	...

080079cc <fiprintf>:
 80079cc:	b40e      	push	{r1, r2, r3}
 80079ce:	b503      	push	{r0, r1, lr}
 80079d0:	4601      	mov	r1, r0
 80079d2:	ab03      	add	r3, sp, #12
 80079d4:	4805      	ldr	r0, [pc, #20]	@ (80079ec <fiprintf+0x20>)
 80079d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079da:	6800      	ldr	r0, [r0, #0]
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	f000 f83f 	bl	8007a60 <_vfiprintf_r>
 80079e2:	b002      	add	sp, #8
 80079e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079e8:	b003      	add	sp, #12
 80079ea:	4770      	bx	lr
 80079ec:	20000024 	.word	0x20000024

080079f0 <abort>:
 80079f0:	b508      	push	{r3, lr}
 80079f2:	2006      	movs	r0, #6
 80079f4:	f000 fa08 	bl	8007e08 <raise>
 80079f8:	2001      	movs	r0, #1
 80079fa:	f7fa f9f1 	bl	8001de0 <_exit>

080079fe <_malloc_usable_size_r>:
 80079fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a02:	1f18      	subs	r0, r3, #4
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bfbc      	itt	lt
 8007a08:	580b      	ldrlt	r3, [r1, r0]
 8007a0a:	18c0      	addlt	r0, r0, r3
 8007a0c:	4770      	bx	lr

08007a0e <__sfputc_r>:
 8007a0e:	6893      	ldr	r3, [r2, #8]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	b410      	push	{r4}
 8007a16:	6093      	str	r3, [r2, #8]
 8007a18:	da08      	bge.n	8007a2c <__sfputc_r+0x1e>
 8007a1a:	6994      	ldr	r4, [r2, #24]
 8007a1c:	42a3      	cmp	r3, r4
 8007a1e:	db01      	blt.n	8007a24 <__sfputc_r+0x16>
 8007a20:	290a      	cmp	r1, #10
 8007a22:	d103      	bne.n	8007a2c <__sfputc_r+0x1e>
 8007a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a28:	f000 b932 	b.w	8007c90 <__swbuf_r>
 8007a2c:	6813      	ldr	r3, [r2, #0]
 8007a2e:	1c58      	adds	r0, r3, #1
 8007a30:	6010      	str	r0, [r2, #0]
 8007a32:	7019      	strb	r1, [r3, #0]
 8007a34:	4608      	mov	r0, r1
 8007a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <__sfputs_r>:
 8007a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3e:	4606      	mov	r6, r0
 8007a40:	460f      	mov	r7, r1
 8007a42:	4614      	mov	r4, r2
 8007a44:	18d5      	adds	r5, r2, r3
 8007a46:	42ac      	cmp	r4, r5
 8007a48:	d101      	bne.n	8007a4e <__sfputs_r+0x12>
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e007      	b.n	8007a5e <__sfputs_r+0x22>
 8007a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a52:	463a      	mov	r2, r7
 8007a54:	4630      	mov	r0, r6
 8007a56:	f7ff ffda 	bl	8007a0e <__sfputc_r>
 8007a5a:	1c43      	adds	r3, r0, #1
 8007a5c:	d1f3      	bne.n	8007a46 <__sfputs_r+0xa>
 8007a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a60 <_vfiprintf_r>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	460d      	mov	r5, r1
 8007a66:	b09d      	sub	sp, #116	@ 0x74
 8007a68:	4614      	mov	r4, r2
 8007a6a:	4698      	mov	r8, r3
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	b118      	cbz	r0, 8007a78 <_vfiprintf_r+0x18>
 8007a70:	6a03      	ldr	r3, [r0, #32]
 8007a72:	b90b      	cbnz	r3, 8007a78 <_vfiprintf_r+0x18>
 8007a74:	f7fe f8f0 	bl	8005c58 <__sinit>
 8007a78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a7a:	07d9      	lsls	r1, r3, #31
 8007a7c:	d405      	bmi.n	8007a8a <_vfiprintf_r+0x2a>
 8007a7e:	89ab      	ldrh	r3, [r5, #12]
 8007a80:	059a      	lsls	r2, r3, #22
 8007a82:	d402      	bmi.n	8007a8a <_vfiprintf_r+0x2a>
 8007a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a86:	f7fe fa2c 	bl	8005ee2 <__retarget_lock_acquire_recursive>
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	071b      	lsls	r3, r3, #28
 8007a8e:	d501      	bpl.n	8007a94 <_vfiprintf_r+0x34>
 8007a90:	692b      	ldr	r3, [r5, #16]
 8007a92:	b99b      	cbnz	r3, 8007abc <_vfiprintf_r+0x5c>
 8007a94:	4629      	mov	r1, r5
 8007a96:	4630      	mov	r0, r6
 8007a98:	f000 f938 	bl	8007d0c <__swsetup_r>
 8007a9c:	b170      	cbz	r0, 8007abc <_vfiprintf_r+0x5c>
 8007a9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007aa0:	07dc      	lsls	r4, r3, #31
 8007aa2:	d504      	bpl.n	8007aae <_vfiprintf_r+0x4e>
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa8:	b01d      	add	sp, #116	@ 0x74
 8007aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aae:	89ab      	ldrh	r3, [r5, #12]
 8007ab0:	0598      	lsls	r0, r3, #22
 8007ab2:	d4f7      	bmi.n	8007aa4 <_vfiprintf_r+0x44>
 8007ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ab6:	f7fe fa15 	bl	8005ee4 <__retarget_lock_release_recursive>
 8007aba:	e7f3      	b.n	8007aa4 <_vfiprintf_r+0x44>
 8007abc:	2300      	movs	r3, #0
 8007abe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ac0:	2320      	movs	r3, #32
 8007ac2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ac6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aca:	2330      	movs	r3, #48	@ 0x30
 8007acc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c7c <_vfiprintf_r+0x21c>
 8007ad0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ad4:	f04f 0901 	mov.w	r9, #1
 8007ad8:	4623      	mov	r3, r4
 8007ada:	469a      	mov	sl, r3
 8007adc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ae0:	b10a      	cbz	r2, 8007ae6 <_vfiprintf_r+0x86>
 8007ae2:	2a25      	cmp	r2, #37	@ 0x25
 8007ae4:	d1f9      	bne.n	8007ada <_vfiprintf_r+0x7a>
 8007ae6:	ebba 0b04 	subs.w	fp, sl, r4
 8007aea:	d00b      	beq.n	8007b04 <_vfiprintf_r+0xa4>
 8007aec:	465b      	mov	r3, fp
 8007aee:	4622      	mov	r2, r4
 8007af0:	4629      	mov	r1, r5
 8007af2:	4630      	mov	r0, r6
 8007af4:	f7ff ffa2 	bl	8007a3c <__sfputs_r>
 8007af8:	3001      	adds	r0, #1
 8007afa:	f000 80a7 	beq.w	8007c4c <_vfiprintf_r+0x1ec>
 8007afe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b00:	445a      	add	r2, fp
 8007b02:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b04:	f89a 3000 	ldrb.w	r3, [sl]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 809f 	beq.w	8007c4c <_vfiprintf_r+0x1ec>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f04f 32ff 	mov.w	r2, #4294967295
 8007b14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b18:	f10a 0a01 	add.w	sl, sl, #1
 8007b1c:	9304      	str	r3, [sp, #16]
 8007b1e:	9307      	str	r3, [sp, #28]
 8007b20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b24:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b26:	4654      	mov	r4, sl
 8007b28:	2205      	movs	r2, #5
 8007b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2e:	4853      	ldr	r0, [pc, #332]	@ (8007c7c <_vfiprintf_r+0x21c>)
 8007b30:	f7f8 fb56 	bl	80001e0 <memchr>
 8007b34:	9a04      	ldr	r2, [sp, #16]
 8007b36:	b9d8      	cbnz	r0, 8007b70 <_vfiprintf_r+0x110>
 8007b38:	06d1      	lsls	r1, r2, #27
 8007b3a:	bf44      	itt	mi
 8007b3c:	2320      	movmi	r3, #32
 8007b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b42:	0713      	lsls	r3, r2, #28
 8007b44:	bf44      	itt	mi
 8007b46:	232b      	movmi	r3, #43	@ 0x2b
 8007b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b52:	d015      	beq.n	8007b80 <_vfiprintf_r+0x120>
 8007b54:	9a07      	ldr	r2, [sp, #28]
 8007b56:	4654      	mov	r4, sl
 8007b58:	2000      	movs	r0, #0
 8007b5a:	f04f 0c0a 	mov.w	ip, #10
 8007b5e:	4621      	mov	r1, r4
 8007b60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b64:	3b30      	subs	r3, #48	@ 0x30
 8007b66:	2b09      	cmp	r3, #9
 8007b68:	d94b      	bls.n	8007c02 <_vfiprintf_r+0x1a2>
 8007b6a:	b1b0      	cbz	r0, 8007b9a <_vfiprintf_r+0x13a>
 8007b6c:	9207      	str	r2, [sp, #28]
 8007b6e:	e014      	b.n	8007b9a <_vfiprintf_r+0x13a>
 8007b70:	eba0 0308 	sub.w	r3, r0, r8
 8007b74:	fa09 f303 	lsl.w	r3, r9, r3
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	9304      	str	r3, [sp, #16]
 8007b7c:	46a2      	mov	sl, r4
 8007b7e:	e7d2      	b.n	8007b26 <_vfiprintf_r+0xc6>
 8007b80:	9b03      	ldr	r3, [sp, #12]
 8007b82:	1d19      	adds	r1, r3, #4
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	9103      	str	r1, [sp, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	bfbb      	ittet	lt
 8007b8c:	425b      	neglt	r3, r3
 8007b8e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b92:	9307      	strge	r3, [sp, #28]
 8007b94:	9307      	strlt	r3, [sp, #28]
 8007b96:	bfb8      	it	lt
 8007b98:	9204      	strlt	r2, [sp, #16]
 8007b9a:	7823      	ldrb	r3, [r4, #0]
 8007b9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b9e:	d10a      	bne.n	8007bb6 <_vfiprintf_r+0x156>
 8007ba0:	7863      	ldrb	r3, [r4, #1]
 8007ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ba4:	d132      	bne.n	8007c0c <_vfiprintf_r+0x1ac>
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	1d1a      	adds	r2, r3, #4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	9203      	str	r2, [sp, #12]
 8007bae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bb2:	3402      	adds	r4, #2
 8007bb4:	9305      	str	r3, [sp, #20]
 8007bb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c8c <_vfiprintf_r+0x22c>
 8007bba:	7821      	ldrb	r1, [r4, #0]
 8007bbc:	2203      	movs	r2, #3
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	f7f8 fb0e 	bl	80001e0 <memchr>
 8007bc4:	b138      	cbz	r0, 8007bd6 <_vfiprintf_r+0x176>
 8007bc6:	9b04      	ldr	r3, [sp, #16]
 8007bc8:	eba0 000a 	sub.w	r0, r0, sl
 8007bcc:	2240      	movs	r2, #64	@ 0x40
 8007bce:	4082      	lsls	r2, r0
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	3401      	adds	r4, #1
 8007bd4:	9304      	str	r3, [sp, #16]
 8007bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bda:	4829      	ldr	r0, [pc, #164]	@ (8007c80 <_vfiprintf_r+0x220>)
 8007bdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007be0:	2206      	movs	r2, #6
 8007be2:	f7f8 fafd 	bl	80001e0 <memchr>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d03f      	beq.n	8007c6a <_vfiprintf_r+0x20a>
 8007bea:	4b26      	ldr	r3, [pc, #152]	@ (8007c84 <_vfiprintf_r+0x224>)
 8007bec:	bb1b      	cbnz	r3, 8007c36 <_vfiprintf_r+0x1d6>
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	3307      	adds	r3, #7
 8007bf2:	f023 0307 	bic.w	r3, r3, #7
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	9303      	str	r3, [sp, #12]
 8007bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bfc:	443b      	add	r3, r7
 8007bfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c00:	e76a      	b.n	8007ad8 <_vfiprintf_r+0x78>
 8007c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c06:	460c      	mov	r4, r1
 8007c08:	2001      	movs	r0, #1
 8007c0a:	e7a8      	b.n	8007b5e <_vfiprintf_r+0xfe>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	3401      	adds	r4, #1
 8007c10:	9305      	str	r3, [sp, #20]
 8007c12:	4619      	mov	r1, r3
 8007c14:	f04f 0c0a 	mov.w	ip, #10
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c1e:	3a30      	subs	r2, #48	@ 0x30
 8007c20:	2a09      	cmp	r2, #9
 8007c22:	d903      	bls.n	8007c2c <_vfiprintf_r+0x1cc>
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0c6      	beq.n	8007bb6 <_vfiprintf_r+0x156>
 8007c28:	9105      	str	r1, [sp, #20]
 8007c2a:	e7c4      	b.n	8007bb6 <_vfiprintf_r+0x156>
 8007c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c30:	4604      	mov	r4, r0
 8007c32:	2301      	movs	r3, #1
 8007c34:	e7f0      	b.n	8007c18 <_vfiprintf_r+0x1b8>
 8007c36:	ab03      	add	r3, sp, #12
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	462a      	mov	r2, r5
 8007c3c:	4b12      	ldr	r3, [pc, #72]	@ (8007c88 <_vfiprintf_r+0x228>)
 8007c3e:	a904      	add	r1, sp, #16
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7fd fbc5 	bl	80053d0 <_printf_float>
 8007c46:	4607      	mov	r7, r0
 8007c48:	1c78      	adds	r0, r7, #1
 8007c4a:	d1d6      	bne.n	8007bfa <_vfiprintf_r+0x19a>
 8007c4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c4e:	07d9      	lsls	r1, r3, #31
 8007c50:	d405      	bmi.n	8007c5e <_vfiprintf_r+0x1fe>
 8007c52:	89ab      	ldrh	r3, [r5, #12]
 8007c54:	059a      	lsls	r2, r3, #22
 8007c56:	d402      	bmi.n	8007c5e <_vfiprintf_r+0x1fe>
 8007c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c5a:	f7fe f943 	bl	8005ee4 <__retarget_lock_release_recursive>
 8007c5e:	89ab      	ldrh	r3, [r5, #12]
 8007c60:	065b      	lsls	r3, r3, #25
 8007c62:	f53f af1f 	bmi.w	8007aa4 <_vfiprintf_r+0x44>
 8007c66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c68:	e71e      	b.n	8007aa8 <_vfiprintf_r+0x48>
 8007c6a:	ab03      	add	r3, sp, #12
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	462a      	mov	r2, r5
 8007c70:	4b05      	ldr	r3, [pc, #20]	@ (8007c88 <_vfiprintf_r+0x228>)
 8007c72:	a904      	add	r1, sp, #16
 8007c74:	4630      	mov	r0, r6
 8007c76:	f7fd fe43 	bl	8005900 <_printf_i>
 8007c7a:	e7e4      	b.n	8007c46 <_vfiprintf_r+0x1e6>
 8007c7c:	08008918 	.word	0x08008918
 8007c80:	08008922 	.word	0x08008922
 8007c84:	080053d1 	.word	0x080053d1
 8007c88:	08007a3d 	.word	0x08007a3d
 8007c8c:	0800891e 	.word	0x0800891e

08007c90 <__swbuf_r>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	460e      	mov	r6, r1
 8007c94:	4614      	mov	r4, r2
 8007c96:	4605      	mov	r5, r0
 8007c98:	b118      	cbz	r0, 8007ca2 <__swbuf_r+0x12>
 8007c9a:	6a03      	ldr	r3, [r0, #32]
 8007c9c:	b90b      	cbnz	r3, 8007ca2 <__swbuf_r+0x12>
 8007c9e:	f7fd ffdb 	bl	8005c58 <__sinit>
 8007ca2:	69a3      	ldr	r3, [r4, #24]
 8007ca4:	60a3      	str	r3, [r4, #8]
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	071a      	lsls	r2, r3, #28
 8007caa:	d501      	bpl.n	8007cb0 <__swbuf_r+0x20>
 8007cac:	6923      	ldr	r3, [r4, #16]
 8007cae:	b943      	cbnz	r3, 8007cc2 <__swbuf_r+0x32>
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 f82a 	bl	8007d0c <__swsetup_r>
 8007cb8:	b118      	cbz	r0, 8007cc2 <__swbuf_r+0x32>
 8007cba:	f04f 37ff 	mov.w	r7, #4294967295
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	6922      	ldr	r2, [r4, #16]
 8007cc6:	1a98      	subs	r0, r3, r2
 8007cc8:	6963      	ldr	r3, [r4, #20]
 8007cca:	b2f6      	uxtb	r6, r6
 8007ccc:	4283      	cmp	r3, r0
 8007cce:	4637      	mov	r7, r6
 8007cd0:	dc05      	bgt.n	8007cde <__swbuf_r+0x4e>
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f7ff fdc1 	bl	800785c <_fflush_r>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d1ed      	bne.n	8007cba <__swbuf_r+0x2a>
 8007cde:	68a3      	ldr	r3, [r4, #8]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	60a3      	str	r3, [r4, #8]
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	6022      	str	r2, [r4, #0]
 8007cea:	701e      	strb	r6, [r3, #0]
 8007cec:	6962      	ldr	r2, [r4, #20]
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d004      	beq.n	8007cfe <__swbuf_r+0x6e>
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	07db      	lsls	r3, r3, #31
 8007cf8:	d5e1      	bpl.n	8007cbe <__swbuf_r+0x2e>
 8007cfa:	2e0a      	cmp	r6, #10
 8007cfc:	d1df      	bne.n	8007cbe <__swbuf_r+0x2e>
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4628      	mov	r0, r5
 8007d02:	f7ff fdab 	bl	800785c <_fflush_r>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d0d9      	beq.n	8007cbe <__swbuf_r+0x2e>
 8007d0a:	e7d6      	b.n	8007cba <__swbuf_r+0x2a>

08007d0c <__swsetup_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4b29      	ldr	r3, [pc, #164]	@ (8007db4 <__swsetup_r+0xa8>)
 8007d10:	4605      	mov	r5, r0
 8007d12:	6818      	ldr	r0, [r3, #0]
 8007d14:	460c      	mov	r4, r1
 8007d16:	b118      	cbz	r0, 8007d20 <__swsetup_r+0x14>
 8007d18:	6a03      	ldr	r3, [r0, #32]
 8007d1a:	b90b      	cbnz	r3, 8007d20 <__swsetup_r+0x14>
 8007d1c:	f7fd ff9c 	bl	8005c58 <__sinit>
 8007d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d24:	0719      	lsls	r1, r3, #28
 8007d26:	d422      	bmi.n	8007d6e <__swsetup_r+0x62>
 8007d28:	06da      	lsls	r2, r3, #27
 8007d2a:	d407      	bmi.n	8007d3c <__swsetup_r+0x30>
 8007d2c:	2209      	movs	r2, #9
 8007d2e:	602a      	str	r2, [r5, #0]
 8007d30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3a:	e033      	b.n	8007da4 <__swsetup_r+0x98>
 8007d3c:	0758      	lsls	r0, r3, #29
 8007d3e:	d512      	bpl.n	8007d66 <__swsetup_r+0x5a>
 8007d40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d42:	b141      	cbz	r1, 8007d56 <__swsetup_r+0x4a>
 8007d44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d48:	4299      	cmp	r1, r3
 8007d4a:	d002      	beq.n	8007d52 <__swsetup_r+0x46>
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f7fe ff27 	bl	8006ba0 <_free_r>
 8007d52:	2300      	movs	r3, #0
 8007d54:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	6063      	str	r3, [r4, #4]
 8007d62:	6923      	ldr	r3, [r4, #16]
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	f043 0308 	orr.w	r3, r3, #8
 8007d6c:	81a3      	strh	r3, [r4, #12]
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	b94b      	cbnz	r3, 8007d86 <__swsetup_r+0x7a>
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d7c:	d003      	beq.n	8007d86 <__swsetup_r+0x7a>
 8007d7e:	4621      	mov	r1, r4
 8007d80:	4628      	mov	r0, r5
 8007d82:	f000 f883 	bl	8007e8c <__smakebuf_r>
 8007d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8a:	f013 0201 	ands.w	r2, r3, #1
 8007d8e:	d00a      	beq.n	8007da6 <__swsetup_r+0x9a>
 8007d90:	2200      	movs	r2, #0
 8007d92:	60a2      	str	r2, [r4, #8]
 8007d94:	6962      	ldr	r2, [r4, #20]
 8007d96:	4252      	negs	r2, r2
 8007d98:	61a2      	str	r2, [r4, #24]
 8007d9a:	6922      	ldr	r2, [r4, #16]
 8007d9c:	b942      	cbnz	r2, 8007db0 <__swsetup_r+0xa4>
 8007d9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007da2:	d1c5      	bne.n	8007d30 <__swsetup_r+0x24>
 8007da4:	bd38      	pop	{r3, r4, r5, pc}
 8007da6:	0799      	lsls	r1, r3, #30
 8007da8:	bf58      	it	pl
 8007daa:	6962      	ldrpl	r2, [r4, #20]
 8007dac:	60a2      	str	r2, [r4, #8]
 8007dae:	e7f4      	b.n	8007d9a <__swsetup_r+0x8e>
 8007db0:	2000      	movs	r0, #0
 8007db2:	e7f7      	b.n	8007da4 <__swsetup_r+0x98>
 8007db4:	20000024 	.word	0x20000024

08007db8 <_raise_r>:
 8007db8:	291f      	cmp	r1, #31
 8007dba:	b538      	push	{r3, r4, r5, lr}
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	d904      	bls.n	8007dcc <_raise_r+0x14>
 8007dc2:	2316      	movs	r3, #22
 8007dc4:	6003      	str	r3, [r0, #0]
 8007dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dca:	bd38      	pop	{r3, r4, r5, pc}
 8007dcc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007dce:	b112      	cbz	r2, 8007dd6 <_raise_r+0x1e>
 8007dd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dd4:	b94b      	cbnz	r3, 8007dea <_raise_r+0x32>
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f000 f830 	bl	8007e3c <_getpid_r>
 8007ddc:	4622      	mov	r2, r4
 8007dde:	4601      	mov	r1, r0
 8007de0:	4628      	mov	r0, r5
 8007de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007de6:	f000 b817 	b.w	8007e18 <_kill_r>
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d00a      	beq.n	8007e04 <_raise_r+0x4c>
 8007dee:	1c59      	adds	r1, r3, #1
 8007df0:	d103      	bne.n	8007dfa <_raise_r+0x42>
 8007df2:	2316      	movs	r3, #22
 8007df4:	6003      	str	r3, [r0, #0]
 8007df6:	2001      	movs	r0, #1
 8007df8:	e7e7      	b.n	8007dca <_raise_r+0x12>
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007e00:	4620      	mov	r0, r4
 8007e02:	4798      	blx	r3
 8007e04:	2000      	movs	r0, #0
 8007e06:	e7e0      	b.n	8007dca <_raise_r+0x12>

08007e08 <raise>:
 8007e08:	4b02      	ldr	r3, [pc, #8]	@ (8007e14 <raise+0xc>)
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	f7ff bfd3 	b.w	8007db8 <_raise_r>
 8007e12:	bf00      	nop
 8007e14:	20000024 	.word	0x20000024

08007e18 <_kill_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4d07      	ldr	r5, [pc, #28]	@ (8007e38 <_kill_r+0x20>)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4604      	mov	r4, r0
 8007e20:	4608      	mov	r0, r1
 8007e22:	4611      	mov	r1, r2
 8007e24:	602b      	str	r3, [r5, #0]
 8007e26:	f7f9 ffcb 	bl	8001dc0 <_kill>
 8007e2a:	1c43      	adds	r3, r0, #1
 8007e2c:	d102      	bne.n	8007e34 <_kill_r+0x1c>
 8007e2e:	682b      	ldr	r3, [r5, #0]
 8007e30:	b103      	cbz	r3, 8007e34 <_kill_r+0x1c>
 8007e32:	6023      	str	r3, [r4, #0]
 8007e34:	bd38      	pop	{r3, r4, r5, pc}
 8007e36:	bf00      	nop
 8007e38:	20000840 	.word	0x20000840

08007e3c <_getpid_r>:
 8007e3c:	f7f9 bfb8 	b.w	8001db0 <_getpid>

08007e40 <__swhatbuf_r>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	460c      	mov	r4, r1
 8007e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e48:	2900      	cmp	r1, #0
 8007e4a:	b096      	sub	sp, #88	@ 0x58
 8007e4c:	4615      	mov	r5, r2
 8007e4e:	461e      	mov	r6, r3
 8007e50:	da0d      	bge.n	8007e6e <__swhatbuf_r+0x2e>
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e58:	f04f 0100 	mov.w	r1, #0
 8007e5c:	bf14      	ite	ne
 8007e5e:	2340      	movne	r3, #64	@ 0x40
 8007e60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e64:	2000      	movs	r0, #0
 8007e66:	6031      	str	r1, [r6, #0]
 8007e68:	602b      	str	r3, [r5, #0]
 8007e6a:	b016      	add	sp, #88	@ 0x58
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}
 8007e6e:	466a      	mov	r2, sp
 8007e70:	f000 f848 	bl	8007f04 <_fstat_r>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	dbec      	blt.n	8007e52 <__swhatbuf_r+0x12>
 8007e78:	9901      	ldr	r1, [sp, #4]
 8007e7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e82:	4259      	negs	r1, r3
 8007e84:	4159      	adcs	r1, r3
 8007e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e8a:	e7eb      	b.n	8007e64 <__swhatbuf_r+0x24>

08007e8c <__smakebuf_r>:
 8007e8c:	898b      	ldrh	r3, [r1, #12]
 8007e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e90:	079d      	lsls	r5, r3, #30
 8007e92:	4606      	mov	r6, r0
 8007e94:	460c      	mov	r4, r1
 8007e96:	d507      	bpl.n	8007ea8 <__smakebuf_r+0x1c>
 8007e98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	6123      	str	r3, [r4, #16]
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	6163      	str	r3, [r4, #20]
 8007ea4:	b003      	add	sp, #12
 8007ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea8:	ab01      	add	r3, sp, #4
 8007eaa:	466a      	mov	r2, sp
 8007eac:	f7ff ffc8 	bl	8007e40 <__swhatbuf_r>
 8007eb0:	9f00      	ldr	r7, [sp, #0]
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	4639      	mov	r1, r7
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f7fe fee6 	bl	8006c88 <_malloc_r>
 8007ebc:	b948      	cbnz	r0, 8007ed2 <__smakebuf_r+0x46>
 8007ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec2:	059a      	lsls	r2, r3, #22
 8007ec4:	d4ee      	bmi.n	8007ea4 <__smakebuf_r+0x18>
 8007ec6:	f023 0303 	bic.w	r3, r3, #3
 8007eca:	f043 0302 	orr.w	r3, r3, #2
 8007ece:	81a3      	strh	r3, [r4, #12]
 8007ed0:	e7e2      	b.n	8007e98 <__smakebuf_r+0xc>
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	6020      	str	r0, [r4, #0]
 8007ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eda:	81a3      	strh	r3, [r4, #12]
 8007edc:	9b01      	ldr	r3, [sp, #4]
 8007ede:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ee2:	b15b      	cbz	r3, 8007efc <__smakebuf_r+0x70>
 8007ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f000 f81d 	bl	8007f28 <_isatty_r>
 8007eee:	b128      	cbz	r0, 8007efc <__smakebuf_r+0x70>
 8007ef0:	89a3      	ldrh	r3, [r4, #12]
 8007ef2:	f023 0303 	bic.w	r3, r3, #3
 8007ef6:	f043 0301 	orr.w	r3, r3, #1
 8007efa:	81a3      	strh	r3, [r4, #12]
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	431d      	orrs	r5, r3
 8007f00:	81a5      	strh	r5, [r4, #12]
 8007f02:	e7cf      	b.n	8007ea4 <__smakebuf_r+0x18>

08007f04 <_fstat_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4d07      	ldr	r5, [pc, #28]	@ (8007f24 <_fstat_r+0x20>)
 8007f08:	2300      	movs	r3, #0
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	4611      	mov	r1, r2
 8007f10:	602b      	str	r3, [r5, #0]
 8007f12:	f7f9 ffb5 	bl	8001e80 <_fstat>
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	d102      	bne.n	8007f20 <_fstat_r+0x1c>
 8007f1a:	682b      	ldr	r3, [r5, #0]
 8007f1c:	b103      	cbz	r3, 8007f20 <_fstat_r+0x1c>
 8007f1e:	6023      	str	r3, [r4, #0]
 8007f20:	bd38      	pop	{r3, r4, r5, pc}
 8007f22:	bf00      	nop
 8007f24:	20000840 	.word	0x20000840

08007f28 <_isatty_r>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4d06      	ldr	r5, [pc, #24]	@ (8007f44 <_isatty_r+0x1c>)
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	4604      	mov	r4, r0
 8007f30:	4608      	mov	r0, r1
 8007f32:	602b      	str	r3, [r5, #0]
 8007f34:	f7f9 ffb4 	bl	8001ea0 <_isatty>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d102      	bne.n	8007f42 <_isatty_r+0x1a>
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	b103      	cbz	r3, 8007f42 <_isatty_r+0x1a>
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	bd38      	pop	{r3, r4, r5, pc}
 8007f44:	20000840 	.word	0x20000840

08007f48 <_init>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	bf00      	nop
 8007f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4e:	bc08      	pop	{r3}
 8007f50:	469e      	mov	lr, r3
 8007f52:	4770      	bx	lr

08007f54 <_fini>:
 8007f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f56:	bf00      	nop
 8007f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5a:	bc08      	pop	{r3}
 8007f5c:	469e      	mov	lr, r3
 8007f5e:	4770      	bx	lr
